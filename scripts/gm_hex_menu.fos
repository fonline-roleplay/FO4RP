//GM HEX SPAWN UPON CTRL+RMB, ALT+RMB
void unsafe_GM_PANNEL_HEX( Critter& gm, int hexX, int hexY, int param2, string@ param3, int[] @ param4 )
{
    if( isGM( gm ) )
	{
		StartMenuGMHex( gm, hexX, hexY );
	}
}

void StartMenuGMHex( Critter& gm, uint16 hexX, uint16 hexY )
{
    Map@ map = gm.GetMap();
    if( !valid(map) )
	{
        return;
    }
	
    iMenuHandler@ handler = MenuGMHex( map, hexX, hexY );
    iDialogBox@ menu = OpenMenu( gm, "Map Hex Options", handler );
}

class MenuGMHex: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHex( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 0;
   }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( !valid(map) )
		{
            return false;
        }

		if( menu.ButtonMsg( STR_GM_HEXMENU_NPC_SPAWN ) )
		{
			MenuGMHexMob@ GM_Hex_Mob_Spawn = MenuGMHexMob( map, hex_X, hex_Y );
			GM_Hex_Mob_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Mob_Spawn.level, GM_Hex_Mob_Spawn );
		}		
		
		if( menu.ButtonSayMsg( STR_GM_HEXMENU_ITEM_SPAWN, STR_GM_HEXMENU_ITEM_PID ) )
		{
			string itmPid = menu.GetSayValue();
			if( valid(itmPid) && itmPid.length() > 0 )
			{
				int pid = 0;
				StrToInt( itmPid, pid );
				Item@ spawned = map.AddItem( hex_X, hex_Y, pid, 1 );
				if( !valid( spawned ) )
				{
					gm.Say( SAY_NETMSG, "|0xFFFF00 Item Pid Incorrect" );
				}
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " spawned Item: " + itmPid + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			}
			return false;
		}
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_COLLECT_ITEMS ) )
		{
			Item@[] items;
			map.GetItems( hex_X, hex_Y, items );
			uint len = items.length();
			if( len > 0 )
			{
				MoveItems( items, gm );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Collected all items at hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 There are no items on the hex!" );
			}
			return true;
		}
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_DELETE_ITEMS ) )
		{
			Item@[] items;
			map.GetItems( hex_X, hex_Y, items );
			uint len = items.length();
			if( len > 0 )
			{
				DeleteItems( items );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Deleted all items at hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 There are no items on the hex!" );
			}
			return true;
		}
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_ADD_RADIATION ) )
		{
			resetGMvals(gm);
			MenuGMHexRad@ GM_Hex_Rad_Spawn = MenuGMHexRad( map, hex_X, hex_Y );
			GM_Hex_Rad_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Rad_Spawn.level, GM_Hex_Rad_Spawn );
		}
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_ADD_GAS ) )
		{
			resetGMvals(gm);
			MenuGMHexGas@ GM_Hex_Gas_Spawn = MenuGMHexGas( map, hex_X, hex_Y );
			GM_Hex_Gas_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Gas_Spawn.level, GM_Hex_Gas_Spawn );
		}

		if( menu.ButtonMsg( STR_GM_ADD_ORE_ZONE ) )
		{
			resetGMvals(gm);
			MenuGMHexOre@ GM_Hex_Ore_Spawn = MenuGMHexOre( map, hex_X, hex_Y );
			GM_Hex_Ore_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Ore_Spawn.level, GM_Hex_Ore_Spawn );
		}

		if( menu.ButtonMsg( STR_GM_ADD_JUNK_ZONE ) )
		{
			resetGMvals(gm);
			MenuGMHexJunk@ GM_Hex_Junk_Spawn = MenuGMHexJunk(map, hex_X, hex_Y );
			GM_Hex_Junk_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Junk_Spawn.level, GM_Hex_Junk_Spawn );
		}
		
		if( menu.ButtonMsg( STR_GM_MENU_MOB_SPAWNER ) )
		{
			resetGMvals(gm);
			MenuGMMobSpawner@ GM_Hex_Mob_Spawner = MenuGMMobSpawner(map, hex_X, hex_Y);
			GM_Hex_Mob_Spawner.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Mob_Spawner.level, GM_Hex_Mob_Spawner );
		}

		if( menu.ButtonMsg( STR_GM_HEXMENU_ADD_EFF ) )
		{
			resetGMvals(gm);
			MenuGMHexBlind@ GM_Hex_Eff_Spawn = MenuGMHexBlind( map, hex_X, hex_Y );
			GM_Hex_Eff_Spawn.level = level + 1;
			return menu.OpenChild( "Level " + GM_Hex_Eff_Spawn.level, GM_Hex_Eff_Spawn );
		}	
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_TELEPORT_THERE ) )
		{
			gm.TransitToHex( hex_X, hex_Y, gm.Dir );
			unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Teleported to hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			return false;
		}
		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_HEXMENU_MAIN;
	}
	
    string@ Description( Critter& gm )
	{
		string info = "$X" + hex_X + "$Y" + hex_Y;
		return info;
    }
}

//Menu for mob spawn
class MenuGMHexMob: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexMob( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		gm.ParamBase[ ST_VAR4 ] = CLAMP( gm.ParamBase[ ST_VAR4 ], 1, 7 );
		
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if( menu.ButtonMsg( STR_GM_HEXMENU_SPAWN_NPC ) )
		{
			for( int i = 0; i < gm.ParamBase[ ST_VAR4 ]; i++ )
			{
				hex_spawn_NPC( gm, map, hex_X, hex_Y );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Spawned NPC: " + checkNull( GetDlgMsgStr(gm.ParamBase[ CR_VAL6 ]), "0" ) + " On map: " + map.Id +" hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			}
			return true;
		}		
		
		if( menu.ButtonSayMsg( STR_GM_HEXMENU_BUTTON_AMOUNT, "$amount" + gm.ParamBase[ ST_VAR4 ], STR_AMOUNT ) )
		{
			gm.ParamBase[ ST_VAR4 ] = CLAMP( strToInt( checkNull( menu.GetSayValue(), "0" ) ), 1, 7 );
			unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Spawned NPC: " + checkNull( GetDlgMsgStr(gm.ParamBase[ CR_VAL6 ]), "0" ) + " On map: " + map.Id +" hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
			return true;
		}		
		
		int aiType = ( gm.ParamBase[CR_VAL2] == 0 ? STR_GM_SPAWNMENU_CONTROL : ( gm.ParamBase[CR_VAL2] == 1 ? STR_GM_SPAWNMENU_ANIMAL : STR_GM_SPAWNMENU_SENTIENT ) );
		if( menu.ButtonMsg( STR_GM_SPAWNMENU_AI_TYPE, "$type" + STR_INSERT_TEXT_LINE( aiType ) ) )
		{
			gm.ParamBase[ CR_VAL2 ] == 0 ? gm.ParamBase[ CR_VAL2 ] = 1 : ( gm.ParamBase [CR_VAL2 ] == 1 ? gm.ParamBase[ CR_VAL2 ] = 2 : gm.ParamBase[ CR_VAL2 ] = 0 );
 			return true;
		}

		string factionName = GetName( gm.ParamBase[CR_VAL3] );
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_FACTION_NAME, "$name" + factionName, STR_GM_SPAWNMENU_FACTION_TITLESAY ) )
		{
			string faction = menu.GetSayValue();
			if( faction.length() > 0 )
			{
				int number = 0;
				if( faction == "0" || faction == " " )
				{
					number = 0;
					gm.Say( SAY_NETMSG, "Spawned withoug faction." );
				}
				else
				{
					number = GetStrHash( faction );
					if( GetName( number ) == "" )
					{
						gm.Say( SAY_NETMSG, "Faction does not exist" );
					}
				}
				gm.ParamBase[CR_VAL3] = number;
			}
			else
			{
				gm.Say( SAY_NETMSG, "Input Faction name." );
			}
			return true;
		}
	
		string agression = STR_INSERT_TEXT_LINE( gm.ParamBase[CR_VAL4] == 0 ? STR_GM_SPAWNMENU_AGRESSION_PASSIVE : STR_GM_SPAWNMENU_AGRESSION_ACTIVE );
		if( menu.ButtonMsg( STR_GM_SPAWNMENU_AGRESSION_STATE, "$state" + agression ) )
		{
			gm.ParamBase[CR_VAL4] = CLAMP( 1 - gm.ParamBase[CR_VAL4], 0, 1 );
			return true;
		}
		
		int teamId = gm.ParamBase[CR_VAL5];
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_TEAM_ID, "$id" + teamId, STR_GM_SPAWNMENU_TEAM_ID_TITLE ) )
		{
			string team = menu.GetSayValue();
			if( valid(team) && team.length() > 0 )
			{
				int teamNum = 0;
				StrToInt( team, teamNum );
				if( teamNum > 0 )
				{
					gm.ParamBase[CR_VAL5] = teamNum;
					gm.Say( SAY_NETMSG, "|0xFFFF00 NPC now spawn with team ID ï¿½" + team + "." );
				}
				else
				{
					gm.ParamBase[CR_VAL5] = 0;
					gm.Say( SAY_NETMSG, "|0xFFFF00 You have reset the NPC team ID." );
				}
			}
			return true;
		}
		
		int npcPid = gm.ParamBase[CR_VAL6];
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_PID, "$value" + npcPid, STR_GM_SPAWNMENU_PID_TITLE ) )
		{
			string type = menu.GetSayValue();
			int	pid = 0;
			StrToInt( type, pid );
			if( pid > 0 )
			{
				gm.ParamBase[ CR_VAL6 ] = pid;
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 PID not defined." );
			}
			return true;
		}

		string bonusHP = gm.ParamBase[CR_VAL7];
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_BONUS_HP, "$value" + bonusHP, STR_GM_SPAWNMENU_BONUS_HP_TITLE ) )
		{
			string bonus = menu.GetSayValue();
			int	bonus_hp = 0;
			StrToInt( bonus, bonus_hp );
			gm.ParamBase[ CR_VAL7 ] = bonus_hp;
			return true;
		}

		string bonusDmg = gm.ParamBase[CR_VAL8];
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_BONUS_DAMAGE, "$value" + bonusDmg, STR_GM_SPAWNMENU_BONUS_DAMAGE_TITLE ) )
		{
			string bonus = menu.GetSayValue();
			int	bonus_Dmg = 0;
			StrToInt( bonus, bonus_Dmg );
			gm.ParamBase[ CR_VAL8 ] = bonus_Dmg;
			return true;
		}
			
		string bonusSkill = gm.ParamBase[CR_VAL9];
		if( menu.ButtonSayMsg( STR_GM_SPAWNMENU_BONUS_SKILL, "$value" + bonusSkill, STR_GM_SPAWNMENU_BONUS_SKILL_TITLE ) )
		{
			string bonus = menu.GetSayValue();
			int	bonus_skill = 0;
			StrToInt( bonus, bonus_skill );
			gm.ParamBase[ CR_VAL9 ] = bonus_skill;
			return true;
		}

		if( menu.ButtonMsg( STR_GM_SPAWNMENU_SELECT_MOB ) )
		{
			MenuSelectMobGroup@ menu_select_mob_group = MenuSelectMobGroup( map, hex_X, hex_Y, false );
			menu_select_mob_group.level = level + 1;
			return menu.OpenChild( "level " + menu_select_mob_group.level, menu_select_mob_group );
		}
		
		if( menu.ButtonMsg( STR_GM_SPAWNMENU_SELECT_HUMANOID_MOB ) )
		{
			MenuSelectHumanoidMobGroup@ menu_select_humanoid_mob_group = MenuSelectHumanoidMobGroup( map, hex_X, hex_Y );
			menu_select_humanoid_mob_group.level = level + 1;
			return menu.OpenChild( "level " + menu_select_humanoid_mob_group.level, menu_select_humanoid_mob_group );
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			level = 0;
			return false;
		}
		return true;
    }
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_SPAWNMENU_MAIN_DESCRIPTION;
	}	

    string@ Description( Critter& gm )
	{	
		return null;
	}
}

//Child menu Mob spawn selection
class MenuSelectMobGroup: DefaultMenuHandler
{
    uint map_id;
	uint level;
	uint16 hex_X;
	uint16 hex_Y;
	uint16 list_begin;
	uint16 list_end;
	bool mob_spawner;
	
    MenuSelectMobGroup( Map& map, uint16 hexX, uint16 hexY, bool mobSpawner )
	{
        map_id = map.Id;
		level = 2;
		hex_X = hexX;
		hex_Y = hexY;
		list_begin = 0;
		list_end = 0;
		mob_spawner = mobSpawner;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{ 
			return false; 
		}
		
		for( uint i = STR_GM_MENU_NPC_GROUPS_BEGIN; i < STR_GM_MENU_NPC_GROUPS_END; i ++ )
		{
			string category = i;
			string lex = "$name" + STR_INSERT_TEXT_LINE( category );
			if( menu.ButtonMsg( STR_GM_MOB_MENU_MOBNAME, lex ) )
			{
				switch( i )
				{
					case( STR_GM_MENU_GROUP_RATS ):
						list_begin = RATS_BEGIN;
						list_end = RATS_END;
						break;
					case( STR_GM_MENU_GROUP_MANTIS ):
						list_begin = MANTIS_BEGIN;
						list_end = MANTIS_END;
						break;
					case( STR_GM_MENU_GROUP_ANTS ):
						list_begin = ANTS_BEGIN;
						list_end = ANTS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_PIGMOLERATS ):
						list_begin = H_RATS_BEGIN;
						list_end = H_RATS_END;
						break;
					case( STR_GM_MENU_GROUP_GECKOS ):
						list_begin = GECKOS_BEGIN;
						list_end = GECKOS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_DOGWOLF ):
						list_begin = DOGS_BEGIN;
						list_end = DOGS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_SCORPIONS ):
						list_begin = RADSCORPIONS_BEGIN;
						list_end = RADSCORPIONS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_BRAHMINLAV ):
						list_begin = BRAHMINS_BEGIN;
						list_end = BRAHMINS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_PLANTS ):
						list_begin = PREDATORY_PLANTS_BEGIN;
						list_end = PREDATORY_PLANTS_END;
						break;
					case( STR_GM_MENU_GROUP_YAO ):
						list_begin = YAO_GUAI_BEGIN;
						list_end = YAO_GUAI_END;
						break;
					case( STR_GM_MENU_GROUP_ALIENS ):
						list_begin = ALIENS_BEGIN;
						list_end = ALIENS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_DEATHCLAWS ):
						list_begin = DEATHCLAWS_BEGIN;
						list_end = DEATHCLAWS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					case( STR_GM_MENU_GROUP_CROCKS ):
						list_begin = CROCKS_BEGIN;
						list_end = CROCKS_END;
						break;
					case( STR_GM_MENU_GROUP_CENTAURS ):
						list_begin = CENTAURS_BEGIN;
						list_end = CENTAURS_END;
						break;
					case( STR_GM_MENU_GROUP_FLOATERS ):
						list_begin = FLOATERS_BEGIN;
						list_end = FLOATERS_END;
						break;
					case( STR_GM_MENU_GROUP_SWAMPLURKERS ):
						list_begin = SWAMPLURKERS_BEGIN;
						list_end = SWAMPLURKERS_END;
						break;
					case( STR_GM_MENU_GROUP_INSECTS ):
						list_begin = OTHER_INSECTS_BEGIN;
						list_end = OTHER_INSECTS_END;
						if(mob_spawner)
						{
							MenuSelectMobSpawnerGroup@ menu_select_group = MenuSelectMobSpawnerGroup( list_begin );
							menu_select_group.level = level + 1;
							return menu.OpenChild( "level " + menu_select_group.level, menu_select_group );
						}
						break;
					default:
						break;
				}

				if(mob_spawner)
				{
					gm.ParamBase[CR_VAL4] = list_begin;
					gm.ParamBase[CR_VAL5] = list_end - 1;
					return false;
				}
				else
				{
					MenuSelectMob@ menu_select_mob = MenuSelectMob( map, hex_X, hex_Y, list_begin, list_end );
					menu_select_mob.level = level + 1;
					return menu.OpenChild( "level " + menu_select_mob.level, menu_select_mob );
				}
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
    }

    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_SPAWNMENU_SPAWN_MOB_DESC;
	}

    string@ Description( Critter& gm )
	{
		return null;
    }
}

//Child menu humanoid Mob spawn selection
class MenuSelectHumanoidMobGroup: DefaultMenuHandler
{
    uint map_id;
	uint level;
	uint16 hex_X;
	uint16 hex_Y;
	uint16 list_begin;
	uint16 list_end;
	
    MenuSelectHumanoidMobGroup( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		level = 2;
		hex_X = hexX;
		hex_Y = hexY;
		list_begin = 0;
		list_end = 0;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{ 
			return false; 
		}
		
		for( uint i = STR_GM_MENU_NPC_HUMANOID_GROUPS_BEGIN; i < STR_GM_MENU_NPC_HUMANOID_GROUPS_END; i ++ )
		{
			string category = i;
			string lex = "$name" + STR_INSERT_TEXT_LINE( category );
			if( menu.ButtonMsg( STR_GM_MOB_MENU_MOBNAME, lex ) )
			{
				switch( i )
				{
					case( STR_GM_MENU_GROUP_GHOULS ):
						list_begin = GHOULS_BEGIN;
						list_end = GHOULS_END;
						break;
					case( STR_GM_MENU_GROUP_SMUTANTS ):
						list_begin = SMUTANTS_BEGIN;
						list_end = SMUTANTS_END;
						break;
					case( STR_GM_MENU_GROUP_NCR_SOLDIERS ):
						list_begin = NCR_SOLDIERS_BEGIN;
						list_end = NCR_SOLDIERS_END;
						break;
					case( STR_GM_MENU_GROUP_RANGERS ):
						list_begin = RANGERS_BEGIN;
						list_end = RANGERS_END;
						break;
					case( STR_GM_MENU_GROUP_BOS_SOLDIERS ):
						list_begin = BOS_SOLDIERS_BEGIN;
						list_end = BOS_SOLDIERS_END;
						break;
					case( STR_GM_MENU_GROUP_ENCLAVE_SOLDIERS ):
						list_begin = ENCLAVE_SOLDIERS_BEGIN;
						list_end = ENCLAVE_SOLDIERS_END;
						break;
					case( STR_GM_MENU_GROUP_VCITY_SOLDIERS ):
						list_begin = VCITY_SOLDIERS_BEGIN;
						list_end = VCITY_SOLDIERS_END;
						break;
					case( STR_GM_MENU_GROUP_RENEGADE_SOLDIRES ):
						list_begin = RENEGADE_SOLDIERS_BEGIN;
						list_end = RENEGADE_SOLDIERS_END;
						break;
					case( STR_GM_MENU_GROUP_VAULT_DWELLERS ):
						list_begin = VAULT_DWELLERS_BEGIN;
						list_end = VAULT_DWELLERS_END;
						break;
					case( STR_GM_MENU_GROUP_TOWN_DWELLERS ):
						list_begin = TOWN_DWELLERS_BEGIN;
						list_end = TOWN_DWELLERS_END;
						break;
					case( STR_GM_MENU_GROUP_BOUNTY_HUNTERS ):
						list_begin = BOUNTY_HUNTERS_BEGIN;
						list_end = BOUNTY_HUNTERS_END;
						break;
					case( STR_GM_MENU_GROUP_TRIBALS ):
						list_begin = TRIBALS_BEGIN;
						list_end = TRIBALS_END;
						break;
					case( STR_GM_MENU_GROUP_CANNIBALS ):
						list_begin = CANNIBALS_BEGIN;
						list_end = CANNIBALS_END;
						break;
					case( STR_GM_MENU_GROUP_BANDITS ):
						list_begin = BANDITS_BEGIN;
						list_end = BANDITS_END;
						break;
					case( STR_GM_MENU_GROUP_MERCS ):
						list_begin = MERCS_BEGIN;
						list_end = MERCS_END;
						break;
					case( STR_GM_MENU_GROUP_SLAVERS ):
						list_begin = SLAVERS_BEGIN;
						list_end = SLAVERS_END;
						break;
					case( STR_GM_MENU_GROUP_SLAVES ):
						list_begin = SLAVES_BEGIN;
						list_end = SLAVES_END;
						break;
					case( STR_GM_MENU_GROUP_HOMELESS ):
						list_begin = HOMELESS_BEGIN;
						list_end = HOMELESS_END;
						break;
					default:
						break;
				}

				MenuSelectMob@ menu_select_mob = MenuSelectMob( map, hex_X, hex_Y, list_begin, list_end );
				menu_select_mob.level = level + 1;
				return menu.OpenChild( "level " + menu_select_mob.level, menu_select_mob );
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
    }

    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_SPAWNMENU_SPAWN_MOB_DESC;
	}

    string@ Description( Critter& gm )
	{
		return null;
    }
}

class MenuSelectMobSpawnerGroup: DefaultMenuHandler
{
	uint16 group_num;
	uint level;
	
    MenuSelectMobSpawnerGroup( uint16 num )
	{
		group_num = num;
		level = 0;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		if(group_num == ANTS_BEGIN)
		{
			if(menu.Button("Ants"))
			{
				gm.ParamBase[CR_VAL4] = ANTS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_ANT_GUARD;
				return false;
			}

			if(menu.Button("Ant Lions"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_ANT_LION;
				gm.ParamBase[CR_VAL5] = NPC_PID_ANT_LION;
				return false;
			}
		}

		if(group_num == GECKOS_BEGIN)
		{
			if(menu.Button("Silver gecko"))
			{
				gm.ParamBase[CR_VAL4] = GECKOS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_SILVER_GECKO_ALPHA;
				return false;
			}

			if(menu.Button("Golden gecko"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_GOLDEN_GECKO;
				gm.ParamBase[CR_VAL5] = NPC_PID_GOLDEN_GECKO_ALPHA;
				return false;
			}

			if(menu.Button("Cave gecko"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_CAVE_GECKO;
				gm.ParamBase[CR_VAL5] = NPC_PID_CAVE_GECKO;
				return false;
			}

			if(menu.Button("Fire gecko"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_FIRE_GECKO;
				gm.ParamBase[CR_VAL5] = NPC_PID_FIRE_GECKO_ALPHA;
				return false;
			}
		}

		if(group_num == DOGS_BEGIN)
		{
			if(menu.Button("Dogs"))
			{
				gm.ParamBase[CR_VAL4] = DOGS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_PUPPY;
				return false;
			}

			if(menu.Button("Wolfs"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_WEAK_WOLF;
				gm.ParamBase[CR_VAL5] = NPC_PID_WOLF_PUPPY;
				return false;
			}

			if(menu.Button("Coyotes"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_COYOTE;
				gm.ParamBase[CR_VAL5] = NPC_PID_COYOTE;
				return false;
			}
		}

		if(group_num == RADSCORPIONS_BEGIN)
		{
			if(menu.Button("Desert Scorp"))
			{
				gm.ParamBase[CR_VAL4] = RADSCORPIONS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_TOUGH_RADSCORPION;
				return false;
			}

			if(menu.Button("Black Scorp"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_SMALL_BLACK_SCORPION;
				gm.ParamBase[CR_VAL5] = NPC_PID_BLACK_RADSCORPION;
				return false;
			}

			if(menu.Button("Cave Scorp"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_CAVE_RADSCORPION;
				gm.ParamBase[CR_VAL5] = NPC_PID_CAVE_RADSCORPION;
				return false;
			}
		}

		if(group_num == BRAHMINS_BEGIN)
		{
			if(menu.Button("Brahmins"))
			{
				gm.ParamBase[CR_VAL4] = BRAHMINS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_RABID_BRAHMIN;
				return false;
			}

			if(menu.Button("Lavash"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_LAVASH;
				gm.ParamBase[CR_VAL5] = NPC_PID_LAVASH;
				return false;
			}
		}

		if(group_num == ALIENS_BEGIN)
		{
			if(menu.Button("Eggs"))
			{
				gm.ParamBase[CR_VAL4] = ALIENS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_STRANGE_EGG;
				return false;
			}

			if(menu.Button("Aliens"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_WANAMINGO;
				gm.ParamBase[CR_VAL5] = NPC_PID_LARGE_WANAMINGO;
				return false;
			}

			if(menu.Button("Matriach"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_WANAMINGO_MATRIACH;
				gm.ParamBase[CR_VAL5] = NPC_PID_WANAMINGO_MATRIACH;
				return false;
			}
		}

		if(group_num == DEATHCLAWS_BEGIN)
		{
			if(menu.Button("Deathclaw"))
			{
				gm.ParamBase[CR_VAL4] = DEATHCLAWS_BEGIN;
				gm.ParamBase[CR_VAL5] = NPC_PID_DEATHCLAW_ALPHA;
				return false;
			}

			if(menu.Button("Goris Claws"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_DEATHCLAW_HUNTER;
				gm.ParamBase[CR_VAL5] = NPC_PID_BEAST;
				return false;
			}
		}

		if(group_num == OTHER_INSECTS_BEGIN)
		{
			if(menu.Button("Wasp"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_WASP;
				gm.ParamBase[CR_VAL5] = NPC_PID_WASP;
				return false;
			}

			if(menu.Button("Cockroach"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_COCKROACH;
				gm.ParamBase[CR_VAL5] = NPC_PID_COCKROACH;
				return false;
			}

			if(menu.Button("Millipede"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_GIANT_MILLIPEDE;
				gm.ParamBase[CR_VAL5] = NPC_PID_GIANT_MILLIPEDE;
				return false;
			}

			if(menu.Button("Spider"))
			{
				gm.ParamBase[CR_VAL4] = NPC_PID_GIANT_SPIDER;
				gm.ParamBase[CR_VAL5] = NPC_PID_GIANT_SPIDER;
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
    }

    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_SPAWNMENU_SPAWN_MOB_DESC;
	}

    string@ Description( Critter& gm )
	{
		return null;
    }
}

//Child menu Mob spawn selection
class MenuSelectMob: DefaultMenuHandler
{
    uint map_id;
	uint level;
	uint16 hex_X;
	uint16 hex_Y;
	uint16 list_begin;
	uint16 list_end;
	
    MenuSelectMob( Map& map, uint16 hexX, uint16 hexY, uint16 begin, uint16 end )
	{
        map_id = map.Id;
		level = 3;
		hex_X = hexX;
		hex_Y = hexY;
		list_begin = begin;
		list_end = end;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{ 
			return false; 
		}

		for( uint i = list_begin, len = list_end; i < len; i ++ )
		{
			string mob = STR_INSERT_MOB_LINE( i * 10 );
			string lex = "$name" + mob;
			if( menu.ButtonMsg( STR_GM_MOB_MENU_MOBNAME, lex ) )
			{
				gm.ParamBase[ CR_VAL6 ] = i;
				
				for( int j = 0; j < gm.ParamBase[ ST_VAR4 ]; j++ )
				{
					hex_spawn_NPC( gm, map, hex_X, hex_Y );
					unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Spawned NPC: " + GetDlgMsgStr(i*10) + " On map: " + map.Id +" hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				}				

				gm.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_SPAWNMENU_YOU_HAVE_SPAWNED, "$name" + mob );
				return true;
			}
		}

		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
    }

    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_GM_SPAWNMENU_SPAWN_MOB_DESC;
	}

    string@ Description( Critter& gm )
	{
		return null;
    }
}

//Func to spawn NPC based on selections
void hex_spawn_NPC( Critter& gm, Map& map, uint16 hexX, uint16 hexY )
{
    uint16 pid = gm.ParamBase[ CR_VAL6 ];
	if( pid == 0 )
	{
		return;
	}
	
	int iteration = 100;
	int rng = gm.ParamBase[ ST_VAR4 ];
	uint16 tempX = 0, tempY = 0;
	do
	{		
		tempX = Random( hexX - rng, hexX + rng );
		tempY = Random( hexY - rng, hexY + rng );
		iteration--;
	}
	while( !map.IsHexPassed( tempX, tempY ) && iteration > 0 );
	hexX = tempX;
	hexY = tempY;
	
	Critter@ cr = map.AddNpc( pid, hexX, hexY, Random( 0, 5 ), null, null, null );
	if( valid( cr ) )
	{
        cr.ParamBase[ ST_FACTION ] = gm.ParamBase[ CR_VAL3 ];
		cr.ParamBase[ CR_IS_AGGRESSIVE ] = gm.ParamBase[ CR_VAL4 ];
		cr.StatBase[ ST_TEAM_ID ] = gm.ParamBase[ CR_VAL5 ];
		
		int bonus_hp = gm.ParamBase[ CR_VAL7 ];
		int bonus_dmg = gm.ParamBase[ CR_VAL8 ];
		int bonus_skill = gm.ParamBase[ CR_VAL9 ];
		
        cr.StatBase[ ST_AI_ID ] = 207;
        cr.ParamBase[ MERC_TYPE ] = 10;
        cr.ParamBase[ MERC_MASTER_ID ] = int( gm.Id );

        cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] + bonus_hp;
		cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
		 
        cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] + bonus_dmg;
		
        cr.ParamBase[ SK_SMALL_GUNS ] = CLAMP( cr.ParamBase[ SK_SMALL_GUNS ] + bonus_skill, 0, 300 );
        cr.ParamBase[ SK_MEDIUM_GUNS ] = CLAMP( cr.ParamBase[ SK_MEDIUM_GUNS ] + bonus_skill, 0, 300 );
        cr.ParamBase[ SK_BIG_GUNS ] = CLAMP( cr.ParamBase[ SK_BIG_GUNS ] + bonus_skill, 0, 300 );
        cr.ParamBase[ SK_UNARMED ] = CLAMP( cr.ParamBase[ SK_UNARMED ] + bonus_skill, 0, 300 );
        cr.ParamBase[ SK_MELEE_WEAPONS ] = CLAMP( cr.ParamBase[ SK_MELEE_WEAPONS ] + bonus_skill, 0, 300 );
        cr.ParamBase[ SK_THROWING ] = CLAMP( cr.ParamBase[ SK_THROWING ] + bonus_skill, 0, 300 );
		
		int AI_type = gm.ParamBase[ CR_VAL2 ];
		if( AI_type == 0 )
		{
			gmcontrolMob( gm, cr.Id, 0, 0, null, null );
		}
		else if( AI_type == 1 )
		{  
			GM_MobInit( cr );
		}
		else if( AI_type == 2 )
		{
			GM_GuardsInit( cr );
		}
    }
}

void BlindingEffect( Map& map, uint16 x, uint16 y, int time, int radius, int color )
{
	color = CLAMP( color, 0, int( blinding_color_names.length() - 1 ) );
	
	Critter@[] crs;
	uint count = map.GetCrittersHex( x, y, radius, FIND_ALL | FIND_ONLY_PLAYERS, crs );
	for( uint i = 0; i < count; i++ )
	{
		FlushScreen( crs[i], blinding_color_values[color], blinding_color_values[color], time * 1000 );
		SayLog( crs[i], crInfo( crs[i] ) + " gets blinded with " + blinding_color_names[color] + " color for " + time + " seconds." );
	}
}

//Menu for hex flash effects
class MenuGMHexBlind: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexBlind( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		int time = gm.ParamBase[ CR_VAL2 ];
		int radius = gm.ParamBase[ CR_VAL3 ];
		int color = gm.ParamBase[ CR_VAL4 ];

		if( time > 0 && radius > 0 )
		{
			if( menu.Button( "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½" ) )
			{
				BlindingEffect( map, hex_X, hex_Y, time, radius, color );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Flushes ( time " + time + ", radius " + radius + ", color " + blinding_color_names[color] + " ) hex on map: " + map.Id + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return false;
			}
		}
		
		if( menu.ButtonExtSay( "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: ", "" + time, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½:" ) )
		{
			string str = menu.GetSayValue();
			int	val = 0;
			StrToInt( str, val );
			if( val > 0 && val < 121)
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ " + val + " ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½." );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ 1 ï¿½ï¿½ 120 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½!" );
			}
			return true;
		}

		if( menu.ButtonExtSay( "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: ", "" + radius, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½:" ) )
		{
			string str = menu.GetSayValue();
			int val = 0;
			StrToInt( str, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: " + val + " ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½." );
			}
			else
			{
				gm.ParamBase[ CR_VAL3 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½!" );
			}
			return true;
		}

		if( menu.Button( "ï¿½ï¿½ï¿½ï¿½: " + blinding_color_names[color] ) )
		{
			gm.ParamBase[ CR_VAL4 ] = ( gm.ParamBase[ CR_VAL4 ] + 1 ) % blinding_color_names.length();
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

//Menu for Radiation spawn
class MenuGMHexRad: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexRad( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if ( gm.ParamBase[ CR_VAL5 ] > gm.ParamBase[ CR_VAL4 ] )
		{
			gm.ParamBase[ CR_VAL5 ] = gm.ParamBase[ CR_VAL4 ];
		}
		
		if( gm.ParamBase[ CR_VAL2 ] > 0 && gm.ParamBase[ CR_VAL3] > 0 && gm.ParamBase[ CR_VAL4 ] > 0 )
		{
				
			if( menu.Button( "Radiate Hex" ) )
			{
				RadiateHex( gm, map.Id, hex_X, hex_Y, gm.Param[ CR_VAL2 ], gm.Param[ CR_VAL3], gm.Param[ CR_VAL4 ], gm.Param[ CR_VAL5 ] );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Radiated Hex on map: " + map.Id + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return true;
			}
		}
		
		string rad_strength = gm.ParamBase[ CR_VAL2 ];
		if( menu.ButtonExtSay( "Strength: ", rad_strength, "Strength:" ) )
		{
			string strength = menu.GetSayValue();
			int val = 0;
			StrToInt( strength, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Radiation source strength is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL2 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string rad_time = gm.ParamBase[ CR_VAL3 ];
		if( menu.ButtonExtSay( "Tick: ", rad_time, "Set time between 1 and 60 minutes:" ) )
		{
			string tick = menu.GetSayValue();
			int	val = 0;
			StrToInt( tick, val );
			if( val > 0 && val < 61)
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Radiation tick is: " + val + " minutes." );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 You must set time between 1 and 60 minutes!" );
			}
			return true;
		}

		string rad_distance = gm.ParamBase[ CR_VAL4 ];
		if( menu.ButtonExtSay( "Radius: ", rad_distance, "Set radiation radius:" ) )
		{
			string radius = menu.GetSayValue();
			int val = 0;
			StrToInt( radius, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL4 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Radiation source radius is: " + val + " hex." );
			}
			else
			{
				gm.ParamBase[ CR_VAL4 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string rad_epicentre = gm.ParamBase[ CR_VAL5 ];
		if( menu.ButtonExtSay( "Epicentre radius: ", rad_epicentre, "Set epicentre radius:" ) )
		{
			rad_epicentre = menu.GetSayValue();
			int val = 0;
			StrToInt( rad_epicentre, val );
			
			if ( val > gm.ParamBase[ CR_VAL4 ] )
			{
				gm.ParamBase[ CR_VAL5 ] = gm.ParamBase[ CR_VAL4 ];
				gm.Say( SAY_NETMSG, "|0xFFFF00 Epicenter is equal to the radius" );
			}
			else if ( val < 0 )
			{
				gm.ParamBase[ CR_VAL5 ] = 0;
			}
			else
			{
				gm.ParamBase[ CR_VAL5 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The radius of the epicenter is " + val );
			}
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Radiation spawn menu. \nSelect options and press [ |0xFFFF00 Radiate Hex |0x3CF800 ]. \nStrength: [|0xFFFF00 " + gm.Param[ CR_VAL2 ] + " |0x3CF800 ] rad"
					+ "\nTick: [ |0xFFFF00 " + gm.Param[ CR_VAL3 ] + " |0x3CF800 ] minutes\nRadius: [ |0xFFFF00 " 
					+ gm.Param[ CR_VAL4 ] + " |0x3CF800 ] hex ";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

//Menu for Gas source spawn
class MenuGMHexGas: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexGas( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if( gm.ParamBase[ CR_VAL2 ] > 0 && gm.ParamBase[ CR_VAL3 ] > 0 && gm.ParamBase[ CR_VAL4 ] > 0 )
		{
			if( menu.Button( "Gas Hex" ) )
			{
				GasHex( gm, map.Id, hex_X, hex_Y, gm.Param[ CR_VAL2 ], gm.Param[ CR_VAL3], gm.Param[ CR_VAL4 ] );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Created Gas source hex on map: " + map.Id + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return true;
			}
		}
		
		string gas_strength = gm.ParamBase[ CR_VAL2 ];
		if( menu.ButtonExtSay( "Strength: ", gas_strength, "Strength:" ) )
		{
			string strength = menu.GetSayValue();
			int val = 0;
			StrToInt( strength, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Gas source strength is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL2 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string gas_time = gm.ParamBase[ CR_VAL3 ];
		if( menu.ButtonExtSay( "Tick: ", gas_time, "Set time between 1 and 60 seconds:" ) )
		{
			string tick = menu.GetSayValue();
			int	val = 0;
			StrToInt( tick, val );
			if( val > 0 && val < 61)
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Gas tick is: " + val + " seconds." );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 You must set time between 1 and 60 seconds!" );
			}
			return true;
		}

		string gas_distance = gm.ParamBase[ CR_VAL4 ];
		if( menu.ButtonExtSay( "Radius: ", gas_distance, "Set gas radius:" ) )
		{
			string radius = menu.GetSayValue();
			int val = 0;
			StrToInt( radius, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL4 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Gas source radius is: " + val + " hex." );
			}
			else
			{
				gm.ParamBase[ CR_VAL4 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Gas hex spawn menu. \nSelect options and press [ |0xFFFF00 Gas Hex |0x3CF800 ]. \nStrength: [|0xFFFF00 " + gm.Param[ CR_VAL2 ] + " |0x3CF800 ] points"
					+ "\nTick: [ |0xFFFF00 " + gm.Param[ CR_VAL3 ] + " |0x3CF800 ] seconds.\nRadius: [ |0xFFFF00 " 
					+ gm.Param[ CR_VAL4 ] + " |0x3CF800 ] hex ";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

const string[] oreNames = {"Boulders", "NF_METAL", "Lead", "Minerals", "Coal", "Gold", "Iron", "Uranium"};

//Menu for Ore zone spawn
class MenuGMHexOre: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexOre( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if( gm.ParamBase[ CR_VAL2 ] > 0 && gm.ParamBase[ CR_VAL3 ] > 0 && (gm.ParamBase[ CR_VAL4 ] >= 0 && gm.ParamBase[ CR_VAL4 ] <= 7) && gm.ParamBase[ CR_VAL5 ] > 0)
		{
			if( menu.Button( "Spawn Ore" ) )
			{
				SpawnOreZone( map, hex_X, hex_Y, gm.Param[ CR_VAL2 ], gm.Param[ CR_VAL3], gm.Param[ CR_VAL4 ], gm.Param[ CR_VAL5 ]);
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Created Ore source hex on map: " + map.GetProtoId() + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return true;
			}
		}
		
		string ore_timeout = gm.ParamBase[ CR_VAL2 ];
		if( menu.ButtonExtSay( "Timeout(Mins): ", ore_timeout, "Timeout(Mins)" ) )
		{
			string timeout = menu.GetSayValue();
			int val = 0;
			StrToInt( timeout, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Ore zone timeout is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL2 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string ore_range = gm.ParamBase[ CR_VAL3 ];
		if( menu.ButtonExtSay( "Range: ", ore_range, "Range:" ) )
		{
			string range = menu.GetSayValue();
			int	val = 0;
			StrToInt( range, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Ore range is: " + val + " hexes." );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string ore_dna = gm.ParamBase[ CR_VAL4 ];
		if( menu.Button( "Ore DNA: " + oreNames[ gm.ParamBase[ CR_VAL4 ] ] ) )
		{
			MenuGMHexOreDNA@ GM_Hex_Ore_DNA = MenuGMHexOreDNA();
			return menu.OpenChild( "Level " + GM_Hex_Ore_DNA.level, GM_Hex_Ore_DNA );
		}

		string ore_capacity = gm.ParamBase[ CR_VAL5 ];
		if( menu.ButtonExtSay( "Ore capacity: ", ore_capacity, "Ore capacity:" ) )
		{
			string capacity = menu.GetSayValue();
			int val = 0;
			StrToInt( capacity, val );
			if( val > 0)
			{
				gm.ParamBase[ CR_VAL5 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Ore capacity is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL5 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Ore zone spawn menu. \nSelect options and press [ |0xFFFF00 Ore Hex |0x3CF800 ]. \nTimeout: [|0xFFFF00 " + gm.Param[ CR_VAL2 ] + " |0x3CF800 ] minutes"
					+ "\nRange: [ |0xFFFF00 " + gm.Param[ CR_VAL3 ] + " |0x3CF800 ] hexes.\nDNA: [ |0xFFFF00 " 
					+ oreNames[gm.Param[ CR_VAL4 ]] + " |0x3CF800 ] \nCapacity: [ |0xFFFF00 "
					+ gm.Param[ CR_VAL5 ] + " |0x3CF800 ] nodes.";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMHexOreDNA: DefaultMenuHandler
{
	uint level;
	
    MenuGMHexOreDNA()
	{
		level = 2;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		int val = 0;
		for(uint i = 0, len = oreNames.length(); i < len; i++)
		{
			if(menu.Button(oreNames[i]))
			{
				val = i;

				if( val >= 0 && val <= 7)
				{
					gm.ParamBase[ CR_VAL4 ] = val;
					gm.Say( SAY_NETMSG, "|0xFFFF00 Ore DNA is: " + val + "." );
				}
				else
				{
					gm.ParamBase[ CR_VAL4 ] = 0;
					gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be between 0 and 7!" );
				}

				return true;
			}
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Choose ore DNA";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

//Menu for Junk zone spawn
class MenuGMHexJunk: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMHexJunk( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if( gm.ParamBase[ CR_VAL2 ] > 0 && gm.ParamBase[ CR_VAL3 ] > 0 && gm.ParamBase[ CR_VAL4 ] > 0 && (gm.ParamBase[ CR_VAL5 ] >= 0 && gm.ParamBase[ CR_VAL5 ] < 3) )
		{
			if( menu.Button( "Spawn Junk" ) )
			{
				SpawnJunkZone( map, hex_X, hex_Y, gm.Param[ CR_VAL2 ], gm.Param[ CR_VAL3], gm.Param[ CR_VAL4 ], gm.Param[ CR_VAL5 ]);
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Created junk source hex on map: " + map.GetProtoId() + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return true;
			}
		}
		
		string zone_timeout = gm.ParamBase[ CR_VAL2 ];
		if( menu.ButtonExtSay( "Timeout(Mins): ", zone_timeout, "Timeout(Mins)" ) )
		{
			string timeout = menu.GetSayValue();
			int val = 0;
			StrToInt( timeout, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Zome timeout is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL2 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string zone_range = gm.ParamBase[ CR_VAL3 ];
		if( menu.ButtonExtSay( "Range: ", zone_range, "Range:" ) )
		{
			string range = menu.GetSayValue();
			int	val = 0;
			StrToInt( range, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Zone range is: " + val + " hexes." );
			}
			else
			{
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string zone_capacity = gm.ParamBase[ CR_VAL4 ];
		if( menu.ButtonExtSay( "Zone capacity: ", zone_capacity, "Zone capacity:" ) )
		{
			string capacity = menu.GetSayValue();
			int val = 0;
			StrToInt( capacity, val );
			if( val > 0)
			{
				gm.ParamBase[ CR_VAL4 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Zone capacity is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL4 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string zone_tier = gm.ParamBase[ CR_VAL5 ];
		if( menu.ButtonExtSay( "Zone Tier: ", zone_tier, "Zone Tier:" ) )
		{
			string tier = menu.GetSayValue();
			int val = 0;
			StrToInt( tier, val );
			if( val >= 0 && val < 3)
			{
				gm.ParamBase[ CR_VAL5 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Junk tier is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL5 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be between 0 and 3!" );
			}
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Junk zone spawn menu. \nSelect options and press [ |0xFFFF00 Junk Hex |0x3CF800 ]. \nTimeout: [|0xFFFF00 " + gm.Param[ CR_VAL2 ] + " |0x3CF800 ] minutes"
					+ "\nRange: [ |0xFFFF00 " + gm.Param[ CR_VAL3 ] + " |0x3CF800 ] hexes.\nCapacity: [ |0xFFFF00 "
					+ gm.Param[ CR_VAL4 ] + " |0x3CF800 ] nodes.";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

//Menu for Mob Spawner
class MenuGMMobSpawner: DefaultMenuHandler
{
    uint map_id;
	uint16 hex_X;
	uint16 hex_Y;
	uint level;
	
    MenuGMMobSpawner( Map& map, uint16 hexX, uint16 hexY )
	{
        map_id = map.Id;
		hex_X = hexX;
		hex_Y = hexY;
		level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		
        if( !valid( map ) )
		{
            return true;
        }
		
		if( gm.ParamBase[ CR_VAL2 ] >= 0 && gm.ParamBase[ CR_VAL3 ] > 0 && gm.ParamBase[ CR_VAL4 ] > 0 && gm.ParamBase[ CR_VAL5 ] > 0 && gm.ParamBase[ CR_VAL6 ] > 0 && gm.ParamBase[ CR_VAL7 ] > 0 && gm.ParamBase[ CR_VAL8 ] > 0 )
		{
			if( menu.Button( "Create" ) )
			{
				CreateMobSpawner( map, hex_X, hex_Y, gm.Param[ CR_VAL2 ], gm.Param[ CR_VAL3], gm.Param[ CR_VAL4 ], gm.Param[ CR_VAL5 ], gm.Param[ CR_VAL6 ], gm.Param[ CR_VAL7 ], gm.Param[ CR_VAL8 ], gm.Param[ CR_VAL9 ] );
				unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " Created mob spawner on map: " + map.GetProtoId() + " hex_X: " + hex_X + " hex_Y: " + hex_Y, null );
				return true;
			}
		}
		
		string team_ID = gm.ParamBase[ CR_VAL2 ];
		if( menu.ButtonExtSay( "TeamID: ", team_ID, "TeamID" ) )
		{
			string teamID = menu.GetSayValue();
			int val = 0;
			StrToInt( teamID, val );
			if( val >= 0 )
			{
				gm.ParamBase[ CR_VAL2 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 TeamID is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL2 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string mobs_count = gm.ParamBase[ CR_VAL3 ];
		if( menu.ButtonExtSay( "Mobs Count: ", mobs_count, "Mobs Count" ) )
		{
			string mobsCount = menu.GetSayValue();
			int val = 0;
			StrToInt( mobsCount, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL3 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Mobs Count is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL3 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		if( menu.ButtonMsg( STR_GM_SPAWNMENU_SELECT_MOB ) )
		{
			MenuSelectMobGroup@ menu_select_mob_group = MenuSelectMobGroup( map, hex_X, hex_Y, true );
			menu_select_mob_group.level = level + 1;
			return menu.OpenChild( "level " + menu_select_mob_group.level, menu_select_mob_group );
		}

		string min_mob_pid = gm.ParamBase[ CR_VAL4 ];
		if( menu.ButtonExtSay( "Min Mob PID: ", min_mob_pid, "Min Mob PID" ) )
		{
			string minMobPID = menu.GetSayValue();
			int val = 0;
			StrToInt( minMobPID, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL4 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Min Mob PID is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL4 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string max_mob_pid = gm.ParamBase[ CR_VAL5 ];
		if( menu.ButtonExtSay( "Max Mob PID: ", max_mob_pid, "Max Mob PID" ) )
		{
			string maxMobPID = menu.GetSayValue();
			int val = 0;
			StrToInt( maxMobPID, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL5 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Max Mob PID is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL5 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string min_time_out = gm.ParamBase[ CR_VAL6 ];
		if( menu.ButtonExtSay( "Min Timeout(Mins): ", min_time_out, "Min Timeout(Mins)" ) )
		{
			string timeout = menu.GetSayValue();
			int val = 0;
			StrToInt( timeout, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL6 ] = val;
				if(gm.ParamBase[ CR_VAL7 ] < gm.ParamBase[ CR_VAL6 ])
				{
					gm.ParamBase[ CR_VAL7 ] = gm.ParamBase[ CR_VAL6 ];
				}
				gm.Say( SAY_NETMSG, "|0xFFFF00 Spawner min timeout is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL6 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}
		
		string max_time_out = gm.ParamBase[ CR_VAL7 ];
		if( menu.ButtonExtSay( "Max Timeout(Mins): ", max_time_out, "Max Timeout(Mins)" ) )
		{
			string timeout = menu.GetSayValue();
			int val = 0;
			StrToInt( timeout, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL7 ] = val;
				if(gm.ParamBase[ CR_VAL7 ] < gm.ParamBase[ CR_VAL6 ])
				{
					gm.ParamBase[ CR_VAL6 ] = gm.ParamBase[ CR_VAL7 ];
				}
				gm.Say( SAY_NETMSG, "|0xFFFF00 Spawner max timeout is: " + val + "." );
			}
			else
			{
				gm.ParamBase[ CR_VAL7 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string curr_range = gm.ParamBase[ CR_VAL8 ];
		if( menu.ButtonExtSay( "Range: ", curr_range, "Range:" ) )
		{
			string range = menu.GetSayValue();
			int	val = 0;
			StrToInt( range, val );
			if( val > 0 )
			{
				gm.ParamBase[ CR_VAL8 ] = val;
				gm.Say( SAY_NETMSG, "|0xFFFF00 Spawner range is: " + val + " hexes." );
			}
			else
			{
				gm.ParamBase[ CR_VAL8 ] = 0;
				gm.Say( SAY_NETMSG, "|0xFFFF00 The value must be positive!" );
			}
			return true;
		}

		string curr_aggro = ( FLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_AGGRO) ? "True" : "False" );
		if( menu.ButtonExt( "Aggro: ", curr_aggro ) )
		{
			if(FLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_AGGRO)) UNSETFLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_AGGRO);
			else SETFLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_AGGRO);
			return true;
		}

		string curr_wildness = ( FLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_WILD) ? "True" : "False" );
		if( menu.ButtonExt( "Wild: ", curr_wildness ) )
		{
			if(FLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_WILD)) UNSETFLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_WILD);
			else SETFLAG(gm.ParamBase[ CR_VAL9 ], SPAWNER_IS_WILD);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "GM Spawner menu. \nSelect options and press [ |0xFFFF00 Create |0x3CF800 ]." + 
		"\nTeamID: [|0xFFFF00 " + gm.Param[ CR_VAL2 ] + " |0x3CF800 ]" +
		"\nMobs Count: [ |0xFFFF00 " + gm.Param[ CR_VAL3 ] + " |0x3CF800 ]" +
		"\nMin Mob PID: [ |0xFFFF00 " + gm.Param[ CR_VAL4 ] + " |0x3CF800 ]" +
		"\nMax Mob PID: [ |0xFFFF00 " + gm.Param[ CR_VAL5 ] + " |0x3CF800 ]" +
		"\nTimeout: [ |0xFFFF00 " + gm.Param[ CR_VAL6 ] + " |0x3CF800 ] Minutes" +
		"\nRange: [ |0xFFFF00 " + gm.Param[ CR_VAL7 ] + " |0x3CF800 ] Hexes";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}