#ifndef FLASK
#define FLASK

#include "_utils.fos"
#include "flask_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "food_h.fos"
#include "furniture_h.fos"

bool isFlask( Critter& cr, Item@ waterSource )
{
	Item@ flask = _CritGetItemHand( cr );
	if( !valid( flask) )
	{
		return false;
	}

	if( valid( waterSource ) && ( flask.DRINK_DNA == waterSource.DRINK_DNA || flask.DRINK_DNA == 0 ) )
	{
		return true;
	}

	if( flask.Proto.Type == ITEM_TYPE_FLASK )
	{
		return true;
	}
	
	return false;
}

//WATER BARREL
void StartMenuWaterBarrel( Critter& cr, Item& waterBarrel )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }
	
	iMenuHandler@ handler = MenuWaterBarrel( waterBarrel, map );
    iDialogBox@ menu = OpenMenu( cr, "Water Barrel", handler );
}

class MenuWaterBarrel: CenteredMenuHandler
{
    uint waterBarrel_id;
    uint map_id;
	uint level;
	
    MenuWaterBarrel( Item& waterBarrel, Map& map )
	{
        waterBarrel_id = waterBarrel.Id;
        map_id = map.Id;
		level = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ waterBarrel = GetItem( waterBarrel_id );
	
        if( !valid( map ) )
		{
            return false;
        }
		
		if( !valid( waterBarrel ) )
		{
			return false;
		}
		
		if( waterBarrel.REMAINING_USES > 0 )
		{
			if( menu.ButtonMsg( STR_WATERWORKS_MENU_COLLECT_WATER ) )
			{
				if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, waterBarrel.DRINK_DNA, SLOT_HAND1 ) && !isFlask( cr, waterBarrel ) )
				{ 
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_TARE );
					return true;
				}

				//start_gathering_water( cr, waterBarrel );
				return false;
				
			}
			
			if( menu.ButtonMsg( STR_WATERWORKS_MENU_DRINK ) )
			{
				Item@ consumedDrink = cr.AddItem( waterBarrel.DRINK_DNA, 1 );
				consumedDrink.REMAINING_USES = 2;
				ProccessDrink( cr, cr, consumedDrink );
				_SubItem( consumedDrink, 1 );
				waterBarrel.REMAINING_USES --;
				return true;
			}
			
			if( waterBarrel.REMAINING_USES == 0 && menu.ButtonMsg( STR_FURNITURE_MENU_BUTTON ) )
			{
				_InitFurniture( waterBarrel, true );
				waterBarrel.Update();
				StartMenuFurniture( cr, waterBarrel );
				return false;
			}
		}
		
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ waterBarrel = GetItem( waterBarrel_id );
		Map@ map = GetMap( map_id );

		string info = " ";
		
        return info;
    }
}

bool FlaskCheck( Critter& cr, Item@ drink, Item@ flask )
{
	Map@ map = cr.GetMap(); 
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( drink ) )
	{
		return false;
	}
	
	if( !valid( flask ) )
	{
		return false;
	}
	
   	if( ( FindFlask( drink ) && drink.DRINK_DNA <= 0 ) && flask.DRINK_DNA <= 0 )
	{
		return false;
	}
		
    if( !FindFlask( flask ) )
	{
		return false;
	}
	
	uint16 drinkPid = drink.GetProtoId();
	Item@ hand = _CritGetItemHand( cr );
	if( hand.Proto.Type != ITEM_TYPE_FLASK && ( drinkPid == uint(flask.DRINK_DNA) || drinkPid == PID_BOTTLE_GLASS ) )
	{
		start_pouring_out( cr, flask );
		return true;
	}
	
 	if( flask.DRINK_DNA != 0 && uint(flask.DRINK_DNA) != drinkPid && drinkPid != PID_BOTTLE_GLASS )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OTHER_LIQUID_INSIDE );
		return false;
	}
	
	if( find_opened_drinks( drink ) || FindFlask( drink ) )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FILL_FLASK, "$proto@msg ITEM " +  ( flask.Proto.ProtoId * 100 ) + "@" );
		flask.Update();
		start_pouring( cr, drink, flask );
	}
	
	return true;
}

bool DrinkFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) )
	{
		return false;
    }
	
	if( flask.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_FLASK );
		return false;
	}
	
	if( flask.REMAINING_USES <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_EMPTY );
		return false;
	}
	
	if( flask.DRINK_DNA != 0 )
	{
		flask.REMAINING_USES --;
		flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
		
		Item@ consumedDrink = cr.AddItem( flask.DRINK_DNA, 1 );
		consumedDrink.TOXIN_LEVEL = flask.FLASK_TOXIN_LEVEL;
		consumedDrink.POLUTION_LEVEL = flask.FLASK_POLUTION_LEVEL; 
		consumedDrink.SPIRIT_LEVEL = flask.SPIRIT_LEVEL;
		consumedDrink.REMAINING_USES = 2;
		ProccessDrink( cr, cr, consumedDrink );
		_SubItem( consumedDrink, 1 );
	}
	
	if( flask.REMAINING_USES == 0 )
	{ 
		flask.REMAINING_USES = 0;
		flask.EXTRA_WEIGHT = 0;
		flask.DRINK_DNA = 0;
		flask.Val3 = 0;
		flask.Val4 = 0;
		flask.FLASK_TOXIN_LEVEL = 0;
		flask.Val6 = 0;
		flask.FLASK_POLUTION_LEVEL = 0;
		flask.Val8 = 0;
		flask.Val9 = 0;
		ChangeFlaskProto( flask );
	}
	
	flask.Update();
	return true;
}

bool PourFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) )
	{
		return false;
    }
	
	if( flask.REMAINING_USES <= 0 || flask.DRINK_DNA <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_EMPTY );
		return false;
	}
	
	flask.REMAINING_USES = 0;
	flask.EXTRA_WEIGHT = 0;
	flask.DRINK_DNA = 0;
	flask.Val3 = 0;
	flask.Val4 = 0;
	flask.FLASK_TOXIN_LEVEL = 0;
	flask.Val6 = 0;
	flask.FLASK_POLUTION_LEVEL = 0;
	flask.Val8 = 0;
	flask.Val9 = 0;
	
	PlayGenericSound( map, cr.HexX, cr.HexY, "splash.ogg", 20 );
	
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_EMPTY_FLASK, "$proto@msg ITEM " +  ( flask.Proto.ProtoId * 100 ) + "@" );
	
	ChangeFlaskProto( flask );
	
	flask.Update();
	return true;
}

bool ltp_pouring_inited = false;
void ltp_pouring_init()
{
	LTPREG( LTP_POURING, process_pouring )
	ltp_pouring_inited = true;
}

bool start_pouring( Critter& cr, Item& drink, Item& flask )
{
	if(!ltp_pouring_inited)
	{ 
		ltp_pouring_init();
	}
	
	Map@ map = cr.GetMap();
	
	if( valid( flask ) )
	{
		if( flask.REMAINING_USES == int( flask.Proto.Partial_Item ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_FILLED_UP );
			return false;
		}

		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = drink.REMAINING_USES > ( flask.Proto.Partial_Item - flask.REMAINING_USES ) ? ( flask.Proto.Partial_Item - flask.REMAINING_USES ) : drink.REMAINING_USES;

		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		StartProcess( cr, LTP_POURING, 0, drink.Id, flask.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		return true;
	}
	return false;
}

uint process_pouring( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_POURING )
	
	Item@ drink = GetItem( param1 );
  	Item@ flask = GetItem( param2 );
	
  	if( valid( flask ) )
	{
		Map@ map = cr.GetMap();
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		
		if( FindFlask( flask ) )
		{
			ChangeFlaskProto( flask );
		}
		
		flask.REMAINING_USES ++;
		flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
		flask.Val3 = drink.Val3;
		flask.Val4 = drink.Val4;
		flask.Val6 = drink.Val6;
		flask.FLASK_POLUTION_LEVEL = drink.POLUTION_LEVEL;
		flask.Val9 = drink.Val9;
		flask.Update();
			
		if( FindFlask( drink ) )
		{
			flask.DRINK_DNA = drink.DRINK_DNA;
		}
		else
		{
			flask.DRINK_DNA = drink.GetProtoId();
		}
		
		SpillOut( drink );
		
		if( int( flask.Proto.Partial_Item ) - flask.REMAINING_USES <= 0 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FINISHED_FILLING );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			
			if( drink.REMAINING_USES == 0 )
			{
				drink.DRINK_DNA = 0;
				drink.Val3 = 0;
				drink.Val4 = 0;
				drink.Val6 = 0;
				drink.FLASK_POLUTION_LEVEL = 0;
				drink.Val9 = 0;
				ChangeFlaskProto( drink );
			}
			
			return 0;
		}
		
		if( drink.REMAINING_USES == 0 )
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FINISHED_EMPTYING );
			
			drink.DRINK_DNA = 0;
			drink.Val3 = 0;
			drink.Val4 = 0;
			drink.Val6 = 0;
			drink.FLASK_POLUTION_LEVEL = 0;
			drink.Val9 = 0;
			
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			
			ChangeFlaskProto( drink );
			return 0;
		}
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	return 0;
}

//Proto Changer
void ChangeFlaskProto( Item& item )
{
	if( FindFlask( item ) )
	{
		uint16 itemPid = item.GetProtoId();
		switch( itemPid )
		{
			case( PID_FLASK_FULL ):
				if( item.REMAINING_USES == 0 )
				{
					item.ChangeProto( PID_FLASKB );
				}
				break;
			case( PID_WATER_BUCKET ):
				if( item.REMAINING_USES == 0 )
				{
					item.ChangeProto( PID_EMPTY_BUCKET );
				}
				break;
			case( PID_FLASKB ):
				if( item.REMAINING_USES != 0 )
				{
					item.ChangeProto( PID_FLASK_FULL );
				}
				break;
			case( PID_EMPTY_BUCKET ): 
				if( item.REMAINING_USES != 0 )
				{
					item.ChangeProto( PID_WATER_BUCKET );
				}
				break;
			default:
				break;
		}
	}
}

bool FindFlask( Item@ item )
{
	if( valid( item ) )
	{
		if( item.Proto.Type == ITEM_TYPE_FLASK )
		{
			return true;
		}
	}
	return false;
}

bool ltp_pouringOut_inited = false;
void ltp_pouringOut_init()
{
	LTPREG( LTP_POURING_OUT, process_pouring_out )
	ltp_pouringOut_inited = true;
}

bool start_pouring_out( Critter& cr, Item& target )
{
	if(!ltp_pouringOut_inited)
	{ 
		ltp_pouringOut_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( target ) )
	{
		if( target.REMAINING_USES < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT,  STR_NO_MORE_WATER );
			return false;
		}

		if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, target.DRINK_DNA, SLOT_HAND1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_BOTTLE_IN_HAND );
			return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcSequence( cr, target );
		
		StartProcess( cr, LTP_POURING_OUT, 0, 0, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		return true;
	}
	return false;
}

int CalcSequence( Critter& cr, Item& target )
{
	int sequence = 0;
	int bottlesCount = cr.CountItem( PID_BOTTLE_GLASS );
	ProtoItem@ bottleProto = GetProtoItem( PID_BOTTLE_GLASS );
	sequence += bottlesCount * 5; // constant val for glass bottle partial items, used flat number since empty bottles dont have it

	if( hasItem( cr, target.DRINK_DNA ) )
	{
		Item@[] inventory;
		cr.GetItems( -1, inventory );
		for( uint j = 0; j < inventory.length(); j++ )
		{
			if( valid( inventory[j] ) && int( inventory[j].GetProtoId() ) == target.DRINK_DNA )
			{
				sequence += inventory[j].Proto.Partial_Item - inventory[j].REMAINING_USES;
			}
		}
	}
	
	if( sequence > target.REMAINING_USES )
	{
		sequence = target.REMAINING_USES;
	}
	//Log( "sequence " + sequence );//DEBUG
	return sequence;
}

uint process_pouring_out( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_POURING_OUT )

  	Item@ target = GetItem( param2 );
	
  	if( valid( target ) )
	{
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, target.DRINK_DNA ) ) || target.REMAINING_USES < 1 )
		{
			uint msgStr = ( !hasItem( cr, PID_BOTTLE_GLASS ) || !hasItem( cr, target.DRINK_DNA ) ) ? STR_NO_MORE_BOTTLES : STR_POURED_ALL_WATER;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, msgStr );
			if( target.REMAINING_USES < 1 )
			{
				target.DRINK_DNA = 0;
				target.REMAINING_USES = 0;
				target.EXTRA_WEIGHT = 0;
				ChangeFlaskProto( target );
			}
			return 0;
		}
		
		_CritAnimateUse(cr);
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{ 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_BOTTLE );
		}

		if( hasItem( cr, target.DRINK_DNA ) )
		{
			Item@ waterBottlePrt = getItem( cr, target.DRINK_DNA );
			testInfo( cr, "2) You pour " + YELLOW + itemName( target.DRINK_DNA ) + GREEN + " PID " + WHITE + target.DRINK_DNA );//DEBUG
			
			if( waterBottlePrt.REMAINING_USES < int( waterBottlePrt.Proto.Partial_Item ) )
			{
				target.REMAINING_USES --;
				target.EXTRA_WEIGHT = target.REMAINING_USES * 100;
				waterBottlePrt.REMAINING_USES ++;
				waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
								
				target.Update();
				waterBottlePrt.Update();
				
				if( waterBottlePrt.REMAINING_USES == int( waterBottlePrt.Proto.Partial_Item ) )
				{
					testInfo( cr, "3) You pour " + YELLOW + itemName( waterBottlePrt.DRINK_DNA ) + GREEN + " PID " + WHITE + waterBottlePrt.DRINK_DNA );//DEBUG
					Item@ waterBottle = cr.AddItem( waterBottlePrt.DRINK_DNA, 1 );
					
					_SubItem( waterBottlePrt , 1 );
					
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_BOTTLE );
					
					waterBottle.Update();
				}
			}
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
		else
		{
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ waterBottlePrt = null;
			testInfo( cr, "1) You pour " + YELLOW + itemName( target.DRINK_DNA ) + GREEN + " PID " + WHITE + target.DRINK_DNA );//DEBUG
			@waterBottlePrt = cr.AddItem( target.DRINK_DNA, 1 );
			
			Item@ hands = cr.GetItem( 0, SLOT_HAND1 );
			if( valid( hands ) )
			{
				cr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
			}
			
			cr.MoveItem( waterBottlePrt.Id, waterBottlePrt.GetCount(), SLOT_HAND1 );
		
			target.REMAINING_USES --;
			target.EXTRA_WEIGHT = target.REMAINING_USES * 100;
			waterBottlePrt.SPIRIT_LEVEL = target.SPIRIT_LEVEL;
			waterBottlePrt.REMAINING_USES ++;
			waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
				
			target.Update();
			waterBottlePrt.Update();
		}
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
    }
	return 0;
}

#endif //FLASK