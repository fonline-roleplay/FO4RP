#ifndef FLASK
#define FLASK

#include "_utils.fos"
#include "flask_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "food_h.fos"
#include "furniture_h.fos"

bool IsFlask(Item@ flask)
{
	if(!valid(flask))
	{
		return false;
	}
	
	if(flask.Proto.Type == ITEM_TYPE_FLASK )
	{
		return true;
	}
	
	return false;
}

bool DrinkFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) )
	{
		return false;
    }
	
	if( flask.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_FLASK );
		return false;
	}
	
	if( flask.REMAINING_USES <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_EMPTY );
		return false;
	}
	
	if( flask.DRINK_DNA != 0 )
	{
		flask.REMAINING_USES--;
		flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
		
		Item@ proxy = cr.AddItem(flask.DRINK_DNA, 1);
		
		ProccessDrink( cr, cr, proxy );
		DeleteItem(proxy);
	}
	
	if( flask.REMAINING_USES == 0 )
	{ 
		flask.REMAINING_USES = 0;
		flask.DRINK_DNA = 0;
		flask.EXTRA_WEIGHT = 0;
		flask.Val3 = 0;
		flask.Val4 = 0;
		flask.FLASK_TOXIN_LEVEL = 0;
		flask.Val6 = 0;
		flask.FLASK_POLUTION_LEVEL = 0;
		flask.FLASK_TASTE = 0;
		flask.SPIRIT_LEVEL = 0;
		ChangeFlaskProto(flask);
	}
	
	flask.Update();
	return true;
}

bool ProcessFlask(Critter& cr, Item@ drink, Item@ flask)
{
	if(!valid(drink) || !valid(flask))
	{
		return false;
	}
	
	if(!IsFlask(drink) || !IsFlask(flask))
	{
		return false;
	}
	
	TransferLiquid(cr, drink, flask);
	
	return true;
}

bool TransferLiquid(Critter@ cr, Item@ input, Item@ output)
{
	if(input.REMAINING_USES <= 0)
	{	
		return false;
	}
	
	if(input.REMAINING_USES == 1)
	{
		ChangeFlaskProto(input);
	}
	
	if(output.REMAINING_USES == int( output.Proto.Partial_Item ))
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_FILLED_UP );
		return false;
	}
	
	if(output.REMAINING_USES == 0)
	{
		output.DRINK_DNA = input.DRINK_DNA;
		ChangeFlaskProto(output);
	}
	

	input.REMAINING_USES--;
	output.REMAINING_USES++;
	
	input.EXTRA_WEIGHT-= 100;
	output.EXTRA_WEIGHT+= 100;
	
	if(input.FLASK_TOXIN_LEVEL > 0)
	{
		output.FLASK_TOXIN_LEVEL += (((output.EXTRA_WEIGHT * output.FLASK_TOXIN_LEVEL) + (100 * input.FLASK_TOXIN_LEVEL)) / (output.EXTRA_WEIGHT + 100));
	}
	
	if(input.SPIRIT_LEVEL > 0)
	{
		output.FLASK_TOXIN_LEVEL += (((output.EXTRA_WEIGHT * output.SPIRIT_LEVEL) + (100 * input.SPIRIT_LEVEL)) / (output.EXTRA_WEIGHT + 100));
	}
	
	input.Update();
	output.Update();
	
	return true;
}

void ChangeFlaskProto(Item& item)
{
	if(!valid(item))
	{
		return;
	}
	
	switch(item.GetProtoId())
	{
		case(PID_NUKA_COLA_PRT):
		{
			item.ChangeProto( PID_BOTTLE_GLASS );
			item.Update();
			break;
		}
		case(PID_BOTTLE_GLASS):
		{
			if( item.DRINK_DNA <= 0 )
			{
				break;
			}
			item.ChangeProto( item.DRINK_DNA );
			item.Update();
			break;
		}
	}
}

#endif //FLASK