#ifndef __FOFMOD_H__
#define __FOFMOD_H__


#include "serializator.fos"
#include "_defines.fos"

#define FOFMOD_SOUND_TYPE_SOUND ( 0 )
#define FOFMOD_SOUND_TYPE_MUSIC ( 1 )

#define FMOD_EFFECT_TYPE_UNKNOWN 			( 0 )
#define FMOD_EFFECT_TYPE_MIXER 				( 1 )
#define FMOD_EFFECT_TYPE_OSCILLATOR 		( 2 )
#define FMOD_EFFECT_TYPE_LOWPASS 			( 3 )
#define FMOD_EFFECT_TYPE_ITLOWPASS 			( 4 )
#define FMOD_EFFECT_TYPE_HIGHPASS 			( 5 )
#define FMOD_EFFECT_TYPE_ECHO 				( 6 )
#define FMOD_EFFECT_TYPE_FADER 				( 7 )
#define FMOD_EFFECT_TYPE_FLANGE 			( 8 )
#define FMOD_EFFECT_TYPE_DISTORTION 		( 9 )
#define FMOD_EFFECT_TYPE_NORMALIZE 			( 10 )
#define FMOD_EFFECT_TYPE_LIMITER 			( 11 )
#define FMOD_EFFECT_TYPE_PARAMEQ 			( 12 )
#define FMOD_EFFECT_TYPE_PITCHSHIFT 		( 13 )
#define FMOD_EFFECT_TYPE_CHORUS 			( 14 )
#define FMOD_EFFECT_TYPE_VSTPLUGIN 			( 15 )
#define FMOD_EFFECT_TYPE_WINAMPPLUGIN 		( 16 )
#define FMOD_EFFECT_TYPE_ITECHO 			( 17 )
#define FMOD_EFFECT_TYPE_COMPRESSOR 		( 18 )
#define FMOD_EFFECT_TYPE_SFXREVERB 			( 19 )
#define FMOD_EFFECT_TYPE_LOWPASS_SIMPLE 	( 20 )
#define FMOD_EFFECT_TYPE_DELAY 				( 21 )
#define FMOD_EFFECT_TYPE_TREMOLO 			( 22 )
#define FMOD_EFFECT_TYPE_LAEFFECTAPLUGIN 	( 23 )
#define FMOD_EFFECT_TYPE_SEND 				( 24 )
#define FMOD_EFFECT_TYPE_RETURN 			( 25 )
#define FMOD_EFFECT_TYPE_HIGHPASS_SIMPLE 	( 26 )
#define FMOD_EFFECT_TYPE_PAN 				( 27 )
#define FMOD_EFFECT_TYPE_THREE_EQ 			( 28 )
#define FMOD_EFFECT_TYPE_FFT 				( 29 )
#define FMOD_EFFECT_TYPE_LOUDNESS_METER 	( 30 )
#define FMOD_EFFECT_TYPE_ENVELOPEFOLLOWER 	( 31 )
#define FMOD_EFFECT_TYPE_CONVOLUTIONREVERB  ( 32 )
#define FMOD_EFFECT_TYPE_CHANNELMIX 		( 33 )
#define FMOD_EFFECT_TYPE_TRANSCEIVER 		( 34 )
#define FMOD_EFFECT_TYPE_OBJECTPAN 			( 35 )
#define FMOD_EFFECT_TYPE_MULTIBAND_EQ 		( 36 )
	#define FMOD_EFFECT_MULTIBAND_EQ_FILTER_DISABLED 		( 0 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_12DB 	( 1 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_24DB 	( 2 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_48DB	( 3 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_12DB	( 4 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_24DB	( 5 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_48DB	( 6 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWSHELF		( 7 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHSHELF		( 8 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_PEAKING		( 9 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_BANDPASS		( 10 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_NOTCH			( 11 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_ALLPASS		( 12 )
#define FMOD_EFFECT_TYPE_MAX 				( 37 )



#ifndef __CLIENT

#define DEFAULT_SOUND_DISTANCE		( 5 )

shared class Sound
{
	string name_male;
	string@ name_female;
	uint strength;
	
	Sound( string name_male, string@ name_female = null, uint strength = DEFAULT_SOUND_DISTANCE )
	{
		this.name_male = name_male;
		if( valid( name_female ) )
		{
			@this.name_female = name_female;
		}
		else
		{
			@this.name_female = name_male;
		}
		this.strength = strength;
	}
	
	void play( Critter& cr )
	{
		if( cr.Stat[ ST_GENDER ] == GENDER_MALE )
		{
			PlayGenericSound( cr, name_male, int(strength) );
		}
		else 
		{
			PlayGenericSound( cr, name_female, int(strength) );
		}
	}
	
	string toString() 
	{ //Format: name_male [name_female] (STRENGTH)
		return name_male + " " + checkNull(name_female) + " (" + strength + ")" ;
	}
}

shared class noSound : Sound
{
	noSound() {}
	void play( Critter& cr ) override { }
	string toString() override { return "[noSound]"; }	
}

#endif

// shared interface IStringifyable
// {
// 	string Stringify();
// }

// shared class UniqueIdentifier : IStringifyable , ISerializible
// {
// 	uint epoch;
// 	uint generation;
// 	uint id;
// 	uint timeStamp;

// 	UniqueIdentifier()
// 	{
// 		this.epoch 			 = 0;
// 		this.generation 	 = 0;
// 		this.id 			 = 0;
// 		this.timeStamp		 = 0;
// 	}

// 	UniqueIdentifier( const UniqueIdentifier &in other )
// 	{
// 		this = other;
// 	}

// 	UniqueIdentifier@ opAssign( const UniqueIdentifier &in other )
// 	{
// 		this.epoch = other.epoch;
// 		this.generation = other.generation;
// 		this.id = other.id;
// 		this.timeStamp = other.timeStamp;
// 		return this;
// 	}

// 	bool opEquals( const UniqueIdentifier &in other )
// 	{
// 		bool result = true;
// 		result =  result && (this.epoch == other.epoch);
// 		result =  result && (this.generation == other.generation);
// 		result =  result && (this.id == other.id);
// 		result =  result && (this.timeStamp == other.timeStamp);
// 		return result;
// 	}

// 	string Stringify()
// 	{
// 		string result = "";
// 		result = this.epoch + "::" + this.generation + "::" + this.id + "::" + this.timeStamp ;
// 		return result;
// 	}

// 	void Serialize( Serializator &in serializer )
// 	{
// 		serializer.Set( this.epoch );
// 		serializer.Set( this.generation );
// 		serializer.Set( this.id );
// 		serializer.Set( this.timeStamp );
// 	}

// }

// shared interface IUIDGenerator
// {
// 	UniqueIdentifier@ Generate();
// }


// shared class UniqueIdentifierGenerator : IUIDGenerator
// {
// 	UniqueIdentifier prototype;

// 	UniqueIdentifierGenerator()
// 	{
// 		prototype = UniqueIdentifier();
// 	}

// 	UniqueIdentifier@ Generate()
// 	{
// 		UniqueIdentifier@ result = UniqueIdentifier( this.prototype );
// 		this.Forward();
// 		return result;
// 	}

// 	void Forward()
// 	{
// 		const uint MAXUINT = 0xFFFFFFFF;
// 		if( this.prototype.id++ == MAXUINT )
// 		{
// 			if( this.prototype.generation++ == MAXUINT )
// 			{
// 				this.prototype.epoch++;
// 			}
// 		}
//
//		this.prototype.timeStamp = GetTick();
// 	}
// }


// shared class Sound : ISerializible
// {
// 	string filename;
// 	UniqueIdentifier identifier;

// 	#ifdef __CLIENT
// 	FMODChannel@ channel;
// 	#endif

// 	Sound( string filename )
// 	{
// 		#ifdef __CLIENT
// 		@this.channel = null;
// 		#endif
// 		this.filename = filename;
// 		this.identifier = UniqueIdentifier();
// 	}

// 	Sound( string filename, UniqueIdentifier identifier )
// 	{
// 		#ifdef __CLIENT
// 		@this.channel = null;
// 		#endif
// 		this.filename = filename;
// 		this.identifier = identifier;
// 	}

// 	void Serialize( Serializator &in serializer )
// 	{
// 		serializer.Set( this.filename );
// 		this.identifier.Serialize( serializer );
// 	}

// 	void Update(){} // virtual
// }


// exports

#ifdef FOFMOD_NULL_API
shared FMODChannel@ FMOD_PlaySound(string@, const bool)
{
	return null;
}

shared class FMODEffect
{

}

shared class FMODSound
{
	uint GetLength()
	{
		return 0;
	}
}

shared class FMODChannel
{
	void SetEffect(FMODEffect@&)
	{
	
	}
	
	void Set3DLevel(const float)
	{
	
	}
	
	void Set3DMinMaxDistance(const float, const float)
	{
	
	}
	
	void SetPaused(const bool)
	{
	
	}
	
	void SetPitch(const float)
	{
	
	}
	
	void SetLoopCount(const int)
	{
	
	}
	
	void Set3DPosition(float, float, const float)
	{
	
	}
	
	bool IsValid()
	{
		return false;
	}
}
#endif

#ifndef FOFMOD_MODULE

	#ifdef __CLIENT
		import bool FOFMOD_Initialize() from 	"fofmod";
		import void FOFMOD_Test() from 			"fofmod";
		import void FOFMOD_TestSounds() from 	"fofmod";
		import void FOFMOD_Update() from 		"fofmod";
		// returns paused sound, unpause manually when needed.
		import FMODChannel@ FOFMOD_PlaySound( string& filename, uint16 hexX, uint16 hexY, uint minDistance, uint maxDistance ) from "fofmod";
		import FMODChannel@ FOFMOD_PlaySound( string& filename ) from "fofmod";
		import void __PlayWeaponSound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
		import void __PlaySound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
		
		import void IncrementSoundsVolume( int step ) from "fofmod";
		import void IncrementMusicVolume( int step ) from "fofmod";
	#endif

	import void CoordinatesHexToGrid(int x, int y, float &out ox, float &out oy) from "fofmod";
	
#endif // FOFMOD_MODULE

#endif