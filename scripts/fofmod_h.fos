#ifndef __FOFMOD_H__
#define __FOFMOD_H__


#include "UUID_h.fos"
#include "_defines.fos"

#define FOFMOD_SOUND_TYPE int
#define FOFMOD_SOUND_TYPE_MUSIC 	(1)
#define FOFMOD_SOUND_TYPE_SOUND 	(2)  
#define FOFMOD_SOUND_TYPE_GLOBAL 	(3)

#define FMOD_EFFECT_TYPE_UNKNOWN 			( 0 )
#define FMOD_EFFECT_TYPE_MIXER 				( 1 )
#define FMOD_EFFECT_TYPE_OSCILLATOR 		( 2 )
#define FMOD_EFFECT_TYPE_LOWPASS 			( 3 )
#define FMOD_EFFECT_TYPE_ITLOWPASS 			( 4 )
#define FMOD_EFFECT_TYPE_HIGHPASS 			( 5 )
#define FMOD_EFFECT_TYPE_ECHO 				( 6 )
#define FMOD_EFFECT_TYPE_FADER 				( 7 )
#define FMOD_EFFECT_TYPE_FLANGE 			( 8 )
#define FMOD_EFFECT_TYPE_DISTORTION 		( 9 )
#define FMOD_EFFECT_TYPE_NORMALIZE 			( 10 )
#define FMOD_EFFECT_TYPE_LIMITER 			( 11 )
#define FMOD_EFFECT_TYPE_PARAMEQ 			( 12 )
#define FMOD_EFFECT_TYPE_PITCHSHIFT 		( 13 )
#define FMOD_EFFECT_TYPE_CHORUS 			( 14 )
#define FMOD_EFFECT_TYPE_VSTPLUGIN 			( 15 )
#define FMOD_EFFECT_TYPE_WINAMPPLUGIN 		( 16 )
#define FMOD_EFFECT_TYPE_ITECHO 			( 17 )
#define FMOD_EFFECT_TYPE_COMPRESSOR 		( 18 )
#define FMOD_EFFECT_TYPE_SFXREVERB 			( 19 )
#define FMOD_EFFECT_TYPE_LOWPASS_SIMPLE 	( 20 )
#define FMOD_EFFECT_TYPE_DELAY 				( 21 )
#define FMOD_EFFECT_TYPE_TREMOLO 			( 22 )
#define FMOD_EFFECT_TYPE_LAEFFECTAPLUGIN 	( 23 )
#define FMOD_EFFECT_TYPE_SEND 				( 24 )
#define FMOD_EFFECT_TYPE_RETURN 			( 25 )
#define FMOD_EFFECT_TYPE_HIGHPASS_SIMPLE 	( 26 )
#define FMOD_EFFECT_TYPE_PAN 				( 27 )
#define FMOD_EFFECT_TYPE_THREE_EQ 			( 28 )
#define FMOD_EFFECT_TYPE_FFT 				( 29 )
#define FMOD_EFFECT_TYPE_LOUDNESS_METER 	( 30 )
#define FMOD_EFFECT_TYPE_ENVELOPEFOLLOWER 	( 31 )
#define FMOD_EFFECT_TYPE_CONVOLUTIONREVERB  ( 32 )
#define FMOD_EFFECT_TYPE_CHANNELMIX 		( 33 )
#define FMOD_EFFECT_TYPE_TRANSCEIVER 		( 34 )
#define FMOD_EFFECT_TYPE_OBJECTPAN 			( 35 )
#define FMOD_EFFECT_TYPE_MULTIBAND_EQ 		( 36 )
	#define FMOD_EFFECT_MULTIBAND_EQ_FILTER_DISABLED 		( 0 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_12DB 	( 1 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_24DB 	( 2 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWPASS_48DB	( 3 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_12DB	( 4 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_24DB	( 5 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHPASS_48DB	( 6 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_LOWSHELF		( 7 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_HIGHSHELF		( 8 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_PEAKING		( 9 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_BANDPASS		( 10 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_NOTCH			( 11 )
	#define  FMOD_EFFECT_MULTIBAND_EQ_FILTER_ALLPASS		( 12 )
#define FMOD_EFFECT_TYPE_MAX 				( 37 )





shared class Sound : ISerializible
{
	string filename;
	UniqueIdentifier identifier;
	
	#ifdef __SERVER
	uint timeStart;
	#endif

	#ifdef __CLIENT
	FMODChannel@ channel;
	uint timePass; // time passed since start, recieved from server, local use only.
	#endif

	Sound( string filename )
	{
		#ifdef __CLIENT
		@this.channel = null;
		#endif
		this.filename = filename;
		this.identifier = UniqueIdentifier();
	}

	Sound( string filename, UniqueIdentifier identifier )
	{
		#ifdef __CLIENT
		@this.channel = null;
		#endif
		this.filename = filename;
		this.identifier = identifier;
	}

	void Serialize( Serializator &in serializer )
	{
		serializer.Set( this.filename );
		this.identifier.Serialize( serializer );
	}

	void Update(){} // virtual
}


// exports
#ifdef FOFMOD_NULL_API
shared FMODChannel@ FMOD_PlaySound(string@, const bool)
{
	return null;
}

shared class FMODEffect
{

}

shared class FMODSound
{
	uint GetLength()
	{
		return 0;
	}
}

shared class FMODChannel
{
	void SetEffect(FMODEffect@&)
	{
	
	}
	
	void Set3DLevel(const float)
	{
	
	}
	
	void Set3DMinMaxDistance(const float, const float)
	{
	
	}
	
	void SetPaused(const bool)
	{
	
	}
	
	void SetPitch(const float)
	{
	
	}
	
	void SetLoopCount(const int)
	{
	
	}
	
	void Set3DPosition(float, float, const float)
	{
	
	}
	
	bool IsValid()
	{
		return false;
	}
}
#endif

#ifndef FOFMOD_MODULE

	#ifdef __CLIENT
		import bool FOFMOD_Initialize() from 	"fofmod";
		import void FOFMOD_Test() from 			"fofmod";
		import void FOFMOD_TestSounds() from 	"fofmod";
		import void FOFMOD_Update() from 		"fofmod";
		// returns paused sound, unpause manually when needed.
		import FMODChannel@ FOFMOD_PlaySound( string& filename, uint16 hexX, uint16 hexY, uint minDistance, uint maxDistance ) from "fofmod";
		import FMODChannel@ FOFMOD_PlaySound( string& filename ) from "fofmod";
		import void __PlayWeaponSound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
		import void __PlaySound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
		
		import void IncrementSoundsVolume( int step ) from "fofmod";
		import void IncrementMusicVolume( int step ) from "fofmod";
	#endif

	import void CoordinatesHexToGrid(int x, int y, float &out ox, float &out oy) from "fofmod";
	
	#ifdef __SERVER
	
	
	#endif
	
#endif // FOFMOD_MODULE

#endif