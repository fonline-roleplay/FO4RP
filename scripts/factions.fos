# include "_utils.fos"
# define __MODULE_Fractions__
# include "Fractions.fosh"
# include "_global_events.fos"

import uint16 GetVersionWorldSave( ::string@ time ) from "main";

_Manager manager;

class DefaultRelation : IRelations
{
	DefaultRelation( string name, int value, IRelations@ down = null )
	{
		_name = name;
		if( down !is null )
		{
			DefaultRelation@ downdef = cast<DefaultRelation@>(down);
			if( downdef !is null )
				@downdef._up = this;
			@_down = down; 
		}
		@_down = down;
		@_up = null;
		_value = value;
	}

	string get_Name() { return _name; }
	int get_Value() { return _value; }
	
	private string _name;
	private int _value;
	
	IRelations@ _up;
	IRelations@ _down;
}

class _Manager : iManagerModule, iManager_world_save
{

	bool manager_init() override
	{
		DefaultRelation	war( 		"war", 		Relation_War ),
						dislike( 	"dislike", 	Relation_Dislike, war ),
						neutral( 	"neutral", 	Relation_Neutral, dislike ),
						like( 		"like", 	Relation_Like, neutral ),
						ally(		"ally", 	Relation_Ally, like );
		
		Relations.set( "war", @war );
		Relations.set( "dislike", @dislike  );
		Relations.set( "neutral", @neutral  );
		Relations.set( "like", @like  );
		Relations.set( "ally", @ally  );
		
		uint16 version = GetVersionWorldSave( null );
		
		if( version == 0 )
		{
			Log( "Init factions" );
			NpcFractionGeneration( );
		}
		else 
		{
			Log( "Load factions" );
			LoadFractions();
		}
		return true;
	}
	
	bool global_world_save() override
	{
	
		filesystem fs;
		file f;
		fs.deleteFile(".\\save\\fractions.bak");
		fs.move(".\\save\\fractions.fo", ".\\save\\fractions.bak");
		if( f.open("./save/fractions.fo", "w")!=0 )
		{
			return false;
		}
		
		for( uint i = 0, iend = List.length(); i < iend; i++ )
		{
			f.writeString( List[i].Serialize() + "\n" );
		}
		f.close();
		
		return true;
	}
	
	void LoadFractions() //exported
	{
		clear();
		uint start = GetTick();			
		LoadFractions( LoadFile("./save/fractions.fo" ) );
		Log("Loaded " + List.length() + " fractions in " + ( GetTick() - start ) + " milliseconds." );
	}
	
	private void LoadFractions( string@ txt )
	{
		if( txt is null )
			return;

		string@[] lines = splitEx( txt, "\n" );
		string@ currentLine = null;
		string@[]@ data = null, check = null;
		Fraction @fraction = null;
		int tempi = -1;
		uint tempu = 0, countLine = lines.length();
		string@ name = null;
		
		for( uint i = 0; i < countLine; i++ )
		{
			@currentLine = lines[i];
			if( currentLine is null || currentLine.length() == 0  )
				continue;
			if( currentLine[0] == '#' )
				continue;
			
			@data = splitEx( currentLine, "#" );
			if( data.length() > 1 )
				@currentLine = data[0];
			data = splitEx( currentLine, "=" );
			if( data.length() == 2 )
			{
				if( data[0] == "Fraction" )
				{
					set( fraction );
					@fraction = Fraction( clearstr( data[1] ) );
				}
				else if( fraction is null )
				{
					Log( "Error parse faction file, faction not valide <line:¹" + i + ":#" + currentLine + ">" );
				}
				else if( data[0] == "Players" )
				{
					@check = splitEx( data[1], " " );
					tempu = check.length();
					for( uint iPlayers = 0; iPlayers < tempu; iPlayers++ )
					{
						if( StrToInt( check[iPlayers], tempi ) )
							fraction.AddPlayer( tempi );
						else fraction.AddPlayer( GetStrHash( check[iPlayers] ) );
					}
				}
				else if( data[0] == "Stats" )
				{
					@check = splitEx( data[1], " " );
					tempu = check.length();
					for( uint j = 0; j < tempu; j++ )
					{
						StrToInt( check[j], tempi );
						fraction.Stats[j] = tempi;
					}
				}
				else if( substring( data[0], 0, 12 ) == "GameVariable" )
				{
					StrToInt( data[1], tempi );
					fraction.InitVariable( data[0], tempi );
				}
				else if( substring( data[0], 0, 8 ) == "Relation" )
				{
					data[1] = TRIM( data[1] );
					
					if( Relations.exists( data[1] ) )
					{
						IRelations@ relation = null;
						if( Relations.get( data[1], @relation ) )
						{
							fraction.SetRelation( data[0], @relation );
						}
					}
				}
			}
		}
		
		set( fraction );
	}
	
	private void set( Fraction @fraction )
	{
		if( fraction !is null )
		{
			Library.set( fraction.Name, fraction );
			List.insertLast(fraction);
			fraction.InitProccess = false;
			
			IRelations@ relation = null;
			if( Relations.get( "ally", @relation ) )
				fraction.SetRelation( "RelationFaction_" + fraction.Name, @relation );
			if( fraction.GetRelation( "RelationDefault" ) is null )
			{
				if( Relations.get( "neutral", @relation ) )
					fraction.SetRelation( "RelationDefault", @relation );
			}
		}
	}
	
	void Create( string name )
	{
		set( Fraction( clearstr( name ) ) );
	}

	private string@ LoadFile(string@ fileName)
	{
		file f;
		if(f.open(fileName, "r") != -1)
		{
			string txt = "";
			f.readString( f.getSize(), txt); 
			f.close();
			return @txt;
		}
		Log("Error loading factions! Can't open file.");
		return null;
	}
	
	private void clear()
	{
		List.resize(0);
		Library.deleteAll();
	}
	
	private void NpcFractionGeneration( )
	{
		const string ex_fraction_files = "fofraction";
		const uint exlength = ex_fraction_files.length();

		filesystem fs;
		fs.changeCurrentPath( fs.getCurrentPath() + "\\data\\NpcFractions\\" );
		string code = "";
		fs.getFiles( code );

		string@[] files = ::splitEx( code, "\n" );
		code = "";

		for( uint i = 0, iEnd = files.length(); i < iEnd; i++ )
		{
			auto fileName = files[i];
			if( fileName is null || fileName.length() <= exlength )
				continue;

			if( substring( fileName, fileName.length() - exlength, exlength ) == ex_fraction_files ) //.fofraction
				code += LoadFile( "./data/NpcFractions/" + fileName );
		}		
		LoadFractions( code );
	}
	
	dictionary Library;
	dictionary Relations;
	Fraction@[] List;
}

IRelations@ GetFractionRelation( Fraction @fraction, Critter@ other )
{
	if( valid( other ) )
	{
		IRelations@ relation = fraction.GetRelation( "RelationCritter_" + other.Name, false );
		if( valid( relation ) )
		{
			return relation;
		}
		
		return fraction.GetRelation( GetFraction( other ) );
	}
	
	return null;
}

void SetFractionRelation( Fraction @fraction, string key, string relation_name )
{
	IRelations@ relation;
	manager.Relations.get( relation_name, @relation );

	if( relation !is null && fraction !is null )
		fraction.SetRelation( key, relation);
}

void AddNpc( Critter& critter, int x, int y, int pid )
{
	int[] params = { ST_FACTION, GetStrHash( "Template" ) };
	critter.GetMap().AddNpc( pid, x, y, 0, params, null, null );
}

void ModuleInit( )
{
	manager_add_module( manager, "factions", 0);
}

uint GetId(string& name)
{
	if(!Exist(name)) return 0;
	return GetStrHash( name );
}

string@[] GetList(uint exclude)
{
	string@[] list;
	for( uint n=0, nMax=manager.List.length(); n<nMax; n++ )
	{
		if(manager.List[n].Id!=exclude)
			list.insertLast(@manager.List[n].Name);
	}
	return list;
}

//import string@[] GetList() from "factions";
string@[] GetList() //exported
{
	string@[] list = {};
	manager.Library.keys(list);
	return list;
}

//import uint[] GetIDs() from "factions";
uint[] GetIDs() //exported
{
	string@[] list = GetList();
	uint[] ids = {};
	for( uint i = 0; i < list.length(); i++ )
		ids.insertLast( GetId( list[i] ) );
	return ids;
}

Fraction@ GetFraction( Critter& critter )
{
	return GetFraction( critter.Stat[ST_FACTION]);
}

Fraction@ GetFraction(uint id)
{
	for(uint n=0; n<manager.List.length(); n++)
		if(manager.List[n].Id==id) return @manager.List[n];
	return null;
}

Fraction@ GetFraction(string& name)
{
	Fraction@ result;
	manager.Library.get( name, @result );
	return result;
}

string@ GetName(uint id)
{
	Fraction@ fr=GetFraction(id);
	if( fr is null ) return "";
	return fr.Name;
}

bool Exist( string& name)
{
	return manager.Library.exists(name);
}

void CorruptFaction( Critter& admin, int, int, int)
{
	Fraction@ fraction = GetFraction(admin.Stat[ST_FACTION]);
	fraction.Stats.resize(1);
}

void ReloadFactions( Critter& admin, int, int, int)
{
	manager.LoadFractions();
}

//import void CreateFraction( string& name ) from "factions";
void CreateFraction( string& name ) //exported
{
	manager.Create( name );
}

//import void AddFraction( string& name, uint leaderId) from "factions";
void AddFraction( string& name, uint leaderId) //exported
{
	if( leaderId != 0 )
	{
		Critter@ player=GetCritter(leaderId);
		if( @player !is null && !player.IsNotValid )
		{
			player.StatBase[ST_FACTION]=GetStrHash( name );
			player.StatBase[ST_FR_LEADERSHIP]=2;
		}
	}
	
	Fraction fraction(name);
	manager.List.insertLast(@fraction);
	if( leaderId != 0 )
		fraction.AddPlayer( leaderId );
	fraction.InitProccess = false;
	fraction.Stats[FR_POPULATION]++;
	manager.Library.set(name, leaderId);
}

void DeleteFraction(uint id)
{
	Fraction@ fraction = GetFraction(id);
	if( fraction is null ) return;
	manager.Library.delete( fraction.Name );
	fraction.Delete();
	uint index=0;
	int m = 0;
	for(uint n=0, nMax=manager.List.length(); n<nMax; n++)
	{
		@fraction = manager.List[n];
		if(fraction.Id==id)
		{
			index=n;
			continue;
		}
	}
	manager.List.removeAt(index);
}

uint[]@ GetPlayersByFraction(uint orgId)
{
	uint[] retArr;
	Fraction@ fraction = GetFraction(orgId);
	if( fraction !is null )
	{
		retArr = fraction.GetPlayers( );
		retArr.insertLast(orgId);
	}
	return retArr;
}

uint e_DeleteFraction( uint[]@ values )
{
	DeleteFraction(values[0]);
	return 0;
}

bool IdentifyPlayerFraction(Critter& critter )
{
	Fraction @fraction = GetFraction(critter.Stat[ST_FACTION]);
	if( fraction is null )
	{
		FractionLog( critter, fraction, "Player faction not found, removind data" );
		Dismiss( critter.Id );
		return false;
	}
	if( fraction.CheckCritter( critter.Id ) )
		return true;
	FractionLog( critter, fraction, "Player is not in a faction, getting kicked" );
	fraction.Dismiss(critter.Id);
	return false;
}

string@ clearstr( string&in str )
{
	uint len = str.length();
	while( 0 != len )
	{
		if( str[0] != ' ' )
			break;
		str = substring( str, 1, --len );
	}
	return str;
}

void unsafe_ListFactions( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		ListFactions( player, param0, param1, param2, param3, param4 );
}

void ListFactions( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	player.Say( SAY_NETMSG, "WIP" );
}