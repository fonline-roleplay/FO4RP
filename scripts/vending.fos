#ifndef VENDING
#define VENDING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "vending_h.fos"
#include "speed_h.fos"

void TransferItemToContainer( Item& item, Item& vendMach )
{
    uint16 pid = item.GetProtoId();
    _SubItem( item, 1 );
    vendMach.AddItem( pid, 1, 0 );
}

void TransferItemToContainer( Item& item, Item& vendMach, uint count )
{
    uint16 pid = item.GetProtoId();
    _SubItem( item, count );
    vendMach.AddItem( pid, count, 0 );
}

class MenuVendingMachine: CenteredMenuHandler
{
    uint vendMach_id;
    uint map_id;
	uint level;
	
    MenuVendingMachine( Item& vendMach, Map& map )
	{
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 0;
		
		if( !FLAG( vendMach.VENDING_MODE, IS_SELLING ) && !FLAG( vendMach.VENDING_MODE, IS_BUYING ) )
		{
			SETFLAG( vendMach.VENDING_MODE, IS_SELLING ); //default value on create
		}
	}

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap(map_id);
        if( !valid( map ) )
		{
            return false;
        }

        Item@ vendMach = GetItem(vendMach_id);
        if( !valid( vendMach ) )
		{
            return false;
        }
		
		for( uint i = 0, len = vendMach.MONEY_TYPE == 0 ? cash_pids.length() : 1; i < len; i++ )
		{
			uint16 pid = vendMach.MONEY_TYPE == 0 ? cash_pids[i] : PID_REAL_BOTTLE_CAPS;
			uint balance_change = vendMach.MONEY_TYPE == 0 ? int( cash_values[i] ) : 1;
			Item@ cash = cr.GetItem( pid, -1 );			

			if( menu.ButtonMsg( STR_DEVICE_INSERT_MONEY, "$balance_change" + balance_change ) )
			{
				if( valid( cash ) )
				{
					TransferItemToContainer(cash, vendMach);
					PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
					vendMach.BALANCE += balance_change;
					cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_INSERT_MONEY );
				}
				else if( cr.CountItem( PID_BOTTLE_CAPS ) >= balance_change )
				{
					@cash = cr.GetItem( PID_BOTTLE_CAPS, -1 );
					vendMach.BALANCE += balance_change;
					TransferItemToContainer(cash, vendMach, balance_change );
				}
				else
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				}
				return true;
			}
		}
		
		if( FLAG( vendMach.VENDING_MODE, IS_SELLING ) && menu.ButtonMsg( STR_VENDING_MENU_BTN_BUY ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			if( vendMach.BALANCE >= vendMach.SELLING_PRICE )
			{
				Item@[] productItm;
				if( vendMach.GetItems( uint( -1 ), productItm ) == 0 )
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
					return true;
				}
				
				Item@ bought = vendMach.GetItem( vendMach.PRODUCT, 0 );
				if( valid( bought ) )
				{
					if( bought.IsStackable() )
					{ 
						_SubItem( bought, 1 );
						cr.AddItem( vendMach.PRODUCT, 1 );
					}
					else
					{
						MoveItem( bought, 1, cr );
					}
					PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
					vendMach.BALANCE -= vendMach.SELLING_PRICE;
					cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_COLLECT_GOODS );
					return true;
				}
			}
			else
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
			
		}
		
		if( FLAG( vendMach.VENDING_MODE, IS_BUYING ) && menu.ButtonMsg( STR_VENDING_MENU_BTN_SELL ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			
			Item@ sold_item = cr.GetItem( vendMach.PRODUCT, -1 );
			if( !valid( sold_item ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
			
			MoveItem( sold_item, 1, vendMach, 0 );
			vendMach.BALANCE += vendMach.BUYING_PRICE;

			PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
			
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_SELLS );
			return true;
		}
		
		if( menu.ButtonMsg( STR_DEVICE_TAKE_CHANGE ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			uint16 pid = vendMach.MONEY_TYPE == 0 ? PID_BOTTLE_CAPS : PID_REAL_BOTTLE_CAPS;
			Item@ change = vendMach.GetItem( pid, 0 );
			if( valid( change ) && vendMach.BALANCE > 0 )
			{
				int changeCount = MIN( int( change.GetCount() ), vendMach.BALANCE );
				_SubItem( change, uint( changeCount ) );
				cr.AddItem( pid, changeCount );
				vendMach.BALANCE -= changeCount;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_COLLECTS_CHANGE );
				return false;
			}
			else
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
		}
		
		if(vendMach.MONEY_TYPE != 1)
		{
			Item@ handItem = _CritGetItemHand(cr);
			if((valid(handItem) && handItem.GetProtoId() == PID_MULTI_TOOL) && menu.ButtonMsg(STR_CHANGE_MONEY_TYPE))
			{
				start_money_type(cr, vendMach);
				return false;
			}
		}

		if( !FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) )
		{
			Item@[] productItm;
			vendMach.GetItems( uint( -1 ), productItm );
			if( productItm.length() > 0 )
			{
				if( menu.ButtonMsg( STR_VENDING_MENU_SELECT_ITEM ) )
				{
					MenuSelectProduct@ select_product = MenuSelectProduct( vendMach, map );
					select_product.level = level + 1;
					return menu.OpenChild( "Level " + select_product.level, select_product );
				}
			}
			else
				if( menu.ButtonMsg( STR_VENDING_MENU_NO_ITEMS ) )
					return true;
			
			if( FLAG( vendMach.VENDING_MODE, IS_SELLING ) && menu.ButtonMsg( STR_VENDING_MENU_SELLING_PRICE ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				int[] data = {0};
				cr.RunClientScript( "client_screen_numberpad@ShowScreen", vendMach.Id, 0, 0, "Set selling price", data );
				return false;
			}
			
			if( FLAG( vendMach.VENDING_MODE, IS_BUYING ) &&menu.ButtonMsg( STR_VENDING_MENU_BUYING_PRICE ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				int[] data = {0};
				cr.RunClientScript( "client_screen_numberpad@ShowScreen", vendMach.Id, 1, 0, "Set buying price", data );
				return false;
			}
			
			int[] mode_names = { STR_VENDING_MENU_MODE_SELL, STR_VENDING_MENU_MODE_BUY, STR_VENDING_MENU_MODE_EXCHANGE };
			int mode_max = mode_names.length() - 1;
			int mode  = CLAMP( vendMach.VENDING_MODE - 1, 0, mode_max );
			
			if( menu.ButtonMsg( STR_VENDING_MENU_SET_MODE, "$mode" + STR_INSERT_TEXT_LINE( mode_names[mode] ) ) )
			{
				vendMach.VENDING_MODE = ( mode + 1 ) % ( mode_max + 1 ) + 1;				
				return true;
			}

			if( locked_in_place( vendMach ) )
			{
				if( menu.ButtonMsg( STR_FURNITURE_MENU_DETACH ) )
				{
					LockInPlace( cr, vendMach );
					return true;
				}
			}
			else
			{
				if( menu.ButtonMsg( STR_FURNITURE_MENU_ANCHOR ) )
				{
					LockInPlace( cr, vendMach );
					return true;
				}

				if( menu.ButtonMsg(STR_FURNITURE_MENU_PICKUP ) )
				{
					PickItem( cr, vendMach );
					ChangeCritterSpeed( cr );
					return false;
				}			
			}
		}

		if( menu.ButtonMsg( STR_FURNITURE_MENU_OPEN_SAFE ) )
		{
			if( FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MACHINE_LOCKED );
				PlayGenericSound( map, cr.HexX, cr.HexY, "ILCNTNRB.mp3", 15 );
				return true;
			}
			else
			{
				ShowContainer( cr, vendMach, TRANSFER_HEX_CONT_UP );
				PlayGenericSound( map, cr.HexX, cr.HexY, "keys.ogg", 6 );
				PlayGenericSound( map, cr.HexX, cr.HexY, "IOCNTNRB.mp3", 15 );
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_OPENS_MACHINE );
				return false;
			}
        }

		if( menu.ButtonMsg( STR_CLOSE_MENU_BUTTON ) )
		{
			return false;
		}
		
		return true;
    }
	
   int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_VENDING_MENU_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
		Item@ vendMach = GetItem( vendMach_id );
		string lex = "$descriptionID" + STR_INSERT_TEXT_LINE( STR_VENDING_MENU_DESCR_ID )
				   + "$ID" + vendMach.Id;
		
		lex += "$merchandise";
		uint itemPID = vendMach.PRODUCT;
		if( itemPID != 0 )
		{
			lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_GOODS_INFO )
				+ "$goods" + STR_INSERT_ITEM_LINE( itemPID * 100 );
			
			lex += "$lexCount";
			uint count = CountItemsByPID( vendMach, itemPID );
			if( count == 0 )
				lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_SOLD_OUT );
			else
				lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_LEX_COUNT )
					+ "$count" + count;
			
			lex += "$selling";
			if( FLAG( vendMach.VENDING_MODE, IS_SELLING ) )
			{
				lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_PRICE_DESC ) 
					+ "$sellingPrice" + vendMach.SELLING_PRICE;
			}
			
			lex += "$buying";
			if( FLAG( vendMach.VENDING_MODE, IS_BUYING ) )
			{
				lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_PURCHACE_DESC ) 
					+ "$byingPrice" + vendMach.BUYING_PRICE;
			}
		}
		else
		{
			lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_EMPTY );
		}
		
		int[] action_name = { STR_VENDING_MENU_STR_MONEY, STR_VENDING_MENU_STR_GOODS, STR_VENDING_MENU_STR_MONEY_OR_GOODS };
		uint mode = CLAMP( uint( vendMach.VENDING_MODE - 1 ), 0, action_name.length() - 1 );
		lex += "$wares" + STR_INSERT_TEXT_LINE( action_name[mode] );
		
		lex += "$balance" + vendMach.BALANCE;

		lex += "$change";
		if( CountItemsByPID( vendMach, PID_BOTTLE_CAPS ) == 0 )
			lex += STR_INSERT_TEXT_LINE( STR_VENDING_MENU_NO_CHANGE );
		
        return lex;
    }

	bool ShouldRedraw( Critter& cr )
	{
		Item@ vendMach = GetItem(vendMach_id);
		return valid( vendMach ) && GetDistantion( cr.HexX, cr.HexY, vendMach.HexX, vendMach.HexY ) < 2;
    }	
}

void StartMenuVendingMachine( Critter& cr, Item& vendMach )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuVendingMachine( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Vending Machine", handler );
}

class MenuSelectProduct: CenteredMenuHandler
{
    uint vendMach_id;
    uint map_id;
	uint level;
	int selectorPos;
	uint arrayPos;
	
    MenuSelectProduct( Item& vendMach, Map& map )
	{
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 1;
		selectorPos = 0;
		arrayPos = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ vendMach = GetItem( vendMach_id );
		
        if( map is null || vendMach is null )
		{
            return false;
        }
			
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		
		if( productItm.length() > 0 )
		{
			if ( menu.ButtonMsg( STR_PREVIOUS ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				selectorPos--;
				if( arrayPos == 0 )
				{
					arrayPos = productItm.length() - 1;
					selectorPos = arrayPos;
				}
				else
				{
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.ButtonMsg( STR_NEXT ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				selectorPos++;
				if( arrayPos == productItm.length() -1 )
				{
					arrayPos = 0;
					selectorPos = arrayPos;
				}
				else
				{
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.ButtonMsg( STR_CONFIRM ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_SELECTS_ITEM );
				return false;
			}
		}
		return true;
    }

   int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_VENDING_MENU_SELECT_MERCH_MAIN;
	}

    string@ Description( Critter& cr )
	{	
		Item@ vendMach = GetItem( vendMach_id );
		string lex = "$descriptionID" + STR_INSERT_TEXT_LINE( STR_VENDING_MENU_DESCR_ID )
			   + "$ID" + vendMach.Id;
		
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		if( productItm.length() > 0 && vendMach.PRODUCT != 0 )
		{
			uint len = productItm.length();
			uint amount = 0;
			for( uint i = 0; i < len; i++ )
			{			
				Item@ product = productItm[i];
				if( product.GetProtoId() == uint( vendMach.PRODUCT ) )
				{
					if( product.IsStackable() )
					{
						amount = productItm[i].GetCount();
					}
					else
					{
						uint count = 1;
						Item@ countItems = null;
						for( uint j = i + 1; j < len; j ++ )
						{
							@countItems = productItm[j];
							if( countItems.GetProtoId() == uint( vendMach.PRODUCT ) )
							{
								count ++;
							}
						}
						amount = count;
					}
					break;
				}
			}
			
			lex += "$merch" + STR_INSERT_ITEM_LINE( vendMach.PRODUCT * 100 )
				+  "$amount" + amount;
		}
		else
			lex += "$merch" + STR_INSERT_TEXT_LINE( STR_VENDING_MENU_EMPTY )
				+  "$amount" + STR_INSERT_TEXT_LINE( STR_VENDING_MENU_SOLD_OUT );
	
		return lex;
	}	
}

void StartMenuSelectProduct( Critter& cr, Item& vendMach )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuSelectProduct( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Vending machine", handler );
}

bool ltp_inited=false;

void ltp_init()
{
    LTPREG( LTP_MONEY_TYPE, process_money_type )

    ltp_inited=true;
}

bool start_money_type(Critter& cr, Item& vending)
{
	if(!ltp_inited)
	{
		ltp_init();
	}

	if(!valid(cr) || !valid(vending))
	{
		return false;
	}

	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint cracking_rate = cr.Skill[ SK_LOCKPICK ] + ( cr.Stat[ ST_STRENGTH ] * 10 ) + OBJECT_DPA_BASE; 
	cr.ParamBase[ ST_LTP_SEQUENCE ] = uint( ceil( float( ( OBJECT_HP_BASE ) / ( CLAMP( cracking_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) ) );

	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
	StartProcess(cr, LTP_MONEY_TYPE, 0, vending.Id, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ]);
	return true;
}

uint process_money_type( Critter@ cr, int& param0, int& vendId, int& param2 )
{
    LTPROCESS( cr, param0, LTP_MONEY_TYPE )

	Item@ vending = GetItem( vendId );

    if(valid(vending))
	{
		param0++;

		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			vending.MONEY_TYPE = 1;
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}

		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}

	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	return 0;
}

#endif // VENDING