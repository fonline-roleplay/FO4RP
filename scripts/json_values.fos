/******************************************************************************
 *                                                                            *
 *  JSON VALUE CLASSES                                                        *
 *                                                                            *
 ******************************************************************************/

JSON@ undefined;

class Value : JSON
{
    bool isUndefined()                 { return false; }
    bool isNull()                      { return false; }
    bool isBoolean()                   { return false; }
    bool isString()                    { return false; }
    bool isNumber()                    { return false; }
    bool isObject()                    { return false; }
    bool isArray()                     { return false; }

    JSON@ opShr(bool& value)                 { return this; }
    JSON@ opShr(string& value)               { return this; }
    JSON@ opShr(int8& value)                 { return this; }
    JSON@ opShr(int16& value)                { return this; }
    JSON@ opShr(int32& value)                { return this; }
    JSON@ opShr(int64& value)                { return this; }
    JSON@ opShr(uint8& value)                { return this; }
    JSON@ opShr(uint16& value)               { return this; }
    JSON@ opShr(uint32& value)               { return this; }
    JSON@ opShr(uint64& value)               { return this; }
    JSON@ opShr(float& value)                { return this; }
    JSON@ opShr(double& value)               { return this; }
    JSON@ opShr(array<bool>& value)          { return this; }
    JSON@ opShr(array<string>& value)        { return this; }
    JSON@ opShr(array<string@>& value)       { return this; }
    JSON@ opShr(array<int8>& value)          { return this; }
    JSON@ opShr(array<int16>& value)         { return this; }
    JSON@ opShr(array<int32>& value)         { return this; }
    JSON@ opShr(array<int64>& value)         { return this; }
    JSON@ opShr(array<uint8>& value)         { return this; }
    JSON@ opShr(array<uint16>& value)        { return this; }
    JSON@ opShr(array<uint32>& value)        { return this; }
    JSON@ opShr(array<uint64>& value)        { return this; }
    JSON@ opShr(array<float>& value)         { return this; }
    JSON@ opShr(array<double>& value)        { return this; }

    JSON@ opShl(const bool value)            { return this; }
    JSON@ opShl(const string& value)         { return this; }
    JSON@ opShl(const int8 value)            { return this; }
    JSON@ opShl(const int16 value)           { return this; }
    JSON@ opShl(const int32 value)           { return this; }
    JSON@ opShl(const int64 value)           { return this; }
    JSON@ opShl(const uint8 value)           { return this; }
    JSON@ opShl(const uint16 value)          { return this; }
    JSON@ opShl(const uint32 value)          { return this; }
    JSON@ opShl(const uint64 value)          { return this; }
    JSON@ opShl(const float value)           { return this; }
    JSON@ opShl(const double value)          { return this; }
    JSON@ opShl(const array<bool>& value)    { return this; }
    JSON@ opShl(const array<string>& value)  { return this; }
    JSON@ opShl(const array<string@>& value) { return this; }
    JSON@ opShl(const array<int8>& value)    { return this; }
    JSON@ opShl(const array<int16>& value)   { return this; }
    JSON@ opShl(const array<int32>& value)   { return this; }
    JSON@ opShl(const array<int64>& value)   { return this; }
    JSON@ opShl(const array<uint8>& value)   { return this; }
    JSON@ opShl(const array<uint16>& value)  { return this; }
    JSON@ opShl(const array<uint32>& value)  { return this; }
    JSON@ opShl(const array<uint64>& value)  { return this; }
    JSON@ opShl(const array<float>& value)   { return this; }
    JSON@ opShl(const array<double>& value)  { return this; }

    bool hasProperty(const string& key)              { return false; }
    void setProperty(const string& key, JSON@ value) { return; }
    array<string> getKeys()                     { array<string> k; return k; }
    JSON@ opIndex(const string& key)            { return @undefined; }
    void forEach(JSONForEachKey@ callback)      { return; }
    void forEach(JSONForEachKeyAll@ callback)   { return; }

    uint length()                               { return 0; }
    void push(JSON@ value)                      { return; }
    JSON@ opIndex(const uint index)             { return @undefined; }
    void forEach(JSONForEachIndex@ callback)    { return; }
    void forEach(JSONForEachIndexAll@ callback) { return; }

    string@ stringify()
    {
        return Stringify(this, "", "");
    }

    string@ stringify(uint space)
    {
        if (space > 10) space = 10;
        return Stringify(this, indent[space], "");
    }

    string@ stringify(const string& space)
    {
        string str = substring(space, 0, 10);
        for (uint i = 0, j = str.length(); i < j; i++)
        {
            if (!_IsWhitespace(_CharGet(str, i)))
            {
                Log("Indents can contain only whitespace characters.");
                return "";
            }
        }
        return Stringify(this, str, "");
    }

    bool save(const string& path)
    {
        if (this.isUndefined())
        {
            return false;
        }
        file f;
        if (f.open(path, "w") == 0)
        {
            string@ text = Stringify(this, "  ", "");
            return (uint(f.writeString(text)) == _CharLength(text));
        }
        return false;
    }
}

final class Undefined : Value
{
    bool isUndefined()
    {
        return true;
    }
}

final class Null : Value
{
    bool isNull()
    {
        return true;
    }
}

final class Boolean : Value
{
    private bool value;

    Boolean(bool value)
    {
        this.value = value;
    }

    bool isBoolean()
    {
        return true;
    }

    JSON@ opShr(bool& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const bool value)
    {
        this.value = value;
        return this;
    }
}

final class Number : Value
{
    private double value;

    Number(int8 value)   { this.value = value; }
    Number(int16 value)  { this.value = value; }
    Number(int32 value)  { this.value = value; }
    Number(int64 value)  { this.value = value; }
    Number(uint8 value)  { this.value = value; }
    Number(uint16 value) { this.value = value; }
    Number(uint32 value) { this.value = value; }
    Number(uint64 value) { this.value = value; }
    Number(float value)  { this.value = value; }
    Number(double value) { this.value = value; }

    bool isNumber()
    {
        return true;
    }

    JSON@ opShr(int8& value)   { value = int8(this.value); return this; }
    JSON@ opShr(int16& value)  { value = int16(this.value); return this; }
    JSON@ opShr(int32& value)  { value = int32(this.value); return this; }
    JSON@ opShr(int64& value)  { value = int64(this.value); return this; }
    JSON@ opShr(uint8& value)  { value = uint8(this.value); return this; }
    JSON@ opShr(uint16& value) { value = uint16(this.value); return this; }
    JSON@ opShr(uint32& value) { value = uint32(this.value); return this; }
    JSON@ opShr(uint64& value) { value = uint64(this.value); return this; }
    JSON@ opShr(float& value)  { value = float(this.value); return this; }
    JSON@ opShr(double& value) { value = this.value; return this; }

    JSON@ opShl(const int8 value)   { this.value = value; return this; }
    JSON@ opShl(const int16 value)  { this.value = value; return this; }
    JSON@ opShl(const int32 value)  { this.value = value; return this; }
    JSON@ opShl(const int64 value)  { this.value = value; return this; }
    JSON@ opShl(const uint8 value)  { this.value = value; return this; }
    JSON@ opShl(const uint16 value) { this.value = value; return this; }
    JSON@ opShl(const uint32 value) { this.value = value; return this; }
    JSON@ opShl(const uint64 value) { this.value = value; return this; }
    JSON@ opShl(const float value)  { this.value = value; return this; }
    JSON@ opShl(const double value) { this.value = value; return this; }
}

final class String : Value
{
    private string value;

    String(const string& value)
    {
        this.value = value;
    }

    bool isString()
    {
        return true;
    }

    uint length()
    {
        return value.length();
    }

    JSON@ opShr(string& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const string& value)
    {
        this.value = value;
        return this;
    }
}

final class Object : Value
{
    private dictionary properties;
    private array<string>keys;

    bool isObject()
    {
        return true;
    }

    bool hasProperty(const string& key)
    {
        return this.properties.exists(key);
    }

    void setProperty(const string& key, JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        if (!this.properties.exists(key))
        {
            keys.insertLast(key);
        }
        properties.set(key, @value);
    }

    array<string> getKeys()
    {
        return this.keys;
    }

    void forEach(JSONForEachKey@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i++)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i]);
        }
    }
    void forEach(JSONForEachKeyAll@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i++)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i], this);
        }
    }

    JSON@ opIndex(const string& key)
    {
        if (this.hasProperty(key))
        {
            JSON@ value;
            properties.get(key, @value);
            return @value;
        }
        else
        {
            return @undefined;
        }
    }
}

final class Array : Value
{
    private array<JSON@> elements;

    bool isArray()
    {
        return true;
    }

    #define _RetrieveArray #(_type, _isType, _init)                            \
    JSON@ opShr(array<_type>& retrieve)                                        \
    {                                                                          \
        for (uint i = 0, j = this.elements.length(); i < j; i++)               \
        {                                                                      \
            if (this.elements[i]._isType())                                    \
            {                                                                  \
                _type value = _init;                                           \
                this.elements[i] >> value;                                     \
                retrieve.insertLast(value);                                    \
            }                                                                  \
                                                                               \
        }                                                                      \
        return this;                                                           \
    }

    _RetrieveArray(bool, isBoolean, false);
    _RetrieveArray(string, isString, "");
    _RetrieveArray(string@, isString, "");
    _RetrieveArray(int8, isNumber, 0);
    _RetrieveArray(int16, isNumber, 0);
    _RetrieveArray(int32, isNumber, 0);
    _RetrieveArray(int64, isNumber, 0);
    _RetrieveArray(uint8, isNumber, 0);
    _RetrieveArray(uint16, isNumber, 0);
    _RetrieveArray(uint32, isNumber, 0);
    _RetrieveArray(uint64, isNumber, 0);
    _RetrieveArray(float, isNumber, 0);
    _RetrieveArray(double, isNumber, 0);

    #define _StoreArray #(_type, _JSONType)                                    \
    JSON@ opShl(const array<_type>& store)                                     \
    {                                                                          \
        for (uint i = 0, j = store.length(); i < j; i++)                       \
        {                                                                      \
            this.push(_JSONType(store[i]));                                    \
        }                                                                      \
        return this;                                                           \
    }                                                                          \

    _StoreArray(bool, Boolean);
    _StoreArray(string, String);
    _StoreArray(string@, String);
    _StoreArray(int8, Number);
    _StoreArray(int16, Number);
    _StoreArray(int32, Number);
    _StoreArray(int64, Number);
    _StoreArray(uint8, Number);
    _StoreArray(uint16, Number);
    _StoreArray(uint32, Number);
    _StoreArray(uint64, Number);
    _StoreArray(float, Number);
    _StoreArray(double, Number);


    uint length()
    {
        return this.elements.length();
    }

    void push(JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        this.elements.insertLast(@value);
    }

    void forEach(JSONForEachIndex@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i++)
        {
            callback(elements[i], i);
        }
    }
    void forEach(JSONForEachIndexAll@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i++)
        {
            callback(elements[i], i, this);
        }
    }

    JSON@ opIndex(const uint index)
    {
        if (index < this.elements.length())
        {
            return this.elements[index];
        }
        else
        {
            return @undefined;
        }
    }
}

JSON@ JSONNull()               { return @Null(); }
JSON@ JSONBoolean(bool value)  { return @Boolean(value); }
JSON@ JSONNumber(int8 value)   { return @Number(value); }
JSON@ JSONNumber(int16 value)  { return @Number(value); }
JSON@ JSONNumber(int32 value)  { return @Number(value); }
JSON@ JSONNumber(int64 value)  { return @Number(value); }
JSON@ JSONNumber(uint8 value)  { return @Number(value); }
JSON@ JSONNumber(uint16 value) { return @Number(value); }
JSON@ JSONNumber(uint32 value) { return @Number(value); }
JSON@ JSONNumber(uint64 value) { return @Number(value); }
JSON@ JSONNumber(float value)  { return @Number(value); }
JSON@ JSONNumber(double value) { return @Number(value); }
JSON@ JSONString(string value) { return @String(value); }
JSON@ JSONObject()             { return @Object(); }
JSON@ JSONArray()              { return @Array(); }
