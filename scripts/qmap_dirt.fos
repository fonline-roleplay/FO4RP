#include "_utils.fos"
#include "qmap_defines.fos"

// Export:
// import uint8 checkDirt(Map& map, uint16 tx, uint16 ty) from "qmap_dirt";
// import bool checkDirt(Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty) from "qmap_dirt";
// import bool checkDirt(Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty, bool fromNtoE) from "qmap_dirt";

// import uint[][]@ GetdirtHashes() from "qmap_dirt";
// import uint RandomdirtHash() from "qmap_dirt";

bool hashes_inited = false;

uint[][] hashes_dirt( HASHES_DIRT_MAX );

void init_hashes()
{
    string dir = "art/tiles/";
    string gscon0 = "fondt00";
    string frm = ".frm";

    for( uint type = 0; type < HASHES_DIRT_MAX; type++ )
    {
        uint[] @ data = hashes_dirt[ type ];
        data.resize( 0 );

        switch( type )
        {
			case( HASHES_DIRT ):
			{
				for( uint i = 1; i <= 66; i++ )
				{
					data.insertLast( GetStrHash( dir + gscon0 + i + frm ) );
				}
				break;
			}
			default:
				break;
        }
    }
    hashes_inited = true;
}

uint[][] @ GetdirtHashes() // Export
{
    if( !hashes_inited )
	{
        init_hashes();
	}
    return hashes_dirt;
}

uint RandomdirtHash() //Export
{
    if( !hashes_inited )
	{
        init_hashes();
	}
	uint[] @ source = hashes_dirt[ Random( 0, HASHES_DIRT_MAX - 1 ) ];
	return source[ Random( 0, source.length() - 1 ) ];
}

#ifdef __SERVER
void test_hashes( Critter& player, int var, int con, int param2 )
{
    bool ck = true;

    uint[] @ data = null;

    for( uint i = 0; i < HASHES_DIRT_MAX; i++ )
    {
        @data = hashes_dirt[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( data[ k ] != 0 )
			{
                continue;
            }
			ck = false;
            player.Say( SAY_NETMSG, "In array #" + i + " hash #" + k + " is null" );
        }
    }
    if( ck )
	{
        player.Say( SAY_NETMSG, "OK." );
	}
}

uint8 checkDirt( Map& map, uint16 tx, uint16 ty ) // Export
{
    if( !hashes_inited )
	{
        init_hashes();
	}
	
    uint hash = map.GetTile( tx, ty );
    if( hash == 0 )
	{
        return 0;
	}
	
    uint[] @ data = null;
    uint8 answer = 0;

    for( uint i = 0; i < HASHES_DIRT_MAX; i++ )
    {
        @data = hashes_dirt[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( hash != data[ k ] )
			{
                continue;
            }
			answer |= ( ( 0x01 ) << i );
            return answer;
        }
    }
    return 0;
}

bool checkDirt( Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty )    // Export
{
    return checkDirt( map, from_tx, from_ty, to_tx, to_ty, true );
}

bool checkDirt( Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty, bool fromNtoE ) // Export
{
    if( !hashes_inited )
	{
        init_hashes();
	}
	
    int lenY = ( to_ty - from_ty );
	int lenX = ( to_tx - from_tx );

    if( lenX == 0 && lenY == 0 )
	{
        return false;
	}
	
    int signX, signY;
	if( lenX >= 0 )
	{
		signX = 1;
	}
	else
	{
		signX = -1;
	}
	
	if( lenY >= 0 )
	{
		signY = 1;
	}
	else
	{
		signY = -1;
	}
	
	uint hash = 0;
	uint lenA = 0;
	uint lenB = 0;

    if( fromNtoE )
    {
        lenA = uint( abs( lenX ) + 1 );
        lenB = uint( abs( lenY ) + 1 );
    }
    else
    {
        lenB = uint( abs( lenX ) + 1 );
        lenA = uint( abs( lenY ) + 1 );
    }

    bool ck = true;

    for( int y = 0; y < int( lenA ); y++ )
    {
        for( int x = 0; x < int( lenB ); x++ )
        {
            if( fromNtoE )
			{
                hash = map.GetTile( from_tx + ( signX * y ), from_ty + ( signY * x ) );
			}
            else
			{
                hash = map.GetTile( from_tx + ( signX * x ), from_ty + ( signY * y ) );
            }
			
			if( hash == 0 )
			{
                return false;
			}
			
            ck = true;
			
            for( uint i = 0; ck && i < HASHES_DIRT_MAX; i++ )
            {
                for( uint k = 0, len = hashes_dirt[ i ].length(); ck && k < len; k++ )
                {
                    if( hash != hashes_dirt[ i ][ k ] )
					{
                        continue;
					}
					
                    ck = false;
                }
            }
            if( ck )
			{
                return false;
			}
        }
    }
    return true;
}
#endif // __SERVER
