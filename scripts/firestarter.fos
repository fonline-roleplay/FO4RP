#ifndef FIRESTARTER
#define FIRESTARTER

#include "_utils.fos"
#include "firestarter_h.fos"
#include "explode_h.fos"
#include "combat_h.fos"
#include "cooking_h.fos"
#include "npc_planes_h.fos"
#include "speed_h.fos"
#include "furnace_h.fos"
#include "waterworks_h.fos"
#include "bootlegging_h.fos"

import uint8 checkWoodFloor( Map& map, uint16 tx, uint16 ty ) from "qmap_wooden";
import uint8 checkCarpet(Map& map, uint16 tx, uint16 ty) from "qmap_carpet";

bool FireCheck( Critter& cr, Item@ item, Item@ target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( item ) || !valid(target) )
	{
		return false;
	}
	
	uint16 firePid = target.GetProtoId();
    if(	FireSource.find( firePid ) == -1 && FireLightSource.find( firePid ) == -1 )
	{
		return false;
	}

	if(	( item.GetProtoId() == PID_SHOVEL || item.GetProtoId() == PID_SPADE ) && firePid == PID_FIREPLACE_OFF )
	{
 		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_REMOVE_ASH );
		DeleteItem( target );
		return true;
	}
	
	uint16 itemPid = item.GetProtoId();
    if( FireFuel.find( itemPid ) == -1 && Igniters.find( itemPid ) == -1 && WaterSource.find( itemPid ) == -1 && item.Proto.Type != ITEM_TYPE_FLASK )
	{
		BurnIt( cr, item, target );
		return true;
	}
	
	if( Igniters.find( itemPid )!= -1 )
	{
		Ignite( cr, item, target );
		return true;
	}
	
	if( WaterSource.find( itemPid ) != -1 || item.Proto.Type == ITEM_TYPE_FLASK )
	{
		Extinguish( cr, item, target );
		return true;
	}
	
	FeedTheFire( cr, item, target );
	return true;
}

bool Ignite( Critter& cr, Item& item, Item& target )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( target.STATE == STATE_BURNING )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FIRE_ALREADY_BURNING );
		return false;
	}
	
	if( target.CURRENT_FUEL == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL );
		return false;
	}
	
	EraseTimeEvent( target.FIRE_EVENT );
	target.FIRE_EVENT = 0;
	
	if( target.STATE == STATE_EXTINGUISHED && target.CURRENT_FUEL > 0 )
	{
		target.STATE = STATE_BURNING;
		
		_CritAnimateUse(cr);
		
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_IGNITE_FIRE );
		switch( target.GetProtoId() )
		{
			case( PID_FIREBARREL ):
				target.PicMap = PIC_BARREL_ANIM_ON;
				break;
			case( PID_BRAZIER ):
				target.PicMap = PIC_CHANDELIER_ANIM_ON;
				break;
			case( PID_COAL_POWERGEN ):
				target.PicMap = PIC_COAL_POWERGEN_ANIM_ON;
				break;
			case( PID_FURNACE_SMALL ):
				target.PicMap = PIC_FURNACE_ANIM_ON;
				break;
			case( PID_STILL_S ):
				target.PicMap = PIC_STILL_ANIM_ON;
				break;
			default:
			{
				target.ChangeProto( PID_FIREPLACE2 );
				ProtoItem@ proto = GetProtoItem( PID_FIREPLACE2 );
				target.PicMap = proto.PicMap;
				break;
			}
		}
		
		target.SetEvent( ITEM_EVENT_WALK, "e_Hot" );
		setAnimState( target );
		uint[] values = {target.Id};
		target.FIRE_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_Burn", values, true );
		
		uint16 hx = target.HexX, hy = target.HexY;
		Item@[] itemsInFire;
		map.GetItems( target.HexX, target.HexY, itemsInFire );
		for( uint i = 0, len = itemsInFire.length(); i < len; i++ )
		{
			FireUp( itemsInFire[i], _GetOneRandom( WildFires ), 1 );
		}
		
		itemsInFire.resize(0);
	}
	
	return true;
}

bool Extinguish( Critter& cr, Item& item, Item& target )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
    }
	
	if( !valid( item ) )
	{
		return false;
	}
	
	if( !valid( target ) )
	{
		return false;
	}
	
	uint16 itemPid = item.GetProtoId();
	uint16 targetPid = target.GetProtoId();
	uint16 tx = target.HexX, ty = target.HexY;
	
	if( WaterSource.find( itemPid ) != -1 )
	{
		if( item.REMAINING_USES == 1 )
		{
			_SubItem( item, 1 );
			cr.AddItem( PID_BOTTLE_GLASS, 1 );
		}
		else
		{
			item.REMAINING_USES --;
			item.EXTRA_WEIGHT = item.REMAINING_USES * 100;
		}
	}
	
	if( item.Proto.Type == ITEM_TYPE_FLASK && item.REMAINING_USES > 0 )
	{	
		item.REMAINING_USES --;
		item.EXTRA_WEIGHT = item.REMAINING_USES * 100;
		
		if( item.REMAINING_USES == 0 )
		{ 
			item.DNA = 0;
			item.EXTRA_WEIGHT = 0;
			
			if( itemPid == PID_FLASK_FULL )
			{
				item.ChangeProto( PID_FLASKB );
			}
		}
	}
	else if( item.REMAINING_USES == 0 )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLASK_EMPTY ); 
		return false; 
	}
	
	item.Update();
		
	if( target.STATE == STATE_EXTINGUISHED && target.CURRENT_FUEL >= 0 )
	{
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_POUR_WATER );
		PlayGenericSound( map, tx, ty, "splash.ogg", 10 );
		if( target.CURRENT_FUEL == 0 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WASTED_WATER );
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WASTED_FIREFUEL );
			target.CURRENT_FUEL = MAX( target.CURRENT_FUEL - Random( 1800, 5400 ), 0 );
		}
		
		return false;
	}
	
	if( target.STATE >= STATE_BURNING )
	{
		target.STATE = STATE_EXTINGUISHED;
		target.CURRENT_FUEL = MAX( target.CURRENT_FUEL - Random( 1800, 5400 ), 0 );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_EXTINQUISH );
		PlayGenericSound( map, tx, ty, "STEAM1.mp3", 10 );
		ProtoItem@ proto = null;
		
		if( targetPid == PID_FIREBARREL )
		{
			if( target.CURRENT_FUEL > 0 )
			{
				target.PicMap = PIC_BARREL_FULL;
			}
			else
			{
				@ proto = GetProtoItem( PID_FIREBARREL );
				target.PicMap = proto.PicMap;
			}
		}
		else if( targetPid == PID_BRAZIER )
		{
			@ proto = GetProtoItem( PID_BRAZIER );
			target.PicMap = proto.PicMap;
		}
		else if( targetPid == PID_COAL_POWERGEN )
		{
			@ proto = GetProtoItem( PID_COAL_POWERGEN );
			target.PicMap = proto.PicMap;
			
			Item@[] electrics;
			map.GetItems( PID_OBJECT_WATERPUMP, electrics );
			map.GetItems( PID_CRUSHER_2000, electrics );

			if( electrics.length() > 0 )
			{
				Item@ electric = electrics[ 0 ];
				if( valid( electric ) )
				{
					electric.STATE = STATE_OFF;
					setAnimState( electric );				
				}
			}
			
			electrics.resize(0);
		}
		else if( targetPid == PID_FURNACE_SMALL )
		{
			@ proto = GetProtoItem( PID_FURNACE_SMALL );
			target.PicMap = proto.PicMap;
			FurnaceStage( target );
		}
		else if( targetPid == PID_STILL_S )
		{
			@ proto = GetProtoItem( PID_STILL_S );
			target.PicMap = proto.PicMap;
			StillStage( target );
		}
		else if( targetPid == PID_STILL_S_BROKEN )
		{
			@ proto = GetProtoItem( PID_STILL_S_BROKEN );
			target.PicMap = proto.PicMap;
		}
		else if( WildFires.find( targetPid ) != -1 )
		{
			StopWildFire( target, true );
			map.RunEffect( PID_EFFECT_STEAM, tx, ty, 0 );
			return true;
		}
		else
		{
			target.ChangeProto( PID_FIREPLACE_OFF );
			@ proto = GetProtoItem( PID_FIREPLACE_OFF );
			target.PicMap = proto.PicMap;
		}

		EraseTimeEvent( target.FIRE_EVENT );
		target.FIRE_EVENT = 0;
		setAnimState( target );
		map.RunEffect( PID_EFFECT_STEAM, tx, ty, 0 );
	}
	
	return true;
}

uint e_Burn( uint[]@ values )
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( valid( target ) )
	{
		uint16 hexX = 0, hexY = 0;
		Map@ map = target.GetMapPosition( hexX, hexY );
		if( !valid( map ) )
		{
			return 0;
		}
		
		uint16 pid = target.GetProtoId();
		
		bool woodFloor = checkWoodFloor( map, H2T( hexX ), H2T( hexY ) ) != 0;
		bool carpetFloor = checkCarpet( map, H2T( hexX ), H2T( hexY ) ) != 0;
		bool isHazardous = FireHazard.find( pid ) != -1;
		
		int fuel_burned = pid == PID_BRAZIER ? FUEL_BURN_AMOUNT / 3 : FUEL_BURN_AMOUNT;
		target.CURRENT_FUEL = ( target.CURRENT_FUEL - fuel_burned );
		
		if( target.CURRENT_FUEL > 0 )
		{
			PlayGenericSound( map, target.HexX, target.HexY, "campfire.ogg", 10 );

			/* Takes away a constant 100 value (10%) wetness from critters in radius of 3 from fire sources */
			//DryCrittersAround( map, target.HexX, target.HexY, 3, 100 );
			
			if( pid == PID_FURNACE_SMALL )
			{
				FurnaceStage( target );
			}
			else if( pid == PID_STILL_S )
			{
				StillStage( target );
			}
			
			if(( woodFloor || carpetFloor ) && isHazardous && target.IS_LEAKED == 0 )
			{
				map.MoveHexByDir( hexX, hexY, Random( 0, 5 ), 1 );
				GenerateFire( map, hexX, hexY, 0, 2, 0 );
				target.IS_LEAKED = 1;
			}
			
			if( map.GetRain() == 0 || Random( 1, 3 ) != 3 || map.HasRoof( target.HexX, target.HexY ) )
			{

				return FIRE_BURNING_TIME;
			}
		}
		
		target.STATE = STATE_EXTINGUISHED;
		PlayGenericSound( map, target.HexX, target.HexY, "STEAM1.mp3", 10 );
		EraseTimeEvent( target.FIRE_EVENT );
		target.FIRE_EVENT = 0;
		ProtoItem@ proto = null;
		
		//REVIEW THIS SHITCODE
		switch( pid )
		{
			case( PID_FIREBARREL ):
			{
				@ proto = GetProtoItem( PID_FIREBARREL );
				break;
			}
			case( PID_BRAZIER ):
			{
				@ proto = GetProtoItem( PID_BRAZIER );
				break;
			}
			case( PID_COAL_POWERGEN ):
			{
				@ proto = GetProtoItem( PID_COAL_POWERGEN );
				break;
			}
			case( PID_FURNACE_SMALL ):
			{
				@ proto = GetProtoItem( PID_FURNACE_SMALL );
				FurnaceStage( target );
				break;
			}
			case( PID_STILL_S ):
			{
				@ proto = GetProtoItem( PID_STILL_S );
				StillStage( target );
				break;
			}
			case( PID_STILL_S_BROKEN ):
				@ proto = GetProtoItem( PID_STILL_S_BROKEN );
				break;
			default:
			{	
				uint ashPid = _GetOneRandom( Ashes );
				target.ChangeProto( ashPid );
				@ proto = GetProtoItem( ashPid );
				SETFLAG( target.Flags, ITEM_FLAT );
				break;
			}
		}
		
		target.PicMap = proto.PicMap;
		setAnimState( target );
		target.Update();
		
		if( pid == PID_COAL_POWERGEN )
		{
			target.PicMap = target.Proto.PicMap;
			
			Item@[] electrics;
			map.GetItems( PID_OBJECT_WATERPUMP, electrics );
			map.GetItems( PID_CRUSHER_2000, electrics );

			if( electrics.length() > 0 )
			{
				Item@ electric = electrics[ 0 ];
				if( valid( electric ) )
				{
					electric.STATE = STATE_OFF;
					SETFLAG( electric.Flags, ITEM_SHOW_ANIM_EXT );
					UNSETFLAG( electric.Flags, ITEM_LIGHT );
					
					if( electric.GetProtoId() == PID_CRUSHER_2000 )
					{
						electric.PicMap = electric.Proto.PicMap;
					}
					
					electric.Update();			
				}
			}
		}
	}
	
	return 0;
}

void setAnimState( Item& target )
{
	if( target.STATE == STATE_BURNING )
	{	
		UNSETFLAG( target.Flags, ITEM_SHOW_ANIM_EXT );
		SETFLAG( target.Flags, ITEM_LIGHT );
		SETFLAG( target.Flags, ITEM_CAN_USE );
		UNSETFLAG( target.Flags, ITEM_CAN_PICKUP );
	}
	else
	{
		SETFLAG( target.Flags, ITEM_SHOW_ANIM_EXT );
		UNSETFLAG( target.Flags, ITEM_LIGHT );
	}
	
	target.Update();
}

bool FeedTheFire( Critter& cr, Item& item, Item& target )
{
	Map@ map = cr.GetMap();
	if( target.CURRENT_FUEL == target.MAX_FUEL )
	{	
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_MUCH_FUEL );
		return false;
	}
	
	_CritAnimateUse( cr );
	if( item.GetProtoId() == PID_COAL )
	{
		target.CURRENT_FUEL = MIN(target.CURRENT_FUEL + 5400, target.MAX_FUEL);
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_COAL );
		PlayGenericSound( map, target.HexX, target.HexY, "ROCK.mp3", 10 );
	}
	else
	{	
		target.CURRENT_FUEL = MIN(target.CURRENT_FUEL + 1800, target.MAX_FUEL);
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_WOOD );
		PlayGenericSound( map, target.HexX, target.HexY, "BRDSWELL.mp3", 10 );
	}
	
	if( target.GetProtoId() == PID_FIREBARREL && target.CURRENT_FUEL > 0 && target.STATE == STATE_EXTINGUISHED )
	{
		target.PicMap = PIC_BARREL_FULL;
		target.Update();
	}
	
	int occupancy_rate = ( target.CURRENT_FUEL * 100 / target.MAX_FUEL );
	// cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FIREPLACE_FILLED, "$rate" + occupancy_rate);
	_SubItem( item, 1 );
	return true;
}

void BurnIt( Critter& cr, Item& item, Item& target )
{
	_CritAnimateUse( cr );
	uint destructablePid = item.GetProtoId();
	if( Destructables.find( destructablePid ) == -1 && Explosives.find( destructablePid ) == -1 || target.STATE == STATE_EXTINGUISHED )
	{	
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_BURN_THIS );
		return;
	}
	else if( Explosives.find(destructablePid) != -1 )
	{
		_SubItem( item, 1 );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PUTS_EXPLOSIVES_FIRE );
		uint[] values = {target.Id};
		target.EXPLOSION_TIMEOUT = CreateTimeEvent( AFTER( REAL_SECOND( Random( 0, 10 ) ) ),"e_Explosives", values, true );
		return;
	}
	else
	{
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PUTS_ITEM_FIRE );
		if( item.GetProtoId() == PID_SHIT_SMALL || item.GetProtoId() == PID_SHIT_BIG || item.GetProtoId() == PID_SHIT_HUGE )
		{
			uint16 hexX=0, hexY=0;
			Map @map = target.GetMapPosition( hexX, hexY );
			map.SetTextMsg( hexX, hexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_SICKENING_SMELL );
		}
		
		Map@ map = cr.GetMap();
		PlayGenericSound( map, target.HexX, target.HexY, "HMXXXXBN.mp3", 10 );
		_SubItem( item, 1 );
		return;
	}
}

uint e_Explosives( uint[]@ values )
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( valid( target ) )
	{
		uint16 hexX = 0, hexY = 0;
		Map@ map = target.GetMapPosition( hexX, hexY );
		
		if( target.GetType() == ITEM_TYPE_TRAP )
		{
			uint[] vals = { target.Id };
			CreateTimeEvent( AFTER( REAL_MS( 1 ) ), "explode@e_Explode", vals, true );
		}
		else
		{
			ExplodeEx( map, hexX, hexY, PID_EXPLODE_MISSILE2, 0, Random( 70, 150 ), DAMAGE_EXPLODE, 3, 0 );
		}
		
		map.AddItem( hexX, hexY, _GetOneRandom( Ashes ), 1 );
		map.RunEffect( PID_EFFECT_STEAM, hexX, hexY, 0 );
		
		if( target.GetProtoId() == PID_FIREBARREL || target.GetProtoId() == PID_BRAZIER || target.GetProtoId() == PID_COAL_POWERGEN )
		{
			uint randomDebree = Random( 2,5 );
			for( uint i = 0; i < randomDebree; i++ )
			{
				uint16 hx=0, hy=0;
				hx = target.HexX; hy = target.HexY;
				map.MoveHexByDir( hx, hy, Random( 0, 5 ), Random( 1, 3) );
				if( map.IsHexPassed( hx, hy ) )
				{
					map.AddItem( hx, hy, _GetOneRandom( Wreckage ), 1 );
				}
			}
		}
		
		EraseTimeEvent( target.FIRE_EVENT );
		EraseTimeEvent( target.EXPLOSION_TIMEOUT);
		DeleteItem( target );
	}
	
	return 0;
}

void GenerateFire( Map@ map, int x, int y, int radius, uint strength, int attackerId )
{
	if( !valid( map ) )
	{
		return;
	}
	Item@ initialFire = null;
	Item@ fire = null;
	
	Critter@ victim = map.GetCritter( x, y ); 
	if( !map.IsHexPassed( x, y ) && !valid( victim ) )
	{
		return;
	}
	
	if( !CheckFire( map, x, y ) )
	{
		@initialFire = map.AddItem( x, y, _GetOneRandom( WildFires ), 1 );
	}
	else
	{
		for( uint j = 0, len = WildFires.length(); j < len; j++ )
		{
			Item@ check = map.GetItem( x, y, WildFires[j] );
			if( valid( check ) )
			{
				@initialFire = check;
				EraseTimeEvent( initialFire.FIRE_EVENT );
				initialFire.FIRE_EVENT = 0;
			}
		}
	}
	
	if( !valid( initialFire ) )
	{
		return;
	}
	
	SayLog( map, "[ Spot on fire: ]", x, y );
		
	if( attackerId > 0 )
	{
		initialFire.ATTACKER_ID = attackerId;
	}
	
	SetFireEvent( initialFire, strength );

	initialFire.LIQUID_AMOUNT = CalcualteCharges( radius );
	
	uint[] active_fires = { initialFire.Id };
	
	if( radius > 0 )
	{
		FireCircle( map, x, y, strength, active_fires );
		for( int i = 1, len = initialFire.LIQUID_AMOUNT; i < len ; i++ )
		{
			uint16 zx = 0, zy = 0;
			@fire = GetItem( _GetOneRandom( active_fires ) );
			if( valid( fire ) )
			{
				fire.GetMapPosition( zx, zy );
				FireCircle( map, zx, zy, strength, active_fires );
			}
		}
	}
}

uint CalcualteCharges( uint radius )
{
	uint charge = 0;
	for ( uint i = 1; i <= radius; i++ )
	{
		charge += 6 * i;
	}
	
	return charge;
}

void SetFireEvent( Item& fire, uint strength )
{
	fire.SetEvent( ITEM_EVENT_WALK, "e_Hot" );	
	uint[] values = { fire.Id, strength };
	fire.FIRE_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 2 ) ), "e_WildFireBurn", values, true );
}

void FireCircle( Map@ map, int x, int y, uint strength, uint[]@ active_fires )
{
	if( !valid( map ) )
	{
		return;
	}
	
	if( active_fires.length() == 0 )
	{
		return;
	}
	
	Item@ initialFire = GetItem( active_fires[0] );
	Item@ fire = null;
	
	int charge = initialFire.LIQUID_AMOUNT;
	
	uint16 tx = 0, ty = 0;
	
	for( uint i = 0; i < 6; i++ )
	{
		tx = x; ty = y;
		map.MoveHexByDir( tx, ty, i, 1 );
		Critter@ victim = map.GetCritter( tx, ty );
		
		if( !map.IsHexPassed( tx, ty ) && !valid( victim ) )
		{
			continue;
		}
	
		if( !CheckFire( map, tx, ty ) )
		{ 
			@fire = map.AddItem( tx, ty, _GetOneRandom( WildFires ), 1 );
			initialFire.LIQUID_AMOUNT--;
		}
		else
		{
			continue;
		}
		
		fire.ATTACKER_ID = initialFire.ATTACKER_ID;
		SetFireEvent( fire, strength );
		active_fires.insertLast( fire.Id );

		if( initialFire.LIQUID_AMOUNT <= 0 )
		{
			return;
		}
	}
}

/* Dries critters in hex radius from target */
void DryCrittersAround( Map@ map, int HexX, int HexY, int radius, int amount)
{
	Critter@[] critters;
	Critter@ critter = null;
	uint count = map.GetCrittersHex( HexX, HexY, 3, FIND_ALL | FIND_LIFE_AND_KO, critters );

	for( uint i = 0; i < count; i++)
	{
		@ critter = critters[i];
		if( valid( critter ) )
		{
			if( critter.StatBase[ ST_WETNESS ] > 0 )
			{
				critter.StatBase[ ST_WETNESS ] -= MIN( critters[i].StatBase[ ST_WETNESS ], amount );
	
			}
		}
	}
	
	critters.resize(0);
}

bool CheckFire( Map& map, uint16 x, uint16 y )
{
	Item@ fire = null;
	for( uint i = 0, len = WildFires.length(); i < len; i++ )
	{
		@ fire = map.GetItem( x, y, WildFires[ i ] );
		if( valid( fire ) )
		{
			return true;
		}
	}
	
	return false;
}

bool CheckAsh( Map& map, uint16 x, uint16 y )
{
	Item@ ash = null;
	for( uint i = 0, len = Ashes.length(); i < len; i++ )
	{
		@ ash = map.GetItem( x, y, Ashes[ i ] );
		if( valid( ash ) )
		{
			return true;
		}
	}
	
	return false;
}

bool canBeFiredUp( Item& burningItem ) 
{
	uint firablePid = burningItem.GetProtoId();	

	bool isFireFuel = FireFuel.find( firablePid ) != -1;
	bool isCollateral = Collaterals.find( firablePid ) != -1;
	bool isExplosives = Explosives.find( firablePid ) != -1;
	bool isDestructable = Destructables.find( firablePid ) != -1;
	bool isWoodFurniture = ( burningItem.Proto.Material == MATERIAL_WOOD && burningItem.Proto.Item_Subtype == ITEM_SUBTYPE_FURNITURE );
	bool isPersonalContainer = ( ( burningItem.Proto.Item_Subtype == ITEM_SUBTYPE_PERSONAL_BAG || burningItem.Proto.Item_Subtype == ITEM_SUBTYPE_BRIEFCASE ) && burningItem.Proto.Material != MATERIAL_METAL );
	
	return isFireFuel || isCollateral || isExplosives || isDestructable || isWoodFurniture || isPersonalContainer;
}

bool FireUp( Item& burningItem, uint pid, uint strength )
{
	if( FireSource.find( pid ) == -1 )
	{
		return false;
	}
	
	if( !canBeFiredUp( burningItem ) )
	{
		return false;
	}
	
    Map@ map = GetMap( burningItem.MapId );
    if( !valid( map ) )
	{
		return false;
	}
	
	uint16 hx = burningItem.HexX, hy = burningItem.HexY;
	if( Explosives.find( burningItem.GetProtoId() ) != -1 )
	{		
		ExplodeEx( map, hx, hy, PID_EXPLODE_MISSILE2, 0, Random( 50, 100 ), DAMAGE_EXPLODE, 3, 0 );
		Item@[] destroyedItems;
		map.GetItems( hx, hy, destroyedItems );
		DeleteItems( destroyedItems );
		map.AddItem( hx, hy, _GetOneRandom( Ashes ), 1 );
	}		
	
	Item@ fire = map.AddItem( hx, hy, _GetOneRandom( WildFires ), 1 );
	if( !valid( fire ) )
	{
		return false;
	}
	
	PlayGenericSound( map, hx, hy, "WAI1XXX2.mp3", 10 );
	
	if( burningItem.Proto.Type == ITEM_TYPE_CONTAINER )
	{
		DropContainerItems( map, burningItem );
	}
	
	fire.SetEvent( ITEM_EVENT_WALK, "e_Hot" );	
	SetFireEvent( fire, strength );

	SayLog( map, "[ Object burning in: ]", hx, hy );
	
	DeleteItem( burningItem );
	return true;
}

void e_Hot( Item& item, Critter& cr, bool entered, uint8 dir ) 
{
	if( !valid( cr ) )
	{
		return;
	}
	
	if( entered && cr.IsLife() )
	{
		if( cr.GetTimeEvents( CTE_BURNING, null, null, null ) == 0 )
		{
			cr.AddTimeEvent( "cte_Hot", 0, CTE_BURNING, 0 );
		}
		
		Critter@ attacker = null;
		if( item.ATTACKER_ID > 0 )
		{
			@attacker = GetCritter( item.ATTACKER_ID );
			if( valid( attacker ) && !cr.IsPlayer() && cr.IsSee( attacker ) )
			{
				cr.AddEnemyInStack( attacker.Id );
			}
		}
	}
	else
	{
		cr.EraseTimeEvents( CTE_BURNING );
	}
}

uint cte_Hot( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() )
	{
		return 0;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;
	}
	
	bool isBurning = false;

	uint pid = 0;
	Item@[] fires;
	Item@ fire = null;
	uint count = map.GetItems( cr.HexX, cr.HexY, fires );
	for( uint i = 0; i < count; i++ )
	{
		@ fire = fires[i];
		if( valid( fire ) )
		{
			if( FireSource.find( fire.GetProtoId() ) != -1 && fire.STATE == STATE_BURNING )
			{
				pid = fire.GetProtoId();
				isBurning = true;
				break;
			}
		}
	}
	
	fires.resize(0);
	
	if( !isBurning )
	{
		return 0;
	}
	
	if( cr.Stat[ ST_BODY_TYPE ] != BT_ROBOT )
	{
		InjureCritter( cr, Random( 10, 20 ), DAMAGE_FIRE, cr.Dir, cr.Id, Random( 0, 1 ) == 0 ? HIT_LOCATION_LEFT_LEG : HIT_LOCATION_RIGHT_LEG, false );
	}
	
	rate++;
	
	return REAL_SECOND( 1 );
}

uint e_WildFireBurn( uint[]@ values )
{
	if( !valid( values ) )
	{
		return 0;
	}
	
    Item@ wildFire = GetItem( values[ 0 ] );
	if( !valid( wildFire ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( wildFire.MapId );
	if( !valid( map ) )
	{
		StopWildFire( wildFire, false );
		return 0;
	}
	
	bool create_ash = true;
	uint16 x = wildFire.HexX, y = wildFire.HexY;
	
	if( !CheckAsh( map, wildFire.HexX, wildFire.HexY ) )
	{
		if( wildFire.FIRE_MARKER == 0 )
		{
			wildFire.FIRE_STRENGTH = values[ 1 ];
			wildFire.FIRE_MARKER = 1;
		}
		
		if( wildFire.FIRE_STRENGTH > 0 )
		{
			wildFire.FIRE_TIMER++;
			if( wildFire.FIRE_TIMER >= 20 )
			{ 
				wildFire.FIRE_TIMER = 0;
				wildFire.FIRE_STRENGTH -= Random( 0, 1 );
			}

			if( Random( 0, 1 ) == 0 ) 
			{
				uint16 hx = x, hy = y;
				Item@[] heated;
				Item@ toBurn = null;
				map.GetItems( x, y, heated );
				
				for( uint i = 0; i < 6; i++ )
				{
					if( Random( 0, 1 ) == 0 )
					{
						continue;
					}
					
					hx = x; hy = y;
					map.MoveHexByDir( hx, hy, i, 1 );
					map.GetItems( hx, hy, heated );
					bool carpetFloor = checkCarpet( map, H2T( hx ), H2T( hy ) ) != 0;
					bool woodFloor = checkWoodFloor( map, H2T( hx ), H2T( hy ) ) != 0;
					
					if( ( woodFloor || carpetFloor ) && wildFire.IS_LEAKED == 0 )
					{	
						if( !CheckFire( map, hx, hy ) && !CheckAsh( map, hx, hy ) )
						{
							GenerateFire( map, hx, hy, 0, wildFire.FIRE_STRENGTH, wildFire.ATTACKER_ID );
						}
						else if ( i == 5)
						{
							wildFire.IS_LEAKED = 1;
						}
					}
				}
				
				for( uint i = 0, len = heated.length(); i < len; i++ )
				{
					@ toBurn = heated[i];
					if( valid( toBurn ) )
					{
						FireUp( toBurn, _GetOneRandom( WildFires ), 1 );
						PlayGenericSound( map, hx, hy, "forest_fire2.ogg", 10 );
					}
				}
				
				heated.resize(0);
			}
			
			map.RunEffect( PID_EFFECT_STEAM, x, y, 0 );

			Critter@[] targetCR;
			Critter@ target = null;
			uint count = map.GetCrittersHex( x, y, 0, FIND_LIFE_AND_KO, targetCR );
			for( uint i = 0; i < count; i++ )
			{
				@ target = targetCR[i];
				if( valid( target ) )
				{
					if( target.GetTimeEvents( CTE_BURNING, null, null, null ) == 0 )
					{
						target.AddTimeEvent( "cte_Hot", 0, CTE_BURNING, 0 );
					}
				}
			}
			
			targetCR.resize(0);
			
			if( map.GetRain() == 0 || Random( 1, 10 ) != 10 || map.HasRoof( x, y ) )
			{
				return WILD_FIRE_BURNING_TIME;
			}
		}
	}
	else
	{
		create_ash = false;
	}

	StopWildFire( wildFire, create_ash );
	
    return 0;
}

void StopWildFire( Item& fire, bool create_ash )
{
	if( create_ash )
	{
		Map@ map = GetMap( fire.MapId );
		if( valid( map ) )
		{
			map.AddItem( fire.HexX, fire.HexY, _GetOneRandom( Ashes ), 1 );
		}
	}
	
	EraseTimeEvent( fire.FIRE_EVENT );
	DeleteItem( fire );
}

void StartMenuFireBarrel( Critter& cr, Item& firebarrel )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = MenuFireBarrel( firebarrel, map );
    iDialogBox@ menu = OpenMenu( cr, "", handler );
}

class MenuFireBarrel: CenteredMenuHandler
{
    uint firebarrel_id;
    uint map_id;
	
    MenuFireBarrel( Item& firebarrel, Map& map )
	{
		firebarrel_id = firebarrel.Id;
		map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        if( !valid( map ) )
		{
            return false;
        }

        Item@ firebarrel = GetItem( firebarrel_id );
        if( !valid( firebarrel ) )
		{
            return false;
        }
		
		if( firebarrel.STATE > STATE_EXTINGUISHED )
		{
			if( FireLightSource.find( firebarrel.GetProtoId() ) == -1 )
			{
				if( menu.ButtonMsg( STR_FIRE_MENU_COOK ) )
				{
					CookingMenu( cr );
					return false;
				}
				
				if( menu.ButtonMsg( STR_FIRE_MENU_FRY ) )
				{
					FastFrying( cr );
					return false;
				}
				
				if( menu.ButtonMsg( STR_FURNITURE_MENU_CRAFT ) )
				{
					GetCraftToken( cr );
					return false;
				}
			}
			
			if( menu.ButtonMsg( STR_FIRE_MENU_ADD_FUEL ) )
			{
				if( hasItems( cr, FireFuel ) )
				{
					Item@[] fireFuel = getItems( cr, FireFuel );
					Item@ fuel = fireFuel[0];
					if( valid( fuel ) )
					{
						FeedTheFire( cr, fuel, firebarrel );
					}
					return true;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
					return false;
				}
			}

			if( menu.ButtonMsg( STR_FIRE_MENU_EXTINGUISH ) )
			{
				Item@[] watersource = getItems( cr, WaterSource );
				for( uint i = 0, len = watersource.length(); i < len; i++ )
				{
					Item@ water = watersource[i];
					if( valid( water ) )
					{
						if( WaterSource.find( water.GetProtoId() ) != -1 || ( water.Proto.Type == ITEM_TYPE_FLASK && water.REMAINING_USES > 0 ) )
						{
							Extinguish( cr, water, firebarrel );
							return false;
						}
					}

				}
				
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER_FOR_FIRE );
				return true;
			}
		}
		else
		{
			if( locked_in_place( firebarrel ) )
			{
				if( menu.ButtonMsg( STR_FIRE_MENU_IGNITE ) )
				{
					if( hasItems( cr, Igniters ) )
					{
						Item@[] igniters = getItems( cr, Igniters );
						Item@ igniter = igniters[0];
						if( valid( igniter ) )
						{
							Ignite( cr, igniter, firebarrel );
						}
						return true;
					}
					else
					{
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
						return false;
					}
				}
				
				if( menu.ButtonMsg( STR_FIRE_MENU_ADD_FUEL ) )
				{
					if( hasItems( cr, FireFuel ) )
					{
						Item@[] fireFuel = getItems( cr, FireFuel );
						Item@ fuel = fireFuel[0];
						if( valid( fuel ) )
						{
							FeedTheFire( cr, fuel, firebarrel );
						}
						return true;
					}
					else
					{
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
						return false;
					}
				}
				
				if( menu.ButtonMsg( STR_FURNITURE_MENU_DETACH ) )
				{
					LockInPlace( cr, firebarrel );
					return true;
				}
			}
			else
			{
				if( menu.ButtonMsg( STR_FURNITURE_MENU_ANCHOR ) )
				{
					LockInPlace( cr, firebarrel );
					return true;
				}

				if( menu.ButtonMsg( STR_FURNITURE_MENU_PICKUP ) )
				{
					PickItem( cr, firebarrel );
					ChangeCritterSpeed( cr );
					return false;
				}			
			}
		}
		return true;
    }
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_FIRE_MENU_MAIN;
	}	
	
    string@ Description( Critter& cr )
	{
		Item@ firebarrel = GetItem( firebarrel_id );
		
		string info = "$firestate" + STR_INSERT_TEXT_LINE( firebarrel.STATE == STATE_EXTINGUISHED ? STR_FIRE_MENU_FIRE_UNLIT : STR_FIRE_MENU_FIREBARREL_BURNING )
					+ "$occupancy_level" + ( firebarrel.CURRENT_FUEL * 100 / firebarrel.MAX_FUEL );

		return info;
    }
}

void StartMenuPowerGen( Critter& cr, Item& powergen )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = MenuPowerGen( powergen, map );
    iDialogBox@ menu = OpenMenu( cr, "", handler );
}

class MenuPowerGen: CenteredMenuHandler
{
    uint powergen_id;
    uint map_id;
	
    MenuPowerGen( Item& powergen, Map& map )
	{
		powergen_id = powergen.Id;
		map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ powergen = GetItem( powergen_id );
	
		bool locked_in_place = !FLAG( powergen.Flags, ITEM_CAN_PICKUP );
	
        if( !valid( map ) )
		{
            return false;
        }
		
		if( !valid( powergen ) )
		{
			return false;
		}
		
		if( menu.ButtonMsg( STR_FIRE_MENU_ADD_FUEL ) )
		{
			if( hasItems( cr, FireFuel ) )
			{
				Item@[] fireFuel = getItems( cr, FireFuel );
				Item@ fuel = fireFuel[0];
				FeedTheFire( cr, fuel, powergen );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
				return false;
			}
		}
		
		if( powergen.STATE > STATE_EXTINGUISHED )
		{
			if( menu.ButtonMsg( STR_FIRE_MENU_EXTINGUISH ) )
			{
				if( hasItems( cr, WaterSource ) )
				{
					Item@[] watersource = getItems( cr, WaterSource );
					Item@ water = watersource[0];
					Extinguish( cr, water, powergen );
					return false;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER_FOR_FIRE );
					return true;
				}
			}
		}
		else
		{
			if( menu.ButtonMsg( STR_FIRE_MENU_IGNITE ) )
			{
				if( hasItems( cr, Igniters ) )
				{
					Item@[] igniters = getItems( cr, Igniters );
					Item@ igniter = igniters[0];
					Ignite( cr, igniter, powergen );
					return true;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
					return false;
				}
			}
		}

		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_FIRE_MENU_MAIN;
	}	
	
    string@ Description( Critter& cr )
	{
		Item@ powergen = GetItem( powergen_id );
		
		string result = "$firestate" + STR_INSERT_TEXT_LINE( powergen.STATE == STATE_EXTINGUISHED ? STR_FIRE_MENU_FIRE_UNLIT : STR_FIRE_MENU_POWERGEN_BURNING )
					  + "$occupancy_level" + ( powergen.CURRENT_FUEL * 100 / powergen.MAX_FUEL );

		return result;
    }
}


#endif // FIRESTARTER