#ifndef DRUGS
#define DRUGS

#include "_utils.fos"
#include "radiation_h.fos"
#include "paralysis_h.fos"
#include "poison_h.fos"
#include "food_h.fos"
#include "heal_h.fos"

#include "consumables_h.fos"
#include "drugs_h.fos"

//~run drugs enlistTimeEvents crId 0 0
void enlistTimeEvents( Critter& cr, int crId, int p1, int p2 )//DEPRECATED, yet still valuable, even with the new `~drug` command
{
	Critter@ target = getTarget( cr, crId );

	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}
	
	uint list = 0;
    cr.Say( SAY_NETMSG, "List for cr #" + crId + ":\n" );

	for( int i = 0; i < 65000; i++ )
	{
		uint[] index;
		uint[] duration;
		uint[] rate;
		uint count = target.GetTimeEvents( i, index, duration, rate );
		if( count > 0 )
		{
			list++;
			
			string drugname = DrugEvent( i );
			string timename = TimeEvent( i );
			if( timename.length() > 1 && drugname.length() > 1 )
			{
				drugname = " and " + drugname;
			}
			
			cr.Say( SAY_NETMSG, "Time event #" + i + " \'" + timename + drugname + "\':" );
			for( uint j = 0; j < count; j++ )
			{
				string time = DeltaTime_HMS( uint( duration[j] / __TimeMultiplier ) );
				cr.Say( SAY_NETMSG,
					StyledText( "|", "" + j, ") #", 30 ) +
					StyledText( "|", "" + index[j], " after", 60 ) +
					StyledText( "|", time, " at rate ", 120 ) +
					StyledText( "|", "" + rate[j], ";", 0 ) +
					"" );
			}
		}
	}
	cr.Say( SAY_NETMSG, "There is " + list + " time events." );
}

//~run drugs TotallyClear crId 0 0
void TotallyClear( Critter& cr, int crId, int p1, int p2 )
{
	Critter@ target = getTarget( cr, crId );
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}
	
	clearDrugs(target);
}

void unsafe_enlistTimeEvents(Critter& cr, int targetId, int, int, string@, int[]@ )//GM command: #te
{
	if( !isGM( cr ) )
	{
		return;
	}
	
	enlistTimeEvents( cr, targetId, 0, 0 );
}

bool useDrug( Critter& cr, Item& item, Critter@ targetCr )//exported
{
    if( item.GetType() != ITEM_TYPE_DRUG && item.GetType() != ITEM_TYPE_FOOD )
	{
		return false;
	}
	
	if( valid( targetCr ) && targetCr.StatBase[ST_BODY_TYPE] == BT_ROBOT )
	{
		return false;
	}

	if( !ProccessFood( cr, targetCr, item ) )
	{
		return false;
	}
	
	if( !consumed( cr, item, targetCr ) )
	{//If it's DEPRECATED food&drugs logic of consuming to restore "thirst and hunger" with simple effects of "poison/radiation/knockoff"
		_SubItem( item, 1 );
	}

	targetCr.Action( ACTION_USE_ITEM, 1, item );
	targetCr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_CONSUMED, "$proto@msg item " + ( item.GetProtoId() * 100 ) + "@" );
	
	return true;
}

void clearDrugs( Critter& cr )//exported
{
	Item@ item = cr.AddItem( PID_JET_ANTIDOTE, 1 );
	if( valid( item ) )
	{
		useDrug( cr, item, cr );
	}
}

#ifndef EVENT_NAMES //NOTE: used ONLY for DEPRECATED function "enlistTimeEvents" 
#define EVENT_NAMES

class NamedString
{
	string _name;
	int id;

	NamedString( int id, string name )
	{
		this._name = name;
		this.id = id;
	}

	string name() { return _name; }

	bool match( int id ) { return this.id == id; }
}

class NamedStringList
{
	NamedString@[] list;
	
	NamedStringList@ add( int id, string name )
	{
		return add( NamedString( id, name ) );
	}
	
	NamedStringList@ add( string name, int id )
	{
		return add( NamedString( id, name ) );
	}
	
	NamedStringList@ add( NamedString@ item )
	{
		list.insertLast( item );
		return this;
	}
	
	string name( int id )
	{
		if( !valid( list ) )
		{
			return "[null]";
		}
		
		for( uint i = 0, l = list.length(); i < l; i++ )
		{
			if( list[i].match( id ) )
			{
				return list[i].name();
			}
		}
		return "";
	}
}

NamedStringList@ TimeEvents;
NamedStringList@ DrugEvents;

void init_TimeEvents()
{
	@TimeEvents = NamedStringList()
		.add( "POISON", CTE_POISON )
		.add( "RADIATION", CTE_RADIATION )
		.add( "ROTTEN", CTE_ROTTEN )
		.add( "TRADER", CTE_TRADER )
		.add( "DRAGGING", CTE_DRAGGING )
		.add( "BURNING", CTE_BURNING )
		.add( "SLOWRELOAD", CTE_SLOWRELOAD )
		.add( "DELETECORPSE", CTE_DELETECORPSE )
		.add( "ROTTEN", CTE_ROTTEN )
		.add( "SEX", CTE_HAD_SEX )
		.add( "TIRED", CTE_TIRED )
		.add( "HEAL", CTE_HEAL )
		.add( "DOC", CTE_DOC )
		.add( "BLEED", CTE_BLEED )
		.add( "HUNGER", CTE_HUNGER )
		.add( "DYSPNEA", CTE_DYSPNEA )
		.add( "QUICKHEAL", CTE_QUICKHEAL )
		.add( "SNEAKING", CTE_SNEAKING )
		.add( "DIRT", CTE_DIRT )
		.add( "THIRST", CTE_THIRST )
		.add( "PA_AUTH", CTE_PA_AUTH )
		.add( "VOMIT", CTE_VOMIT )
		.add( "DRUNK", CTE_DRUNK )
		.add( "VOMIT_WARN", CTE_VOMIT_WARN )
		.add( "AUTODOC", CTE_AUTODOC_PROCEDURE )
		.add( "OVERDOSE", CTE_GLOBAL_OVERDOSE )
		.add( "WETNESS", CTE_WETNESS )
		.add( "BANDAGE", CTE_BANDAGE )
		.add( "AFK", CTE_AFK )
		.add( "RELAX", CTE_RELAX )
		.add( "DAZED", CTE_DAZED )
		.add( "STUNNED", CTE_STUNNED )
		.add( "RAPID_FIRE", CTE_RAPID_FIRE )
		.add( "NPC_FOLLOW", CTE_NPC_FOLLOW )
		.add( "SHIT", CTE_SHIT )
		;
}

void init_DrugEvents()
{
	@DrugEvents = NamedStringList();
	
	for( uint i = 0, l = DrugsIdentifiers.length(); i < l; i++ )
	{
		DrugEvents.add( getPID_name( DrugsIdentifiers[i] * 100 ), DrugsIdentifiers[i] );
	}
}

string TimeEvent( int id ) 
{
	if( !valid( TimeEvents ) )
	{
		init_TimeEvents();
	}
	return TimeEvents.name( id );
}

string DrugEvent( int id ) 
{
	if( !valid( DrugEvents ) )
	{
		init_DrugEvents();
	}
	return DrugEvents.name( id );
}

#endif //EVENT_NAMES

#endif // DRUGS