#ifndef CLIENT_GUI_H
#define CLIENT_GUI_H

#define IS_COLLISION    # ( x1, y1, x2, y2, w, h )( ( x1 ) >= ( x2 ) && ( x1 ) <= ( x2 ) + ( w ) && ( y1 ) >= ( y2 ) && ( y1 ) <= ( y2 ) + ( h ) )
#include "sprite.fos"
//
// API
//

shared interface IGUIInstanceContext{}

funcdef IGUIInstanceContext@ IGUIInstanceContextFactoryFunc( );
funcdef void IGUIScreenInstanceInitFunc( IGUIInstanceContext@ context, IGUIScreenOpt@ screen );
funcdef void IGUIElementInstanceInitFunc( IGUIInstanceContext@ context, IGUIElementOpt@ element );

	#ifndef CLIENT_GUI
		// Create new screen
		import IGUIScreenOpt@ GUI_CreateScreen( int screenIndex, string@ sprName ) from "client_gui";
		import void GUI_DeleteScreen( int screenIndex ) from "client_gui";
		import IGUIElementOpt@ GUI_AddScreenElement( int screenIndex, string@ sprName, int x, int y ) from "client_gui";
		import IGUIScreenOpt@ GUI_GetScreenOptions( int screenIndex ) from "client_gui";
		import IGUIScreenOpt@ GUI_GetScreenOptions() from "client_gui";
		import IGUIElementOpt@ GUI_GetElementOptions() from "client_gui";
		import void GUI_HideScreen( int screenIndex, int p0, int p1, int p2 ) from "client_gui";
		import void GUI_DeleteScreenElements( int screenIndex ) from "client_gui";
		import IGUIScreenOpt@ GUI_CreateScreenIni( int screenIndex, string@ iniKey ) from "client_gui";
		import IGUIElementOpt@ GUI_AddScreenElementIni( int screenIndex, string@ ini, int defx, int defy ) from "client_gui";
		import IGUIElementOpt@ GUI_AddScreenElementIni( int screenIndex, string@ ini, int defx, int defy, string@ defSpr ) from "client_gui";
		import void GUI_Init() from "client_gui";
		import void GUI_GetActiveScreens( int[]& result ) from "client_gui";
		import void GUI_ShowScreen( int screenIndex, int p0, int p1, int p2 ) from "client_gui";
		import void GUI_Render() from "client_gui";
		import bool GUI_MouseDown( int click, int x, int y ) from "client_gui";
		import bool GUI_MouseUp( int click, int x, int y ) from "client_gui";
		import void GUI_MouseMove( int x, int y ) from "client_gui";
		import bool GUI_KeyDown( uint8 key ) from "client_gui";
		import bool GUI_KeyUp( uint8 key ) from "client_gui";
		import void GUI_InputLost() from "client_gui";
		import int GUI_GetActiveScreen() from "client_gui";
		import bool isControlled( int id ) from "client_gui";
		import bool isControlled( CritterCl& cr ) from "client_gui";
		import bool isSelected( int id ) from "client_gui";
		import int[] getControlledGroups( int id ) from "client_gui";
		import int[] getControlledGroups( CritterCl& cr ) from "client_gui";
		import int[] control() from "client_gui";
		import int[] checkSelectionBar( int findType ) from "client_gui";
		import int[] checkSelectionBarNPC() from "client_gui";
		import int[] checkSelectionBarALL() from "client_gui";
		import void initControlPanel() from "client_gui";
		import bool isLMB_on() from "client_gui";
		import void checkCritterControl( CritterCl@ cr ) from "client_gui";
		import bool IsMonitorGui( int x, int y ) from "client_gui";
		import void drawFanRange( int x, int y, int radius, uint RGBA ) from "client_gui";

	#endif //CLIENT_GUI

//
// Screen
//

shared interface IGUIScreenCallbackShow
{
    void OnShow( int p0, int p1, int p2 );
}
shared interface IGUIScreenCallbackHide
{
    void OnHide( int p0, int p1, int p2 );
}
shared interface IGUIScreenCallbackMove
{
    void OnMove( int posX, int posY );
}

shared interface IGUIScreenCallbackInit
{
    void OnInit();
}                                                   // @pm menu

shared interface IGUIScreenOpt
{
    IGUIScreenOpt@ CallbackShow( IGUIScreenCallbackShow@ callback ); // delault null
    IGUIScreenOpt@ CallbackHide( IGUIScreenCallbackHide@ callback ); // delault null
    IGUIScreenOpt@ CallbackMove( IGUIScreenCallbackMove@ callback ); // delault null
    IGUIScreenOpt@ CallbackInstanceInit( IGUIScreenInstanceInitFunc@ callback ); // delault null
    IGUIScreenOpt@ CallbackContextFactory( IGUIInstanceContextFactoryFunc@ callback ); // delault null
    IGUIScreenOpt@ Position( int x, int y );                         // delault center of screen
    IGUIScreenOpt@ CanMove( bool enabled );                          // delault true
    IGUIScreenOpt@ Modal( bool enabled );                            // delault true
    IGUIScreenOpt@ Multiinstance( bool enabled );                    // delault false
    IGUIScreenOpt@ IgnoreBorders( bool enabled );                    // default false
    IGUIScreenOpt@ CloseOnMiss( bool enabled );                      // default false
    IGUIScreenOpt@ AutoCursor( bool enabled, int cursorType );       // default false
    IGUIScreenOpt@ SetElementCount( int8 ElementCount );             // @pm menu
    IGUIScreenOpt@ Pic( string@ sprName, int path );


    // Info
    int             GetPosX();
    int             GetPosY();
    uint16          GetElementsLength();        // @pm menu
    IGUIElementOpt@ GetElement( uint16 index ); // @pm menu
    // IGUIElementOpt@[]@ GetElements();
}

//
// Element
//

shared interface IGUIElementCallbackInit
{
    void OnInit();
}
shared interface IGUIElementCallbackDraw
{
    void OnDraw( int posX, int posY, int w, int h );
}
shared interface IGUIElementCallbackMouseClick
{
    void OnMouseClick( int click );
}
shared interface IGUIElementCallbackKeyPress
{
    void OnKeyPress( uint8 key, uint8 letter );
}

shared interface IGUIElementOpt
{
    IGUIElementOpt@ CallbackInit( IGUIElementCallbackInit@ callback );                           // default null
    IGUIElementOpt@ CallbackDraw( IGUIElementCallbackDraw@ callback );                           // default null
    IGUIElementOpt@ CallbackMouseClick( IGUIElementCallbackMouseClick@ callback );               // default null
    IGUIElementOpt@ CallbackKeyPress( IGUIElementCallbackKeyPress@ callback );                   // default null
    IGUIElementOpt@ CallbackInstanceInit( IGUIElementInstanceInitFunc@ callback );               // delault null
    IGUIElementOpt@ Position( int x, int y );                                                    // default zeros
    IGUIElementOpt@ Position( int x, int y, int w, int h );                                      // default zeros
    IGUIElementOpt@ SetSize( int w, int h );                                                        // default zeros
    IGUIElementOpt@ Position( string& iniKey );                                                  // get borders from ini
    IGUIElementOpt@ DownPic( string@ sprName );                                                  // default picture off
    IGUIElementOpt@ Text( string@ text, int font, uint color, uint downColor, int flags );       // default text disabled
    IGUIElementOpt@ TextInput( bool enabled, uint maxLen, uint colorFocused );                   // deafult false
    IGUIElementOpt@ Switch( bool enabled );                                                      // default false

    // @pm menu
    IGUIElementOpt@ SetVisible( bool enabled );
    IGUIElementOpt@ Release();
    IGUIElementOpt@ SetElementType( uint8 type );
    IGUIElementOpt@ SetDescription( string desc );
    IGUIElementOpt@ SetElementBtnNum( uint8 btnNum );
    IGUIElementOpt@ SetElementFastPanelType( uint8 type );
    IGUIElementOpt@ SetElementFastPanelId( uint16 id );
    IGUIElementOpt@ UpPic( string@ sprName );
    IGUIElementOpt@ Pic( string@ sprName, int path );
    IGUIElementOpt@ SetLayer( uint8 layer );
    IGUIElementOpt@ SetSpecialValue( uint value );
    IGUIElementOpt@ SetRenderLayer( uint8 layer );   // pm add
    IGUIElementOpt@ PicSetFrmCount( uint16 count );
    // #pm menu

    IGUIElementOpt@ DownPicIni( string& iniKey );                                                
    IGUIElementOpt@ SetSprite( Sprite@ sprite );

    IGUIElementOpt@ SetJamming( bool isJamming );
	
	bool get_JammingState( );
	void set_JammingState( bool jamming );
	
    // Info
    int     GetPosX();
    int     GetPosY();
    string@ GetText();

    // @pm menu
    bool   GetVisible();
    uint8  GetLayer();
    uint8  GetType();
    uint8  GetBtnNum();
    uint8  GetFastPanelType();
    uint16 GetFastPanelId();
    string GetDescription();
    uint16 GetSurfaceHeight();
    uint16 GetSurfaceWidth();
    uint   GetSpecValue();
    uint8  GetRenderLayer();
    // string GetSpriteName();
    // #pm menu
}

#endif // CLIENT_GUI_H
