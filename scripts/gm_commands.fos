#ifndef GM_COMMANDS
#define GM_COMMANDS

#include "_utils.fos"
#include "gateway_h.fos"
#include "lockers_h.fos"
#include "gm_h.fos"
#include "effects_h.fos"

import void _TraderInit( Critter& trader, bool firstTime ) from "ai_trader";
import void GM_MobInit( Critter& npc ) from "ai_mob";
import void GM_GuardsInit( Critter& npc ) from "ai_guards";
import void GM_PetDog( Critter& npc ) from "ai_pet_dog";
		
void unsafe_GM_EffectOnHex( Critter& player, int time, int radius, int param2, string@ color, int[]@ cords )
{
	if( !isGM( player ) || !valid( cords ) || cords.length() != 2 || cords[0] == 0 || cords[1] == 0 ) return;

	int color_index = blinding_color_names_eng.find(color);
	if( color_index == -1 )
	{
		if( color.length() == 1 )
		{
			StrToInt( color, color_index );
		}
		else
		{
			player.Say( SAY_NETMSG, "Ошибка! Используйте следующие названия цветов: black, white, red" );
			return;
		}
	}
	
	BlindingEffect( player.GetMap(), cords[0], cords[1], time, radius, color_index );
}

void unsafe_GM_AddItemOnMap( Critter& player, int pid, int x, int y, string@ param3, int[]@ args )
{
	if( !valid( args ) || args.length() != 4 )
	{
		return;
	}
	
	GM_AddItemOnMap( player, args[0], args[1], args[2], args[3] );
}

void GM_AddItemOnMap( Critter& player, int pid, int x, int y, int count )
{
	if( !isGM( player ) )
	{
		return;
	}
	
	Map@ map = player.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	map.AddItem( x, y, pid, count );
}

//Dynamic Lightsource adding
void unsafe_GM_AddLightOnMap( Critter& player, int param0, int x, int y, string@ param3, int[]@ args )
{
	if( !valid( args ) || args.length() != 5 )
	{
		return;
	}
	
	GM_AddLightOnMap( player, PID_LIGHT_SOURCE, x, y, args[0], args[1], args[2], args[3], args[4] );
}

void GM_AddLightOnMap( Critter& player, uint16 pid, int x, int y, int8 LightIntensity, uint8 LightRadius, uint LightColor, uint8 LightFlags, int LightGroup )
{
	if( !isGM( player ) )
	{
		return;
	}
	
	Map@ map = player.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	Item@ item = map.AddItem( x, y, pid, 1 );
	item.LightIntensity = LightIntensity;
	item.LightDistance = LightRadius;
	item.LightColor = LightColor;
	item.LightFlags = LightFlags;
	item.Val1 = LightGroup;
    item.Update();
	player.Say( SAY_NETMSG, "|0xFFFF00 Light source added on coords: " + x + ":" + y + " Group: " + LightGroup );
}

//Desc on hex adding
void unsafe_GM_HexDesc( Critter& player, int mode, int x, int y, string@ str, int[]@ args )
{
	if( !valid( str ) )
	{
		return;
	}
	
	if( !isGM( player ) )
	{
		return;
	}
	
	Map@ map = player.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	Item@ marker = map.AddItem( x, y, PID_DESC_MARKER, 1 );
	if( valid( marker ) )
	{
		marker.SetLexems( str );
		marker.Val0 = mode;
		marker.Update();
	}
}

void unsafe_ctd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		_ctd( player, param0, param1, param2, param3, param4 );
	}
}

void _ctd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    ctd( player, param0, param1, param2 );
}

void ctd( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( param0 );
    if( !valid( target ) )
	{
        return;
	}
    Critter@ daddy = ( ( param2 != 0 ) ? target : player );
    Critter@ child = ( ( param2 == 0 ) ? target : player );

    Map@ map = daddy.GetMap();
    if( !valid( map ) )
        return;

	if( child.ParamBase[ QST_GAMEMODE ] == GAME_START && !isGM( daddy ) )
	{
		child.Say( SAY_NETMSG, "|0xFFFF00 Player in start mode - can't teleport!" );
		return;
	}
	
    uint8 temp_dir = Random( 0, 5 );
    for( uint i = 0; i < 6; i++ )
    {
        uint16 hexX = daddy.HexX, hexY = daddy.HexY;
        map.MoveHexByDir( hexX, hexY, ( temp_dir + i ) % 6, 1 + param1 );
        if( !map.IsHexPassed( hexX, hexY ) )
		{
            continue;
		}
		Location@ loc = map.GetLocation();
		if(!valid(loc))
		{
			return;
		}
		child.SetWorldPos(loc.WorldX, loc.WorldY);
        child.TransitToMap( map.Id, hexX, hexY, 0 );
        break;
    }
}

void unsafe_GM_god( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_god( player, param0, param1, param2, param3, param4 );
	}
}

void GM_god( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
	{
        player.StatBase[ i ] = 10;
    }
	for( uint i = SKILL_BEGIN; i <= SKILL_END; i++ )
	{
        player.SkillBase[ i ] = 300;
	}
	
	FullHeal( player );
}

void unsafe_GM_tele( Critter& player, int LocPid, int MapIndex, int skipCount, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		tele( player, LocPid, MapIndex, skipCount );
	}
}

void tele( Critter& player, int LocPid, int MapIndex, int skipCount = 0 )
{
	Location@ loc = GetLocationByPid( LocPid, skipCount );
    if( !valid( loc ) )
    {
        player.Say( SAY_NETMSG, "Location not found" );
        return;
    }
	
    Map@ map = loc.GetMapByIndex( MapIndex );
    if( !valid( map ) )
    {
        player.Say( SAY_NETMSG, "Map index not found" );
        @map = loc.GetMapByIndex( 0 );
        if( !valid( map ) )
		{
            return;
		}
	}
    
    player.SetWorldPos( loc.WorldX, loc.WorldY );
    player.TransitToMap( map.Id, 0 );
}

void unsafe_GM_tel( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_tel( player, param0, param1, param2, param3, param4 );
	}
}

void GM_tel( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
	if( !valid( cr ) )
	{
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	Location@ loc = map.GetLocation();
	if( !valid( loc ) ) 
	{
		return;
    }
	
	if( !map.IsHexPassed( param1, param2 ) ) 
	{
		player.Say( SAY_NETMSG, "Hex is busy." );
		return;
	}
    
	cr.SetWorldPos(loc.WorldX, loc.WorldY);
	cr.TransitToHex( param1, param2, cr.Dir );
}

void unsafe_GM_lock( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_lock( player, param0, param1, param2, param3, param4 );
	}
}

void GM_lock( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( param0 );
    if( valid( item ) )
	{
        lock( player, param0, param1, param2 );
	}
}

void lock( Critter& player, int itemId, int complexity, int lockId )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( itemId );
    if( valid( item ) )
    {
        item.LockerCondition = LOCKER_LOCKED;
        item.LockerComplexity = complexity;
        item.LockerId = lockId;
        item.Update();
        Item@ key = player.AddItem( PID_KEY, 1 );
        if( valid( key ) )
		{
            key.LockerId = lockId;
        }
		key.Update();
    }
}

void unsafe_GM_setcodedoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_setcodedoor( player, param0, param1, param2, param3, param4 );
	}
}

void GM_setcodedoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    setcodedoor( player, param0, param1, param2 );
}

void setcodedoor( Critter& cr, int p0, int p1, int p3 )
{
    Item @ item = GetItem( p0 );
    if( @item == null )
	{
        return;
    }
	
	item.Val0 = LOCK_CODE;
    item.Val1 = p1 + 1;
    item.Val4 = p3 != 0 ? p3 : Random( int( pow( 10, item.Val1 ) ), int( pow( 10, ( item.Val1 + 1 ) ) - 1 ) );
    cr.Say( SAY_NETMSG, "code " + item.Val4 );
    item.LockerComplexity = Random( 50, 200 );
    SETFLAG( item.LockerCondition, LOCKER_ELECTRO );
    item.Update();
}

void unsafe_Flushblack( Critter& player, int p0, int p1, int p3, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		Flushblack( player, p0, p1, p3, param3, param4 );
	}
}

void Flushblack( Critter& player, int p0, int p1, int p3, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( p0 );
    FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, p1 );
}

void unsafe_GiveItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GiveItem( player, param0, param1, param2, param3, param4 );
	}
}

void GiveItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    cr.AddItem( param1, 1 );
}

void unsafe_GM_mobinit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{ 
		GM_mobinit( player, param0, param1, param2, param3, param4 );
	}
}

void GM_mobinit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
	if( valid( cr ) )
	{
		cr.StatBase[ ST_TEAM_ID ] = param1;
		GM_MobInit( cr );
	}
}

void unsafe_GM_PetDoginit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		Critter@ cr = GetCritter( param0 );
		if( valid( cr ) )
		{
			cr.ParamBase[ PET_OWNER_ID ] = param1;
			GM_PetDoginit( player, param0, param1, param2, param3, param4 );
		}
	}
}

void GM_PetDoginit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
	if( valid( cr ) )
	{
		GM_PetDog( cr );
	}
}

void unsafe_GM_guard_init( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{ 
		GM_guard_init( player, param0, param1, param2, param3, param4 );
	}
}

void GM_guard_init( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
	if( valid( cr ) )
	{
		cr.StatBase[ ST_TEAM_ID ] = param1;
		GM_GuardsInit( cr );
	}
}

void unsafe_GM_GetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_GetParam( player, crId, param1, param2, param3, param4 );
	}
}

void GM_GetParam( Critter& player, int crId, int param, int, string@, int[] @ data )
{
    Critter@ toCr;
    if( crId == 0 )
	{
		if( !valid( data ) || data.length() != 2 )
		{
			return;
		}
		
		Map@ map = player.GetMap();
		if( !valid( map ) )
		{
			return;
		}
		@toCr = map.GetCritter( data[0], data[1] );
	}
	
	@toCr = GetCritter( crId );
    if( valid( toCr ) )
	{
        player.Say( SAY_NETMSG, "Param #" + param + " is " + toCr.Param[ param ] + " of " + toCr.ParamBase[ param ] + "." );
	}
}

void unsafe_GM_SetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_SetParam( player, crId, param1, param2, param3, param4 );
	}
}

void GM_SetParam( Critter& player, int crId, int param, int param_value, string@, int[]@ data )
{
    if( valid( data ) && data.length() == 3 && ( data[2] > 0 || crId == 0 ) )
	{
		Map@ map = player.GetMap();
		
		int x = data[0];
		int y = data[1];
		int radius = CLAMP( data[2], 0, data[2] );

		Critter@[] crs;	
		uint count = map.GetCrittersHex( x, y, radius, FIND_ALL, crs );
		
		for( uint i = 0; i < count; i++ )
		{
			if( !valid( crs[i] ) ) continue;

			GM_SetParam( player, crs[i].Id, param, param_value, null, null );
		}

		return;
	}
	
	if( crId == 0 )
	{
		return;
    }
	Critter@ toCr = GetCritter( crId );
	
    if( valid( toCr ) )
    {
		int old_value = toCr.ParamBase[ param ];
        toCr.ParamBase[ param ] = param_value;
        testInfo( player, "ParamBase #" + param + " of " + crInfo( toCr ) + " was " +  old_value + " now " + toCr.ParamBase[ param ] + "." );
		
		int[] stable_params = { ST_DIALOG_ID, ST_AI_ID, ST_TEAM_ID, ST_FACTION };
		if( stable_params.find( param ) != -1 )
		{
			old_value = param_value;
		}
		HintEffectDelta( player, toCr, old_value, param_value );
    }
}

void unsafe_GM_getkey( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_getkey( player, param0, param1, param2 );
	}
}

void GM_getkey( Critter& cr, int param0, int param1, int param2 )
{
    Item@ item = GetItem( uint( param0 ) );
    if( !valid( item ) )
	{
		return;
	}
	uint key_pid = PID_KEY;
	int locker_id = 0;
	
	string@ lexem = null;
	string@ script = null;
	
	if( isContainer( item ) || item.GetType() == ITEM_TYPE_DOOR )
	{
		switch( item.Val0 )
		{
			case( 1 ):
				key_pid = PID_TEMPLE_KEY;
				break;
			case( 2 ):
				key_pid = PID_JAIL_KEY;
				break;
			case( 3 ):
				key_pid = PID_VAULT_13_SHACK_KEY;
				break;
		}
		
		locker_id = item.LockerId;
	}
	else
	{
		switch( item.GetProtoId() )
		{
			case( PID_LIFT_1 ):
			case( PID_LIFT_2 ):
			case( PID_LIFT_3 ):
			{
				string@ proto_name = GetTextMsgStr( FOTEXT_LIFT( item.Val1, 0 ) );
				if( !valid( proto_name ) )
				{
					InformWarning( cr, "This elevator (" + item.Val1 + ") works without access card." );
					return;
				}
				key_pid = GetProtoIdByName( proto_name );
				locker_id = -1;
				break;
			}
			default:
				InformWarning( cr, "The item: " + itemDesc( item ) + " has no lock." );
				return;
		}		
	}

	if( locker_id == 0 )
	{
		InformWarning( cr, "There is no lock here." );
		return;
	}
	
	Item@ key = cr.AddItem( key_pid, 1 );
	if( !valid( key ) )
	{
		return;
	}
	
	if( valid( lexem ) )
	{
		key.SetLexems( lexem );
	}
	
	if( valid( script ) )
	{
		key.SetScript( script );
	}
	
	if( locker_id != -1 )
	{
		key.LockerId = uint( locker_id );
	}
	
	key.Update();
	
	cr.Say( SAY_NETMSG, "You have made a copy of the key from lock #" + item.LockerId + "." );
}

void unsafe_GM_openDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_openDoor( player, param0, param1, param2 );
	}
}

void GM_openDoor( Critter& player, int param0, int param1, int param2 )
{
    Item@ item = GetItem( uint( param0 ) );
    if( !valid(item) )
	{
        return;
	}
    item.LockerOpen();
	Map@ map = player.GetMap();
	ToggleDoorBlocker( map, item, false );
}

void unsafe_GM_closeDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_closeDoor( player, param0, param1, param2 );
	}
}

void GM_closeDoor( Critter& player, int param0, int param1, int param2 )
{
    Item@ item = GetItem( uint( param0 ) );
    if( !valid(item) )
	{
        return;
	}
    item.LockerClose();
	Map@ map = player.GetMap();
	ToggleDoorBlocker( map, item, true );
}

void unsafe_GM_noopenDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_noopenDoor( player, param0, param1, param2 );
	}
}

void GM_noopenDoor( Critter& player, int param0, int param1, int param2 )
{
    Item@ door = GetItem( uint( param0 ) );
    if( !valid(door) )
	{
        return;
	}
	
    if( !FLAG( door.LockerCondition, LOCKER_NOOPEN ) )
	{
        SETFLAG( door.LockerCondition, LOCKER_NOOPEN );
		player.Say( SAY_NETMSG, "Door blocked." );
	}
    else
	{
        UNSETFLAG( door.LockerCondition, LOCKER_NOOPEN );
		player.Say( SAY_NETMSG, "Door unblocked." );
	}
}

void unsafe_GM_clearDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_clearDoor( player, param0, param1, param2 );
	}
}

void GM_clearDoor( Critter& player, int param0, int param1, int param2 )
{
    Item@ door = GetItem( uint( param0 ) );
    if( !valid(door) )
	{
        return;
	}
    door.LockerClose();

    door.LockerCondition = 0;
    door.LockerId = 0;
    door.LockerComplexity = 0;
    door.Val0 = 0;
    door.Val1 = 0;
	door.Val4 = 0;
}


void RespawnCritter_all( Critter& critter )
{
	critter.ToLife();
}

void RespawnCritter_deads( Critter& critter )
{
	if( critter.IsDead() )
	{
		critter.ToLife();
	}
}

funcdef void GM_respawnCritterdef( Critter& critter );

void unsafe_GM_respawnCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_respawnCritter( player, param0, param1, param2, param3, param4 );
	}
}

void GM_respawnCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	Critter@ critter = GetCritter( param0 );
	if( param1 == 0 )
	{
		critter.ToLife();
	}
	else 
	{
		GM_respawnCritterdef @respawn = @RespawnCritter_all;
		if( valid(param3) )
		{
			if( param3 == "dead" )
			{
				@respawn = @RespawnCritter_deads;
			}
		}
		Critter@[] critters(0);
		Map@ map = player.GetMap();
		for( uint i = 0, iEnd = map.GetCrittersHex ( param1, param2, param0, FIND_ALL | FIND_ONLY_NPC, critters ); i < iEnd; i++ )
		{
			if( valid(critters[i]) )
			{
				respawn( critters[i] );
			}
		}
	}
}

funcdef void GM_deleteCritterdef( Critter& critter );

void DeleteCritter_all( Critter& critter )
{
	DeleteNpc( critter );
}

// Not used since Kind system from NextDay is not present in current version of FORP.
// void DeleteCritter_default( Critter& critter )
// {
	// if( critter.KindIndex != 0 )
		// DeleteNpc( critter );
// }

void DeleteCritter_deads( Critter& critter )
{
	if( critter.IsDead() )
	{
		DeleteNpc( critter );
	}
}

void unsafe_GM_deleteCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_deleteCritter( player, param0, param1, param2, param3, param4 );
	}
}

void GM_deleteCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param1 == 0 )
	{
		Critter@ critter = GetCritter( param0 );
		if( !valid( critter ) ) return;
		DeleteNpc( critter );
	}
	else 
	{
		GM_deleteCritterdef @delete = @DeleteCritter_all;
		if( valid(param3) )
		{
			if( param3 == "dead" )
			{
				@delete = @DeleteCritter_deads;
			}
		}
		Critter@[] critters(0);
		Map@ map = player.GetMap();
		for( uint i = 0, iEnd = map.GetCrittersHex ( param1, param2, param0, FIND_ALL | FIND_ONLY_NPC, critters ); i < iEnd; i++ )
		{
			if( valid(critters[i]) )
			{
				delete( critters[i] );
			}
		}
	}
}

void unsafe_GM_delItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_delItem( player, param0, param1, param2, param3, param4 );
	}
}

void GM_delItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param1 == 0 )
	{
		Item@ item = player.GetMap().GetItem( param0 );
		if( valid( item ) )
		{
			DeleteItem( item );
		}
	}
	else 
	{
		Item@[] items;
		Map@ map = player.GetMap();
		for( uint16 x = param1 - param0, xMax = param1 + param0; x < xMax; x++ )
		{
			if( x < 0 )
			{
				continue;
			}
			
			for( uint16 y = param2 - param0, yMax = param2 + param0; y < yMax; y++ )
			{
				if( y < 0 )
				{
					continue;
				}
				
				map.GetItems( x, y, items );
			}
		}
		if( items.length() > 0 )
		{
			DeleteItems( items );
		}
	}
}

void unsafe_GM_delItemId( Critter& player, int itemID, int x, int y, string@ p3, int[]@ p4 )
{
	if( isGM( player ) )
	{
		GM_delItemId( player, itemID, x, y, p3, p4 );
	}
}

void GM_delItemId( Critter& player, int itemID, int x, int y, string@ p3, int[]@ p4 )
{
	if( itemID == 0 )
	{
		player.Say( SAY_NETMSG, "|0xFFFF00 Input item Id" );
		return;
	}
	
	Item@ item = GetItem( itemID );
	if( !valid( item ) )
	{
		player.Say( SAY_NETMSG, "|0xFFFF00 You must be on a same map as item" );
		return;
	}

	DeleteItem( item );
	player.Say( SAY_NETMSG, "|0xFFFF00 Item has been deleted" );
}

void unsafe_GM_brokeItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_brokeItem( player, param0, param1, param2, param3, param4 );
	}
}

void GM_brokeItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item @ item = GetItem( param0 );
    if( !valid( item ) )
	{
        return;
    }
	item.Deterioration = param1;
	item.Update();
    
	float value = param1 / 100.0f;
	player.Say( SAY_NETMSG, "Item " + "|0xFFFF00 " + item.Id + "|0x3CF800  deteriorated for " + "|0xFFFF00 " + value + "|0xFFFF00  %." );
}

void unsafe_GM_ClearAoE( Critter& player, Map& map, uint radius, uint16 hexX, uint16 hexY )
{
	if( isGM( player ) )
	{
		GM_ClearAoE( map, radius, hexX, hexY );
	}
}
 
void GM_ClearAoE( Map& map, uint radius, uint16 hexX, uint16 hexY )
{
    Item@[] items;
    map.GetItems( hexX, hexY, radius, 0, items );
    DeleteItems( items );
}

void unsafe_GM_GiveAll( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_GiveAll( player, param0, param1, param2, param3, param4 );
	}
}

void GM_GiveAll( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr;
	if( param0 != 0 ) 
	{
		@cr = GetCritter( param0 );
    }
	
	Item@ container;
	if( param1 != 0 )
	{
		@container = GetItem( param1 );
	}
	
    Item@[] items;
	
    if( param2 == 0 )
	{
		if( valid( cr ) )
		{
			cr.GetItems( SLOT_INV, items );
			cr.GetItems( SLOT_HAND1, items );
			cr.GetItems( SLOT_HAND2, items );
			cr.GetItems( SLOT_MISC, items );
			cr.GetItems( SLOT_HEAD, items );
			cr.GetItems( SLOT_BACK, items );
		
			Item@[] armors;
			uint count = cr.GetItems( SLOT_ARMOR, armors );
			if( count > 0 )
			{
				MoveItem( armors[0], 1, cr );
				items.insertLast( armors[0] );
			}
			
			player.Say( SAY_NETMSG, "|0xFFFF00 Items taken from: " + cr.Id + "." );
		}
		
		if( valid( container ) )
		{
			container.GetItems( 0, items );
			player.Say( SAY_NETMSG, "|0xFFFF00 Items taken from container: " + container.Id + "." );
		}
		MoveItems( items, player );
    }
	else if( param2 == 1 )
	{
        player.GetItems( SLOT_INV, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
		player.GetItems( SLOT_MISC, items );
		player.GetItems( SLOT_HEAD, items );
		player.GetItems( SLOT_BACK, items );
		
		Item@[] armors;
		uint count = player.GetItems( SLOT_ARMOR, armors );
		if( count > 0 )
		{
			MoveItem( armors[0], 1, player );
			items.insertLast( armors[0] );
		}

		if( valid( cr ) )
		{
			MoveItems( items, cr );
			player.Say( SAY_NETMSG, "|0xFFFF00 Items given to: " + cr.Id + "." );
		}
		
		if( valid( container ) )
		{
			MoveItems( items, container, 0);
			player.Say( SAY_NETMSG, "|0xFFFF00 Items put in container: " + container.Id + "." );
		}
    }
	else if( param2 == 2 )
	{
		if( valid( cr ) )
		{
			cr.GetItems( SLOT_INV, items );
			cr.GetItems( SLOT_HAND1, items );
			cr.GetItems( SLOT_HAND2, items );
			cr.GetItems( SLOT_MISC, items );
			cr.GetItems( SLOT_HEAD, items );
			cr.GetItems( SLOT_BACK, items );
			
			Item@[] armors;
			uint count = cr.GetItems( SLOT_ARMOR, armors );
			if( count > 0 )
			{
				MoveItem( armors[0], 1, cr );
				items.insertLast( armors[0] );
			}
			player.Say( SAY_NETMSG, "Items deleted from critter: " + cr.Id + "." );
		}
		
		if( valid( container ) )
		{
			container.GetItems( 0, items );
			player.Say( SAY_NETMSG, "”далены вещи в контейнере " + container.Id + "." );
		}

        DeleteItems( items );
    }
}

void unsafe_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		Clone( player, param0, param1, param2 );
	}
}

void Clone( Critter& player, int param0, int param1, int param2 )
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
	{
        return;
    }
	
	if( param1 == 1 )
    {
		FullClone( cr, player );
        player.Say( SAY_NETMSG, "|0xFFFF00  You copy your stats to: " + cr.Id + "." );
    }
    else if( param1 == 0 )
    {
		FullClone( player, cr );
        player.Say( SAY_NETMSG, "|0xFFFF00  You clone stats from: " + cr.Id );
    }
}

void unsafe_GM_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_Clone( player, param0, param1, param2, param3, param4 );
	}
}

void GM_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( valid( cr ) )
    {
		FullClone( player, cr );
        player.Say( SAY_NETMSG, "|0xFFFF00  Your stats are copied from: " + cr.Id );
    }
}

void unsafe_GM_TraderInit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_TraderInit( player, param0, param1, param2, param3, param4 );
	}
}

void GM_TraderInit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
	{
        return;
    }
	if( param1 > 0)
	{
		cr.StatBase[ST_DIALOG_ID] = param1;
	}
	_TraderInit( cr, true );
}

void GM_TraderInit( Critter& player, int param0, int param1, int param2)
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
	{
        return;
    }
	if( param1 > 0)
	{
		cr.StatBase[ST_DIALOG_ID] = param1;
	}
	_TraderInit( cr, true );
}

void unsafe_setautodoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		setautodoor( player, param0, param1, param2, param3, param4 );
	}
}

void setautodoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ door = GetItem( param0 );
    if( !valid(door) )
	{
        return;
	}
	
	uint16 x = 0;
    uint16 y = 0;
    Map@   map = door.GetMapPosition( x, y );
    uint16 x0 = x;
    uint16 y0 = y;
    for( uint8 i = 0; i < 6; i++ )
    {
        map.MoveHexByDir( x, y, i, 1 );
        if( param1 != 2 )
        {
            Item@ pedal = map.AddItem( x, y, PID_AUTODOOR, 1 );
            pedal.Val1 = door.Id;
            pedal.Val2 = param1;
        }
        else
        {
            Item@ pedal = map.GetItem( x, y, PID_AUTODOOR );
            if( valid( pedal ) )
			{
                DeleteItem( pedal );
			}
		}
        x = x0;
        y = y0;
    }
}

void unsafe_GM_GetItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_GetItem( player, param0, param1, param2, param3, param4 );
	}
}

void GM_GetItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item @ item = GetItem( param0 );
    if( !valid( item ) )
	{
        return;
    }
	MoveItem( item, 0, player );
}

//~run gm_commands _GM_DeleteTE id 0 0
void _GM_DeleteTE( Critter& gm, int event_Id, int param1, int param2 )
{
	if( isGM( gm ) )
	{
		EraseTimeEvent( event_Id );
	}
}

//~run gm_commands _GM_DeleteAllTE 0 0 0
void _GM_DeleteAllTE( Critter& gm, int param0, int param1, int param2 )
{
	if( isGM( gm ) )
	{
		for( uint i = 0; i < 1000000; i ++ )
		{
			EraseTimeEvent( i );
		}
	}
}

//~run gm_commands _GM_DeleteAllCTE 0 0 0
void _GM_DeleteAllCTE( Critter& gm, int param0, int param1, int param2 )
{
	if( isGM( gm ) )
	{
		Map@[] maps;
		int mapsCount = GetAllMaps( 0, maps );
		//Log( "mapsCount " + mapsCount );
		for( int k = 0; k < mapsCount; k++)
		{
			Map@ map = maps[ k ];
			if( !valid( map ) )
			{
				continue;
			}

			Critter@[] critters;
			uint crCount = map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, critters );
			//Log( "crCount " + crCount );
			for( uint i = 0; i < crCount; i++ )
			{
				if( !valid(critters[ i ]) )
				{
					continue;
				}
				
				for( uint j = 0; j < 65000; j++ )
				{
					uint[] index;
					uint[] duration;
					uint[] rate;
					Critter@ target = critters[ i ];
					//Log( "targetId " + target.Id );
					if( valid( target ) )
					{
						uint teCount = target.GetTimeEvents( j, index, duration, rate );
						//Log( "teCount " + teCount );
						if( teCount == 0 )
						{
							continue;
						}
						
						for( uint l = 0; l < teCount; l++ )
						{
							for( uint m = 0; m < index.length(); m ++ )
							{
								target.EraseTimeEvents( j );
							}
						}
					}
				}
			}
		}
	}
}

void unsafe_ClearHex( Critter& player, int x, int y, int param2, string@ param3, int[]@ param4 )
{
	if( !isGM( player ) )
		return;
	
	Map@ map = player.GetMap();
	if(!valid(map)) return;
	
	Item@[] items;
	uint count = map.GetItems( x, y, items );
	for( uint i = 0; i < count; i++ )
	{
		DeleteItem( items[i] );
	}
	player.Say( SAY_NETMSG, "Items deleted: " + count );
}

void unsafe_GM_mutateCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
	{
		GM_mutateCritter( player, param0, param1, param2, param3, param4 );
	}
}

void GM_mutateCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param0 <= 0 )
	{
		return;
	}
	
	Critter@ target = GetCritter(param0);
	if( !valid( target ) )
	{
		return;
	}
	
	if( valid( _CritGetItemArmor( target ) ) || valid( _CritGetItemMisc( target ) ) || valid( _CritGetItemHead( target ) ) || valid( _CritGetItemBack( target ) ) )
	{
		return;
	}
	
	KnockoutOnce( target, false, target.Stat[ ST_CURRENT_AP ] + 1000 ); 
    target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_LIE_DOWN );

	target.StatBase[ ST_BODY_TYPE ] = BT_SUPER_MUTANT;
	int crType = CRTYPE_SUPERMUTE_NORMAL;
	if( target.Skill[ SK_SNEAK ] >= 200 )
	{
		crType = CRTYPE_NIGHTKIN_NORMAL;
		target.SkillBase[ SK_SNEAK ] = CLAMP( target.Skill[ SK_SNEAK ] + 50, 0, 300 );
	}
	
	target.StatBase[ ST_BASE_CRTYPE ] = crType;
	target.ChangeCrType( crType );

	target.StatBase[ ST_NORMAL_ABSORB ] += 2;
	target.StatBase[ ST_NORMAL_RESIST ] += 20;
	target.StatBase[ ST_FIRE_ABSORB ] += 1;
	target.StatBase[ ST_FIRE_RESIST ] += 10;
	target.StatBase[ ST_ELECTRO_ABSORB ] += 1;
	target.StatBase[ ST_ELECTRO_RESIST ] += 10;
	target.StatBase[ ST_EXPLODE_ABSORB ] += 1;
	target.StatBase[ ST_EXPLODE_RESIST ] += 10;
	target.StatBase[ ST_PLASMA_ABSORB ] += 1;
	target.StatBase[ ST_PLASMA_RESIST ] += 5;

	target.StatBase[ ST_STRENGTH ] = CLAMP( target.Stat[ ST_STRENGTH ] + 2, 0, 15 );
	target.StatBase[ ST_ENDURANCE ] = CLAMP( target.Stat[ ST_ENDURANCE ] + 2, 0, 15 );
	target.StatBase[ ST_CHARISMA ] = CLAMP( target.Stat[ ST_CHARISMA ], 0, 3 );

	target.StatBase[ ST_MAX_LIFE ] += 100;
	target.StatBase[ ST_MELEE_DAMAGE ] += 15;
}

#endif // GM_COMMANDS