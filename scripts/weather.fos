#ifndef WEATHER_MODULE
#define WEATHER_MODULE

#include "_utils.fos"
#include "globalmap_group_h.fos"
#include "weather_h.fos"
#include "wildplant_h.fos"
#include "repair_h.fos"

import bool KillWildPlant( Item& wildplant ) from "wildplant";
import bool KillPlant( Item& plant ) from "plants";
import bool CheckGasMask( Critter& cr ) from "gasses";

void applyWetness( Critter& cr )
{
	Map@ map = cr.GetMap();
	Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
	Item@ helmet = cr.GetItem( 0, SLOT_HEAD );

    /* Base intensity in range of 0 to 255 */
    uint8 amount = map.GetRain();
    
    if( valid( armor ) )
    {    
		if( armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 )
		{
			return;
		}
		else if( armor.Proto.Material == MATERIAL_POLYMER )
		{
			amount = CLAMP( amount - 30, 0, 250 );
		}
	}

    if( valid( helmet ) )
    {
        amount = CLAMP( amount - 20, 0, 250 );
    }
	
	if(__AcidRain == 1)
	{
		if( !IsHuman( cr ) ) return;

		if( !CheckGasMask( cr ) )
		{
			if( cr.Stat[ ST_BODY_TYPE ] == BT_GHOUL )
			{
				cr.StatBase[ ST_POISONING_LEVEL ] += ( amount / 60 );
			}
			else
			{
				cr.StatBase[ ST_POISONING_LEVEL ] += ( amount / 30 );
			}
		}
		
		Item@ back = _CritGetItemBack( cr );
		if( back.GetType() == ITEM_TYPE_ARMOR && !FLAG( back.Proto.Armor_Perk, ARMOR_PERK_HAS_HOOD ) )
		{
			if(valid(armor))
			{
				DeteriorateItem(cr, armor, amount / 5);
			}
			if(valid(helmet))
			{
				DeteriorateItem(cr, helmet, amount / 5);
			}
		}

	}
/*	else
	{
		cr.StatBase[ ST_WETNESS ] += ( amount / 25 ); 
	}*/
}

uint e_GlobalRainSimulation( uint[]@ values )
{
	uint duration_time = values[0] * 60;
	if( duration_time <= 0 )
	{
		__GlobalRain == 0;
		return 0; 
	}
	
	uint elapsed_time = values[1];
	float Pi = 3.1415926535f;
    uint strength = CLAMP( int( sin( Pi * elapsed_time / duration_time ) * 255 ), 1, 255 );

	if( elapsed_time < duration_time && __GlobalRain != 0 )
	{
		
		uint repeat;
		if( strength > 200 )
		{
			repeat = 720;
		}
		else if( strength >= 100 && strength < 200 )
		{
			repeat = 315;
		}
		else
		{
			repeat = 200;
		}
		
		values[1] = elapsed_time + repeat;
		
		Map@[] maps;
		for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
		{   
			uint16 pid = maps[ i ].GetProtoId();
			if( GetMapLevelByPid( pid ) == 0 )
			{
				Map@ map = maps[i];
				map.SetRain( strength );
				RainSound( map, strength );
			}
		}
		return REAL_SECOND( repeat );
	}
	
	Map@[] maps;
	for( int j = 0, iend = GetAllMaps( 0, maps ); j < iend; j++ )
	{   
		uint16 pid = maps[ j ].GetProtoId();
		if( GetMapLevelByPid( pid ) == 0 )
		{
			Map@ map = maps[j];
			map.SetRain( 0 );
			RainSound( map, 0 );
			applyWatering( map );
		}
	}
	__GlobalRain = 0;
	return 0;
}

void applyWatering( Map& map )
{
	Item@[] plants;
	map.GetItemsByType( ITEM_TYPE_PLANT, plants );
	map.GetItems( PID_MUSHBED_EMPTY, plants );
	map.GetItems( PID_PLANTBARREL_EMPTY, plants );
	map.GetItems( PID_HYDRO_NS_EMPTY, plants );
	map.GetItems( PID_HYDRO_EW_EMPTY, plants );
	for( uint i = 0, len = plants.length(); i < len; i ++ )
	{
		Item@ plant = plants[i];
		if( valid( plant ) )
		{
			if( !map.HasRoof( plant.HexX, plant.HexY ) )
			{
				if( plant.Proto.Item_Subtype != ITEM_SUBTYPE_TREE && plant.Proto.Item_Subtype != ITEM_SUBTYPE_TREE_SLUMP ) //tree use val4 for original tree DNA
				{						
					if(__AcidRain == 1)
					{
						if(Wildplants.find( plant.GetProtoId() ) == -1) KillPlant( plant );
						else KillWildPlant( plant );
					}
					else
					{
						plant.PLANT_WATERING = 1;
					}
				}
			}
		}
	}
	
	plants.resize( 0 );
}

//~run weather _TerminateRainEvent 0 0 0
void _TerminateRainEvent( Critter& gm, int param0, int param1, int param2 )
{
	__GlobalRain = 0;
}

//Rain sound selections
void RainSound( Map& map, int strength )
{
	string rainSound = "";
	if( strength > 0 && strength < 100 )
	{
		rainSound = "rain_1.ogg";
	}
	else if( strength >= 100 && strength < 200 )
	{
		rainSound = "Storm_1R.ogg";
	}
	else if( strength >= 200 )
	{
		rainSound = "Groza_1.ogg";
	}
	
	bool isRain = rainSound.length() > 0;
	
	Critter@[] players;
	map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, players );
	for( uint i = 0, len =  players.length(); i < len; i++ )
	{
		Critter@ player = players[i];
		if( valid( player ) )
		{
			if( isRain )
			{
				int timeStamp = GetTick();
				int soundId = map.Id + 1000 + strength + player.Id;
				player.RunClientScript( "fofmod@__PlayMapMusic", soundId, timeStamp, 0, "sound/sfx/" + rainSound, null );
			}
			else
			{
				player.RunClientScript( "fofmod@__StopAll", 0, 0, 0, null, null );
			}	
		}
	}
	
	players.resize(0);
}

#endif // WEATHER_MODULE