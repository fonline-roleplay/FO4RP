#include "_utils.fos"

#define LVAR_TYPE	0
#define UVAR_TYPE	1
#define GVAR_TYPE 	2

#define DELTA		5000
#define STEP		1000

/** Возвращает LVAR или UVAR по индексу "таймаутов". */
GameVar@ getGameVar( Critter& player, Critter@ npc, int type, int id )
{
    if( !valid( npc ) )
	{
		testInfo( player, "НПЦ не найден." );
		return null; 
	}
        
	if( type < LVAR_TYPE || type > GVAR_TYPE )
	{
		testInfo( player, "Type '" + type + "' out of bounds." );
		return null; 
	}

	if( id < 0 || id >= STEP )
	{
		testInfo( player, "Index '" + id + "' out of bounds(" + STEP + ")." );
		return null; 
	}
	
	switch( type )
	{
		case( LVAR_TYPE ): return GetUnicumVar( UVAR_uniq_timeout, npc.Id, id );
		case( UVAR_TYPE ): return GetUnicumVar( UVAR_uniq_timeout, player.Id, npc.Id * STEP + id );
		case( GVAR_TYPE ): return GetUnicumVar( UVAR_uniq_timeout, DELTA, id );
	}
	
	return null;
}

/**	Установка таймаутов всех видов (GVAR, LVAR, UVAR):*/
void r_SETm( Critter& player, Critter@ npc, int VARTYPE, int n, int value )  { VarSet( player, npc, VARTYPE, n, value * 60 ); }
void r_SETm( Critter& player, Critter@ npc, int VARTYPE, 	    int value )  { VarSet( player, npc, VARTYPE, 0, value * 60 ); }
void r_SET ( Critter& player, Critter@ npc, int VARTYPE, int n, int value )  { VarSet( player, npc, VARTYPE, n, value ); }
void r_SET ( Critter& player, Critter@ npc, int VARTYPE, 		int value )  { VarSet( player, npc, VARTYPE, 0, value ); }
bool VarSet( Critter& player, Critter@ npc, int VARTYPE, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, VARTYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    var = __FullSecond + REAL_SECOND( value );
	return true;
}

/**	Изменение таймаута. */
void r_ADDm( Critter& player, Critter@ npc, int VARTYPE, int n, int delta ) { VarAdd( player, npc, VARTYPE, n, delta * 60 ); }
void r_ADDm( Critter& player, Critter@ npc, int VARTYPE, 	    int delta ) { VarAdd( player, npc, VARTYPE, 0, delta * 60 ); }
void r_ADD ( Critter& player, Critter@ npc, int VARTYPE, int n, int delta ) { VarAdd( player, npc, VARTYPE, n, delta ); }
void r_ADD ( Critter& player, Critter@ npc, int VARTYPE, 	  	int delta ) { VarAdd( player, npc, VARTYPE, 0, delta ); }
bool VarAdd( Critter& player, Critter@ npc, int VARTYPE, int n, int delta )
{
    GameVar@ var = getGameVar( player, npc, VARTYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    if( var < __FullSecond )
		var = __FullSecond;
	var += REAL_SECOND( delta );
	return true;
}

/**	Проверка на то, что таймаут НПЦ ЗАКОНЧИТСЯ через value секунд. */
bool b_LESS ( Critter& player, Critter@ npc, int VARTYPE ) 					{ return  b_LESS( player, npc, VARTYPE, 0, 0 ); }
bool b_MORE ( Critter& player, Critter@ npc, int VARTYPE ) 					{ return  b_MORE( player, npc, VARTYPE, 0, 0 ); }
bool b_LESS ( Critter& player, Critter@ npc, int VARTYPE, int n, int value ){ return !b_MORE( player, npc, VARTYPE, n, value ); }
bool b_LESSm( Critter& player, Critter@ npc, int VARTYPE, int n, int value ){ return !b_MORE( player, npc, VARTYPE, n, value * 60 ); }
bool b_MOREm( Critter& player, Critter@ npc, int VARTYPE, int n, int value ){ return  b_MORE( player, npc, VARTYPE, n, value * 60 ); }
bool b_MORE ( Critter& player, Critter@ npc, int VARTYPE, int n, int value )
{
	GameVar@ var = getGameVar( player, npc, VARTYPE, n );
	return !valid( var ) || ( __FullSecond + REAL_SECOND( value ) < var.GetValue() );
}


//Увы, в диалог-едиторе проще сделать разноимённые ф-ии, чем добавлять ещё один параметр - тип вара, поэтому приходится переопределять:

//GVAR:
	void r_gSETm( Critter& player, Critter@ npc, int n, int value ) { gSET( player, npc, n, value * 60 ); }
	void r_gSETm( Critter& player, Critter@ npc, 		int value ) { gSET( player, npc, 0, value * 60 ); }
	void r_gSET ( Critter& player, Critter@ npc, int n, int value ) { gSET( player, npc, n, value ); }
	void r_gSET ( Critter& player, Critter@ npc, 		int value ) { gSET( player, npc, 0, value ); }
	bool gSET   ( Critter& player, Critter@ npc, int n, int value ) { return VarSet( player, npc, GVAR_TYPE, n, value ); }

	void r_gADDm( Critter& player, Critter@ npc, int n, int delta ) { gADD( player, npc, n, delta * 60 ); }
	void r_gADDm( Critter& player, Critter@ npc, 		int delta ) { gADD( player, npc, 0, delta * 60 ); }
	void r_gADD ( Critter& player, Critter@ npc, int n, int delta ) { gADD( player, npc, n, delta ); }
	void r_gADD ( Critter& player, Critter@ npc, 		int delta ) { gADD( player, npc, 0, delta ); }
	bool gADD   ( Critter& player, Critter@ npc, int n, int delta ) { return VarAdd( player, npc, GVAR_TYPE, n, delta ); }

	bool b_gLESS ( Critter& player, Critter@ npc ) 					{ return  b_gLESS( player, npc, 0, 0 ); }
	bool b_gMORE ( Critter& player, Critter@ npc ) 					{ return  b_gMORE( player, npc, 0, 0 ); }
	bool b_gLESS ( Critter& player, Critter@ npc, int n, int value ){ return !b_gMORE( player, npc, n, value ); }
	bool b_gLESSm( Critter& player, Critter@ npc, int n, int value ){ return !b_gMORE( player, npc, n, value * 60 ); }
	bool b_gMOREm( Critter& player, Critter@ npc, int n, int value ){ return  b_gMORE( player, npc, n, value * 60 ); }
	bool b_gMORE ( Critter& player, Critter@ npc, int n, int value ){ return  b_MORE ( player, npc, GVAR_TYPE, n, value ); }

//LVAR:
	void r_lSETm( Critter& player, Critter@ npc, int n, int value ) { lSET( player, npc, n, value * 60 ); }
	void r_lSETm( Critter& player, Critter@ npc, 		int value ) { lSET( player, npc, 0, value * 60 ); }
	void r_lSET ( Critter& player, Critter@ npc, int n, int value ) { lSET( player, npc, n, value ); }
	void r_lSET ( Critter& player, Critter@ npc, 		int value ) { lSET( player, npc, 0, value ); }
	bool lSET   ( Critter& player, Critter@ npc, int n, int value ) { return VarSet( player, npc, LVAR_TYPE, n, value ); }

	void r_lADDm( Critter& player, Critter@ npc, int n, int delta ) { lADD( player, npc, n, delta * 60 ); }
	void r_lADDm( Critter& player, Critter@ npc,		int delta ) { lADD( player, npc, 0, delta * 60 ); }
	void r_lADD ( Critter& player, Critter@ npc, int n, int delta ) { lADD( player, npc, n, delta ); }
	void r_lADD ( Critter& player, Critter@ npc, 		int delta ) { lADD( player, npc, 0, delta ); }
	bool lADD   ( Critter& player, Critter@ npc, int n, int delta ) { return VarAdd( player, npc, LVAR_TYPE, n, delta ); }

	bool b_lLESS ( Critter& player, Critter@ npc ) 					{ return  b_lLESS( player, npc, 0, 0 ); }
	bool b_lMORE ( Critter& player, Critter@ npc ) 					{ return  b_lMORE( player, npc, 0, 0 ); }
	bool b_lLESS ( Critter& player, Critter@ npc, int n, int value ){ return !b_lMORE( player, npc, n, value ); }
	bool b_lLESSm( Critter& player, Critter@ npc, int n, int value ){ return !b_lMORE( player, npc, n, value * 60 ); }
	bool b_lMOREm( Critter& player, Critter@ npc, int n, int value ){ return  b_lMORE( player, npc, n, value * 60 ); }
	bool b_lMORE ( Critter& player, Critter@ npc, int n, int value ){ return  b_MORE ( player, npc, LVAR_TYPE, n, value ); }

//UVAR:
	void r_uSETm( Critter& player, Critter@ npc, int n, int value ) { uSET( player, npc, n, value * 60 ); }
	void r_uSETm( Critter& player, Critter@ npc, 		int value ) { uSET( player, npc, 0, value * 60 ); }
	void r_uSET ( Critter& player, Critter@ npc, int n, int value ) { uSET( player, npc, n, value ); }
	void r_uSET ( Critter& player, Critter@ npc, 		int value ) { uSET( player, npc, 0, value ); }
	bool uSET   ( Critter& player, Critter@ npc, int n, int value ) { return VarSet( player, npc, UVAR_TYPE, n, value ); }

	void r_uADDm( Critter& player, Critter@ npc, int n, int delta ) { uADD( player, npc, n, delta * 60 ); }
	void r_uADDm( Critter& player, Critter@ npc, 		int delta ) { uADD( player, npc, 0, delta * 60 ); }
	void r_uADD ( Critter& player, Critter@ npc, int n, int delta ) { uADD( player, npc, n, delta ); }
	void r_uADD ( Critter& player, Critter@ npc, 		int delta ) { uADD( player, npc, 0, delta ); }
	bool uADD   ( Critter& player, Critter@ npc, int n, int delta ) { return VarAdd( player, npc, UVAR_TYPE, n, delta ); }

	bool b_uLESS ( Critter& player, Critter@ npc ) 					{ return  b_uLESS( player, npc, 0, 0 ); }
	bool b_uMORE ( Critter& player, Critter@ npc ) 					{ return  b_uMORE( player, npc, 0, 0 ); }
	bool b_uLESS ( Critter& player, Critter@ npc, int n, int value ){ return !b_uMORE( player, npc, n, value ); }
	bool b_uLESSm( Critter& player, Critter@ npc, int n, int value ){ return !b_uMORE( player, npc, n, value * 60 ); }
	bool b_uMOREm( Critter& player, Critter@ npc, int n, int value ){ return  b_uMORE( player, npc, n, value * 60 ); }
	bool b_uMORE ( Critter& player, Critter@ npc, int n, int value ){ return  b_MORE ( player, npc, UVAR_TYPE, n, value ); }
