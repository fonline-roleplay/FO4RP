#include "_macros.fos"
#include "_msgstr.fos"

#include "_ltp.fos"

bool ltp_inited = false;
void ltp_init () {
	LTPREG (LTP_ROBOT_REPAIR, process_robot_repair)
	ltp_inited = true;
}

//~run repair rest id 0 0
void rest( Critter& cr, int id, int, int )
{
	if( id == 0 )
	{
		cr.EraseTimeEvents( CTE_TIRED );
		cr.Say( SAY_NETMSG, "Вы отдохнули и готовы продолжать свои безумные эксперименты." );
		return;
	}

	Critter@ target = GetCritter( id );
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Цель не найдена." );
		return;
	}

	target.EraseTimeEvents( CTE_TIRED );
	cr.Say( SAY_NETMSG, "Целевой криттер воодувлён." );
	target.Say( SAY_NETMSG, "На вас резко нахлынуло вдохновение. Вам очень хочется что-либо изобрести или изучить!" );
}

import void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set ) from "critter_status";

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( not item.IsDeteriorable() )
	{
		cr.Say( SAY_NETMSG, "Этот объект не подлежит износу." );
        return true;
	}

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

    if( cr.Timeout[ TO_SK_REPAIR ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }

    // Repair
    int    repair = cr.Skill[ SK_REPAIR ];
    uint8  mode = 0;
    uint16 activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;

	
	bool isItemCased = true; // pm add temprorary
	
    // запчасти для оружия и брони ErlKing
    int  type = item.GetProtoId();
	
	uint16[] tools;
	uint16[] parts;
	
    switch( type )
    {
	case PID_TECH_ARMOR:
	    repair -=10;
	    tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_MULTI_TOOL );
        parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
        break;
	case PID_arlthr1:
	case PID_arlthr2:
	    repair -= 20;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
        break;
	case PID_VEST_MK1:
	case PID_VEST_MK2:
	case PID_militia_armor_MK2:
	    repair -= 20;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_WELDING );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
        break;
	case PID_PERSONAL_JACKET:
        repair += 20;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 3 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
        break;
	case PID_ArmorGaz:
	    repair += 20;
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_SHIV );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
        break;
	case PID_armetal:
	case PID_general:
	    repair -= 40;
		tools.insertLast( PID_WORKBENCH_TOKEN );
        tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );		
		parts.insertLast( PID_CHEMICALS ); parts.insertLast( 3 );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 3 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
        break;
	case PID_TRIBE_ARMOR2:
	    repair -= 5;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_PELT3 ); parts.insertLast( 2);
		parts.insertLast( PID_KLK ); parts.insertLast( 6);
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 3 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		parts.insertLast( PID_DEATHCLAW_HIDE ); parts.insertLast( 1 );
        break;  
	case PID_TRIBE_ARMOR3:
	    repair -= 5;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 6);
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 6 );
        break;  
	case PID_LEATHER_COAT:
	    repair += 20;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 5 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 6 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
        break;
	case PID_FIRE_ARMOR:
	    repair -= 25;
		parts.insertLast( PID_FIRE_GECKO_PELT ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
		parts.insertLast( PID_MEDNEEDLE ); parts.insertLast( 2 );
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
        break;
	case PID_MUTARMOR_METAL:	
	case PID_MUTARMOR_METAL_MK2:
	    repair -= 35;
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_WELDING );
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
        break;
	case PID_PURPLE_ROBE:
	case PID_BLACK_ROBE:
	case PID_BROWN_ROBE:
	case PID_DARK_GREEN_ROBE:
	case PID_RED_RITUAL_ROBE:
	case PID_BLACK_RITUAL_ROBE:
	case PID_DARK_BLACK_ROBE:
	case PID_DARK_RED_ROBE:
	case PID_RED_ROBE:
	case PID_DARK_BROWN_ROBE:
	case PID_DARK_BLUE_ROBE:
	case PID_ATOM_CHILD_ROBE:
	case PID_parade_uniform:
	case PID_Laboratory_coat:
	    repair += 50;
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
        break;
	case PID_MUTARMOR_LEATHER:
	    tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		break;
    case PID_SANDROBE:
    case PID_JUMPSUIT:
    case PID_FAKE_JUMPSUIT:
        repair += 50;
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
        break;
	case PID_LEATHER_JACKET:
	case PID_BIKER_JACKET:
	case PID_copinv1:
	case PID_TRIBE_ARMOR1:
	case PID_GEKKO_ARMOR:
	case PID_LEATHER_SHIRT:
        repair += 25;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
        break;
    case PID_LEATHER_ARMOR:
    case PID_CURED_LEATHER_ARMOR:
	case PID_IMPROVED_JACKET:
	case PID_CARAVAN_MASTER_JACKET:
        repair += 20;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 3 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
        break;
    case PID_LEATHER_ARMOR_MK_II:
	case PID_militia_armor_MK1:
	case PID_arkirasa:
        repair += 15;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
		break;
    case PID_LEATHER_ARMOR_MK_III:
	case PID_LEATHER_ARMOR_GREY:
	case ITEM_TREASURE_HOLE:
	case PID_arbsbl1:
	case PID_FZZZ1:
	case PID_FZZZ2:
	    repair -=5;
	    tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_MULTI_TOOL );
        parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4);
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
        break;
    case PID_CURED_LEATHER_ARMOR_MK_II:
	    repair +=5;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2);
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );		
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
		break;
	case PID_LEATHER_ARMOR_CAMMO:
    case PID_LEATHER_ARMOR_RED:
	    repair += 15;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
		break;
    case PID_LEATHER_ARMOR_BLACK:
        repair -=5;
	    tools.insertLast( PID_SHIV );
		tools.insertLast( PID_SCISSORS );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_MULTI_TOOL );
        parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4);
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
        break;	
	case PID_RIOT_ARMOR:
	case PID_armltfuk:
	case PID_CARED:
	case PID_tesla21:
	    repair -=30;
	    tools.insertLast( PID_WELDING );
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		break;
    case PID_METAL_ARMOR:
	case PID_arbsbl2:
	case PID_glad1:
	    repair +=5;
		tools.insertLast( PID_SLEDGEHAMMER );
		tools.insertLast( PID_WELDING );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_SPIKE_MEH ); parts.insertLast( 2 );
		break;
    case PID_METAL_ARMOR_MK_II:
	case PID_ZERKALO_METAL_ARMOR_MK_II:
        repair -= 10;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 4 );
        break;
    case PID_MANTIS_ARMOR:
        repair -= 5;
		tools.insertLast( PID_SHIV );
		tools.insertLast( PID_MEDNEEDLE );
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
        break;
    case PID_MIRELURK_ARMOR:
		repair -=30;
		tools.insertLast( PID_WORKBENCH_TOKEN );
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SLEDGEHAMMER );
		tools.insertLast( PID_SHIV );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 );
		parts.insertLast( PID_ROPE ); parts.insertLast( 1 );
		break;
	case PID_HOUND_ARMOR:
	case PID_POLICE_ARMOR:
        repair -= 40;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 3 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
		parts.insertLast( PID_CHEMICALS ); parts.insertLast( 2 );
        break;
	case PID_CASER:
	case PID_CADES:
    case PID_COMBAT_ARMOR:
	case PID_COMBAT_ARMOR_RNEGATE_MK1:
	case PID_COMBAT_ARMOR_DESERT_MK1:
	case PID_CMBT_DESERT:
	case PID_militia_armor_MK3:
        repair -= 40;
		tools.insertLast( PID_WORKBENCH_TOKEN );
        tools.insertLast( PID_WELDING );
        tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CHEMICALS ); parts.insertLast( 4 );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
        break;
// Ремонт совсем изношенной куртки до новой изношенной куртки xD (.э засирает байтами сервер)
    case PID_OLD_JACKET:
        repair += 70;
		tools.insertLast( PID_SHIV );
        tools.insertLast( PID_SCISSORS );
        tools.insertLast( PID_MEDNEEDLE );		
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 1 );
        break;
		
// Рамблеровские ремонты
    case PID_IMPROVED_FLAMETHROWER:
	repair -= 50;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		tools.insertLast( PID_WORKBENCH_TOKEN );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_EMKOCT_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_LIGHTER ); parts.insertLast( 1 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 2 );
		break;
	case PID_SPEARTHROWER1:
    case PID_SPEARTHROWER2:
	    repair += 50;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
        break;
	case PID_SPIKEGUN:
	    repair += 45;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
        break;
	case PID_DESERT_EAGLE:
    case PID_DESERT_EAGLE_EXT_MAG:
	    repair -= 15;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
		parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;
    case PID_44_MAGNUM_REVOLVER:
	case PID_44_MAGNUM_SPEEDLOADER:
	    repair -= 15;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
		parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;
	case PID_HUNTING_RIFLE:
	    repair -=20;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;
    case PID_ASSAULT_RIFLE:
	case PID_ASSAULT_RIFLE_OPT:
	case PID_ASSAULT_RIFLE_EXT_MAG:
	case PID_ASSAULT_RIFLE_EXT_MAG_OPT:
	case PID_ASSAULT_RIFLE_EXT_XXL_MAG_OPT:
        repair -=20;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;
	case PID_SMITHM76:
	case PID_smghlmut:
	case PID_smghkmgz:
	case PID_smghkscp:
        repair -=20;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_DVIGAT_MEH ); parts.insertLast( 1 );
        break;
    case PID_FN_FAL:
        repair -=25;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
		parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;		
	case PID_TOMMY_GUN:	
	    repair -=20;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_DVIGAT_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 2 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
        break;
    case PID_rflnscop:
        repair -=20;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;
		
// оружие совсем лоу тек
    case PID_REVOLVER_LOW:
    case PID_PISTOL_LOW:
    case PID_BIGGUN_LOW:
    case PID_SMOKE_GUN_LOW:
    case PID_SHOTPISTOL_LOW:
        repair += 50;
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
        break;
	case PID_COLT:
	    repair +=10;
        tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
        break;
    
// оружие лоу тек
    case PID_QUADRO_SHOTGUN:
    case PID_LOW_SNIPER2:
    case PID_SHOTGUN:
        repair += 20;
    case PID_SAWED_OFF_SHOTGUN:
    case PID_10MM_PISTOL:
	case PID_10MM_PISTOL_MAGAZIN:
        repair += 30;
    case PID_GECKO_LOW:
	case PID_SAVAGE:
	case PID_IMPROVED_SAVAGE:
    case PID_REV_RIFLE_LOW:
        repair += 30;
    case PID_FLAMER:
    case PID_ONEHAND_ROCKET_LAUNCHER:
    case PID_AUTOGUN_LOW:
    case PID_SAWGUN_LOW:
    case PID_GATLING_LOW:
    case PID_SNIPER_GUN_LOW:
    case PID_14mm_BIGGUN2_LOW:
	case PID_bglaw:
	case PID_NEEDLER_PISTOL:
    case PID_DOUBLE_RIFLE:
    case PID_DRUM_GUN_LOW:
        repair -= 25;
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 4 );		
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 5 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 2 );
        break;

// оружие среднее
    case PID_9MM_MAUSER:
	case PID_MAUSER02:
	case PID_MAUSER01:
	case PID_pstglok1:
	case PID_9MM_PISTOL:
    case PID_MAUSER_SMG:
    case PID_COMBAT_SHOTGUN:
        repair -= 15;
    case PID_SCOPED_HUNTING_RIFLE:
	case PID_rflhunt1:
	case PID_rflhunt2:
        repair -= 5;
    case PID_REMINGTON:
	case PID_POMPA:
    case PID_10MM_SMG:
	case PID_9MM_PP:
	case PID_SMGFILIP:
	case PID_IPOLICE:
    case PID_GREASE_GUN:
        repair -= 10;
    case PID_14MM_PISTOL:
    case PID_ANACONDA:
        repair -= 5;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
		parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1);
        break;

// оружие энерго лоу
    case PID_SOLAR_SCORCHER:
        repair -= 30;
    case PID_SOUND_BLASTER:
    case PID_LASER_PISTOL_LOW:
    case PID_LASER_PISTOL_LOW2:
    case PID_LASER_RIFLE_LOW:
    case PID_PLASMA_SMG_LOW:
        repair -= 10;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_SCREWDRIVER );
		tools.insertLast( PID_Svarka );
		parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 2 );
        break;

// оружие энерго хай
    case PID_PLASMA_RIFLE:
        repair -= 10;
    case PID_PLASMA_PISTOL:
        repair -= 10;
    case PID_LASER_RIFLE:
        repair -= 10;
    case PID_MAGNETO_LASER_PISTOL:
        repair -= 10;
    case PID_LASER_PISTOL:
	case PID_SUN:
	case PID_SUN2:
	case PID_SUN3:
        repair -= 30;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_SCREWDRIVER );
		tools.insertLast( PID_Svarka );
		parts.insertLast( PID_CRAFT_E_PART ); parts.insertLast( 2 );		
		parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
        break;

// оружие высокого класса
    case PID_HK_CAWS:
    case PID_PANCOR_JACKHAMMER:
    case PID_HK_P90C:
    case PID_MINIGUN:
    case PID_AVENGER_MINIGUN:
    case PID_BOZAR:
    case PID_LIGHT_SUPPORT_WEAPON:
    case PID_M60:
    case PID_GRENADELAUNCHER:
	case PID_SNIPER_RIFLE:
        repair -= 70;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		tools.insertLast( PID_SCREWDRIVER );
		parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
		parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
        break;
		
    default:
		cr.Say( SAY_NETMSG, "Не ремонтируемо" ); 
		return true;
    }

	if ( tools.length()>0 || parts.length()>0 )
	{
		bool NoTools = false;
		bool NoParts = false;

		for( uint8 j = 0; j < tools.length(); j++ )
			if( cr.CountItem( tools[j] ) == 0 ) NoTools = true;

		for( uint8 jj = 0; jj < parts.length(); jj+=2 )
			if( cr.CountItem( parts[jj] ) < parts[jj+1] ) NoParts = true;
		
		if ( NoTools || NoParts )
		{
			if( tools.length() > 0 )
				cr.Say( SAY_NETMSG, "Необходимый инструмент:" );
			for( uint8 i = 0; i < tools.length(); i++ )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*tools[i] );
			}	
		
			if( parts.length() > 0 )
				cr.Say( SAY_NETMSG, "Требуемые части для ремонта:" );
			for( uint8 ii = 0; ii < parts.length(); ii+=2 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*parts[ii] );
				cr.Say( SAY_NETMSG, parts[ii+1] + " шт." );
			}	
			
			return true;
		}
		else
		{
			for( uint8 iii = 0; iii < parts.length(); iii+=2 )
			{
				cr.DeleteItem( parts[iii], parts[iii+1] );
			}		
		}
	}
		
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
    {
        if( FLAG( item.BrokenFlags, BI_HIGHBROKEN ) )
            repair -= 100;                               // было 150
        else if( FLAG( item.BrokenFlags, BI_NORMBROKEN ) )
            repair -= 75;                                // было 100
        else if( FLAG( item.BrokenFlags, BI_LOWBROKEN ) )
            repair -= 25;                                // было 50

        repair -= item.BrokenCount * 50 / MAX_BROKENS;   // было 100
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            item.Deterioration = 0;
            UNSETFLAG( item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 40;
        }
        else
        {
            item.BrokenCount++;
            if( item.BrokenCount >= MAX_BROKENS )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    }
    // Service
    else
    {
        if( FLAG( item.BrokenFlags, BI_SERVICE ) )
            repair -= 25;
        repair -= item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            SETFLAG( item.BrokenFlags, BI_SERVICE );
            if( activePid == PID_OIL_CAN )
            {
                item.Deterioration = 0;
                cr.DeleteItem( PID_OIL_CAN, 1 );
            }
            else
            {
                int cnt = repair * MAX_DETERIORATION / 100;
                if( cnt > item.Deterioration )
                    item.Deterioration = 0;
                else
                    item.Deterioration -= cnt;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 20;
        }
        else
        {
            DeteriorateItem( cr, item, MAX_DETERIORATION / 5 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }
    item.Update();
    cr.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( cr );
    return true;
}

void DeteriorateItem( Critter& cr, Item& item, int deteriorationCount ) // Export
{
    if( deteriorationCount <= 0 || not item.IsDeteriorable() || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) )
        return;

    item.Deterioration += deteriorationCount;
    if( item.Deterioration >= MAX_DETERIORATION )
    {
        item.Deterioration = MAX_DETERIORATION;
        if( !IsHaveBlade( item.GetProtoId() ) )     // pm added
        {
            item.BrokenCount++;

            // из сдк
            // SetItemCost(item);

            int brokenLvl = Random( 0, item.BrokenCount / ( MAX_BROKENS / 4 ) );

            if( item.BrokenCount >= MAX_BROKENS || brokenLvl >= 3 )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
            else if( brokenLvl == 2 )
                SETFLAG( item.BrokenFlags, BI_HIGHBROKEN );
            else if( brokenLvl == 1 )
                SETFLAG( item.BrokenFlags, BI_NORMBROKEN );
            else
                SETFLAG( item.BrokenFlags, BI_LOWBROKEN );
        }
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
    }

    item.Update();
}

void SetDeterioration( Item& item, int deteriorationProcent ) // Export
{
    if( not item.IsDeteriorable() )
        return;
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = MAX_DETERIORATION * deteriorationProcent / 100;
    item.BrokenCount = MAX_BROKENS * deteriorationProcent / 100;
    if( deteriorationProcent == 100 )
        SETFLAG( item.BrokenFlags, BI_BROKEN );
    item.Update();
}

int GetDeteriorationProcent( Item& item ) // Export
{
    if( not item.IsDeteriorable() )
        return 0;
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
        return 100;
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}

bool IsHaveBlade( uint16 pid )            // pm added
{
    if( pid == PID_KNIFE             ||
        pid == PID_SPEAR             ||
        pid == PID_THROWING_KNIFE    ||
        pid == PID_RIPPER            ||
        pid == PID_SPIKED_KNUCKLES   ||
        pid == PID_COMBAT_KNIFE      ||
        pid == PID_SHARP_SPEAR       ||
        pid == PID_SWITCHBLADE       ||
        pid == PID_SHIV              ||
        pid == PID_LIL_JESUS_WEAPON  ||
        pid == PID_WAKIZASHI_BLADE   )
        return true;

    return false;

}

import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";
import bool isGM( Critter& player ) from "gm";

//import bool AskAction( Critter& cr, Item& item ) from "repair";
bool AskAction( Critter& cr, Item& item ) //exported
{
	uint type = item.GetType();
	
	cr.ParamBase[CR_VAL0] = item.Id;
	
	uint[] inspectable = { ITEM_TYPE_ARMOR, ITEM_TYPE_WEAPON, ITEM_TYPE_AMMO };
	
	string[] data = { "repair@answer_Action", "Выберите действие:", "Починить", "Разобрать" };
	if( inspectable.find( type ) != -1 )
	{
		data.insertLast( "Сделать чертеж" );
		if( isGM( cr ) )
			data.insertLast( "Список чертежей" );
	}
	
	DIALOG_MENU( cr, data );
	return true;
}

void answer_Action( Critter& cr, uint answerI, string& answerS )
{
	Item@ item = GetItem( cr.Param[CR_VAL0] );
	if( !valid( item ) ) return;
	
	switch( answerI )
	{
		case(0): TryRepairItem( cr, item ); break;
		case(1): TryDisassembleItem( cr, item ); break;
		case(2): TryMakeBlueprint( cr, item ); break;
		case(3): EnlistBlueprints( cr ); break;
		default: cr.Say( SAY_NETMSG, "Из этого ничего не вышло." ); break;
	}
}

class Blueprint
{
	uint original;
	uint pid;
	//TODO: Уникальную сложность для разных чертежей.
	uint difficulty;
	
	Blueprint( uint original, uint pid, uint difficulty = 300 )
	{
		this.original = original;
		this.pid = pid;
		this.difficulty = difficulty;
	}
	
	string info()
	{
		//return "Blueprint [" + pid + "] of #" + original + " diff " + difficulty + "%";
		return "Чертеж [" + pid + "] объекта №" + original + " сложности " + difficulty + "%";
	}
	
	bool check( Critter& cr, Item& item )
	{
		if( item.GetProtoId() == original )
		{
			bool success = false;
			if( Random( 0, difficulty ) <= cr.Skill[SK_SCIENCE] )
			{
				cr.Say( SAY_NETMSG, "Вы смогли сделать чертёж предмета." );
				cr.AddItem( pid, 1 );
				success = true;
			}
			else
			{
				cr.Say( SAY_NETMSG, "Вы не смогли сделать чертёж предмета, вам нужно переварить информацию в течении суток." );
			}
			
			cr.AddTimeEvent( "cte_tired", 0, CTE_TIRED, 5 );
			
			if( Random( 0, 300 ) <= cr.Skill[SK_REPAIR] )
			{
				cr.Say( SAY_NETMSG, "В ходе работы вы успешно пересобрали исследуемый предмет заного." );
			}
			else
			{
				cr.Say( SAY_NETMSG, "В ходе работы вы сломали исследуемый предмет" + ( success ? ", но оно того стоило!" : "." ) );
				_SubItem( item, 1 );
			}
			
			return true;
		}
		
		return false;
	}
}

uint cte_tired( Critter& cr, int identifier, uint& rate )
{
	rate--;
	if( rate >= 0 || rate < 255 ) //hotfixed
		return GAME_HOUR(1);
	
	return 0;
}

	// ЧЕРТЕЖИ //

Blueprints@ blueprints;
void InitBlueprints()
{
	if( valid( blueprints ) ) return;

	@blueprints = CreateBlueprints()
		.add( PID_10MM_PISTOL, PID_bp_colt6520, 250 )
		.add( PID_9MM_MAUSER, PID_bp_mouser, 250 )
		.add( PID_44_MAGNUM_REVOLVER, PID_bp_45revolver, 250 )
		.add( PID_14MM_PISTOL, PID_bp_sig14mm, 300 )
		.add( PID_DESERT_EAGLE, PID_bp_deagle, 250 )
		.add( PID_COLT, PID_bp_colt1911, 250 )
		.add( PID_ANACONDA, PID_bp_anaconda, 250 )
		.add( PID_NEEDLER_PISTOL, PID_bp_injector, 350 )
		.add( PID_PK12_GAUSS_PISTOL, PID_bp_gausspis, 500 )
		.add( PID_223_PISTOL, PID_bp_223pistol, 350 )
		.add( PID_10MM_SMG, PID_bp_10mmSMG, 250 )
		.add( PID_GREASE_GUN, PID_bp_ggun, 250 )
		.add( PID_HK_P90C, PID_bp_p90, 350 )
		.add( PID_HK_G11, PID_bp_g11, 450 )
		.add( PID_HUNTING_RIFLE, PID_bp_hunting, 250 )
		.add( PID_INDEPENDENT, PID_bp_xl5mm, 450 )
		.add( PID_SNIPER_RIFLE, PID_bp_sniper223, 400 )
		.add( PID_ASSAULT_RIFLE, PID_bp_ak112, 350 )
		.add( PID_FN_FAL, PID_bp_fnfl, 450 )
		.add( PID_TOMMY_GUN, PID_bp_tommygun, 350 )
		.add( PID_M72_GAUSS_RIFLE, PID_bp_gaussgun, 550 )
		.add( PID_SHOTGUN, PID_bp_doubleshotgun, 250 )
		.add( PID_COMBAT_SHOTGUN, PID_bp_combshotgun, 350 )
		.add( PID_HK_CAWS, PID_bp_CAWS, 450 )
		.add( PID_PANCOR_JACKHAMMER, PID_bp_jhummer, 450 )
		.add( PID_REMINGTON, PID_bp_remington870, 350 )
		.add( PID_LASER_PISTOL, PID_bp_laspist, 250 )
		.add( PID_PLASMA_PISTOL, PID_BP_PLASPIST, 300 )
		.add( PID_YK32_PULSE_PISTOL, PID_bp_pulsepist, 350 )
		.add( PID_LASER_RIFLE, PID_bp_lasrifle, 350 )
		.add( PID_PLASMA_RIFLE, PID_bp_plasrifle, 400 )
		.add( PID_YK42B_PULSE_RIFLE, PID_bp_pulserifle, 450 )
		.add( PID_GATLING_LASER, PID_bp_gatling, 550 )
		.add( PID_SOUND_BLASTER, PID_bp_aucustic, 350 )
		.add( PID_FLAMER, PID_bp_flamer, 250 )
		.add( PID_IMPROVED_FLAMETHROWER, PID_bp_flamer, 300 )
		.add( PID_MINIGUN, PID_bp_minigun, 300 )
		.add( PID_ROCKET_LAUNCHER, PID_bp_bazooka, 450 )
		.add( PID_VINDICATOR_MINIGUN, PID_bp_vindicator, 450 )
		.add( PID_M60, PID_bp_m60, 350 )
		.add( PID_LIGHT_SUPPORT_WEAPON, PID_bp_lsw, 350 )
		.add( PID_BOZAR, PID_bp_bozar, 450 )
		.add( PID_3GUN_LOW, PID_bp_autocannon, 300 )
		.add( PID_GRENADELAUNCHER, PID_bp_m32,  450 )
		.add( PID_CATTLE_PROD, PID_bp_shocker, 300 )
		.add( PID_POWER_FIST, PID_bp_pfist, 350 )
		.add( PID_SUPER_SLEDGE, PID_bp_ssledge, 250 )
		.add( PID_RIPPER, PID_bp_ripper, 350 )
		.add( PID_FRAG_GRENADE, PID_bp_frag_grenade, 300 )
		.add( PID_PLASMA_GRENADE, PID_bp_plas_grenade, 350 )
		.add( PID_PULSE_GRENADE, PID_bp_EMP_grenade, 350 )
		.add( PID_GRENADELAUNCHER_AMMO, PID_bp_40mm, 300 )
		.add( PID_EXPLOSIVE_ROCKET, PID_bp_fragmis, 300 )
		.add( PID_ROCKET_AP, PID_bp_krakmis, 350 )
		.add( PID_4_7MM_CASELESS, PID_bp_caseless, 400 )
		.add( PID_2MM_EC_AMMO, PID_bp_gausammo, 400 )
		.add( PID_MICRO_FUSION_CELL, PID_bp_freactor, 400 )
		.add( PID_CENTRF, PID_BP_CENTRF, 400 )
		.add( PID_HOUND_ARMOR, PID_bp_hound_armor, 350 )
		.add( PID_DEFIB, PID_bp_defib, 350 )
		.add( PID_hndcrclr, PID_bp_hand_saw, 250 )
		.add( PID_plsmprot, PID_bp_EMP_Proboinik , 500 )
		.add( PID_smghlmut, PID_bp_Dominion_Robur, 500 )
		.add( PID_smghkscp, PID_bp_Dominion_Latens, 350 )
	;
}

Blueprints@ CreateBlueprints()
{
	return Blueprints();
}

class Blueprints
{
	Blueprint[] list;
	
	Blueprints@ add( uint original, uint pid, uint difficulty = 300 )
	{
		return this.add( Blueprint( original, pid, difficulty ) );
	}
	
	Blueprints@ add( Blueprint@ item )
	{
		list.insertLast( item );
		return this;
	}
	
	bool check( Critter& cr, Item& item )
	{
		uint[] rates;
		if( cr.GetTimeEvents( CTE_TIRED, null, null, rates ) > 0 )
		{
			uint timeleft = 0;
			if( rates.length() > 0 ) 
				timeleft = rates[0];
				
			if( timeleft > 255 )
			{
				cr.EraseTimeEvents( CTE_TIRED );
				timeleft = 0;
			}
			
			cr.Say( SAY_NETMSG, "Вы ещё не отдохнули до конца после прошлого раза. " + ( timeleft > 0 ? "Осталось около " + timeleft + " часов." : "Ещё немного отдыха - и можно вернуться за работу." ) );
			return true;
		}
		
		for( uint i = 0; i < list.length(); i++ )
			if( list[i].check( cr, item ) ) return true;
		
		cr.Say( SAY_NETMSG, "Вы не смогли сделать чертёж этого предмета." );
		return false;
	}
	
	bool info( Critter& cr )
	{
		cr.Say( SAY_NETMSG, "Список доступных чертежей:" );
		for( uint i = 0; i < list.length(); i++ )
			cr.Say( SAY_NETMSG, i + ") " + list[i].info() );
		
		return true;
	}
}

bool TryMakeBlueprint( Critter& cr, Item& item )
{
	InitBlueprints();
	
	return blueprints.check( cr, item );
}

bool EnlistBlueprints( Critter& cr )
{
	InitBlueprints();
	
	return blueprints.info( cr );
}

	//ДЕКРАФТ//

bool TryDisassembleItem( Critter& cr, Item& item ) // Export
{

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

	bool isItemPartable = true;
    int  type = item.GetProtoId();

	uint16 repair = 0;
	uint16 science = 0;

	uint16[] tools;
	uint16[] parts;
	
	// ножи // tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
	
    switch( type )
    {
	case PID_OLD_JACKET:
	    tools.insertLast( PID_KNIFE );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
		parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 1 ); 
		break;
	case PID_CHAIN:
	    tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
		break;
	case PID_IMPOVISED_TRAP:
	    tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_FRAG_GRENADE ); parts.insertLast( 1 ); 
		break;
	case PID_IMPOVISED_TRAP_PLASMA:
	    tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_PLASMA_GRENADE ); parts.insertLast( 1 ); 
		break;
	case PID_IMPOVISED_TRAP_PULSE:
	    tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_PULSE_GRENADE ); parts.insertLast( 1 ); 
		break;
	case PID_MINE:
	    tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
		parts.insertLast( PID_TNT ); parts.insertLast( 2 ); 
		break;	
	case PID_TRAP_DEACTIVATED:
	    tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
		parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 2 );
		parts.insertLast( PID_SPIKE_MEH ); parts.insertLast( 6 ); 
		break;	
	case PID_REVKNIFE1:
	case PID_REVKNIFE2:
        tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );  
		break;
    case PID_CAMO_01:
    case PID_CAMO_02:
    case PID_CAMO_03:
    case PID_CAMO_04:
	case PID_CAMO_05:
    case PID_CAMO_06:
    case PID_CAMO_07:
    case PID_CAMO_08:
    case PID_CAMO_09:
	case PID_CAMO_10:
	case PID_CAMO_11:
	case PID_CAMO_12:
	case PID_CAMO_13:
	case PID_CAMO_14:
	case PID_CAMO_15:
	case PID_CAMO_16:
	    tools.insertLast( PID_SHOVEL );
    	parts.insertLast( PID_SAND ); parts.insertLast( 1 );  
		break;
	case PID_CAMO_17:
    case PID_CAMO_18:
    case PID_CAMO_19:
	    tools.insertLast( PID_SHOVEL );
	    parts.insertLast( PID_SAND ); parts.insertLast( 2 );  
		break;
	case PID_KEY_BUNCH:
	case PID_HOLODISK:
	case PID_HANDWRITINGS:
	case PID_PASSPORT:
	case PID_PAPERS_JAMMED:
	case PID_CRAFT_RECIPES:
		tools.insertLast( PID_KNIFE ); 
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );  
		break;
	case PID_IRON_DETALS:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 1 );  
		break;
	case PID_KNIFE:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
		break;
	case PID_LOCKER_LOW:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 ); 
		break;
	case PID_LOCKER_MED:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 5 ); 
		break;
	case PID_LOCKER_HARD:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 10 ); 
		break;
	case PID_SPEARTHROWER1:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 3 );  
		break;
	case PID_FLARE:
		tools.insertLast( PID_MULTI_TOOL ); 
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 ); }
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );   }
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_GUNPOWDER ); parts.insertLast( 1 );  }
		if( Random( 1, 100 ) <= 25 ) {
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 ); }
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( Random( 1, 6 ) );  
		break;
	case PID_OHLAD_MEH: 
	case PID_DETAL_MEH: 
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );  
		break;
	case PID_ELECTO_MEH: 
	case PID_EMKOCT_MEH: 
	case PID_DVIGAT_MEH: 
	case PID_SOED_MEH: 
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );  
		break;
	case PID_CRAFT_M_STEL:
	case PID_PERED_MEH:	
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );  
		break;
	case PID_BANKA_MEH: 
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 1 );  
	break;
	case PID_CRAFT_L_HIDE: tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 4 );  
		break;
    case PID_CRAFT_L_RAGS: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );  
		break;
    case PID_ROPE: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_PART_OF_ROPE ); parts.insertLast( 4 );  
		break;
	case PID_HLAM_MEH: 
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  
		break;
	case PID_HLAM2_MEH: 
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  
		break;
	case PID_MOUSE_SKIN: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );  
		break;
	case PID_GECKO_PELT: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );  
		break;
	case PID_GOLDEN_GECKO_PELT: tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 4 );  
		break;
	case PID_FIRE_GECKO_PELT: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 6 );  
		break;
	case PID_BRAHMIN_SKIN: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 6 ); 
		break;
	case PID_CKNIFE_P: 
		tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_COMBAT_KNIFE ); parts.insertLast( 1 );  
		break;		
	case PID_MKNIFE_P: 
		tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_THROWING_KNIFE ); parts.insertLast( 1 );  
		break;
	case PID_SPEAK_P: 
		tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_SPEAR ); parts.insertLast( 1 );  
		break;
	case PID_KNIFE_P: 
		tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_KNIFE ); parts.insertLast( 1 );  
		break;
	case PID_SPEAR:	
		parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); 
		parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); 
		break;
	case PID_SHARP_SPEAR: 
		parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); 
		parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); 
		break;		
	case PID_SANDROBE: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 5 );  
		break;
    case PID_LEATHER_JACKET: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 3 ); 
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 ); 
		break;
    case PID_LEATHER_ARMOR:
    case PID_LEATHER_ARMOR_MK_II: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); 
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
		break;	
    case PID_CURED_LEATHER_ARMOR: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); 
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
		break;
    case PID_CURED_LEATHER_ARMOR_MK_II: 
		tools.insertLast( PID_KNIFE ); 
		tools.insertLast( PID_THROWING_KNIFE ); 
		tools.insertLast( PID_SWITCHBLADE ); 
		tools.insertLast( PID_COMBAT_KNIFE ); 
		tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 ); 
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
		break;
	case PID_METAL_ARMOR:
	case PID_METAL_ARMOR_MK_II: 
		tools.insertLast( PID_MULTI_TOOL ); 
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 2 ); 
		break;
	case PID_MANTIS_ARMOR: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 2 ); 
		break;
	case PID_MIRELURK_ARMOR: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 ); 
		break;
	case PID_REVOLVER_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_PISTOL_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_BIGGUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_SMOKE_GUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_SHOTPISTOL_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_SHOTGUN: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_SAWED_OFF_SHOTGUN: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_10MM_PISTOL: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_GECKO_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_REV_RIFLE_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;	
    case PID_FLAMER: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_EMKOCT_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_LIGHTER ); parts.insertLast( 1 );		
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_AUTOGUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	
		break;
    case PID_SAWGUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_PERED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_MOTOR ); parts.insertLast( 1 );
		parts.insertLast( PID_CHAIN ); parts.insertLast( 1 );	
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );	
		break;
    case PID_GATLING_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 6 );	
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_SNIPER_GUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_ZIP_GUN: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;	
    case PID_NEEDLER_PISTOL: 
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	
		break;	
    case PID_DRUM_GUN_LOW: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_9MM_MAUSER: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    case PID_MAUSER_SMG: 
		tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
		break;
    default: isItemPartable = false;
    }
	if (!isItemPartable) 
	{
		cr.Say( SAY_NETMSG, "Вы не знаете, что с этим делать." );
		return false;
	}
	
	if ( repair > cr.Skill[ SK_REPAIR ]	|| science > cr.Skill[ SK_SCIENCE ] )
	{
		cr.Say( SAY_NETMSG, "Нехватает навыков" );
		return true;
	}
	
	if ( ( tools.length()>0 ) && ( !valid( _CritGetItemHand( cr ) ) || tools.find( _CritGetItemHand( cr ).GetProtoId() ) == -1 ) )
	{
		cr.Say( SAY_NETMSG, "Необходимый инструмент:" );
	    for( uint8 j = 0; j < tools.length(); j++ )
			cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*tools[j] );

		cr.Say( SAY_NETMSG, "Получаемые части:" );
		for( uint8 jj = 0; jj < parts.length(); jj+=2 )
			cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*parts[jj] );
		return true;
	}
		
    for( uint8 i = 0; i < parts.length(); i+=2 )
        cr.AddItem( parts[ i ], parts[ i + 1 ] );
	
	cr.Say( SAY_NETMSG, "Вы разобрали предмет." );

	if ( item.GetCount() > 1 )
	{
		item.SetCount(item.GetCount() - 1);
		AskAction( cr, item );
	}
	else DeleteItem( item );

    return true;
}

void robotRepairSkill (Critter& cr, Critter& targetCr, bool alreadyAllowed) {
	targetCr.StatBase[ST_VAR0] = cr.Id;
	cr.StatBase[ST_VAR0] = targetCr.Id;
	
	if(targetCr.Id != cr.Id && targetCr.Stat[ST_CURRENT_HP] > -30 && !alreadyAllowed){
		targetCr.ShowScreen (SCREEN_DIALOGBOX, 2, "answerRobotRepairSkill");
		targetCr.Say (SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
		targetCr.Say (SAY_DIALOGBOX_BUTTON( 0 ), "Да");
		targetCr.Say (SAY_NETMSG, "Вас хотят осмотреть");
	}else{
		answerRobotRepairSkill (targetCr, 0, "");
	}
}

void answerRobotRepairSkill (Critter& targetCr, uint answerI, string& answerS) {
	Critter@ cr = GetCritter (targetCr.StatBase [ST_VAR0]);
	if (cr is null) return;
	
	bool useOnSelf = (cr.Id == targetCr.Id);
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	
	bool welder = (_CritCountItem (cr, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (cr, PID_CRAFT_M_BARS) > 0);
	
	
	bool isDamaged = false;
	string state = "Повреждения: ";
	
	int maxHP = targetCr.Stat [ST_MAX_LIFE];
	
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		if (targetCr.ParamBase [i] > maxHP * 0.8) {
			state += "крит. ";
		} else if (targetCr.ParamBase[i] > maxHP * 0.6) {
			state += "оч. тяж. ";
		} else if (targetCr.ParamBase[i] > maxHP * 0.4) {
			state += "тяж. ";
		} else if (targetCr.ParamBase[i] >= maxHP * 0.2) {
			state += "средн. ";
		}
		if (targetCr.ParamBase [i] >= maxHP * 0.2) {
			isDamaged = true;
			switch (i) {
				case BP_HEAD_HP:
					state += "процессора, ";
					break;
				case BP_EYES_HP:
					state += "сенсоров, ";
					break;
				case BP_LEFT_ARM_HP:
					state += "л. манипулятора, ";
					break;
				case BP_RIGHT_ARM_HP:
					state += "п. манипулятора, ";
					break;
				case BP_LEFT_LEG_HP:
					state += "л. серво, ";
					break;
				case BP_RIGHT_LEG_HP:
					state += "п. серво, ";
					break;
				case BP_GROIN_HP:
					state += "слива, ";
					break;
				case BP_TORSO_HP:
					state += "корпуса, ";
					break;
			}
		}
		i ++;
	}
	*/
	
	if (!isDamaged) state += "нет серьезных повреждений";
	
	cr.StatBase [ST_VAR0] = targetCr.Id;
	
	if (FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		state += ", разгерметизация";
		cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	        cr.Say( SAY_DIALOGBOX_TEXT, state);
	    if (welder) cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "сварка" );
	    else cr.Say (SAY_DIALOGBOX_BUTTON (0), "Нет сварки");
		if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
		else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
		cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
	    return;
	}
	
	cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	cr.Say( SAY_DIALOGBOX_TEXT, state);
	cr.Say (SAY_DIALOGBOX_BUTTON (0), "Сварка не нужна");
	if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
	else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
	cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
}

void answerRobotRepair1 (Critter& player, uint answerI, string& answerS) {
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	bool useOnSelf = (player.Id == targetCr.Id);
	
	int sk = player.Skill [SK_REPAIR];
	
	bool welder = (_CritCountItem (player, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (player, PID_CRAFT_M_BARS) > 0);
	
	if (answerI == 0 && welder && FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам заниматься сваркой");
			robotRepairSkill (player, targetCr, true);
		} else {
			player.Say (SAY_EMOTE, "Занимается сваркой");
			if (sk > Random (0, 140)) {
				ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
				player.Say (SAY_NETMSG, "Вы успешно заварили разгерметизацию корпуса.");
			} else {
				targetCr.StatBase[ ST_CURRENT_HP ] -= Random (1, 16);
				//targetCr.ParamBase [BP_TORSO_HP] += Random (1, 16);
				player.Say (SAY_NETMSG, "Вы случайно проварили еще одну дырку в корпусе");
			}
			robotRepairSkill (player, targetCr, true);
		}
	} else if (answerI == 0) {
		robotRepairSkill (player, targetCr, true);
	}
	if (answerI == 1 && spareParts) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам поменять у себя запчасти");
			robotRepairSkill (player, targetCr, true);
		} else {
			int i = 0;
			while (i < 7) {
				player.Animate (ANIM1_UNARMED, ANIM2_USE, null, false, true);
				i ++;
			}
			player.Say (SAY_EMOTE, "Меняет запчасти");
			if (!ltp_inited) ltp_init ();
			StartProcess (player, LTP_ROBOT_REPAIR, 10*1000);
		}
	}
	if (answerI == 2) {
		bool damages = false;
		string state = "Поломки: ";

		if (targetCr.Damage [DAMAGE_EYE] > 0) {state+="сенсоры, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {state += "п. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {state += "л. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {state += "правый серво, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {state += "левый серво"; damages = true;}
		
		if (!damages) state += "нет.";
		
		player.ShowScreen (SCREEN_DIALOGBOX, 6, "answerRobotRepairCripple");
		if (targetCr.Damage [DAMAGE_EYE] > 0) player.Say (SAY_DIALOGBOX_BUTTON (0), "Чинить сенсоры");
		else player.Say (SAY_DIALOGBOX_BUTTON (0), "Сенсоры - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (1), "Чинить П. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (1), "П. Манип - ок");
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (2), "Чинить Л. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (2), "Л. Манип - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (3), "Чинить П. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (3), "П. Серво - ок");
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (4), "Чинить Л. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (4), "Л. Серво - ок");
		player.Say (SAY_DIALOGBOX_BUTTON (5), "Назад");
	}
}

void answerRobotRepairCripple (Critter& player, uint answerI, string& answerS) {
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	bool useOnSelf = (player.Id == targetCr.Id);
	
	bool mechDetail = (_CritCountItem (player, PID_CRAFT_M_STEL) > 0);
	bool motionSensor = (_CritCountItem (player, PID_MOTION_SENSOR) > 0);
	
	int sk = player.Skill [SK_REPAIR];
	
	if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
		player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют вам починить себя");
		answerRobotRepair1 (player, 2, "");
	} else {
	
		if (answerI == 0 && targetCr.Damage [DAMAGE_EYE] > 0) {
			if (!motionSensor) {
				player.Say (SAY_NETMSG, "Вам нужен сенсор движений.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_EYE] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили сенсоры.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять сенсор.");
				}
			}
		}
		if (answerI == 1 && targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 2 && targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 3 && targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 4 && targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		robotRepairSkill (player, targetCr, true);
	}
}

uint process_robot_repair ( Critter@ cr, int& param0, int& param1, int& param2 ) {
	LTPROCESSD (LTP_ROBOT_REPAIR)
	Critter@ targetCr = GetCritter (cr.Stat [ST_VAR0]);
	
	int sk = cr.Skill [SK_REPAIR];
	
	if (sk > Random (0, 80)) {
		/*
		int i = BP_LIMBS_BEGIN;
		while (i <= BP_LIMBS_END) {
			targetCr.ParamBase [i] -= targetCr.Stat [ST_MAX_LIFE] / 3;
			i ++;
		}
		*/
		targetCr.ParamBase[ST_CURRENT_HP] = targetCr.Stat[ST_MAX_LIFE]; //Впрочем, я бы сделал фиксированный рандом от 20 до 40 ХП за 1 деталь.
		cr.DeleteItem (PID_CRAFT_M_BARS, 1);
		cr.Say (SAY_NETMSG, "Вы успешно меняете запчасти.");
	} else {
		cr.Say (SAY_NETMSG, "Вы не понимаете, куда вставлять запчасти");
	}
	return 0;
}
		
