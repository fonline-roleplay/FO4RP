/******************************************************************************
 *                                                                            *
 *  PARSER                                                                    *
 *  Takes an array of JSON tokens and produces a structure of JSON values.    *
 *                                                                            *
 ******************************************************************************/

/**
 * Initializes the parser.
 *
 * Resets the token index and calls parseValue() for the first token.
 */
JSON@ parse(array<Token@>@ tokens)
{
    if (tokens.length() == 0)
    {
        return @undefined;
    }
    uint tokenIndex = 0;
    return @parseValue(tokens, tokenIndex);
}

/**
 * Parses one or more tokens and returns a JSON value.
 *
 * To parse arrays and objects the function uses recursion.
 */
JSON@ parseValue(array<Token@>@ tokens, uint& tokenIndex)
{
    switch (tokens[tokenIndex].type)
    {
        case NULL:
            tokenIndex++;
            return @Null();
        case TRUE:
            tokenIndex++;
            return @Boolean(true);
        case FALSE:
            tokenIndex++;
            return @Boolean(false);
        case NUMBER:
        {
            float f = 0;
            _ToFloat(tokens[tokenIndex].value, f);
            JSON@ value = Number(f);
            tokenIndex++;
            return @value;
        }
        case INTEGER:
        {
            int i = 0;
            _ToInteger(tokens[tokenIndex].value, i);
            JSON@ value = Number(i);
            tokenIndex++;
            return @value;
        }
        case STRING:
        {
            JSON@ value = String(tokens[tokenIndex].value);
            tokenIndex++;
            return @value;
        }
        case LEFT_CURLY_BRACKET:
        {
            JSON@ obj = Object();
            while (tokenIndex < tokens.length())
            {
                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected object key or end of object.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type == RIGHT_CURLY_BRACKET)
                {
                    return @obj;
                }
                string key = tokens[tokenIndex].value;

                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected ':', found end of tokens.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type != COLON)
                {
                    Log("JSON parser: expected ':', found other token.");
                    return @undefined;
                }

                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected a value, found end of tokens.");
                    return @undefined;
                }
                JSON@ val = parseValue(tokens, tokenIndex);

                obj.setProperty(key, @val);
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected ',' or '}', found tokens end.");
                    return @undefined;
                }

                if (tokens[tokenIndex].type == RIGHT_CURLY_BRACKET)
                {
                    tokenIndex++;
                    return @obj;
                }
                if (tokens[tokenIndex].type != COMMA)
                {
                    Log("JSON parser: expected ',' found other token.");
                    return @undefined;
                }
            }
        }
        case LEFT_SQUARE_BRACKET:
        {
            JSON@ arr = Array();
            while (tokenIndex < tokens.length())
            {
                tokenIndex++;
                if (tokenIndex >= tokens.length()) return @undefined;
                if (tokens[tokenIndex].type == RIGHT_SQUARE_BRACKET)
                {
                    tokenIndex++;
                    return @arr;
                }
                JSON@ val = parseValue(tokens, tokenIndex);
                arr.push(@val);
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: trailing comma in array.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type == RIGHT_SQUARE_BRACKET)
                {
                    tokenIndex++;
                    return @arr;
                }
                if (tokens[tokenIndex].type != COMMA)
                {
                    Log("JSON parser: expected ',' or ']', found other token.");
                    return @undefined;
                }
            }
        }
    }

    Log("JSON parser: unexpected token.");
    return @undefined;

}
