// Author: Anuri
#ifndef SCAVENGING
#define SCAVENGING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"
#include "entire_h.fos"
#include "combat_h.fos"
#include "repair_h.fos"
#include "speed_h.fos"

// LTP (long time process)
bool ltp_scavenging_inited = false;
void ltp_scavenging_init()
{
	LTPREG( LTP_SCAVENGING, process_scavenging )
	ltp_scavenging_inited = true;
}
//exported to main.fos - checks before start
bool PrepareScavenging( Critter& cr, Item@ tool, Item@ target ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( tool ) || !valid(target) )
	{
		return false;
	}
   	
	uint toolPid = tool.GetProtoId();
	if( ScavengingTools.find( toolPid ) == -1 )
	{
		return false;
	}
	
	uint targetPid = target.GetProtoId();
	if( targetPid != PID_JUNK_SALVAGE )
	{
		return false;
	}
	
	if( tool.CritSlot != SLOT_HAND1 ) 
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}

	if( _ItemIsBroken( tool ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOOL_BROKEN );
		return true;
	}

	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsDmgTwoArm() || cr.IsDmgTwoLeg() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}

	if( tool.IsDeteriorable() )
	{
		uint det = GetDeteriorationProcent( tool );
		SetDeterioration( tool, det + 1 );
	}

	if( tool.Deterioration >= MAX_DETERIORATION )
	{
		BreakTool( cr, tool );
		return false;
	}

	start_scavenging( cr, tool, target );
	return true;
}

bool start_scavenging( Critter& cr, Item& tool, Item& target )
{
	if(!ltp_scavenging_inited)
	{
		ltp_scavenging_init();
	}
	
	if( valid( tool ) && valid( target ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint object_dpa = cr.Skill[ SK_SCAVENGING ] + ( cr.Stat[ ST_STRENGTH ] * 10 ) + OBJECT_DPA_BASE; 
		cr.ParamBase[ ST_LTP_SEQUENCE ] = uint( ceil( float( OBJECT_HP_BASE / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) ) );
		
		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true );
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );	
		StartProcess( cr, LTP_SCAVENGING, 0, tool.Id, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_scavenging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SCAVENGING )

    Item@ tool = GetItem( param1 );
  	Item@ target = GetItem( param2 );
  	if( valid( tool ) && valid( target ) )
    {
      	param0++;

		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			Profit( cr, tool, target );
			int skillNum = SK_SCAVENGING;
			Accident( cr, skillNum );
			SayLog( cr, crInfo( cr ) + " has salvaged a scavenging resource node." );
		}
		else
		{
			uint toolPid = tool.GetProtoId();
			switch( toolPid )
			{
				case( PID_MULTI_TOOL ):
					_CritAnimateUse( cr );
					break;
				default:
					_CritAnimateSwing( cr );
					break;
			}
			
			uint[] values = { cr.Id, tool.Id };
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true);
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
			
			if( cr.IsInjured() )
			{
				uint damage = INJURED_HP_DAMAGE - cr.Stat[ ST_ENDURANCE ];
				hurt( cr, damage );
			}
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
    }
	return 0;
}

uint e_ScavengingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	string sound = _GetOneRandom( SkavengingSounds );
	PlayGenericSound( map, cr.HexX, cr.HexY, sound, 30 );
	return 0;
}

//Loot
bool Profit(  Critter& cr, Item@ tool, Item@ target )
{
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_IRON_PROD ):
		case( PID_SPADE ):
		case( PID_SHOVEL ):
			amount--;
			break;
		case( PID_MULTI_TOOL ):
			amount++;
			break;
		default:
			amount = 0;
			break;
	}
	
	uint lootRoll = ( Random( 0, 2 ) + ( cr.ParamBase[ SK_SCAVENGING ] / 50 ) );
	amount+= lootRoll;
	if( amount < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
	}
	else
	{
		int skillNum = SK_SCAVENGING;
		raiseSkill( cr, skillNum );
		
		uint[] loot = {};
		if( Random( 0, 1 ) == 1 )
		{
			loot.insertLast( PID_JUNK );
		}

		for( int i = 0; i < amount; i++ )
		{
			ProtoItem@ junk = GetProtoItem( JunkLootList[target.JUNK_TIER][ Random( 0, JunkLootList[target.JUNK_TIER].length() - 1 ) ] );
			loot.insertLast( junk.ProtoId );
		}
		
		if( loot.length() > 0 )
		{
			string inform;
			string desc;
			for( uint i = 0; i < loot.length(); i++ )
			{
				uint16 lootPid = loot[ i ];
				desc = "@msg item " + ( lootPid * 100 ) + "@";
				inform += "\n|0x3CF800  - " + "|0xFFFF00 " + desc + "|0x3CF800  -" + "|0xFFFF00  1" + "|0xFFFF00 ;";
			}
			inform[ inform.length() - 2 ] = '.';
			inform[ inform.length() - 1 ] = ' ';
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_COLLECTED, "$result " + inform );
			SpawnBeneath( cr, loot );
			cr.StatBase[ST_EXPERIENCE] += 25;
			taking_sweat(cr);
		}
		
		ChangeCritterSpeed( cr );
		DeleteItem( target );	
	}
	
	return true;
}

//===============JUNK_SPAWNER_MECHANIC===============//

void SpawnJunkZone( Map& map, uint16 hx, uint16 hy, uint timeout, uint range, uint capacity, uint tier )
{
	if( !valid( map ) )
	{
		return;
	}

	Item@ junkMarker = map.AddItem( hx, hy, PID_JUNK_MARKER, 1 );
	if( !valid( junkMarker ) )
	{
		return;
	}

	junkMarker.MAP_ID = map.Id;
	junkMarker.ZONE_TIMEOUT = timeout;
	junkMarker.ZONE_RANGE = ( range < 1 ? 1 : range );
	junkMarker.RESOURCE_CAPACITY = ( capacity < 1 ? 1 : capacity );
	junkMarker.JUNK_TIER = tier;

	int[] values = { junkMarker.Id };
	junkMarker.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_processJunkZone", values, true );
}

//~run scavenging _RefreshJunkSpawners 0 0 0
void _RefreshJunkSpawners( Critter& player, int param0, int param1, int param2 )
{
	if(!isGM(player)) return;

	Item@[] spawners;
	GetAllItems(PID_JUNK_MARKER, spawners);

	for(uint i = 0, len = spawners.length(); i < len; i++)
	{
		Item@ currSpawner = spawners[i];
		if( !valid( currSpawner ) )
		{
			continue;
		}

		Map@ currMap = GetMap( currSpawner.MAP_ID );
		if( !valid( currMap ) )
		{
			continue;
		}

		uint duration = 0;
		uint[] values;
		if( !GetTimeEvent( currSpawner.EVENT, duration, values ) )
		{ 
			Log("WARNING: Junk Spawner with broken TE, at map" + currMap.GetProtoId() + ", at hex " + currSpawner.HexX + " " + currSpawner.HexY + "\n");
			continue;
		}
		duration = REAL_MINUTE( currSpawner.ZONE_TIMEOUT );
		SetTimeEvent( currSpawner.EVENT, duration, values );

		DespawnJunk(currMap, currSpawner);
		ProcessRespawnJunk(currMap, currSpawner);
	}
}

void DespawnJunk(Map@ map, Item@ junkSpawner)
{
	Item@[] junkFound;

	map.GetItems( PID_JUNK_SALVAGE, junkFound );

	for( uint i = 0, len = junkFound.length(); i < len; i++ )
	{
		Item@ junk = junkFound[i];
		if( valid( junk ) && junk.JUNK_NODE_ID == int( junkSpawner.Id ) )
		{
			junk.JUNK_NODE_ID = 0;
			DeleteItem(junk);
		}
	}
	
	junkFound.resize(0);
}

void ProcessRespawnJunk(Map@ map, Item@ junkSpawner)
{
	int junkCount = 0;
	Item@[] junkFound;

	map.GetItems( PID_JUNK_SALVAGE, junkFound );

	for( uint i = 0, len = junkFound.length(); i < len; i++ )
	{
		Item@ junk = junkFound[i];
		if( valid( junk ) && junk.JUNK_NODE_ID == int( junkSpawner.Id ) )
		{
			junkCount++;
		}
	}
	
	int missing = junkSpawner.RESOURCE_CAPACITY - junkCount;

	if( missing > 0 )
	{
		uint attempt = 0;
		for( int i = 0; i < missing; i++ )
		{
			if( attempt >= MAX_RESOURCE_SPAWN_ATTEMPTS )
			{
				break;
			}
			
			int radius = junkSpawner.ZONE_RANGE / 2;
			uint16 hx = junkSpawner.HexX + Random( -radius, radius );
			uint16 hy = junkSpawner.HexY + Random( -radius, radius );
			if( map.IsHexPassed( hx, hy ) )
			{
				JunkSpawn( map, hx, hy, junkSpawner.Id, junkSpawner.JUNK_TIER );
			}
			else
			{
				missing++;
				attempt++;
			}
		}
	}
	
	junkFound.resize(0);
}

uint e_processJunkZone( int[] @ values )
{
	Item@ zoneMarker = GetItem( values[0] );
	if( !valid( zoneMarker ) )
	{
		return 0;
	}

	Map@ map = GetMap( zoneMarker.MAP_ID );
	if( !valid( map ) )
	{
		return 0;
	}

	ProcessRespawnJunk(map, zoneMarker);
	
	return REAL_MINUTE( zoneMarker.ZONE_TIMEOUT );
}

void JunkSpawn(Map& map, uint16 hx, uint16 hy, uint nodeId = 0, uint tier = 0)
{
	if(!valid(map))
	{
		return;
	}

	Item@ junk = map.AddItem( hx, hy, PID_JUNK_SALVAGE, 1 );
	if(!valid(junk))
	{
		return;
	}
	ProtoItem@ proto = GetProtoItem( JunkPileArtList[tier][ Random( 0, JunkPileArtList[tier].length() - 1 ) ] );
	junk.PicMap = proto.PicMap;
	junk.JUNK_NODE_ID = nodeId;
	junk.JUNK_TIER = tier;
	junk.Update();
}

#endif //SCAVENGING