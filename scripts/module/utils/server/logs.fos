void CheckItemMovement( Critter& cr, Item& item, int skill ) 
{
	switch( skill )
	{
		case( SKILL_PICK_ON_GROUND ):
		{
			if( item.GetType() != ITEM_TYPE_DOOR && item.GetType() != ITEM_TYPE_CONTAINER )
			{
				LogItemMovement( cr, item, "picks up" ); 
			}
			break;
		}
		case( SKILL_PUT_CONT ):
			LogItemMovement( cr, item, "drops" );
			break;
		case( SKILL_TAKE_CONT ):
			LogItemMovement( cr, item, "takes" );
			break;
	}
}

void LogCrimeMovement( Critter& cr, Item& item, string action, bool isCrime = true ) 
{
	LogItemMovement( cr, item, action, isCrime );
}

void LogItemMovement( Critter& cr, Item& item, string action, bool isCrime = false ) 
{
	string amount_info = "";
	
	if( action != "picks up" && action != "drops on ground" )
	{
		uint amount = cr.ItemTransferCount();
		if( amount > 0 && item.GetCount() > 1 )
		{
			amount_info = " " + ( item.GetCount() != amount ? "x" + amount : "all" );
		}
	}

	string action_name = action;
	if( cr.ParamBase[ ST_LAST_CRIT_ID ] != 0 && cr.StatBase[ ST_LAST_STEAL_CR_ID ] == cr.ParamBase[ ST_LAST_CRIT_ID ] )
	{
		action_name = action == "puts down" ? "adds" : "steals";
		isCrime = true;
	}
	
	string info = crInfo( cr ) + " " + action_name + amount_info + " " + itemDesc( item );
	
	if( action == "puts" || action == "takes" )
	{
		if( cr.ParamBase[ ST_LAST_CONT_ID ] != 0 )
		{
			Item@ target = GetItem( cr.ParamBase[ ST_LAST_CONT_ID ] );
			if( valid( target ) )
			{
				if( action == "puts" )
				{
					info += " in";
				}
				if( action == "takes" )
				{
					info += " out of";
				}
				info += " " + itemDesc( target );
			}
		}
		
		if( cr.ParamBase[ ST_LAST_CRIT_ID ] != 0 )
		{
			Critter@ target = GetCritter( cr.ParamBase[ ST_LAST_CRIT_ID ] );
			if( valid( target ) )
			{
				if( action == "puts" )
				{
					info += " to";
				}
				if( action == "takes" )
				{
					info += " from";
				}
				info += " " + crInfo( target, true );
			}
		}
		
		DiscordSendMessage( "container_log", "```" + info + "```" );
	}

	string result = SayLog( cr, info );
	
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		Location@ loc = map.GetLocation();
		if( loc.GetProtoId() == LOCATION_TLJ_ARENA )
		{
			LogInfo( "logs\\arena.txt", result );
			return;
		}
	}
	
	if( isGM( cr ) )
	{
		DiscordSendMessage( "gm_log", "```" + result + "```" );
		LogInfo( "logs\\gmlog.txt", result ); 
	}
	
	if( isCrime )
	{
		DiscordSendMessage( "crime_log", "```" + result + "```" );
		LogInfo( "logs\\crimes.txt", result ); 	
	}
}

string SayLog( Critter& cr, int sayType, string@ message )
{
	return SayLog( cr, sayType, message, null );
}

string SayLog( Critter& cr, int sayType, string@ message, string @pre_message )
{
	string data = ( valid( pre_message ) ? pre_message : "" ) + crInfo( cr ) + " - ";
	switch( sayType )
	{	
		case( SAY_NORM ):
			return SayPrepare( cr, data, message, "" );				
		case( SAY_EMOTE ):
			return SayPrepare( cr, data, message, "**" ); 			
		case( SAY_NARATIVE ):
			return SayPrepare( cr, data, message, ":"	);			
		case( SAY_WHISP ):
			return SayPrepare( cr, data, strlwr(message), ".." ); 	
		case( SAY_SHOUT ):
			return SayPrepare( cr, data, strupr(message), "!!!"  );
		case( SAY_RADIO ):
			return SayPrepare( cr, data, message, "..shh.." ); 		
		case( SAY_NETMSG ):
			return SayPrepare( cr, data, message, "" ); 			
		default:
		{
			string result = "Unhandled sayType for SayLog: #" + cr.Id + " " + sayType + " '" + message + "'";
			Log( result );
			testInfo( cr, result );
			return result; 
		}
	}
	return "";
}

string SayPrepare( Critter& cr, string data, string message, string effect ) 
{
	return SayLog( cr, data + effect + message + effect );
}

string CrimeLog( Critter& cr, string@ message )
{
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		Location@ loc = map.GetLocation();
		if( loc.GetProtoId() == LOCATION_TLJ_ARENA )
		{
			return LogInfo( "logs\\arena.txt", message );
		}
	}
	
	DiscordSendMessage( "crime_log", " ``` " + message + " ``` " );
	return LogInfo( "logs\\crimes.txt", SayLog( cr, message ) );
}

string SayLogGM( Critter& cr, string@ message )
{
	string result = SayLog( cr, message );

	DiscordSendMessage( "gm_log", "```" + result + "```" );
	LogInfo( "logs\\gmlog.txt", result ); 
	
	return result;
}

string SayLog( Critter@ cr, string@ message )
{
	if( valid( cr ) )
	{
		return SayLog( cr.GetMap(), message, cr.HexX, cr.HexY );
	}
	return "";
}

shared string getTimeStamp()
{
	return RealDay() + " " + RealTime() + " = " + MakeTime( __FullSecond );
}

string SayLog( Map@ map, string@ message, int x = 0, int y = 0 )
{
	if( !valid( message ) )
	{
		Log( "!valid message" );
		return "[ !valid message ]";
	}

	string result = "";
	
	string@ map_name = !valid( map ) ? "Global" : GetMsgStr( 1, TEXTMSG_GM, ( map.GetProtoId() + 1 ) * 10 + 8 );
	if( !valid( map_name ) )
	{
		@map_name = "[ Map #" + map.Id + " PID " + map.GetProtoId() + " ]";
	}
	
	string cords = "";
	if( x != 0 && y != 0 )
	{
		cords = " (" + x + ":" + y + ")";
	}

	result = FixedSize( getTimeStamp() + map_name + cords + ":", 80 ) + message;

	Location@ loc = map.GetLocation();
	if( loc.GetProtoId() == LOCATION_TLJ_ARENA )
	{
		return LogInfo( "logs\\arena.txt", result );
	}

	return LogInfo( "logs\\saylog.txt", result );
}

void TrackItemState( Item& item ) //unused
{
	LogInfo( "logs\\containers.txt", "Found " + itemDesc( item ) + ". " + ItemState( item ) ); 
}

string LogInfoTime( string filename, string text )
{
	return LogInfo( filename, timeInfo() + text );
}

string LogInfo( string filename, string text )
{
    file f;
    if( f.open( filename, "a" ) >= 0 )
    {
        f.writeString( text + "\n" );
        f.close();
    }
	
	return text;
}