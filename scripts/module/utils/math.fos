shared uint intLength( int value )
{
	if( value <= 0 )
	{
		return 0;
	}
	
	uint length = 1;
	while( value >= 10 )
	{
		value /= 10;
		length++;
	}
	
	return length;
}

#define ZERO_CHAR_CODE	( 48 )

#define NEGATIVE_NUMBER	( -1 )
#define TOO_LOW_DIGIT	( -2 )
#define TOO_HIGH_DIGIT	( -3 )

shared int digitValue( int number, int digit )
{
	if( number < 0 )
	{
		return NEGATIVE_NUMBER;
	}
	
	if( digit <= 0 )
	{
		return TOO_LOW_DIGIT;
	}

	string line = "" + number;
	
	if( uint( digit ) > line.length() )
	{
		return TOO_HIGH_DIGIT;
	}
	
	return line[digit-1] - ZERO_CHAR_CODE;
}

shared bool rolled( float percentage, int purity_power = 1 )
{
	return Random( 1, 100 ) <= percentage;
}

shared int RandomDigitWithout( int n )
{
	int result;
	
	do
	{
		result = Random( 0, 9 );
	}
	while( result == n );
	
	return result;
}

#define UNDEFINED_VALUE	( -1 )

shared int[] WeightedRandom( int len, int n, float percentage )
{
	int[] result;
	
	for( int i = 0; i < len; i++ )
	{
		int value = UNDEFINED_VALUE; 
		
		if( rolled( percentage ) )
		{
			value = n;
		}
		else
		{
			value = RandomDigitWithout( n );
		}
		
		result.insertLast( value );
	}
	
	return result;
}

shared int CountInArray( int[] data, int n )
{
	int result = 0;
	
	for( uint i = 0, l = data.length(); i < l; i++ )
	{
		if( data[i] == n )
		{
			result++;
		}
	}
	
	return result;
}

shared float cutLesserDigits( float val, int depth = 2, bool ceiled = true )
{
	//Log("Cutting '" + val + "'.");
	for( int i = 0; i < depth; i++)
		val *= 10;

	val = ceiled ? ceil( val ) : floor( val );
	
	for( int i = 0; i < depth; i++)
		val /= 10;
		
	return val;
}

shared float cutDigits( float val, int depth = 2, bool ceiled = true )
{
	//Log("Cutting '" + val + "'.");
	int d = 0;
	float len = pow( 10, depth - 1 );
	if( val < len )
		while( val < len )
		{
			val *= 10;
			d++;
		}
	else if( val > len )
		while( val > len )
		{
			val /= 10;
			d--;
		}
		
	val = ceiled ? ceil( val ) : floor( val );
	
	if( d > 0 )
		while( d > 0 )
		{
			val /= 10;
			d--;
		}
	else if( d < 0 )
		while( d < 0 )
		{
			val *= 10;
			d++;
		}
		
	return val;
}

shared int MinIndex( float[] a )
{
	if( a.length() == 0 ) return -1;
	
	int result = 0;
	float min = a[0];
	for( uint i = 0, l = a.length(); i < l; i++ )
	{
		if( a[i] < min )
		{
			min = a[i];
			result = i;
		}
	}
	return result;
}

shared float Distance( float x1, float y1, float x2, float y2 )
{
	return sqrt( pow( x1 - x2, 2 ) + pow( y1 - y2, 2 ) );
}

shared uint crc32b(uint8[] message) 
{
	uint crc = 0xFFFFFFFF, mask = 0;

	for(uint i = 0, len = message.length(); i < len; i++)
	{
		uint byte = message[i]; // Get next byte.
		crc = crc ^ byte;
		for (int j = 7; j >= 0; j--) // Do eight times.
		{
			mask = -(crc & 1);
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
		}
	}

	return ~crc;
}