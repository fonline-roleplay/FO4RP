#define EoL "\n"

#define STR_INFO		#(link)		( valid(link) ? link.toString() : "[undefined]" )

#define SIGN #(value)	( ( value > 0 ? "+" : "" ) + value )

#define IN_RANGE #( value, min, max )	( ( value >= min ) && ( value <= max ) )


string cut_name( string name )
{
    string@[]@ parts = splitEx( name, " " );
	
	string shortest = parts[0];
	for( uint i = 0, len = parts.length(); i < len; i++ )
		if( shortest.length() > parts[i].length() )
			shortest = parts[i];
	
	return shortest;
}

shared string replaceText( string str, string replace, string text )
{
	int index = findFirst( str, replace );
	
	if( index == -1 )
	{
		return str;
	}
	
	return substring( str, 0, index ) + text + substring( str, index + replace.length(), str.length() - index );
}

bool CopyArray( string@[]@ source, string[]& target )
{
	if( !valid( source ) )
	{
		return false;
	}

	uint len = source.length();
	
	uint skipped = 0;
	for( uint i = 0; i < len; i++ )
	{
		if( !valid( source[i] ) )
		{
			skipped++;
			continue;
		}
		
		target.insertLast( source[i] );
	}
		
	return skipped < len;
}

int strToInt( string str )
{
	int value = 0;

	if( !StrToInt( str, value ) )
	{
		return 0;
	}
	
	return uint( value );
}	

shared string strcut( string str, int len = 100 )
{
	if( str.length() > uint( len ) )
	{
		return substring( str, 1, len );
	}
	
	return str;
}

shared void delN( string& str )
{
    uint len = str.length();
    if( len > 1 && str[ len - 1 ] == '\n' )
	{
        str.resize( len - 1 );
	}
}

shared string TRIM_DOTS( string@ text, uint amount = 0 ) 
{ 
	if( !valid( text ) ) return checkNull( text );
	
	while( text.length() > amount && text[text.length()-1-amount] == '.' )
		text = substring( text, 0, text.length()-1 );
	
	return text;
}

shared string indexValue( string[] @arr, int index )
{
	int len = valid( arr ) ? arr.length() : 0;
	if( len == 0 )
		return "[ No data ]";	
	
	if( index < 0 || index >= len )
		return "[ Index " + index + " out of bounds: " + len + " ]";
	
	return arr[index];
}

shared string TRIM( string@ text )
{
	if( empty( text ) ) return "";
	
	int start = 0;
	int end = text.length() - 1;
	bool done = false;
	
	while( !done )
	{
		done = true;
		
		if( text[start] == ' ' )
		{
			start++;
			done = false;
		}
		
		if( text[end] == ' ' )
		{
			end--;
			done = false;
		}
		
		if( start >= end )
			return "";		
	}
	
	int length = end - start + 1;
	return substring( text, start, length );
}

shared string repeat( int times, string@ text ) 
{ 
	if( !valid( text ) ) return "[null]";
	
	string result = "";
	for( int i = 0; i < times; i++ )
		result += text;
	
	return result;
}

shared string embed( string@ text, string prefix = "", string postfix = "" )
{
	return prefix + checkNull(text) + postfix;
}

shared string hilighted( bool value ) { return ( value ? "|0x3CF800 " : "|0x900000 " ) + value + "|0x3CF800 "; }
shared string UINTColor( uint color ) { return "|"+color+" "; }
shared bool empty( string @text ) { return !valid( text ) || text.length() == 0; } 
shared bool empty( int[]  @data ) { return !valid( data ) || data.length() == 0; } 
shared string checkNull( string@ data, string _default = "[null]" ) { return valid( data ) ? data : _default; }
shared uint[]@ checkNull( uint[]@ data ) { return valid( data ) ? data : uintArray(); }

shared uint[] uintArray(
	int value1 = -1, int value2 = -1, int value3 = -1, int value4 = -1, int value5 = -1, int value6 = -1, int value7 = -1, 
	int value8 = -1, int value9 = -1, int value10 = -1, int value11 = -1, int value12 = -1, int value13 = -1, int value14 = -1, 
	int value15 = -1, int value16 = -1, int value17 = -1, int value18 = -1, int value19 = -1, int value20 = -1, int value21 = -1 )
{
	uint[] result = {};
	
	if( value1 != -1 ) result.insertLast( uint(value1) );
	if( value2 != -1 ) result.insertLast( uint(value2) );
	if( value3 != -1 ) result.insertLast( uint(value3) );
	if( value4 != -1 ) result.insertLast( uint(value4) );
	if( value5 != -1 ) result.insertLast( uint(value5) );
	if( value6 != -1 ) result.insertLast( uint(value6) );
	if( value7 != -1 ) result.insertLast( uint(value7) );
	if( value8 != -1 ) result.insertLast( uint(value8) );
	if( value9 != -1 ) result.insertLast( uint(value9) );
	if( value10 != -1 ) result.insertLast( uint(value10) );
	if( value11 != -1 ) result.insertLast( uint(value11) );
	if( value12 != -1 ) result.insertLast( uint(value12) );
	if( value13 != -1 ) result.insertLast( uint(value13) );
	if( value14 != -1 ) result.insertLast( uint(value14) );
	if( value15 != -1 ) result.insertLast( uint(value15) );
	if( value16 != -1 ) result.insertLast( uint(value16) );
	if( value17 != -1 ) result.insertLast( uint(value17) );
	if( value18 != -1 ) result.insertLast( uint(value18) );
	if( value19 != -1 ) result.insertLast( uint(value19) );
	if( value20 != -1 ) result.insertLast( uint(value20) );
	if( value21 != -1 ) result.insertLast( uint(value21) );
	
	return result;
}	
	
shared string@[] splitExSpaces( string source )
{
	bool reading = false;
	string@[] result;
	
	uint i = 0, l = source.length(), len = 0;
	for( ; i < l; i++ )
	{
		if( source[i] == ' ' || source[i] == '\t' )
		{
			if( reading )
			{
				result.insertLast( substring( source, i - len, len ) );
				reading = false;
				len = 0;
			}
			continue;
		}
		
		len++;
		if( !reading )
		{
			reading = true;
			len = 1;
		}
	}
	
	if( reading )
		result.insertLast( substring( source, i - len, len ) );
	
	return result;
}

shared string flagValue( bool value, string@ _true = "+", string@ _false = "" )
{
	return value ? ( valid( _true ) ? _true : "" ) : ( valid( _false ) ? _false : "" );
}

shared string boolValue ( bool value, string name = "", string _true = "+", string _false = "-" )
{
	return name + ( value ? _true : _false );
}

shared string signedValue ( int value, string space = " " )
{
	return ( value > 0 ? "+" : "-" ) + space + ( value > 0 ? value : -value );
}

#define d2	#( value )				two_digits( value )
shared string two_digits( uint16 value )
{
	return ( value > 9 ? ( "" + value ) : ( "0" + value ) );
}
#define  D2	#( value, delimiter )	smart_two_digits( value, delimiter )
#define _D2	#( value )				smart_two_digits( value, "", true )
shared string smart_two_digits( uint16 value, string delimiter = ":", bool LONG = false )
{
	if( value == 0 )
		return LONG ? "00" + delimiter : "";
	
	if( value > 9 )
		return value + delimiter;
	else
		return "0" + value + delimiter;
}

shared string hl( int text )    { return "|0xF8F993 " + text + "|0x00FF00 "; }
shared string hl( string text ) { return "|0xF8F993 " + ( valid( text ) ? text : "" ) + "|0x00FF00 "; }

shared string Centering( string list ) // Центрирование текста в меню.
{
	if( list.length() > 16 ) { return list; }
	string tab = "";
	for( uint8 i = 0, l = ( 18 - list.length() ); i < l; i++ ) { tab += " "; }
	return tab+list;
}

shared uint char_width( string char )
{//Боевой
	string[][] char_widths = { //Таблица символов, группированная по их широте. Тут нет лишь символа '|', т.к. он не отображаемый.
		{ ".", ":", "\'", "i", "!" },//3
		{ " ", ",", ";", "`", "l" },//4
		{ "1", "I", "(", ")", "[", "]" },//5
		{ "\"", "c", "f", "j", "r", "г", "з", "с", "э", "<", ">" },//6
		{ "0", "2", "3", "4", "5", "6", "7", "8", "9", 
			"a", "b", "C", "d", "E", "e", "F", "g", "h", "k", "L", "n", "o", "p", "q", "s", "T", "t", "u", "x", "y", "z", 
			"а", "б", "в", "Г", "Е", "е", "Ё", "ё", "З", "и", "й", "к", "н", "о", "п", "р", "С", "Т", "т", "у", "х", "ч", "Э", 
			"у", "я", "ь", "?", "{", "}" },//7
		{ "B", "D", "G", "H", "J", "K", "M", "m", "N", "O", "P", "R", "Q", "S", "U", "W", "w", "Z", 
			"Б", "В", "И", "К", "Л", "л", "М", "м", "Н", "О", "П", "Р", "У", "Ц", "ц", "Ч", "У", "Я", 
			"Ь", "~", "@", "#", "%", "^", "*" },//8
		{ "A", "X", "Y", "А", "д", "Х", "Ш", "ъ" },//9
		{ "Д", "Щ", "ы", "Ъ" },//10
		{ "ж", "Ф", "ф", "ш", "Ы", "№" },//11
		{ "щ" },//12
		{ "Ж" }//13
	};
	if( findFirst( char, "\t" ) != -1 )
		return 20;
	
	for( uint i = 0, imax = char_widths.length(); i < imax; i++ )
		for( uint j = 0, jmax = char_widths[i].length(); j < jmax; j++ )
		{
			if( char_widths[i].find(char) != -1 )
			{
				return 3 + i;
			}
		}
	
	return 0;//'\n' == 0
}

//deprecated by: GetTextInfo( text, myWidth, myHeight, font, font_flags, &result_Width, &result_Height, &result_lines );
shared int pixelength( string@ text )
{
	if( !valid( text ) ) return 0;
	
	int result = 0;
	bool colorMode = false;
	for( uint i = 0, l = text.length(); i < l; i++ )
	{
		if( text[i] == '|' )
		{
			if( !colorMode )
				colorMode = true;
			else
			{//Две || подряд:
				colorMode = false;
				//Учитываем и проскипанный символ-дубль:
				result += char_width( substring( text, i, 1 ) );
			}
		}
		
		if( colorMode )
		{
			if( text[i] == ' ' )
				colorMode = false;
			
			continue;
		}
		
		//Log( "Длинна символа \'" + substring( text, i, 1 ) + "\' = " + char_width( substring( text, i, 1 ) ) );
		result += char_width( substring( text, i, 1 ) );
	}
	
	return result;
}

shared string SpacedText( string text, int target_pixel, string hider, string default_color )
{
	return text + emptySpace( text, target_pixel, hider, default_color );
}

shared string FixedPixelSize( string text, int target_pixel )
{
	return text + emptySpaces( target_pixel - pixelength(text) );
}

shared string FixedSize( string text, int point )
{
	if( point < 0 ) return text;
	
	while( text.length() < uint( point ) )
		text += " ";
	
	return text;
}

shared string emptySpaces( int pixel_length )
{
	string result = "";
	for( int i = 0; i < pixel_length; i += 4 )
		result += " ";
		
	return result;
}

shared string emptySpace( string text, int target_pixel, string hider, string default_color )
{
	//'I' 5  ' ' 4  '.' 3
	int space = target_pixel - pixelength( text );
	while( space > 9 )
	{
		space -= 5;
		hider += "I";
	}
	switch( space )
	{
		case( 5 ): hider += "I"; break;
		case( 6 ): hider += ".."; break;
		case( 7 ): hider += ". "; break;
		case( 8 ): hider += "I."; break;
		case( 9 ): hider += "I "; break;
	}
	return hider + default_color;
}

shared string StyledText( string delimiter, string name, int data )   { return StyledText( delimiter, name, "" + data ); }
shared string StyledText( string delimiter, string name, float data ) { return StyledText( delimiter, name, "" + data ); }
shared string StyledText( string delimiter, string name, string data ){ return StyledText( delimiter, name, "" + data, 100 ); }
shared string StyledText( string delimiter, string name, string data, int target )
{ 
	string result = "|0xF8F993 " + name + "|0x00FF00 " + data;
	
	if( findFirst( delimiter, "|" ) == -1 )
		return result + delimiter;
	//else
	return result + emptySpace( name + data, target, "|0x231D18 ", "|0x00FF00 " );
}

shared string OneAll( int value, uint count )   { return value + " (" + value * count + ")"; }
shared string OneAll( float value, uint count ) { return value + " (" + value * count + ")"; }

shared string DeltaTime_HM( uint delta )
{
	// if( delta == 0 )
		// return "now";
	
	int m = ( delta ) % 60;
	int h = ( delta / 60 ) % 24;
	int day = delta / 60 / 24;
	
	return ( day > 0 ? day + "d" : "" ) + smart_two_digits( h, ":", true ) + smart_two_digits( m, "", true );
}

shared string DeltaTime_HMS( uint delta )
{
	if( delta == 0 )
		return "now";
	
	int s = delta % 60;
	int m = ( delta / 60 ) % 60;
	int h = ( delta / 60 / 60 ) % 24;
	int day = delta / 60 / 60 / 24;
	
	return ( day > 0 ? day + "d" : "" ) + smart_two_digits( h, ":", true ) + smart_two_digits( m, ":", true ) + smart_two_digits(s, "", true );
}

shared string DeltaTime_HMS_short( uint delta )
{
	if( delta == 0 )
		return "now";
	
	if( delta < 60 )
		return "soon";

	int s = delta % 60;
	int m = ( delta / 60 ) % 60;
	int h = ( delta / 60 / 60 ) % 24;
	int day = delta / 60 / 60 / 24;
	
	return ( day > 0 ? day + "d" : "" ) + ( h > 0 ? h + "h" : "" ) + ( m > 0 ? m + "m" : "" );
}

shared string MakeTime( uint val )
{
    return DeltaTime_HMS( val % 86400 ) + " | ";
}

shared int[] UINT2INT( uint[] list )
{
	int[] result;
	for( uint i = 0, l = list.length(); i < l; i++ )
		result.insertLast( int(list[i]) );
	return result;
}

shared uint[] INT2UINT( int[] list )
{
	uint[] result;
	for( uint i = 0, l = list.length(); i < l; i++ )
		result.insertLast( uint(list[i]) );
	return result;
}

shared string ShortEnlistUINT( uint[] list, string divider = ", ", string prefix = "", string postfix = "" )
{
	if( !valid( list ) ) return "[null]";

	int len = list.length() - 1;
	if( len == -1 ) return "[empty]";
	
	bool shorted = false;
	string result = prefix;
	for( int i = 0; i <= len; i++ )
	{
		if( i == len )
		{
			result += list[i];
			continue;
		}
		
		if( list[i] + 1 == list[i+1] )
		{
			if( !shorted )
			{
				shorted = true;
				result += list[i] + "-";
			}
			else 
				continue;
		}
		else
		{
			if( shorted )
				shorted = false;

			result += list[i] + divider;
		}
	}

	return result + postfix;
}

//Формат настраиваемый.
shared string enlistUINT( uint[] list, string divider = ", ", string prefix = "", string postfix = "" )
{
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = prefix + list[0];
	for( uint i = 1; i < len; i++ )
		result += divider + list[i];
	
	return result + postfix;
}

shared string enlistINT( int[] list, string divider = ", ", string prefix = "", string postfix = "" )
{ 
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = prefix + list[0];
	for( uint i = 1; i < len; i++ )
		result += divider + list[i];
	
	return result + postfix;
}

shared string enlist( string[] list, string divider = ", ", string prefix = "", string postfix = "" )
{ 
	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = prefix + list[0];
	for( uint i = 1; i < len; i++ )
		result += divider + list[i];
	
	return result + postfix;
}

shared string enlistSTR( string@[]@ list, string divider = ", ", string prefix = "", string postfix = "" )
{ 
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = prefix + list[0];
	for( uint i = 1; i < len; i++ )
		result += divider + list[i];
	
	return result + postfix;
}

/*
int[] _list( int arg0 ) { int[] result = { arg0 }; 
	return result; }
int[] _list( int arg0, int arg1 ) { int[] result = { arg0, arg1 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2 ) { int[] result = { arg0, arg1, arg2 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3 ){ int[] result = { arg0, arg1, arg2, arg3 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4 ){ int[] result = { arg0, arg1, arg2, arg3, arg4 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5 ){ int[] result = { arg0, arg1, arg2, arg3, arg4, arg5 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6 ){ int[] result = { arg0, arg1, arg2, arg3, arg4, arg5, arg6 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7 ) { int[] result = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 }; 
	return result; }
*/