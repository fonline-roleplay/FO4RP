shared bool isDisabledSkill( uint skillIndex )
{
	uint[] disabled_skills = { SK_GAMBLING, SK_OUTDOORSMAN };
	return( disabled_skills.find( skillIndex ) != -1 );
}

shared bool isFarmingSkill( uint skillIndex )
{
	uint[] farming_skills = { SK_MINING, SK_CHOPPING, SK_SCAVENGING, SK_HUNTING, SK_FISHING, SK_FARMING, SK_COOKING, SK_HERBALISM };
	return( farming_skills.find( skillIndex ) != -1 );
}

shared string protoColor( const ProtoItem@ proto )
{
	switch( proto.Type )
	{
		case( ITEM_TYPE_NONE ):
			return COLOR_NONE; 
		case( ITEM_TYPE_ARMOR ):
			return COLOR_ARMOR;
		case( ITEM_TYPE_DRUG ):
			return COLOR_DRUGS; 
		case( ITEM_TYPE_WEAPON ):
			return COLOR_WEAPON;  
		case( ITEM_TYPE_AMMO ):
			return COLOR_AMMO;  
		case( ITEM_TYPE_MISC ):
			return COLOR_MISC;  
		case( ITEM_TYPE_KEY ):
			return COLOR_KEY;  
		case( ITEM_TYPE_CONTAINER ):
			return COLOR_CONTAINER;  
		case( ITEM_TYPE_DOOR ):
			return COLOR_DOOR;  
		case( ITEM_TYPE_GRID ):
			return COLOR_GRID;  
		case( ITEM_TYPE_GENERIC ):
			return COLOR_GENERIC;  
		case( ITEM_TYPE_WALL ):
			return COLOR_WALL;  
		case( ITEM_TYPE_CAR ):
			return COLOR_CAR;  
		case( ITEM_TYPE_PLANT ):
			return COLOR_PLANT;     
		case( ITEM_TYPE_FOOD ):
			return COLOR_FOOD;  
		case( ITEM_TYPE_DRINK ):
			return COLOR_DRINK;
		case( ITEM_TYPE_SMOKER ):
			return COLOR_SMOKER;
		case( ITEM_TYPE_FLASK ):
			return COLOR_FLASK;
		case( ITEM_TYPE_TRAP ):
			return COLOR_TRAP;
	}
	return COLOR_NETMSG;
}

shared string itemColor( ItemMutual& item )
{
	return protoColor(item.Proto);
}

shared string cutter( string input, int min_line_length = 20, int max_line_length = 30, int max_string_length = 126 )
{
	int len = input.length();
	if( len == 0 || len < min_line_length )
	{
		return input;
	}
	
	if( len > max_string_length )
	{
		input = substring( input, 0, max_string_length - 2 ) + "..";
	}
	
	string@[]@ words = split( input, " " );
	if( !valid( words ) || words.length() == 0 )
	{
		return input;
	}
	
	string result = "";
	int current_length = 0;
	
	for( int i = 0, count = words.length(); i < count; i++ )
	{
		int word_len = words[i].length();
		if( current_length + word_len >= min_line_length )
		{
			current_length = 0;
			result += words[i] + " " + "\n";
			continue;
		}
		
		if( word_len > 3 && current_length + word_len >= max_line_length )
		{
			int hardcut = current_length + word_len - max_line_length;
			string@ word_cut_head = substring( words[i], 0, hardcut );
			string@ word_cut_tail = substring( words[i], hardcut, word_len - hardcut );
			if( valid( word_cut_head ) && valid( word_cut_tail ) && word_cut_head.length() > 2 && word_cut_tail.length() > 2 )
			{
				result += word_cut_head + ".." + "\n" + ".." + word_cut_tail + " ";
				current_length = word_cut_tail.length() + 2;
				continue;
			}
		}

		result += words[i];
		if( i < count - 1 )
		{
			result += " ";
		}
		
		current_length += words[i].length();
	}
	
	return result;
}

shared bool isContainer( ItemMutual@ container )
{
	return valid( container ) && container.GetType() == ITEM_TYPE_CONTAINER;
}

shared uint CountItemsByPID( ItemMutual@[] list, uint PID )
{
	uint len = list.length();
	if( len == 0 ) return 0;

	for( uint i = 0; i < len; i++ )
	{			
		ItemMutual@ item = list[i];
		
		if( valid( item ) && item.GetProtoId() == PID )
		{				
			if( !item.IsStackable() )
			{
				uint count = 1;
				for( uint j = i + 1; j < len; j ++ )
				{
					if( valid( list[j] ) && list[j].GetProtoId() == PID )
					{
						count++;
					}
				}
				return count;
			}
			
			return item.GetCount();
		}
	}
	
	return 0;
}

shared uint CalculateItemCost( ItemMutual& item, CritterMutual& cr, CritterMutual& npc, bool sell )
{
    uint8 itemType = item.GetType();
    uint16 pid = item.GetProtoId();
    uint cost = item.Proto.Cost;

    if( pid == PID_BOTTLE_CAPS || pid == PID_REAL_BOTTLE_CAPS || pid == PID_PREWAR_DOLLAR_1 )
	{
        return 1;
	}
	
	if( pid == PID_GOLDEN_COIN )
	{
		return 10;
	}
	
	if( pid == PID_DOLLAR_100 || pid == PID_PREWAR_DOLLAR_100 )
	{
		return 100;
	}
	
	if( pid == PID_DOLLAR_20 || pid == PID_PREWAR_DOLLAR_20 )
	{
		return 20;
	}
	
	if( pid == PID_DOLLAR_5 || pid == PID_PREWAR_DOLLAR_5 )
	{
		return 5;
	}
	
    if( itemType == ITEM_TYPE_ARMOR || itemType == ITEM_TYPE_WEAPON )
    {
        uint8 brokenCount = item.BrokenCount;
        uint8 brokenFlags = item.BrokenFlags;

        if( FLAG( brokenFlags, BI_NOTRESC ) || FLAG( brokenFlags, BI_BROKEN ) )
		{
            cost = cost * 10 / 100;
		}
        else if( FLAG( brokenFlags, BI_HIGHBROKEN ) )
		{
            cost /= 3;
        }
		else if( FLAG( brokenFlags, BI_NORMBROKEN ) )
		{
            cost /= 2;
        }
		else if( FLAG( brokenFlags, BI_LOWBROKEN ) )
		{
            cost = cost * 100 / 140;
        }
		else if( brokenCount > 0 )
		{
            cost = brokenCount != 100 ? ( cost * brokenCount * 10 / 100 ) : cost * 10 / 100;
		}
		
        if( itemType == ITEM_TYPE_WEAPON && !item.IsStackable() )
        {
			ProtoItem@ ammo = GetProtoItem( item.AmmoPid );
			if( valid( ammo ) )
			{
				cost += ammo.Cost * item.AmmoCount;
			}
		}
    }

	//Check for partial pids and NPC price cap
	if( item.Proto.Partial_Item > 0 && item.Proto.Type != ITEM_TYPE_FLASK )
	{
		cost = cost * item.Val0 / item.Proto.Partial_Item;
	}
	
	int skill_range = 150;
	float skill = CLAMP( cr.Skill[ SK_BARTER ] - npc.Skill[ SK_BARTER ], -skill_range, skill_range );
	skill = skill / skill_range * 25; //That makes value from [-1..1] to [-25..25]

	if( sell )
	{
		cost = cost * 40 / 100; //40% from cogs is max
	}
	else
	{
		cost *= 75 - int( skill ); //from 50% to 100% of cost
		cost /= 100;
	}
	
	if( cost < 1 )
	{
		cost = 1;
	}
	
	return cost;
}

shared bool SameFaction( CritterMutual& cr1, CritterMutual& cr2 )
{
	if( cr1.ParamBase[ ST_FACTION ] != 0 )
	{
		return cr1.ParamBase[ ST_FACTION ] == cr2.ParamBase[ ST_FACTION ];
	}
	
	return false;
}

shared bool IsHuman( CritterMutual& cr )
{
	uint[] mutants = { BT_MEN, BT_WOMEN, BT_CHILDREN };
	return mutants.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

shared bool IsRobot( CritterMutual& cr )
{
	uint[] robots = { BT_ROBOT };
	return robots.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

shared bool IsMutant( CritterMutual& cr )
{
	uint[] mutants = { BT_SUPER_MUTANT, BT_GHOUL, BT_BIG_BAD_BOSS };
	return mutants.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

shared bool IsAnimal( CritterMutual& cr )
{
	uint[] animals = { BT_BRAHMIN, BT_RADSCORPION, BT_RAT, BT_DOG, BT_MANTI, BT_PLANT, BT_GECKO, BT_LAVASH };
	return animals.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

shared bool IsMonster( CritterMutual& cr )
{
	uint[] animals = { BT_DEATHCLAW, BT_YAO, BT_CENTAUR, BT_FLOATER, BT_ALIEN, BT_SWAMP_LURKER, BT_CROCS };
	return animals.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

shared bool IsInsect( CritterMutual& cr )
{
	uint[] animals = { BT_MANTI, BT_GIANT_ANT, BT_GIANT_BEETLE, BT_GIANT_WASP, BT_MILLEPEDE, BT_SPIDER };
	return animals.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}