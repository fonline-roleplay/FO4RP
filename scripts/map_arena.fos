#ifndef MAP_ARENA
#define MAP_ARENA

#include "_utils.fos"
#include "entire_h.fos"
#include "map_arena_h.fos"
#include "playlist_h.fos"

void _ArenaMapInit( Map& map, bool firstTime )
{
	map.SetEvent( MAP_EVENT_IN_CRITTER, "_crIn" );
	SetMapLoop( map, 0, "_CleanJunk", TIMER_ARENA_LOOP_0 );
    SetMapLoop( map, 1, "_SpawnItems", TIMER_ARENA_LOOP_1 );
    SetMapLoop( map, 2, "_PlayMapMusic", TIMER_ARENA_LOOP_2 );
}

void SetMapLoop( Map@ map, int index, string& funcDecl, uint time )
{
    map.SetEvent( MAP_EVENT_LOOP_0 + index, funcDecl );
    map.SetLoopTime( index, time );
}

void _crIn( Map& map, Critter& cr )
{
    if( !cr.IsNpc() && cr.Stat[ ST_LEVEL ] != 12 )
    {
		int skin = cr.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DW_JUMPSUIT_BLACK_M : CRTYPE_DW_JUMPSUIT_BLACK_F;
		cr.ChangeCrType( skin );
		cr.StatBase[ ST_BASE_CRTYPE ] = skin;
		cr.StatBase[ ST_EXPERIENCE ] += 200000;
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GAIN_LEVEL_CAP );
		PlayGenericSound( map, cr.HexX, cr.HexY, "LEVELUP.mp3", 1 );
    }
}

void _SpawnItems( Map& map )
{
	if( !valid( map ) )
	{
		return;
	}
	
	Item@[] containers;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );

    if( containers.length() > 0 )
    {
        for( uint16 i = 0; i < containers.length(); i++ )
        {
            if( !valid( containers[ i ] ) )
			{
				continue;
			}
			
			if( containers[ i ].Proto.Item_Subtype == ITEM_SUBTYPE_FURNITURE || containers[ i ].Proto.Item_Subtype == ITEM_SUBTYPE_PERSONAL_BAG 
				|| containers[ i ].Proto.Item_Subtype == ITEM_SUBTYPE_BRIEFCASE )
			{
				continue;
			}
			
			//Disable comment for loot spawn in empty containers only!!!
			/*bool iscontinue = false;
			Item@[] contItems;
			int j = containers[ i ].GetItems( 0, contItems );
			while( --j >= 0 )
			{
				if( contItems[ j ].IsNotValid )
				{
					iscontinue = true;
					break;
				}
			}
			
			if( iscontinue )
			{
				continue;
			}*/
			
			uint[] pids;
			uint16 roll = Random( 1, 100 );
			uint16 mapPid = map.GetProtoId();
			switch( mapPid )
			{
				case( MAP_TLJ_ARENA1 ):
				{
					if(	roll >= 1 && roll <= 10 )
					{
						pids = arena1_itemlist[ 0 ]; //Mellee
					}				
					else if( roll >= 11 && roll <= 35 )
					{
						pids = arena1_itemlist[ 1 ]; //Ammo and Thrown
					}
					else if( roll >= 36 && roll <= 40 )
					{
						pids = arena1_itemlist[ 2 ]; //Armour
					}		
					else if( roll >= 41 && roll <= 65 )
					{
						pids = arena1_itemlist[ 3 ]; //Meds
					}		
					else if( roll >= 66 && roll <= 70 )
					{
						pids = arena1_itemlist[ 4 ]; //Apparel
					}		
					else if( roll >= 71 && roll <= 80 )
					{
						pids = arena1_itemlist[ 5 ]; //Small Guns
					}		
					else if( roll >= 81 && roll <= 90 )
					{
						pids = arena1_itemlist[ 6 ]; //Big Guns
					}		
					else
					{
						pids = arena1_itemlist[ 7 ]; //Energy Weapons
					}
					break;
				}
				case( MAP_TLJ_ARENA2 ):
				{
					if(	roll >= 1 && roll <= 10 )
					{
						pids = arena2_itemlist[ 0 ]; //Mellee
					}				
					else if( roll >= 11 && roll <= 35 )
					{
						pids = arena2_itemlist[ 1 ]; //Ammo and Thrown
					}
					else if( roll >= 36 && roll <= 40 )
					{
						pids = arena2_itemlist[ 2 ]; //Armour
					}		
					else if( roll >= 41 && roll <= 65 )
					{
						pids = arena2_itemlist[ 3 ]; //Meds
					}		
					else if( roll >= 66 && roll <= 70 )
					{
						pids = arena2_itemlist[ 4 ]; //Apparel
					}		
					else if( roll >= 71 && roll <= 80 )
					{
						pids = arena2_itemlist[ 5 ]; //Small Guns
					}		
					else if( roll >= 81 && roll <= 90 )
					{
						pids = arena2_itemlist[ 6 ]; //Big Guns
					}		
					else
					{
						pids = arena2_itemlist[ 7 ]; //Energy Weapons
					}
					break;
				}
				default:
					return;
			}
			
			uint16 itemPid = pids[ Random( 0, pids.length - 1 ) ];
			ProtoItem@ protoItem = GetProtoItem( itemPid );
			if( !valid( protoItem ) )
			{
				continue;
			}
			
			uint8 amount = 1;
			uint8 ammoAmount = 100;

			switch( protoItem.Type )
			{
				case( ITEM_TYPE_WEAPON ):
				{
					if( protoItem.Item_Subtype >= ITEM_SUBTYPE_WEAPON_GRENADE_BEGIN && protoItem.Item_Subtype <= ITEM_SUBTYPE_WEAPON_GRENADE_END )
					{
						amount = 10;
					}
					
					if( protoItem.Weapon_MaxAmmoCount > 0 && protoItem.Weapon_DefaultAmmoPid > 0 )
					{
						uint16 ammoPid = protoItem.Weapon_DefaultAmmoPid;
						switch( ammoPid )
						{
							case( PID_EXPLOSIVE_ROCKET ):
							case( PID_ROCKET_AP ):
							case( PID_40MM_HE ):
								ammoAmount = 10;
								break;
							case( PID_FLAMETHROWER_FUEL ):
							case( PID_FLAMETHROWER_FUEL_MK_II ):
								ammoAmount = 20;
								break;
							case( PID_MICRO_FUSION_CELL ):	
								ammoAmount = 50;
								break;
							default:
								ammoAmount = 100;
								break;
						}

						if( ammoPid != 0 )
						{
							containers[ i ].AddItem( ammoPid, ammoAmount, 0 );
						}
					}
					break;
				}
				case( ITEM_TYPE_AMMO ):
				{
					switch( itemPid )
					{
						case( PID_EXPLOSIVE_ROCKET ):
						case( PID_ROCKET_AP ):
						case( PID_40MM_HE ):
							amount = 10;
							break;
						case( PID_FLAMETHROWER_FUEL ):
						case( PID_FLAMETHROWER_FUEL_MK_II ):
							amount = 20;
							break;
						case( PID_MICRO_FUSION_CELL ):	
							amount = 50;
							break;
						default:
							amount = 100;
							break;
					}
					break;
				}
				case( ITEM_TYPE_DRUG ):
				{
					switch( itemPid )
					{
						case( PID_HEALING_POWDER ):
							amount = 10;
							break;
						case( PID_SUPER_STIMPAK ):
						case( PID_TRAUMATIN ):
							amount = 2;
							break;
						case( PID_JET_ANTIDOTE ):
							amount = 1;
							break;
						case( PID_STIMPAK ):
							amount = 5;
							break;
						default:
							amount = 4;
							break;
					}
					break;
				}
				case( ITEM_TYPE_TRAP ):
					amount = 5;
					break;
				default:
				{
					switch( itemPid )
					{
						case( PID_CLOTH ):
						case( PID_THREAD ):
						case( PID_BANDAGE ):
							amount = 5;
							break;
						default:
							amount = 1;
							break;
					}
				}
				break;
			}
			containers[ i ].AddItem( itemPid, amount, 0 );
        }
    }
}	

void _PlayMapMusic( Map& map )
{
	string music = "LAUGHTER.mp3";
	uint8 list = Random( 0, 2 );
	if( list == 0 )
	{
		music = FonlineMusic[ Random( 0, FonlineMusic.length() -1 ) ];
	}
	else if( list == 1 )
	{
		music = SuspenceMusic[ Random( 0, SuspenceMusic.length() -1 ) ];
	}
	else
	{
		music = NNMplaylist[ Random( 0, NNMplaylist.length() -1 ) ];
	}
	
	PlayMapMusic( map, music );
}

void _CleanJunk( Map& map )
{
	Item@[] mapItems;
	for( uint i = 0; i < ITEM_TYPE_TRAP; i ++ )
	{
		if( i == ITEM_TYPE_CONTAINER || i == ITEM_TYPE_DOOR || i == ITEM_TYPE_PLANT )
		{
			continue;
		}
		map.GetItemsByType( i, mapItems );
	}
	
	if( mapItems.length() > 0 )
	{
		for( uint i = 0; i < mapItems.length(); i++ )
		{
			Item@ deleted = mapItems[ i ];
			if( valid( deleted ) )
			{
				DeleteItem( deleted );
			}
		}
	}

	Item@[] containers;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
	if( containers.length() > 0 )
	{
		Item@[] contItems;
		for( uint i = 0; i < containers.length(); i++ )
		{
			Item@ container = containers[ i ];
			if( valid( container ) )
			{
				container.GetItems( uint( -1 ), contItems );
				if( contItems.length() > 0 )
				{
					for( uint j = 0; j < contItems.length(); j++ )
					{
						Item@ deleted = contItems[ j ];
						if( valid( deleted ) )
						{
							DeleteItem( deleted );
						}
					}
					container.Update();
				}
			}
		}
	}
}

//~run map_arena _ForceArenaInit 0 0 0
void _ForceArenaInit( Critter& player, int param0, int param1, int param2 )
{
	Map@ map = player.GetMap();
	if( valid( map ) )
	{
		_CleanJunk( map );
		_SpawnItems( map );
		_PlayMapMusic( map );
	}
}

void PlayMapMusic( Map& map, string@ music )
{
	Critter@[] players;
    map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, players );
	for( uint i = 0; i < players.length(); i ++ )
	{
		Critter@ player = players[i];
		if( valid( player ) && !player.IsNpc() )
		{
			int timeStamp = GetTick();
			player.RunClientScript( "fofmod@__StopAllMusic", 0, 0, 0, null, null );
			player.RunClientScript( "fofmod@__PlayMapMusic", map.Id, timeStamp, 0, music, null );
		}
	}
}

#endif // MAP_ARENA