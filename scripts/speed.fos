#ifndef SPEED
#define SPEED

#include "_utils.fos"
#include "_starter.fos"
#include "speed_h.fos"
#include "handcuffs_h.fos"

int[] SpeedArray( 2000, 0 );

void InitSpeedArray() // Export
{
    file crTypes;
    if( crTypes.open( "./data/CritterTypes.cfg", "r" ) < 0 )
	{
        return;
	}
	
    int i = 0;
	while( !crTypes.isEndOfFile() )
    {
        string str;
        crTypes.readLine( str );
        if( str.length() < 10 || str[ 0 ] != '@' )
            continue;

		string@[] @ line = splitExSpaces( str );
		
		i++;
		//DebugLog( "#" + i + ") " + enlistSTR( line ) );

        int num = 0, walk = 0, run = 0;
        if( !StrToInt( line[ 1 ], num ) || num < 0 || num > 999 || !StrToInt( line[ 37 ], walk ) || !StrToInt( line[ 38 ], run ) )
		{
            continue;
		}
        SpeedArray[ num * 2 ] = walk;
        SpeedArray[ num * 2 + 1 ] = run;
    }
    crTypes.close();
}

void reset()
{
    Critter@[] crs;
    GetAllPlayers( crs );

    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        ChangeCritterSpeed( crs[ i ] );
    }
}

void reset( Critter& cr, int p0, int p1, int )
{
    reset();
}

void testISA( Critter& cr, int p0, int p1, int )
{
    InitSpeedArray();
    reset();
}

void ChangeCritterSpeed( Critter& cr )
{
	if( cr.ParamBase[ CR_FIXED_SPEED ] != 0 )
	{
		return;
	}
	
	uint16 run = 0, walk = 0;
    float curHp = cr.Stat[ ST_CURRENT_HP ];
	float maxHp = ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_MAX_LIFE_EXT ] );
    float carry = cr.Stat[ ST_CARRY_WEIGHT ];
	float weight = cr.Param[ CR_ITEMS_WEIGHT ];

    if( carry == 0 )
	{
        carry += 1;
    }
	
	float weight_cantRun = carry * 0.71f;
    float weight_cantWalk = carry * 1.50f;

    bool CanRun = ( SpeedArray[ cr.CrType * 2 + 1 ] != 0 ) && ( weight < weight_cantRun );

	Item@ shackles = cr.GetItem( 0, SLOT_MISC );
	if( valid( shackles ) && shackles.GetProtoId() == PID_SHACKLES && shackles.BONDAGE_STATE == BONDAGE_STATE_ON || cr.Param[ CR_IS_RELOADING ] > 0 )
	{
		CanRun = false;
	}
	
    cr.ModeBase[ MODE_NO_RUN ] = ( CanRun ? 0 : 1 );
	
    if( curHp <= 0 )
	{
        curHp = 1;
	}
	
	if( curHp >= maxHp * 0.25f )
	{
		curHp = maxHp * 0.25f;
    }
	
	float hpPERCENT = curHp * 1.0f / ( maxHp * 0.25f );
	float healthMod = 2.0f - hpPERCENT;

    walk = uint16( SpeedArray[ cr.CrType * 2 ] );
    run  = uint16( SpeedArray[ cr.CrType * 2 + 1 ] );
	
	float dragging = FurnitureDraggingSpeedMod( cr );
	
	_testInfo( cr, CR_TEST_MODE_SPEED, SAY_NETMSG, "w " + walk + " r " + run + " h " + healthMod + " d " + dragging );
	
	cr.ModeBase[ MODE_NO_WALK ] = weight > weight_cantWalk ? 1 : 0;
	
	if( cr.Trait[ TRAIT_SURE_FOOTED ] == 0 )
	{
		walk = CLAMP( uint16( walk * healthMod * dragging ), 0, 2000 );
		run = CLAMP( uint16( run * healthMod * dragging ), 0, walk );
	}
	
	if( cr.ParamBase[ CR_YOU_DRAG ] != 0 && cr.Trait[ TRAIT_SURE_FOOTED ] == 0 )
	{
		Critter@ target = GetCritter( cr.ParamBase[ CR_YOU_DRAG ] );
		if( valid( target ) )
		{
			uint speedMod;
			int MobType = target.Stat[ ST_BASE_CRTYPE ];
			switch( MobType )
			{			
				case( CRTYPE_GIANT_BEETLE ):
				case( CRTYPE_GIANT_WASP ):
				case( CRTYPE_RAT ):
				case( CRTYPE_MANTI ):
				case( CRTYPE_DOG_SMALL ):
				case( CRTYPE_GIANT_ANT_BROWN ):
				case( CRTYPE_GIANT_ANT_BROWN_L ):
				case( CRTYPE_GIANT_ANT_GREEN ):
				case( CRTYPE_GIANT_ANT_RED ):
				case( CRTYPE_PLANT ):
				case( CRTYPE_ALIEN_EGG ):
					speedMod = 800;
					break;
				case( CRTYPE_GIANT_ANT_LION ):
				case( CRTYPE_RAT_PIGRAT ):
				case( CRTYPE_GECKO_GOLD_SMALL ):
				case( CRTYPE_DOG ):
				case( CRTYPE_DOG_BLC ):
				case( CRTYPE_DOG_BRN ):
					speedMod = 900;
					break;
				case( CRTYPE_GECKO_SILV ):
				case( CRTYPE_GECKO_GOLD ):
				case( CRTYPE_GECKO_CAVE ):
				case( CRTYPE_GECKO_FIRE ):
				case( CRTYPE_RADSCORPION ):
					speedMod = 1000;
					break;
				case( CRTYPE_RADSCORPION_HUGE ):
				case( CRTYPE_RADSCORPION_BLC_HUGE ):
				case( CRTYPE_RADSCORPION_CAVE ):
					speedMod = 1200;
					break;
				case( CRTYPE_RAT_MOLERAT ):
				case( CRTYPE_RAT_MOLERAT_MUTANT ):
				case( CRTYPE_BRAHMIN ):
				case( CRTYPE_ALIEN_REG ):
				case( CRTYPE_ALIEN_QUEEN ):
				case( CRTYPE_DEADCLAW_SMALL ):
				case( CRTYPE_FLOATER ):
					speedMod = 1300;
					break;
				case( CRTYPE_YAO ):
				case( CRTYPE_DEADCLAW ):
				case( CRTYPE_DEADCLAW_GREY ):
				case( CRTYPE_CROCS_BEETLE ):
				case( CRTYPE_CROCS_SHADOW ):
				case( CRTYPE_DEADCLAW_BEAST ):
				case( CRTYPE_CENTAUR ):
				case( CRTYPE_SWAMP_LURKER ):
					speedMod = 1500;
					break;
				default:
					speedMod = 1200;
					break;
			}
			
			int newSpeed = speedMod - ( cr.Stat[ ST_STRENGTH ] * 100 ); 
			walk += CLAMP( newSpeed, 0, 1500 );
			run = walk;
		}
	}

	if( cr.Param[ CR_SNEAKING ] > 0 && cr.Trait[ TRAIT_SURE_FOOTED ] == 0 )
	{
		walk = walk * 120 / 100;
	}
	
    cr.StatBase[ ST_WALK_TIME ] = walk;
    cr.StatBase[ ST_RUN_TIME ] = int( run * ( 100 - cr.StatBase[ ST_RUN_TIME_EXT ] ) / 100 );

	_testInfo( cr, CR_TEST_MODE_SPEED, SAY_NETMSG, "w " + cr.StatBase[ ST_WALK_TIME ] + " r " + cr.StatBase[ ST_RUN_TIME ] );
	
	ChangeRunningAP( cr );
}

float FurnitureDraggingSpeedMod( Critter& cr )
{
	if( cr.Trait[ TRAIT_SURE_FOOTED ] > 0 )
	{
		return 1;
	}
	
	if( cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) == 0 )
	{
		return 1;
	}
	
	Item@ furniture = GetItem( cr.StatBase[ ST_LAST_CONT_ID ] );
	if( !valid( furniture ) )
	{
		return 1;
	}
	
	float furniture_weight = ItemsWeight( furniture );
	float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture );
	float min_weight = max_weight / 2;
	
	float weight_capacity = max_weight - min_weight;
	float weight_used = furniture_weight - min_weight;

	float result = 2 - ( weight_capacity - weight_used ) / weight_capacity;
	
	if( result < 1 )
	{
		result = 1;
	}
	
	if( result > 2 )
	{
		result = 2;
	}
	
	_testInfo( cr, CR_TEST_MODE_SPEED, SAY_NETMSG, "result " + result + " max_weight " + max_weight + " furniture_weight " + furniture_weight );
	_testInfo( cr, CR_TEST_MODE_SPEED, SAY_NETMSG, "weight_capacity " + weight_capacity + " weight_used " + weight_used );
	
	return result;
}

void ChangeRunningAP( Critter& cr )
{
	cr.ParamBase[ CR_ITEMS_WEIGHT ] = ItemsWeight( cr );
	cr.ParamBase[ QST_AP_COST_RUN ] = RunningAP_cost(cr);
}

int RunningAP_cost( Critter& cr ) // returns how much AP is needed to run for 100 hexes
{
	if( ExoCheck(cr) ) return 1;
	return RunningAP_cost( cr.Param[ CR_ITEMS_WEIGHT ], cr.Stat[ ST_CARRY_WEIGHT ] );
}

int RunningAP_cost( float weight_current, float weight_max )
{
	float load = weight_current / weight_max;
	float k = 5.0f / 0.7f; // == 7,1428571428571428571428571428571
	float cost = k * load;
	return int( 100 * ( 1 + cost ) );
}

bool ExoCheck( Critter& cr )
{
	Item@ armor = _CritGetItemArmor( cr );
	return( valid( armor ) && FLAG( armor.Proto.Armor_Perk, ARMOR_PERK_POWERED ) );
}

#endif //SPEED