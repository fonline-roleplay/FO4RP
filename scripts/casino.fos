#ifndef CASINO
#define CASINO

#include "_utils.fos"
#include "casino_h.fos"
#include "vending_h.fos"

bool SlotMachineCheck( Critter& cr, Item@ cash, Item@ target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
    if( !valid( cash ) || !valid(target) )
	{
		return false;
	}
    
	uint16 cashPid = cash.GetProtoId();
    if( cashPid != PID_BOTTLE_CAPS )
	{
		return false;
	}
	
    uint16 SlotMachine = target.GetProtoId();
    if( SlotMachine != PID_SLOT_MACHINE && SlotMachine != PID_SLOT_MACHINE2 )
	{
		return false;
	}
    SlotMachineWork( cr, cash, target );
    return true;
}

bool SlotMachineWork( Critter& cr, Item& cash, Item& target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	uint bet = MIN_BET;
    if( valid( cash ) )
	{  
		bet = cash.GetCount();
    }
	else
	{
        bet = _CritCountItem( cr, PID_BOTTLE_CAPS );
        if( bet < MIN_BET )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_USE_NOTHING );
            return false;
        }
    }
	
    if( cash.CritSlot != SLOT_HAND1 && bet > MAX_BET )
	{
        bet = MAX_BET;
	}
	else
	{
		bet = MIN_BET;
	}
	
	PlaySlots( cr, target, bet );
	return true;
}

bool PlaySlots( Critter& cr, Item& target, uint bet )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
	Item@ machineCaps = target.GetItem( pid, 0 );
	if( !valid( machineCaps ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_MONEY_LEFT );
		return false; 
	}
	else
	{		
		cr.Action( ACTION_USE_ITEM, 2, machineCaps );
		uint machineCapsCount = machineCaps.GetCount();
		if( machineCapsCount < bet )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOT_ENOUGH_TO_COVER_BET );
			return false; 
		}
		
		if( _CritCountItem( cr, pid ) >= bet )
		{
			Item@ cash = getItem( cr, pid );
			MoveItem( cash, bet, target, 0 );
			cr.Say( SAY_NETMSG, "-" + bet + "$" );
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOT_ENOUGH_TO_COVER_BET );
			return false; 
		}
		
		if( Random( 1, 100 ) > 52 )
		{
			if( Random( 1, 100 ) == 100 )
			{
				if( machineCapsCount >= 5000 )
				{
					bet*=10;
				}
				else if( machineCapsCount <= 4999 && machineCapsCount >= 4500 )
				{
					bet*=9;
				}
				else if( machineCapsCount <= 4499 && machineCapsCount >= 4000 )
				{
					bet*=8;
				}
				else if( machineCapsCount <= 3999 && machineCapsCount >= 3500 )
				{
					bet*=7;
				}
				else if( machineCapsCount <= 3499 && machineCapsCount >= 3000 )
				{
					bet*=6;
				}
				else if( machineCapsCount <= 2999 && machineCapsCount >= 2500 )
				{
					bet*=5;
				}
				else if( machineCapsCount <= 2499 && machineCapsCount >= 2000 )
				{
					bet*=4;
				}
				else if( machineCapsCount <= 1999 && machineCapsCount >= 300 )
				{
					bet*=3;
				}
				cr.AddItem( pid, bet );
				
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_JACKPOT, "$result" + bet );
				
				PlayGenericSound( map, cr.HexX, cr.HexY, "BIGWIN1.mp3", 30 );
				target.AddItem( pid, -bet, 0 );
				return true;
				
			}
			else
			{
				cr.AddItem( pid, bet * 2 );
				
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_WIN, "$result" + bet*2 );
				
				PlayGenericSound( map, cr.HexX, cr.HexY, "BIGWIN.mp3", 30 );
				
				target.AddItem( pid, -bet * 2, 0 );
				return true;
			}
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_LOOSE );
			PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 30 );
		}
	}
	return true;
}

class MenuSlotMachine: CenteredMenuHandler
{
    uint target_id;
    uint map_id;
	
    MenuSlotMachine(Item& target, Map& map)
	{
        target_id = target.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap(map_id);
        Item@ target = GetItem(target_id);
		
        if( map is null || target is null )
		{
            return false;
        }
		
		if( menu.ButtonMsg( STR_CASINO_BET_5 ) )
		{
			uint bet = 5;
			uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
			Item@ cash = cr.GetItem( pid, -1 );
			if( valid( cash ) && bet <= cash.GetCount() )
			{
				PlaySlots( cr, target, bet );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_HAVE_NO_MONEY );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CASINO_BET_10 ) )
		{
			uint bet = 10;
			uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
			Item@ cash = cr.GetItem( pid, -1 );
			if( valid( cash ) && bet <= cash.GetCount() )
			{
				PlaySlots( cr, target, bet );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_HAVE_NO_MONEY );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CASINO_BET_25 ) )
		{
			uint bet = 25;
			uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
			Item@ cash = cr.GetItem( pid, -1 );
			if( valid( cash ) && bet <= cash.GetCount() )
			{
				PlaySlots( cr, target, bet );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_HAVE_NO_MONEY );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CASINO_BET_50 ) )
		{
			uint bet = 50;
			uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
			Item@ cash = cr.GetItem( pid, -1 );
			if( valid( cash ) && bet <= cash.GetCount() )
			{
				PlaySlots( cr, target, bet );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_HAVE_NO_MONEY );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CASINO_BET_100 ) )
		{
			uint bet = 100;
			uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
			Item@ cash = cr.GetItem( pid, -1 );
			if( valid( cash ) && bet <= cash.GetCount() )
			{
				PlaySlots( cr, target, bet );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_HAVE_NO_MONEY );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_FURNITURE_MENU_OPEN_SAFE ) )
		{
			if( FLAG( target.LockerCondition, LOCKER_LOCKED ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MACHINE_LOCKED );
				PlayGenericSound( map, cr.HexX, cr.HexY, "ILCNTNRB.mp3", 15 );
				return true;
			}
			else
			{
				ShowContainer( cr, target, TRANSFER_HEX_CONT_UP );
				PlayGenericSound( map, cr.HexX, cr.HexY, "IOCNTNRB.mp3", 15 );
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_OPENS_MACHINE );
				return false;
			}
        }
		
		if( isGM( cr ) )
		{
			if( menu.ButtonMsg( STR_CASINO_SLOT_MACH_CHANGE ) )
			{
				target.SLOT_MACH_TYPE = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? SLOT_CURRENCY_COINS : SLOT_CURRENCY_CAPS;
				return true;
			}
		}
		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_CASINO_MENU_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
		Item@ target = GetItem(target_id);
		string info = "";
		uint pid = target.SLOT_MACH_TYPE == SLOT_CURRENCY_CAPS ? PID_REAL_BOTTLE_CAPS : PID_BOTTLE_CAPS;
		Item@ machineCaps = target.GetItem( pid, 0 );
		info+= "$casinoId" + target.Id;
		info+="$status";
		if( valid( machineCaps ) )
		{
			uint machineCapsCount = machineCaps.GetCount();
			uint mul = 0;
			if( machineCapsCount >= 5000 )
			{
				mul = 10;
			}
			else if( machineCapsCount <= 4999 && machineCapsCount >= 4500 )
			{
				mul = 9;
			}
			else if( machineCapsCount <= 4499 && machineCapsCount >= 4000 )
			{
				mul = 8;
			}
			else if( machineCapsCount <= 3999 && machineCapsCount >= 3500 )
			{
				mul = 7;
			}
			else if( machineCapsCount <= 3499 && machineCapsCount >= 3000 )
			{
				mul = 6;
			}
			else if( machineCapsCount <= 2999 && machineCapsCount >= 2500 )
			{
				mul = 5;
			}
			else if( machineCapsCount <= 2499 && machineCapsCount >= 2000 )
			{
				mul = 4;
			}
			else if( machineCapsCount <= 1999 && machineCapsCount >= 300 )
			{
				mul = 3;
			}
			else
			{
				mul = 2;
			}
			info += STR_INSERT_TEXT_LINE( STR_CASINO_JACKPOT_MUL )
			     + "$mul" + mul;
		}
		else
		{
			info+= STR_INSERT_TEXT_LINE( STR_CASINO_NO_MONEY );
		}

		Item@ cash = cr.GetItem( pid, -1 );
		info+="$balance";
		if( valid( cash ) )
		{
			uint amount = cash.GetCount();
			info += STR_INSERT_TEXT_LINE( STR_CASINO_BALANCE_PLAYER )
			     + "$cash" + amount;
		}
		else
		{
			info += STR_INSERT_TEXT_LINE( STR_CASINO_POOR_PLAYER );
		}
		
		info += " ";
		if( pid == PID_REAL_BOTTLE_CAPS )
		{
			info += STR_INSERT_TEXT_LINE( STR_CASINO_SLOT_MACH_CAPS );
		}
		else
		{
			info += STR_INSERT_TEXT_LINE( STR_CASINO_SLOT_MACH_COINS );
		}
		
        return info;
    }
}

void StartMenuSlotMachine( Critter& cr, Item& target )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuSlotMachine(target, map);
    iDialogBox@ menu = OpenMenu( cr, "Slot Machine", handler );
}

//COIN_FLIPPING
void CoinUse( Critter& cr, Item& item )
{
	uint side = Random( 0, 1 ) == 1 ? STR_COIN_BERMIN : STR_COIN_BUCK;
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, side );
}

//DICE_MECHANICS
void DiceUse( Critter& cr, Item& item )
{
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_DICE_ROLL,"$result" + Random( 1, 6 ) );
	Map @ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, "DICE1.mp3", 10 );
}

//CARDS_MECHANICS
bool CardsUse( Critter& cr, Item& deck, Item& table )
{
	if( !valid( deck ) )
	{
		return false;
	}
	if( !valid( table ) )
	{
		return false;
	}
	
	Item@[] stuff;
	deck.GetItems( uint( -1 ), stuff );
	uint len = stuff.length();
	if( len == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_DECK_EMPTY );
		return true;
	}
	
	Item@ cardTransfer = null;
	Item@[] cardDeck;
	
	for( uint i=0; i < len; i++ )
	{
		@cardTransfer = stuff[i];
		
		if( !valid( cardTransfer ) )
		{
			continue;
		}
		
		uint16 cardPid = cardTransfer.GetProtoId();
		if( Cards.find( cardPid ) != -1 )
		{
			cardDeck.insertLast( cardTransfer );
		}
	}
	
	uint len2 = cardDeck.length();
	if( len2 == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_NO_CARDS );
		return true;
	}
	
	Item@ card = cardDeck[ Random( 0, len -1 ) ];
	cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_CARDS_DRAWS_MSG, "$card@msg item " + ( card.Proto.ProtoId * 100 + 2 ) + "@" );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_EMOTE_DRAWS, "$card@msg item " + ( card.Proto.ProtoId * 100 + 2 ) + "@" );
	MoveItem( card, 1, table, 0 );
	
	return true;
}

bool CardsUse( Critter& cr, Item& deck, Critter& targetCr )
{
	if( !valid( deck ) )
	{
		return false;
	}
	
	if( !valid( targetCr ) )
	{
		return false;
	}
	
	Item@[] stuff;
	deck.GetItems( uint( -1 ), stuff );
	uint len = stuff.length();
	if( len == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_DECK_EMPTY );
		return true;
	}
	
	Item@ cardTransfer = null;
	Item@[] cardDeck;
	
	for( uint i=0; i < len; i++ )
	{
		@cardTransfer = stuff[i];
		
		if( !valid( cardTransfer ) )
		{
			continue;
		}
		
		uint16 cardPid = cardTransfer.GetProtoId();
		if( Cards.find( cardPid ) != -1 )
		{
			cardDeck.insertLast( cardTransfer );
		}
	}
	
	uint len2 = cardDeck.length();
	if( len2 == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_NO_CARDS );
		return true;
	}
	
	Item@ card = cardDeck[ Random( 0, len -1 ) ];
	
	Item@ cardsHand = null;
	if( hasItem( targetCr, PID_CARDS_HAND ) )
	{
		@ cardsHand = getItem( targetCr, PID_CARDS_HAND, -1 );
	}
	else
	{
		@ cardsHand = targetCr.AddItem( PID_CARDS_HAND, 1 );
	}
	
	MoveItem( card, 1, cardsHand, 0 );
	ChangeCardsHandPic( targetCr, cardsHand );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_DEALS );
	targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_YOU_GOT_CARD );
	return true;
}

bool ShuffleDeck( Critter& cr, Item& deck )
{
	if( !valid( deck ) )
	{
		return false;
	}
	Item@[] stuff;
	Item@ card = null;
	cr.GetItems( -1, stuff );
	uint len = stuff.length();
	if( len > 0 )
	{
		for( uint i=0; i < len; i++ )
		{
			@card = stuff[i];
			
			if( !valid( card ) )
			{
				continue;
			}
			
			uint16 cardPid = card.GetProtoId();
			if( Cards.find( cardPid ) != -1 )
			{
				MoveItem( card, 1, deck, 0 );
			}
		}
	}
	string emote;
	if( deck.GetProtoId() == PID_CARDS_DECK )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_SHUFFLES );
	}
	else
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_COLLETS );
	}

	Map @ map = cr.GetMap();
	if( valid( map ) )
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, "SHUFFLE.mp3", 10 );
	}
	return true;
}

bool TransferToCardsHand( Critter& cr, Item& card, Item& cardsHand )
{
	if( !valid( card ) )
	{
		return false;
	}
	if( !valid( cardsHand ) )
	{
		return false;
	}
	
	uint16 cardPid = card.GetProtoId();
	if( Cards.find( cardPid) == -1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_WRONG_ITEM );
		return false; 
	}
	else
	{
		MoveItem( card, 1, cardsHand, 0 );
		ChangeCardsHandPic( cr, cardsHand );
	}
	
	ShowContainer( cr, cardsHand, TRANSFER_SELF_CONT );
	return true;
}

bool TransferFromCardsHand( Critter& cr, Item& card, Item& cardsHand )
{
	if( !valid( cardsHand ) )
	{
		return false;
	}
	
	uint transferAmount = cr.ItemTransferCount();
	MoveItem( card, transferAmount, cr );
	
	Item@[] cards;
	cardsHand.GetItems( uint( -1 ), cards );
	uint len = cards.length();
	if( len <= 0 )
	{
		DeleteItem( cardsHand );
		return true;
	}
	else
	{
		ChangeCardsHandPic( cr, cardsHand );
	}
	return true;
}

bool ShowCardSHand( Critter& cr, Item& cardsHand, Item& table )
{
	if( !valid( cardsHand ) )
	{
		return false;
	}
	if( !valid( table ) )
	{
		return false;
	}
	
	Item@[] cards;
	cardsHand.GetItems( uint( -1 ), cards );
	uint len = cards.length();
	Item@ card = null;
	
	string inform;
	string desc;
	string inform2;
	for( uint i = 0; i < len; i++ )
	{
		@card = cards[i];
		if( !valid( card ) )
		{
			continue;
		}
		uint16 cardPid = card.GetProtoId();
		if( Cards.find( cardPid ) == -1 )
		{
			continue;
		}
		desc = "@msg item " + ( cardPid * 100 + 2 ) + "@";
		inform += "|0x7CFC00 " + desc + "|0xFF00FF , ";
		MoveItem( card, 1, table, 0 );
		ChangeCardsHandPic( cr, cardsHand );
		inform2 += "|0xFFFF00 " + desc + "|0x3CF800 , ";
	}
	inform[ inform.length() - 2 ] = '.';
	inform[ inform.length() - 1 ] = ' ';
	inform2[ inform2.length() - 2 ] = '.';
	inform2[ inform2.length() - 1 ] = ' ';
	cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_CARDS_DRAWS_MSG, "$card " + inform2 );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_SHOWS, "$cards " + inform );
	DeleteItem( cardsHand );
	return true;
}

void CheckCardsHand( Critter& cr, Item& cardsHand )
{
	if( !valid( cardsHand ) )
	{
		return;
	}
	Item@[] cards;
	cardsHand.GetItems( uint( -1 ), cards );
	uint len = cards.length();
	Item@ card = null;
	
	string desc;
	string inform;
	for( uint i = 0; i < len; i++ )
	{
		@card = cards[i];
		if( !valid( card ) )
		{
			continue;
		}
		
		uint16 cardPid = card.GetProtoId();
		if( Cards.find( cardPid ) == -1 )
		{
			continue;
		}
		desc = "@msg item " + ( cardPid * 100 + 2 ) + "@";
		inform += "|0xFFFF00 " + desc + "|0x3CF800 , ";
	}
	inform[ inform.length() - 2 ] = '.';
	inform[ inform.length() - 1 ] = ' ';
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CARDS_CHECK_HAND, "$cards " + inform );
}

void ShowCard( Critter& cr, Item& card )
{
	if( !valid( card ) )
	{
		return;
	}
	cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_CARDS_DRAWS_MSG, "$card@msg item " + ( card.Proto.ProtoId * 100 + 2 ) + "@" );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CARDS_EMOTE_DRAWS, "$card@msg item " + ( card.Proto.ProtoId * 100 + 2 ) + "@" );
}

class MenuCard: CenteredMenuHandler
{
    uint target_id;
    uint map_id;
	
    MenuCard( Item& target, Map& map )
	{
        target_id = target.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ target = GetItem( target_id );
		
        if( map is null || target is null )
		{
            return false;
        }
		
		if( menu.ButtonMsg( STR_CASINO_GATHER_CARDS ) )
		{
			Item@ cardsHand = null;
			if( hasItem( cr, PID_CARDS_HAND ) )
			{
				@ cardsHand = getItem( cr, PID_CARDS_HAND, -1 );
			}
			else
			{
				@ cardsHand = cr.AddItem( PID_CARDS_HAND, 1 );
			}
			
			ShuffleDeck( cr, cardsHand );
			ChangeCardsHandPic( cr, cardsHand );
			return false;
		}
		
		if( menu.ButtonMsg( STR_CASINO_GATHER_DECK ) )
		{
			Item@ deck = cr.AddItem( PID_CARDS_DECK, 1 );
			ShuffleDeck( cr, deck );
			return false;
		}
		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_CASINO_DECK_ACTION_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
		return null;
    }
}

void StartMenuCard( Critter& cr, Item& target )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuCard( target, map );
    iDialogBox@ menu = OpenMenu( cr, "Cards", handler );
}


void ChangeCardsHandPic( Critter& cr, Item& cardsHand )
{
	if( !valid( cardsHand ) )
	{
		return;
	}
	
	Item@[] cards;
	cardsHand.GetItems( uint( -1 ), cards );
	uint len = cards.length();
	switch( len ) 
	{
		case( 1 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_01.png" );
			break;
		case( 2 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_02.png" );
			break;
		case( 3 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_03.png" );
			break;
		case( 4 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_04.png" );
			break;
		case( 5 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_05.png" );
			break;
		case( 6 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_06.png" );
			break;							
		case( 7 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_07.png" );
			break;
		case( 8 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_08.png" );
			break;
		case( 9 ):
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_09.png" );
			break;
		default:
			cardsHand.PicInv = GetStrHash( "art\\inven\\misc\\cards_in_hand\\cards_in_hand_10.png" );
			break;
	}
	cardsHand.Update();
}

//~run casino _GetCards 0 0 0
void _GetCards( Critter& player, int param0, int param1, int param2 )
{
	for( uint16 cardPid = PID_CARDS_CLUBS_02; cardPid <= PID_CARDS_JOKER_02; cardPid ++ )
	{
		player.AddItem( cardPid, 1 );
	}
}
#endif //CASINO