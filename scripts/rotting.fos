#ifndef ROTTING
#define ROTTING

#include "_utils.fos"
#include "rotting_h.fos"

//~run rotting _ForceMapRott 0 0 0
void _ForceMapRott( Critter& player, int repeat, int, int )
{
	uint count = ( repeat < 0 ? 256 : repeat );
	
	Map@ map = player.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	for( uint i = 0; i <= count; i++ )
	{
		RottenFood( map );
	}
}

//~run _ForceSelfRott 0 0 0
void _ForceSelfRott( Critter& player, int, int, int )
{
	RottenFood( player );
}

//~run rotting _SetRottenCycle value 0 0
void _SetRottenCycle( Critter& player, int value, int, int )
{
	GameVar@ cycle = GetGlobalVar( GVAR_rotten_cycle );
	if( valid( cycle ) ) 
	{
		if( value == 0 )
		{
			if( cycle.GetValue() < 999 )
			{
				cycle.opAddAssign( 1 );
			}
			else
			{
				cycle.opAssign( 0 );
			}
		}
		else
		{
			cycle.opAssign( value );
		}
		
		player.Say( SAY_NETMSG, "Rotten cycle = " + cycle.GetValue() + "." );
	}
}

void RottenFood( Critter& cr )
{
	if( isGM( cr ) && cr.Param[ QST_GAMEMODE ] != GAME_TEST )
	{
		return;
	}
	
	if( cr.IsNpc() )
	{
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	GameVar@ cycle = GetGlobalVar( GVAR_rotten_cycle );
	if( !valid( cycle ) )
	{
		return;
	}
	
	int delta = cycle.GetValue() - cr.ParamBase[ CR_LAST_ROTTEN_CYCLE ];
	if( delta > 50 )
	{
		delta = 50;
	}
	
	cr.ParamBase[ CR_LAST_ROTTEN_CYCLE ] = cycle.GetValue();
	
	Item@[] containers;
	Item@[] stuff;
	Item@[] food;
	
	cr.GetItems( -1, stuff );
	
	for( uint i = 0, len = stuff.length(); i < len; i++ )
	{
		Item@ stuff_itm = stuff[i];
		if( valid( stuff_itm ) )
		{
			uint pid = stuff_itm.GetProtoId();
			if( stuff_itm.GetType() == ITEM_TYPE_FOOD || special_pids.find( pid ) != -1  )
			{
				food.insertLast( stuff_itm );
			}
			
			if( stuff_itm.GetType() == ITEM_TYPE_CONTAINER )
			{
				if( fridge_container_pids.find( pid ) != -1 )
				{
					continue;
				}
				
				bool isShitPit = shit_pit_pids.find( pid ) != -1;
				
				Item@[] substuff;
				stuff_itm.GetItems( uint( -1 ), substuff );
				for( uint j = 0, len2 = substuff.length(); j < len2; j++ )
				{
					Item@ substuff_itm = substuff[j];
					if( valid( substuff_itm ) )
					{
						if( substuff_itm.GetType() == ITEM_TYPE_FOOD || special_pids.find( substuff_itm.GetProtoId() ) != -1 )
						{
							if( isShitPit && ( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG ) )
							{
								continue;
							}
							else
							{
								food.insertLast( substuff_itm );
							}
						}
					}
				}
				
				substuff.resize(0);
			}
		}
	}
	
	stuff.resize( 0 );

	bool badSmell = false;
	Item@ target;
	
	for( int d = 0; d < delta; d++ )
	{
		for( uint i = 0, len = food.length(); i < len; i++ ) 
		{
			if( !valid( food ) )
			{
				continue;
			}
			
			@target = food[i];
			for( uint j = 0, len2 = food_pids_conversion.length(); j < len2; j++ )
			{
				if( Random( 1, 100 ) < int( 2 * target.GetCount() ) && food_pids_conversion[j][0] == target.GetProtoId() )
				{
					int count = target.GetCount();
					int jdelta = 1;
					if( count > 50 )
					{
						jdelta = count / 50;
					}
					
					uint pid = food_pids_conversion[j][1];
					if( pid != 0 )
					{
						if( target.Accessory == ACCESSORY_CONTAINER )
						{
							Item@ container = GetItem( target.ContainerId );
							if( valid( container ) )
							{
								container.AddItem( pid, jdelta, 0 );
								if( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG || pid == PID_SHIT_HUGE )
								{
									map.SetTextMsg( cr.HexX, cr.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BAD_SMELL );
								}
							}
						}
						
						if( target.Accessory == ACCESSORY_CRITTER )
						{
							cr.AddItem( pid, jdelta );
							if( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG || pid == PID_SHIT_HUGE )
							{
								badSmell = true;
							}
						}
					}
				
					if( count - jdelta > 0 )
					{
						target.SetCount( count - jdelta );
					}
					else 
					{
						DeleteItem( target );
						break;
					}
				}
			}
		}
	}
	
	food.resize(0);
	
	cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 3 + ( cr.ParamBase[ST_BLEED] / 2 ) );
	
	if( badSmell )
	{
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_BAD_SMELL );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FOOD_ROTTED );
		cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 5 );
	}
}

void RottenFood( Map& map )
{
	Item@[] containers;
	Item@[] stuff;
	Item@[] food;
	
	for( uint i = 0, len = special_pids.length(); i < len; i++ )
	{
		map.GetItems( special_pids[i], food );
	}
	
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
    if( valid( containers ) )
    {
        for( uint i = 0, len2 = containers.length(); i < len2; i++ )
        {
			Item@ container = containers[i];
			if( valid( container ) )
			{
				uint16 containerPid = container.GetProtoId();
				if( ( fridge_container_pids.find( container.GetProtoId() ) != -1 && !FLAG( container.LockerCondition, LOCKER_ISOPEN ) ) || containerPid == PID_VENDING_FRIDGE1 || containerPid == PID_VENDING_FRIDGE2 )
				{
					continue;
				}
				
				bool isShitPit = shit_pit_pids.find( containerPid ) != -1;

				stuff.resize( 0 );
				container.GetItems( uint( -1 ), stuff );
				
				for( uint j = 0, len3 = stuff.length(); j < len3; j++ )
				{
					Item@ stuff_itm = stuff[j];
					if( valid( stuff_itm ) )
					{
						uint pid = stuff[j].GetProtoId();
						if( stuff_itm.GetType() == ITEM_TYPE_FOOD || special_pids.find( pid ) != -1 )
						{
							if( isShitPit && ( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG || pid == PID_SHIT_HUGE ) )
							{
								continue;
							}
							else
							{
								food.insertLast( stuff_itm );
							}
						}
					}
				}
			}
        }
    }
	
	Item@ target;
    map.GetItemsByType( ITEM_TYPE_FOOD, food );
	
	uint count;
	for( uint i = 0, len = food.length(); i < len; i++ ) 
	{
		if( !valid( food[i]) )
		{
			continue;
		}
		
		@target = food[i];
		for( uint j = 0; j < food_pids_conversion.length(); j++ )
		{
			if( Random( 1, 100 ) < int( 10 * target.GetCount() ) && food_pids_conversion[j][0] == target.GetProtoId() )
			{
				count = target.GetCount();
				uint delta = 1;
				if( count > 10 )
				{
					delta = count / 10;
				}
				
				uint pid = food_pids_conversion[j][1];
				if( pid != 0 )
				{
					if( target.Accessory == ACCESSORY_CONTAINER )
					{
						Item@ container = GetItem( target.ContainerId );
						if( valid( container ) )
						{
							container.AddItem( pid, delta, 0 );
							map.SetTextMsg( container.HexX, container.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BAD_SMELL );
						}
					}
					
					if( target.Accessory == ACCESSORY_HEX )
					{
						map.AddItem( target.HexX, target.HexY, pid, delta );
						map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BAD_SMELL );
					}
				}
			
				if( count - delta > 0 )
				{
					target.SetCount( count - delta );
				}
				else 
				{
					DeleteItem( target );
					break;
				}
			}
		}
	}
	
	food.resize(0);
}

void RottenCrittersFoodOnMap( Map& map )
{
	Critter@[] critters;
	Critter@ crit = null;
	if( map.GetCritters( 0, FIND_ONLY_PLAYERS, critters ) > 0 )
	{
		for( uint j = 0, len = critters.length(); j < len; j++ )
		{
			@ crit = critters[j];
			if( valid( crit ) )
			{
				RottenFood( crit );
			}
		}
	}
	
	critters.resize(0);
}

uint cte_rotten( Critter& cr, int identifier, uint& rate )
{
	if( cr.StatBase[ ST_BODY_TYPE ] == BT_ROBOT || cr.ModeBase[MODE_NO_CORPSE_DECAY] == 1)
	{
		return 0;
	}
	
	rate++;
	
	bool isPlant = cr.StatBase[ST_BODY_TYPE] == BT_PLANT;

	cr.StatBase[ ST_CURRENT_HP ]--;
	
	if( cr.Stat[ ST_CURRENT_HP ] < __DeadHitPoints - ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_MAX_LIFE_EXT ] ) )
	{
		if( !isPlant )
		{
			Map@ map = cr.GetMap();
			if(IsHuman(cr))
			{
				if( valid(map) )
				{
					map.AddItem( cr.HexX, cr.HexY, PID_DECOMPOSING_BODY, 1 );
				}
			}
			else
			{
				Item@ bones;
				
				if( valid(map) )
				{
					@bones = map.AddItem( cr.HexX, cr.HexY, Random( PID_OLD_BLOOD_BONES_1, PID_OLD_BLOOD_BONES_3 ), 1 );
				}
				
				if( valid( bones) )
				{
					uint[] data = { bones.Id };
					CreateTimeEvent( __FullSecond + REAL_SECOND( 60 ), "e_rotten_bones", data, true );
				}
			}
		}
		DeleteNpc( cr );
		return 0;
		
	}

	return REAL_SECOND( ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_MAX_LIFE_EXT ] ) );
}

uint e_rotten_bones( uint[] @ values )
{
	Item@ bones = GetItem( values[0] );
	if( !valid( bones ) )
	{
		return 0;
	}

	
	bones.Val0 += Random( 1, 3 );

	if( bones.Val0 > 10 )
	{
		DeleteItem( bones );
	}

	return REAL_MINUTE( Random( 5, 15 ) );
}

//Time event fixer
void _RottAllBones( Critter& player, int param0, int param1, int param2 )
{
	uint16[] bones_list = { PID_OLD_BLOOD_BONES_1, PID_OLD_BLOOD_BONES_2, PID_OLD_BLOOD_BONES_3 };
	Item@[] bones;
	
	for( int i = 0, len = bones_list.length() ; i < len; i++)
	{
		GetAllItems( bones_list[i], bones );
	}
	
	for( int j = 0, len = bones.length(); j < len; j++ )
	{
		Item@ bone = bones[j];
		if( valid( bone ) )
		{
			if( bone.Val3 == 0 )
			{
				uint[] data = { bone.Id };
				bone.Val3 = CreateTimeEvent( __FullSecond + REAL_SECOND( 60 ), "e_rotten_bones", data, true );
			}
		}
	}

	bones.resize(0);
}

#endif //ROTTING