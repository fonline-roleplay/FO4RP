#ifndef SMOKING
#define SMOKING

#include "_utils.fos"
#include "smoking_h.fos"
#include "consumables_h.fos"
#include "poison_h.fos"
#include "heal_h.fos"

bool CheckSmokers( Critter& cr, Item& item )
{
	uint16 Pid = item.GetProtoId();
	switch( Pid )
	{
		case( PID_CIGARETTES ):
		case( PID_CIGARETTES_PRT ):
			TakeCigarettes( cr, item );
			break;
		case( PID_TOBACCO ):	
		case( PID_FIVELEAF_BAG ):
			ChargePipe( cr, item );
			break;
		default:
			TrySmoking( cr, item );
			break;
	}
	
	return true;
}

void IgniteSmoker( Critter& cr, Critter& targetCr, Item& smoker )
{
	if( !valid( targetCr ) )
	{
		return;
	}
	
	uint8 slot = smoker.CritSlot;
	
	uint16 smoker_pid = smoker.GetProtoId();
	uint16 ignited_pid = 0;
	Item@ ignited = null;
	
	switch( smoker_pid )
	{
		case( PID_JOINT ):
			targetCr.MoveItem( smoker.Id, smoker.GetCount(), SLOT_INV );
			_SubItem( smoker, 1 );
			ignited_pid = PID_JOINT_PRT;
			break;
		case( PID_CIGARETTE ):
			targetCr.MoveItem( smoker.Id, smoker.GetCount(), SLOT_INV );
			_SubItem( smoker, 1 );
			ignited_pid = PID_CIGARETTE_PRT;
			break;
		case( PID_PREWAR_CIGAR1 ):
			targetCr.MoveItem( smoker.Id, smoker.GetCount(), SLOT_INV );
			_SubItem( smoker, 1 );
			ignited_pid = PID_PREWAR_CIGAR1_PRT;
			break;
		case( PID_PREWAR_CIGAR2 ):
			targetCr.MoveItem( smoker.Id, smoker.GetCount(), SLOT_INV );
			_SubItem( smoker, 1 );
			ignited_pid = PID_PREWAR_CIGAR2_PRT;
			break;
		case( PID_SMOKING_PIPE ):
		case( PID_SAVAGE_SMOKING_PIPE ):
		case( PID_PREWAR_SMOKING_PIPE ):
		{
			if( smoker.REMAINING_USES <= 0 )
			{
				targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_EMPTY );
				return;
			}
			
			@ ignited = smoker;
			break;
		}
		default:
			@ ignited = smoker;
			break;
	}
	
	if( ignited_pid != 0 )
	{
		@ ignited = targetCr.AddItem( ignited_pid, 1 );
	}
	
	if( valid( ignited ) && ignited_pid != 0 )
	{
		targetCr.MoveItem( ignited.Id, ignited.GetCount(), slot );
	}
	
	if( ignited.SMOKE_EVENT > 0 )
	{
		EraseTimeEvent( ignited.SMOKE_EVENT );
		ignited.SMOKE_EVENT = 0;
	}
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		string sound = cr.Stat[ ST_GENDER ] == GENDER_FEMALE ? "Fem_ignite.mp3" : "Male_ignite.mp3";
		PlayGenericSound( map, cr.HexX, cr.HexY, sound, 6 );
	}
	
	ignited.SMOKER_STATE = STATE_BURING;
	uint[] values = { ignited.Id };
	ignited.SMOKE_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_SmokerBurn", values, true );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_IGNITE_SMOKER );
}

uint e_SmokerBurn( uint[]@ values )
{
	Item@ smoker = GetItem( values[0] );
	if( valid( smoker ) )
	{
		if( smoker.SMOKER_STATE == STATE_BURING )
		{
			smoker.SMOKER_STATE = STATE_EXTINGUISHED;
			return REAL_MINUTE( 15 );
		}
	}
	
	return 0;
}

void TakeCigarettes( Critter& cr, Item& pack )
{
	uint16 Pid = pack.GetProtoId();
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, "arm_fishing_rod.ogg", 5 );
	}
	
	if( Pid == PID_CIGARETTES )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_OPEN_CIGS );
		_SubItem( pack, 1 );
		cr.AddItem( PID_CIGARETTES_PRT, 1 );
	}
	else if( Pid == PID_CIGARETTES_PRT && pack.REMAINING_USES < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_CIGS_LEFT );
		_SubItem( pack, 1 );
	}
	else
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_TAKES_CIG );
		cr.AddItem( PID_CIGARETTE, 1 );
		pack.REMAINING_USES--;
		pack.Update();
	}
}

void TrySmoking( Critter& cr, Item& smoker )
{
	if( smoker.SMOKE_EVENT == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_FIRE_TO_SMOKE );
		return;
	}
	
	if( hasItems( cr, SmokeStopers, SLOT_HEAD ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_GAS_MASK );
		return;
	}
	
	if( smoker.CritSlot != SLOT_HAND1 && smoker.CritSlot != SLOT_HEAD )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_OBJECT );
		return;
	}
	
	Map @ map = cr.GetMap();
	
	PlayGenericSound( map, cr.HexX, cr.HexY, cr.Stat[ ST_GENDER ] == GENDER_MALE ? "Male_smoking.mp3" : "Fem_smoke.mp3", 6 );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_SMOKE );
	
	uint16 pid = smoker.GetProtoId();
	if( pid == PID_JOINT_PRT )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a joint." );
		SmokeJoint( cr, smoker );
	}
	else if( pid == PID_CIGARETTE_PRT )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a cigarette." );
		SmokeCig( cr, smoker );
	}
	else if( SmokingPipes.find( pid ) != -1 )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a pipe." );
		SmokePipe( cr, smoker );
	}
	else if( pid == PID_PREWAR_CIGAR1_PRT || pid == PID_PREWAR_CIGAR2_PRT )
	{
		SayLog( cr, crInfo( cr ) + " is smoking cigar." );
		SmokeCigar( cr, smoker );
	}
}

void SmokeCig( Critter& cr, Item& cigarette )
{
	cigarette.SMOKER_STATE = STATE_BURING;
	cigarette.REMAINING_USES--;
	string hash = "";
	switch( cigarette.REMAINING_USES )
	{			
		case( 3 ):
			hash = "art\\inven\\misc\\cig\\Zigarette3_inv.png";
			break;							
		case( 2 ):
			hash = "art\\inven\\misc\\cig\\Zigarette2_inv.png";
			break;
		case( 1 ):
			hash = "art\\inven\\misc\\cig\\Zigarette1_inv.png";
			break;
		default:
			break;
	}
	
	cigarette.PicInv = GetStrHash( hash );
	cigarette.Update();
	if( cigarette.Val0 < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT,STR_SMOKER_BURNED );
		_SubItem( cigarette, 1 );
		cr.AddItem ( PID_CIGARETTE_BUTT, 1 );
	}
	
	TobaccoEffect( cr );
}

void SmokeJoint( Critter& cr, Item& joint )
{
	joint.SMOKER_STATE = STATE_BURING;
	joint.REMAINING_USES--;
	string hash = "";
	switch( joint.REMAINING_USES )
	{
		case( 4 ):
			hash = "art\\inven\\misc\\joint\\Joint3_inv.png";
			break;				
		case( 3 ):
			hash = "art\\inven\\misc\\joint\\Joint2_inv.png";
			break;							
		case( 2 ):
			hash = "art\\inven\\misc\\joint\\Joint1_inv.png";
			break;
		case( 1 ):
			hash = "art\\inven\\misc\\joint\\Joint0_inv.png";
			break;
		default:
			break;
	}
	
	joint.PicInv = GetStrHash( hash );
	joint.Update();
	
	if( joint.Val0 < 1 )
	{
		EraseTimeEvent( joint.SMOKE_EVENT );
		joint.SMOKE_EVENT = 0;
		_SubItem( joint, 1 );
	}
	
	WeedEffect( cr );
}

void SmokePipe( Critter& cr, Item& smokingPipe )
{
	if( smokingPipe.REMAINING_USES <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_EMPTY );
		EraseTimeEvent( smokingPipe.SMOKE_EVENT );
		smokingPipe.SMOKE_EVENT = 0;
		return;
	}
	
	smokingPipe.SMOKER_STATE = STATE_BURING;
	
	if( smokingPipe.PIPE_CHARGE == CHARGE_TOBACCO )
	{	
		TobaccoEffect( cr );
	}
	else 
	{
		WeedEffect( cr );
	}
	
	smokingPipe.REMAINING_USES--;
	smokingPipe.Update();
}

void SmokeCigar( Critter& cr, Item& cigar )
{
	cigar.SMOKER_STATE = STATE_BURING;
	uint16 Pid = cigar.GetProtoId();
	if( Pid == PID_PREWAR_CIGAR1 || Pid == PID_PREWAR_CIGAR2 )
	{
		cr.MoveItem( cigar.Id, cigar.GetCount(), SLOT_INV );
		_SubItem( cigar, 1 );
		Item@ okurok = cr.AddItem( ( Pid == PID_PREWAR_CIGAR1 ? PID_PREWAR_CIGAR1_PRT : PID_PREWAR_CIGAR2_PRT ), 1 );
			
		if( valid( okurok ) )
		{
			cr.MoveItem( okurok.Id, okurok.GetCount(), SLOT_HAND1 );
		}
	}
	else
	{
		cigar.REMAINING_USES--;
		string hash = "art\\inven\\misc\\cigar\\cigar_st2_inv.png";
		switch( cigar.REMAINING_USES )
		{
			case( 7 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st3_inv.png";
				break;
			case( 6 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st4_inv.png";
				break;
			case( 5 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st5_inv.png";
				break;
			case( 4 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st6_inv.png";
				break;
			case( 3 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st7_inv.png";
				break;							
			case( 2 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st8_inv.png";
				break;
			case( 1 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st9_inv.png";
				break;
			default:
				break;
		}
		
		cigar.PicInv = GetStrHash( hash );
		cigar.Update();
		
		if( cigar.Val0 < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT,STR_SMOKER_BURNED );
			EraseTimeEvent( cigar.SMOKE_EVENT );
			cigar.SMOKE_EVENT = 0;
			_SubItem( cigar, 1 );
		}
	}
	
	TobaccoEffect( cr );
}

void ChargePipe( Critter& cr, Item& item )
{
	if( hasItems( cr, SmokingPipes, SLOT_HAND1 ) )
	{
		Item@ smokingPipe = _CritGetItemHand( cr );
		if( valid( smokingPipe ) ) 
		{
			item.REMAINING_USES--;
			smokingPipe.REMAINING_USES = 5;
			if( item.GetProtoId() == PID_FIVELEAF_BAG )
			{
				SayLog( cr, crInfo( cr ) + " charged smoking pipe with fiveleaf" );
				smokingPipe.PIPE_CHARGE = CHARGE_WEED;
			}
			else 
			{
				SayLog( cr, crInfo( cr ) + " charged smoking pipe with tobacco" );
				smokingPipe.PIPE_CHARGE = CHARGE_TOBACCO;
			}
			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "ROBE.mp3", 6 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_REFILLED );
			item.Update();
			smokingPipe.Update();
			
			if( item.REMAINING_USES <= 0 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BAG_EMPTY );
				_SubItem( item, 1 );
				cr.AddItem( PID_BAG, 1 );
			}
		}
	}
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_PIPE );
	}
}

void TobaccoEffect( Critter& cr )
{
	consumed( cr, PID_CIGARETTE, cr );
}

void WeedEffect( Critter& cr )
{
	consumed( cr, PID_JOINT, cr );
}

#endif // SMOKING