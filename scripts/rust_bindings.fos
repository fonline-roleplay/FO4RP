#include "_defines.fos"
#ifndef RUST_NULL_API 
# ifdef __SERVER
// =============== SERVER: SCRIPTING API EXTENSION ===============

// read msg files server side, see fomsg.fos
//                                  (lang, msg_file, str_num)
# pragma bindfunc "string@ GetMsgStr(uint, uint, uint) -> rust_dll/server.dll Global_GetMsgStr"

// return lexems assigned by item.SetLexems, see test.fos@test_get_lexems
# pragma bindfunc "string@ Item_GetLexems(Item&) -> rust_dll/server.dll item_get_lexems"

// pack float into uint and unpack back, see examples/float_bits.fos
# pragma bindfunc "uint FloatToBits(float) -> rust_dll/server.dll FloatToBits"
# pragma bindfunc "float FloatFromBits(uint) -> rust_dll/server.dll FloatFromBits"

// pretty formatting of float, with SI postfix and fixed number of digits after dot, see exaples/si.fos
# pragma bindfunc "string@ FloatToSI(float, string&, uint8) -> rust_dll/server.dll DisplaySI"

// ask discord bot to send message        (channel, text)
# pragma bindfunc "void DiscordSendMessage(string&, string&) -> rust_dll/server.dll discord_send_message"

// returns coordinates and ticks since previous hex
# pragma bindfunc "uint PreviousHex(Critter&, uint16&, uint16&) -> rust_dll/server.dll prev_hex"

// =============== SERVER: CHECK LOOK ===============

// sever check look implementation, call directly only for testing
# pragma bindfunc "bool check_look(Map& map, Critter& cr, Critter& opponent) -> rust_dll/server.dll check_look"
// server config reload (only check_look config for now)
# pragma bindfunc "void DllReloadConfig() -> rust_dll/server.dll reload_config"

// =============== SERVER: WEB SERVER GLUE ===============

// web server needs to know when new critters appear (players especially)
//                                               first time?
# pragma bindfunc "void DllCritterInit(Critter&, bool) -> rust_dll/server.dll critter_init"

// web server needs to know when player log in
//                                     ip,   name,    id
# pragma bindfunc "bool DllPlayerLogin(uint, string&, uint) -> rust_dll/server.dll player_login"

// player logged in and his critter in-game already
// usefull for RunClientScript on every login (even when critter was in-game from previous session)
# pragma bindfunc "void DllPlayerAfterLogin(Critter&) -> rust_dll/server.dll player_after_login"

// server dll needs to handle events sent by web server
# pragma bindfunc "void DllLoop() -> rust_dll/server.dll main_loop"

// send auth data to client, used in function called by RunServerScriptUnsafe
# pragma bindfunc "void PlayerAuth(Critter&) -> rust_dll/server.dll player_auth"

# endif

# ifdef __CLIENT
// =============== CLIENT: SCRIPTING API EXTENSION ===============
# pragma bindfunc "uint GetAllItems(ItemCl@[]@+ items) -> rust_dll/client.dll GetAllItems"

// =============== CLIENT: OPEN LINK ===============
# pragma bindfunc "void OpenLink(string&) -> rust_dll/client.dll open_link"
# pragma bindfunc "void OpenLinkAuth(string&, int, int, int) -> rust_dll/client.dll open_link_auth"

// =============== CLIENT: SPRITE MAGIC ===============
# pragma bindfunc "NativeSprite@ AddMapSprite2(uint16, uint16, uint, int, int, int, int, int) -> rust_dll/client.dll add_map_sprite"
# pragma bindfunc "bool ChangeTile(uint, uint16, uint16, int16, int16, uint8, bool) -> rust_dll/client.dll change_tile"
# pragma bindfunc "void RegroupRoofs() -> rust_dll/client.dll regroup_roofs"

// =============== CLIENT: PHYSICAL UI ===============
// void PhysicalUI_UpsertCustom(uint id, uint16 type, uint16 part, int anchor_x, int anchor_y, uint16 width, uint16 height, int& pos_x, int& pos_y)
# pragma bindfunc "void PhysicalUI_UpsertCustom(uint, uint16, uint16, int, int, uint16, uint16, int&, int&) -> rust_dll/client.dll PhysicalUI_UpsertCustom"
// bool PhysicalUI_StartFrame()
# pragma bindfunc "bool PhysicalUI_StartFrame() -> rust_dll/client.dll PhysicalUI_StartFrame"
// void PhysicalUI_EndFrame()
# pragma bindfunc "void PhysicalUI_EndFrame() -> rust_dll/client.dll PhysicalUI_EndFrame"
// void PhysicalUI_Reset()
# pragma bindfunc "void PhysicalUI_Reset() -> rust_dll/client.dll PhysicalUI_Reset"

#endif
#endif // !RUST_NULL_API

void Func(){}
