#ifndef __UUID_H__
#define __UUID_H__

#include "string_h.fos"
#include "serializator.fos"

shared class UniqueIdentifier : IStringifyable , ISerializible
{
	uint epoch;
	uint generation;
	uint id;
	uint timeStamp;

	UniqueIdentifier()
	{
		this.epoch 			 = 0;
		this.generation 	 = 0;
		this.id 			 = 0;
		this.timeStamp		 = 0;
	}

	UniqueIdentifier( const UniqueIdentifier &in other )
	{
		this = other;
	}

	UniqueIdentifier@ opAssign( const UniqueIdentifier &in other )
	{
		this.epoch = other.epoch;
		this.generation = other.generation;
		this.id = other.id;
		this.timeStamp = other.timeStamp;
		return this;
	}

	bool opEquals( const UniqueIdentifier &in other )
	{
		bool result = true;
		result =  result && (this.epoch == other.epoch);
		result =  result && (this.generation == other.generation);
		result =  result && (this.id == other.id);
		result =  result && (this.timeStamp == other.timeStamp);
		return result;
	}

	// override IStringifyable
	string ToString()
	{
		string result = this.epoch + "::" + this.generation + "::" + this.id + "::" + this.timeStamp;
		return result;
	}

	void Serialize( Serializator &in serializer )
	{
		serializer.Set( this.epoch );
		serializer.Set( this.generation );
		serializer.Set( this.id );
		serializer.Set( this.timeStamp );
	}

}

shared interface IUIDGenerator
{
	UniqueIdentifier@ Generate();
}


shared class UniqueIdentifierGenerator : IUIDGenerator
{
	UniqueIdentifier prototype;

	UniqueIdentifierGenerator()
	{
		prototype = UniqueIdentifier();
	}

	UniqueIdentifier@ Generate()
	{
		UniqueIdentifier@ result = UniqueIdentifier( this.prototype );
		this.Forward();
		return result;
	}

	void Forward()
	{
		const uint MAXUINT = 0xFFFFFFFF;
		if( this.prototype.id++ == MAXUINT )
		{
			if( this.prototype.generation++ == MAXUINT )
			{
				this.prototype.epoch++;
			}
		}

		this.prototype.timeStamp = GetTick();
	}
}


#endif // __UUID_H__