#ifndef __DEFINES__
#define __DEFINES__

// fastpanel
#define PATH_TO_FASTPANEL_FOLDER                 "./fastpanel/"

// 3d players mod, uncomment for use
// #define PLAYERS_3D             // Enable 3d players // включает 3д чаров по дефолту, нам не нужно.
#define PLAYERS_3D_NO_HEAD                       // No head slot
// #define PLAYERS_3D_VAULT_SUITE // Vault suite by default, not naked

// Say types
#define SAY_NORM                                 ( 1 )
#define SAY_NORM_ON_HEAD                         ( 2 )
#define SAY_SHOUT                                ( 3 )
#define SAY_SHOUT_ON_HEAD                        ( 4 )
#define SAY_EMOTE                                ( 5 )
#define SAY_EMOTE_ON_HEAD                        ( 6 )
#define SAY_WHISP                                ( 7 )
#define SAY_WHISP_ON_HEAD                        ( 8 )
#define SAY_SOCIAL                               ( 9 )
#define SAY_RADIO                                ( 10 )
#define SAY_NETMSG                               ( 11 )
#define SAY_DIALOG                               ( 12 )
#define SAY_APPEND                               ( 13 )
#define SAY_ENCOUNTER_ANY                        ( 14 )                 // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_RT                         ( 15 )                 // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_TB                         ( 16 )                 // Activate dialog box on global map, using before encounter
#define SAY_FIX_RESULT                           ( 17 )
#define SAY_DIALOGBOX_TEXT                       ( 18 )
#define SAY_DIALOGBOX_BUTTON                     # (b)   ( 19 + ( b ) ) // Max 20 buttons (0..19)
#define SAY_SAY_TITLE                            ( 39 )
#define SAY_SAY_TEXT                             ( 40 )
#define SAY_FLASH_WINDOW                         ( 41 )                 // Only flash window in tray and beep

// Msg nums
#define TEXTMSG_TEXT                             ( 0 )
#define TEXTMSG_DLG                              ( 1 )
#define TEXTMSG_ITEM                             ( 2 )
#define TEXTMSG_GAME                             ( 3 )
#define TEXTMSG_GM                               ( 4 )
#define TEXTMSG_COMBAT                           ( 5 )
#define TEXTMSG_QUEST                            ( 6 )
#define TEXTMSG_HOLO                             ( 7 )
#define TEXTMSG_CRAFT                            ( 8 )
#define TEXTMSG_INTERNAL                         ( 9 )
#define DLGSTR                                   # ( dialogId, strNum )( 1000000000 + ( dialogId ) * 100000 + ( strNum ) )

// Critter conditions
#define COND_LIFE                                ( 1 )
#define COND_KNOCKOUT                            ( 2 )
#define COND_DEAD                                ( 3 )

// Gender
#define GENDER_MALE                              ( 0 )
#define GENDER_FEMALE                            ( 1 )
#define GENDER_IT                                ( 2 )

// Items accessory
#define ACCESSORY_NONE                           ( 0 )
#define ACCESSORY_CRITTER                        ( 1 )
#define ACCESSORY_HEX                            ( 2 )
#define ACCESSORY_CONTAINER                      ( 3 )

// Items types
// Internal types
#define ITEM_TYPE_NONE                           ( 0 )
#define ITEM_TYPE_ARMOR                          ( 1 )
#define ITEM_TYPE_DRUG                           ( 2 )
#define ITEM_TYPE_WEAPON                         ( 3 )
#define ITEM_TYPE_AMMO                           ( 4 )
#define ITEM_TYPE_MISC                           ( 5 )
#define ITEM_TYPE_KEY                            ( 7 )
#define ITEM_TYPE_CONTAINER                      ( 8 )
#define ITEM_TYPE_DOOR                           ( 9 )
#define ITEM_TYPE_GRID                           ( 10 )
#define ITEM_TYPE_GENERIC                        ( 11 )
#define ITEM_TYPE_WALL                           ( 12 )
#define ITEM_TYPE_CAR                            ( 13 )
#define ITEM_TYPE_PLANT                          ( 15 )
#define ITEM_TYPE_FOOD                           ( 16 )

// *****
// Item: Weapon subtypes
// *****
// Zero type
#define ITEM_SUBTYPE_UNDEFINED						 ( 0 )
// Ballistic weaponry 1 <-> 15
#define ITEM_SUBTYPE_WEAPON_NORMAL_BEGIN	         ( 1 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL            ( 1 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER   ( 2 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_SMG               ( 3 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_RIFLE             ( 4 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_ASSAULTRIFLE      ( 5 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_SNIPERRIFLE       ( 6 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN           ( 7 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_AUTOSHOTGUN       ( 8 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_LMG               ( 9 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_MACHINEGUN        ( 10 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_NADELAUNCHER      ( 11 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_FLAMETHROWER      ( 12 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN   	     ( 13 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_HEAVY_RIFLE   	 ( 14 )
#define ITEM_SUBTYPE_WEAPON_NORMAL_END               ( 14 )
// -----
// Energy weaponry 15 <-> 42
// Laser  15 <-> 24
#define ITEM_SUBTYPE_WEAPON_LASER_BEGIN	 	         ( 15 )
#define ITEM_SUBTYPE_WEAPON_LASER_PISTOL         	 ( 15 )
#define ITEM_SUBTYPE_WEAPON_LASER_RIFLE          	 ( 16 )
#define ITEM_SUBTYPE_WEAPON_LASER_SMG            	 ( 17 )
#define ITEM_SUBTYPE_WEAPON_LASER_SNIPERRIFLE    	 ( 18 )
#define ITEM_SUBTYPE_WEAPON_LASER_SHOTGUN        	 ( 19 )
#define ITEM_SUBTYPE_WEAPON_LASER_MINIGUN       	 ( 20 )
#define ITEM_SUBTYPE_WEAPON_LASER_END			     ( 20 )
// Plasma 25 <-> 34
#define ITEM_SUBTYPE_WEAPON_PLASMA_BEGIN		     ( 25 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_PISTOL   	     ( 25 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_RIFLE         	 ( 26 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_SMG           	 ( 27 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_SNIPERRIFLE   	 ( 28 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_SHOTGUN       	 ( 29 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_SMINIGUN       	 ( 30 )
#define ITEM_SUBTYPE_WEAPON_PLASMA_END           	 ( 30 )
// Pulse 35 <-> 40
#define ITEM_SUBTYPE_WEAPON_PULSE_BEGIN		         ( 35 )
#define ITEM_SUBTYPE_WEAPON_PULSE_PISTOL		     ( 35 )
#define ITEM_SUBTYPE_WEAPON_PULSE_RIFLE		         ( 36 )
#define ITEM_SUBTYPE_WEAPON_PULSE_SMG            	 ( 37 )
#define ITEM_SUBTYPE_WEAPON_PULSE_SNIPERRIFLE    	 ( 38 )
#define ITEM_SUBTYPE_WEAPON_PULSE_SHOTGUN        	 ( 39 )
#define ITEM_SUBTYPE_WEAPON_PULSE_MINIGUN        	 ( 40 )
#define ITEM_SUBTYPE_WEAPON_PULSE_END            	 ( 40 )
// Sonic 41 <-> 42
#define ITEM_SUBTYPE_WEAPON_SONIC_BEGIN		         ( 41 )
#define ITEM_SUBTYPE_WEAPON_SONIC_PISTOL         	 ( 41 )
#define ITEM_SUBTYPE_WEAPON_SONIC_RIFLE          	 ( 42 )
#define ITEM_SUBTYPE_WEAPON_SONIC_END           	 ( 42 )

// -----
// Grenades 43 <-> 54
#define ITEM_SUBTYPE_WEAPON_GRENADE_BEGIN		 	 ( 43 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_PRIM		 	 ( 43 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_KIFE		 	 ( 44 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_FRAG 	 		 ( 45 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_CONCUSSION	 	 ( 46 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_FLASH		 	 ( 47 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_SMOKE		 	 ( 48 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_PLASMA		 	 ( 49 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_ELECTRO		 	 ( 50 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_MOLOTOV		 	 ( 51 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_INCENDIARY		 ( 52 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_GAS			 	 ( 53 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_ACID		     ( 54 )
#define ITEM_SUBTYPE_WEAPON_GRENADE_END			 	 ( 54 )
// -----
// Melee 55 <-> 69
#define ITEM_SUBTYPE_WEAPON_MELEE_BEGIN			  	 ( 55 )
#define ITEM_SUBTYPE_WEAPON_MELEE_KNIFE			  	 ( 55 )
#define ITEM_SUBTYPE_WEAPON_MELEE_LONG_KNIFE	   	 ( 56 )
#define ITEM_SUBTYPE_WEAPON_MELEE_SPEAR          	 ( 57 )
#define ITEM_SUBTYPE_WEAPON_MELEE_HAMMER         	 ( 58 )
#define ITEM_SUBTYPE_WEAPON_MELEE_GLOVE          	 ( 59 )
#define ITEM_SUBTYPE_WEAPON_MELEE_CLUB          	 ( 60 )
#define ITEM_SUBTYPE_WEAPON_MELEE_END          	 	 ( 60 )
// *****
// Item: Armor subtypes 70 <-> 99
// Armor default subtypes. Might be folded into separate categories later.
#define ITEM_SUBTYPE_ARMOR_BEGIN				     ( 70 )
#define ITEM_SUBTYPE_ARMOR_NONE					     ( 70 )
#define ITEM_SUBTYPE_ARMOR_HIDDENVEST				 ( 71 )
#define ITEM_SUBTYPE_ARMOR_LIGHT                     ( 72 )
#define ITEM_SUBTYPE_ARMOR_MEDIUM                    ( 73 )
#define ITEM_SUBTYPE_ARMOR_HEAVY                     ( 74 )
#define ITEM_SUBTYPE_ARMOR_POWERED                   ( 75 )
#define ITEM_SUBTYPE_ARMOR_ROBOSUIT                  ( 76 )
#define ITEM_SUBTYPE_ARMOR_END               	     ( 76 )
// *****
// Item: Drug subtypes 100 <-> 149
// *****
// Drugs 100 <-> 109
#define ITEM_SUBTYPE_DRUG_BEGIN						 ( 100 )
#define ITEM_SUBTYPE_DRUG_LIGHT_LONG				 ( 100 )
#define ITEM_SUBTYPE_DRUG_LIGHT_SHORT				 ( 101 )
#define ITEM_SUBTYPE_DRUG_HEAVY_LONG                 ( 102 )
#define ITEM_SUBTYPE_DRUG_HEAVY_SHORT                ( 103 )
#define ITEM_SUBTYPE_DRUG_EXOTIC_SHORT            	 ( 104 )
#define ITEM_SUBTYPE_DRUG_EXOTIC_LONG            	 ( 105 )
#define ITEM_SUBTYPE_DRUG_END                        ( 105 )
// -----
// Stimpacks 110 <-> 119
#define ITEM_SUBTYPE_DRUG_STIMPACK_BEGIN			 ( 110 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_SMALL             ( 110 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_MEDIUM            ( 111 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_LARGE             ( 112 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_EXOTIC   		 ( 113 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_PRIMITIVE   		 ( 114 )
#define ITEM_SUBTYPE_DRUG_STIMPACK_END               ( 114 )
// -----
// Alcohol 120 <-> 129
#define ITEM_SUBTYPE_DRUG_ALCOHOL					 ( 120 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_LIGHT				 ( 120 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_MEDIUM			 ( 121 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_HEAVY				 ( 122 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_LOW_QUALITY		 ( 123 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_BAD_BREW			 ( 124 )
#define ITEM_SUBTYPE_DRUG_ALCOHOL_END				 ( 124 )
// -----
// Drinks 130 <-> 139
#define ITEM_SUBTYPE_DRUG_DRINK_BEGIN				 ( 130 )			
#define ITEM_SUBTYPE_DRUG_DRINK_WATER				 ( 130 )
#define ITEM_SUBTYPE_DRUG_DRINK_WATER_BOILED		 ( 131 )
#define ITEM_SUBTYPE_DRUG_DRINK_WATER_INFECTED       ( 132 )
#define ITEM_SUBTYPE_DRUG_DRINK_WATER_PURE           ( 133 )
#define ITEM_SUBTYPE_DRUG_DRINK_COLD                 ( 134 )
#define ITEM_SUBTYPE_DRUG_DRINK_HOT            		 ( 135 )
#define ITEM_SUBTYPE_DRUG_DRINK_SWEET_LEMONADE       ( 136 )
#define ITEM_SUBTYPE_DRUG_DRINK_END                  ( 136 )
// -----
// Food 140 <-> 149
#define ITEM_SUBTYPE_DRUG_FOOD_BEGIN				 ( 140 )
#define ITEM_SUBTYPE_DRUG_FOOD_MEAT					 ( 140 )
#define ITEM_SUBTYPE_DRUG_FOOD_MEAT_RAW		         ( 141 )
#define ITEM_SUBTYPE_DRUG_FOOD_MEAT_COOKED           ( 142 )
#define ITEM_SUBTYPE_DRUG_FOOD_MEAT_SPOILED          ( 143 )
#define ITEM_SUBTYPE_DRUG_FOOD_EATABLE				 ( 144 )
#define ITEM_SUBTYPE_DRUG_FOOD_INGRIDIENT            ( 145 )
#define ITEM_SUBTYPE_DRUG_FOOD_END          	     ( 145 )
// ----
// Medical supplies 150 <-> 170
#define ITEM_SUBTYPE_DRUG_MEDS_BEGIN				 ( 180 )
#define ITEM_SUBTYPE_DRUG_MEDS_END				 	 ( 181 )

// User types
#define ITEM_TYPE_MAGIC                          ( 20 )

// Item flags
#define ITEM_HIDDEN                              ( 0x00000001 )
#define ITEM_FLAT                                ( 0x00000002 )
#define ITEM_NO_BLOCK                            ( 0x00000004 )
#define ITEM_SHOOT_THRU                          ( 0x00000008 )
#define ITEM_LIGHT_THRU                          ( 0x00000010 )
#define ITEM_MULTI_HEX                           ( 0x00000020 ) // Not used
#define ITEM_WALL_TRANS_END                      ( 0x00000040 ) // Not used
#define ITEM_TWO_HANDS                           ( 0x00000080 )
#define ITEM_BIG_GUN                             ( 0x00000100 )
#define ITEM_ALWAYS_VIEW                         ( 0x00000200 )
#define ITEM_HAS_TIMER                           ( 0x00000400 )
#define ITEM_BAD_ITEM                            ( 0x00000800 )
#define ITEM_NO_HIGHLIGHT                        ( 0x00001000 )
#define ITEM_SHOW_ANIM                           ( 0x00002000 )
#define ITEM_SHOW_ANIM_EXT                       ( 0x00004000 )
#define ITEM_LIGHT                               ( 0x00008000 )
#define ITEM_GECK                                ( 0x00010000 )
#define ITEM_TRAP                                ( 0x00020000 )
#define ITEM_NO_LIGHT_INFLUENCE                  ( 0x00040000 )
#define ITEM_NO_LOOT                             ( 0x00080000 )
#define ITEM_NO_STEAL                            ( 0x00100000 )
#define ITEM_GAG                                 ( 0x00200000 )
#define ITEM_COLORIZE                            ( 0x00400000 )
#define ITEM_COLORIZE_INV                        ( 0x00800000 )
#define ITEM_CAN_USE_ON_SMTH                     ( 0x01000000 )
#define ITEM_CAN_LOOK                            ( 0x02000000 )
#define ITEM_CAN_TALK                            ( 0x04000000 )
#define ITEM_CAN_PICKUP                          ( 0x08000000 )
#define ITEM_CAN_USE                             ( 0x10000000 )
#define ITEM_HOLODISK                            ( 0x20000000 )
#define ITEM_RADIO                               ( 0x40000000 )
#define ITEM_CACHED                              ( 0x80000000 ) // Not used

// food flags
#define FOOD_KNOCKOUT                            ( 0x00000001 )
#define FOOD_RADIOACTIVE                         ( 0x00000002 )
#define FOOD_POISONED                            ( 0x00000004 )

// Damage types
#define DAMAGE_UNCALLED                          ( 0 )
#define DAMAGE_NORMAL                            ( 1 )
#define DAMAGE_LASER                             ( 2 )
#define DAMAGE_FIRE                              ( 3 )
#define DAMAGE_PLASMA                            ( 4 )
#define DAMAGE_ELECTR                            ( 5 )
#define DAMAGE_EMP                               ( 6 )
#define DAMAGE_EXPLODE                           ( 7 )

// Critter events, description see in templates.fos
#define CRITTER_EVENT_IDLE                       ( 0 )
#define CRITTER_EVENT_FINISH                     ( 1 )
#define CRITTER_EVENT_DEAD                       ( 2 )
#define CRITTER_EVENT_RESPAWN                    ( 3 )
#define CRITTER_EVENT_SHOW_CRITTER               ( 4 )
#define CRITTER_EVENT_SHOW_CRITTER_1             ( 5 )
#define CRITTER_EVENT_SHOW_CRITTER_2             ( 6 )
#define CRITTER_EVENT_SHOW_CRITTER_3             ( 7 )
#define CRITTER_EVENT_HIDE_CRITTER               ( 8 )
#define CRITTER_EVENT_HIDE_CRITTER_1             ( 9 )
#define CRITTER_EVENT_HIDE_CRITTER_2             ( 10 )
#define CRITTER_EVENT_HIDE_CRITTER_3             ( 11 )
#define CRITTER_EVENT_SHOW_ITEM_ON_MAP           ( 12 )
#define CRITTER_EVENT_CHANGE_ITEM_ON_MAP         ( 13 )
#define CRITTER_EVENT_HIDE_ITEM_ON_MAP           ( 14 )
#define CRITTER_EVENT_ATTACK                     ( 15 )
#define CRITTER_EVENT_ATTACKED                   ( 16 )
#define CRITTER_EVENT_STEALING                   ( 17 )
#define CRITTER_EVENT_MESSAGE                    ( 18 )
#define CRITTER_EVENT_USE_ITEM                   ( 19 )
#define CRITTER_EVENT_USE_ITEM_ON_ME             ( 20 )
#define CRITTER_EVENT_USE_SKILL                  ( 21 )
#define CRITTER_EVENT_USE_SKILL_ON_ME            ( 22 )
#define CRITTER_EVENT_DROP_ITEM                  ( 23 )
#define CRITTER_EVENT_MOVE_ITEM                  ( 24 )
#define CRITTER_EVENT_KNOCKOUT                   ( 25 )
#define CRITTER_EVENT_SMTH_DEAD                  ( 26 )
#define CRITTER_EVENT_SMTH_STEALING              ( 27 )
#define CRITTER_EVENT_SMTH_ATTACK                ( 28 )
#define CRITTER_EVENT_SMTH_ATTACKED              ( 29 )
#define CRITTER_EVENT_SMTH_USE_ITEM              ( 30 )
#define CRITTER_EVENT_SMTH_USE_SKILL             ( 31 )
#define CRITTER_EVENT_SMTH_DROP_ITEM             ( 32 )
#define CRITTER_EVENT_SMTH_MOVE_ITEM             ( 33 )
#define CRITTER_EVENT_SMTH_KNOCKOUT              ( 34 )
#define CRITTER_EVENT_PLANE_BEGIN                ( 35 )
#define CRITTER_EVENT_PLANE_END                  ( 36 )
#define CRITTER_EVENT_PLANE_RUN                  ( 37 )
#define CRITTER_EVENT_BARTER                     ( 38 )
#define CRITTER_EVENT_TALK                       ( 39 )
#define CRITTER_EVENT_GLOBAL_PROCESS             ( 40 )
#define CRITTER_EVENT_GLOBAL_INVITE              ( 41 )
#define CRITTER_EVENT_TURN_BASED_PROCESS         ( 42 )
#define CRITTER_EVENT_SMTH_TURN_BASED_PROCESS    ( 43 )
#define CRITTER_EVENT_MAX                        ( 44 )

// Return values for CRITTER_EVENT_PLANE_ BEGIN/END/RUN events
#define PLANE_RUN_GLOBAL                         ( 0 )
#define PLANE_KEEP                               ( 1 )
#define PLANE_DISCARD                            ( 2 )

// Map events, description see in templates.fos
#define MAP_EVENT_FINISH                         ( 0 )
#define MAP_EVENT_LOOP_0                         ( 1 )
#define MAP_EVENT_LOOP_1                         ( 2 )
#define MAP_EVENT_LOOP_2                         ( 3 )
#define MAP_EVENT_LOOP_3                         ( 4 )
#define MAP_EVENT_LOOP_4                         ( 5 )
#define MAP_EVENT_IN_CRITTER                     ( 6 )
#define MAP_EVENT_OUT_CRITTER                    ( 7 )
#define MAP_EVENT_CRITTER_DEAD                   ( 8 )
#define MAP_EVENT_TURN_BASED_BEGIN               ( 9 )
#define MAP_EVENT_TURN_BASED_END                 ( 10 )
#define MAP_EVENT_TURN_BASED_PROCESS             ( 11 )
#define MAP_EVENT_MAX                            ( 12 )

// Item events, description see in templates.fos
#define ITEM_EVENT_FINISH                        ( 0 )
#define ITEM_EVENT_ATTACK                        ( 1 )
#define ITEM_EVENT_USE                           ( 2 )
#define ITEM_EVENT_USE_ON_ME                     ( 3 )
#define ITEM_EVENT_SKILL                         ( 4 )
#define ITEM_EVENT_DROP                          ( 5 )
#define ITEM_EVENT_MOVE                          ( 6 )
#define ITEM_EVENT_WALK                          ( 7 )
#define ITEM_EVENT_MAX                           ( 8 )

// Item perks
#define WEAPON_PERK_LONG_RANGE                   ( 1 )
#define WEAPON_PERK_ACCURATE                     ( 2 )
#define WEAPON_PERK_PENETRATE                    ( 3 )
#define WEAPON_PERK_KNOCKBACK                    ( 4 )
#define WEAPON_PERK_SCOPE_RANGE                  ( 5 )
#define WEAPON_PERK_FAST_RELOAD                  ( 6 )
#define WEAPON_PERK_NIGHT_SIGHT                  ( 7 )
#define WEAPON_PERK_FLAMEBOY                     ( 8 )
#define WEAPON_PERK_ENHANCED_KNOCKOUT            ( 9 )
#define ARMOR_PERK_POWERED                       ( 1 )    // +3 strength, +30 radiation resist
#define ARMOR_PERK_COMBAT                        ( 2 )    // +20 radiation resist
#define ARMOR_PERK_ADVANCED_I                    ( 3 )    // +4 strength, +60 radiation resist
#define ARMOR_PERK_ADVANCED_II                   ( 4 )    // +4 strength, +75 radiation resist
#define ARMOR_PERK_CHARISMA                      ( 5 )    // 1+ charisma
#define ARMOR_PERK_ECZO							 ( 6 )	  // +2 strength, +50 radiation resist
#define ARMOR_PERK_ECZO_2						 ( 7 )	  // +3 strength, +10 radiation resist
#define ARMOR_PERK_UGLY						 	 ( 8 )	  // -1 charisma
#define SLOT_PERK_MIRROR_SHADES                  ( 0x01 ) // +1 charisma
#define SLOT_PERK_COSMETIC_CASE                  ( 0x02 ) // +1 charisma to female
#define SLOT_PERK_MOTION_SENSOR                  ( 0x04 ) // +20 outdoorsman
#define SLOT_PERK_STEALTH_BOY                    ( 0x08 ) // +20 sneak

// In SendMessage
#define MESSAGE_TO_WHO_SEES_ME                   ( 0 )    // Отослать сообщения всем кто видет криттера.
#define MESSAGE_TO_I_SEE                         ( 1 )    // Отослать сообщения всем кого видит криттер.
#define MESSAGE_TO_ALL_ON_MAP                    ( 2 )    // Отослать всем на карте.

// Critter actions
// Flags for chosen:
// l - hardcoded local call
// s - hardcoded server call
// for all others critters actions call only server
//                                          flags    actionExt                                                      item
#define ACTION_MOVE                              ( 0 )  // l
#define ACTION_RUN                               ( 1 )  // l
#define ACTION_MOVE_ITEM                         ( 2 )  // l s      from slot                                                      +
#define ACTION_MOVE_ITEM_SWAP                    ( 3 )  // l s      from slot                                                      +
#define ACTION_USE_ITEM                          ( 4 )  // l s                                                                     +
#define ACTION_DROP_ITEM                         ( 5 )  // l s      from slot                                                      +
#define ACTION_USE_WEAPON                        ( 6 )  // l        fail attack 8 bit, use index (0-2) 4-7 bits, aim 0-3 bits      +
#define ACTION_RELOAD_WEAPON                     ( 7 )  // l s                                                                     +
#define ACTION_USE_SKILL                         ( 8 )  // l s      skill index (see SK_*)
#define ACTION_PICK_ITEM                         ( 9 )  // l s                                                                     +
#define ACTION_PICK_CRITTER                      ( 10 ) // l        0 - loot, 1 - steal, 2 - push
#define ACTION_OPERATE_CONTAINER                 ( 11 ) // l s      transfer type * 10 + [0 - get, 1 - get all, 2 - put]           + (exclude get all)
#define ACTION_BARTER                            ( 12 ) //   s      0 - item taken, 1 - item given                                 +
#define ACTION_DODGE                             ( 13 ) //          0 - front, 1 - back
#define ACTION_DAMAGE                            ( 14 ) //          0 - front, 1 - back
#define ACTION_DAMAGE_FORCE                      ( 15 ) //          0 - front, 1 - back
#define ACTION_KNOCKOUT                          ( 16 ) //   s      0 - knockout anim2begin
#define ACTION_STANDUP                           ( 17 ) //   s      0 - knockout anim2end
#define ACTION_FIDGET                            ( 18 ) // l
#define ACTION_DEAD                              ( 19 ) //   s      dead type anim2 (see Anim2 in _animation.fos)
#define ACTION_CONNECT                           ( 20 ) //
#define ACTION_DISCONNECT                        ( 21 ) //
#define ACTION_RESPAWN                           ( 22 ) //   s
#define ACTION_REFRESH                           ( 23 ) //   s
#define ACTION_TEST								 ( 24 )  //
#define ACTION_WINDUP							 ( 25 )

#define ACTION_FLAG_CHOSEN_INCLUSIVE			 ( 0x01 ) // to decode on client side 

// @pm menu
#define ACTION_DIR                               ( 24 )
#define ACTION_TALK                              ( 25 )
#define ACTION_FAST                              ( 26 )

// addition actions for context menu
#define CONT_ACTION_PICK_ITEM                    ( 30 )
#define CONT_ACTION_PICK_CRIT                    ( 31 )
#define CONT_ACTION_DIR                          ( 32 )
// #pm menu

// Slots
#define SLOT_INV                                 ( 0 )   // Inventory
#define SLOT_HAND1                               ( 1 )   // Weapon slot
#define SLOT_HAND2                               ( 2 )   // Extended slot
#define SLOT_ARMOR                               ( 3 )   // Armor slot
#define SLOT_GROUND                              ( 255 ) // Ground slot, used when critter drop/pick item

// Critter timeevents identifiers
#define CTE_POISON                               ( 1 )
#define CTE_RADIATION                            ( 2 )
#define CTE_TRADER                               ( 3 )
#define CTE_OBSERVING                            ( 4 )
#define CTE_AUTOKILL                             ( 5 )
#define CTE_MUTATION                             ( 7 )
#define CTE_HAIR_GROW                            ( 8 )
#define CTE_WARNING                              ( 9 )
#define CTE_SLOWRELOAD                           ( 10 )
#define CTE_CHOOSESKIN                           ( 11 )
#define CTE_DELETECORPSE                         ( 12 )
#define CTE_ARCADEDANGER                         ( 13 )
#define CTE_ROTTEN	                             ( 14 )
#define CTE_SKINNING	                         ( 15 )
#define CTE_TESTING1	                         ( 16 )
#define CTE_TESTING2	                         ( 17 )
#define CTE_SLEEPING	                         ( 18 )

#define CTE_AP_REGEN							 ( 20 )

#define CTE_EXPBAR                               ( 30 ) // expbar
#define CTE_EVILMINDS                            ( 38 )

#define CTE_TEST                                 ( 39 )
#define CTE_STUDY                                ( 40 )
#define CTE_HEAL                                 ( 41 )
#define CTE_DOC                                  ( 42 )
#define CTE_WORK                                 ( 43 )
#define CTE_BLEED                                ( 44 )
#define CTE_THROW                                ( 45 )
#define CTE_BLOOD_TOXIC                          ( 46 )
#define CTE_MOTEL_ROOM                           ( 47 )
#define CTE_HUNGER                               ( 48 ) // Отдельный ивент для роста голода.
#define CTE_DYSPNEA                              ( 49 )
#define CTE_EXP		                             ( 50 )
#define CTE_ORG_DMG		                         ( 51 )
#define CTE_LIMB_MANAGEMENT                      ( 52 ) // Обработка конечностей by Kriegwolf
#define CTE_QUICKHEAL                            ( 53 ) // Быстрое лечение by Kriegwolf
#define CTE_STIMOVERDOSE                         ( 54 ) // Передозировка, стимы by Kriegwolf
#define CTE_SSTIMOVERDOSE                        ( 55 ) // Передозировка, суперстимы by Kriegwolf
#define CTE_PSI_HEAL	                         ( 56 ) // Реген псионика by Sarkof
#define CTE_PSI_VISION	                         ( 57 ) // Видимость сквозь стены by Sarkof
#define CTE_PSI_DEGRAD	                         ( 58 ) // Уже не тот // Скатывание псионика by Sarkof
#define CTE_PSI_SHIELD	                         ( 59 ) // Пси-щит by Kriegwolf
#define CTE_BODYSWAP							 ( 60 ) // Майндконтроль by Kriegwolf
#define CTE_BRAHMIN_PREGNANCY					 ( 61 ) // Беременность браминов by Kriegwolf
#define CTE_BRAHMIN_SEARCH						 ( 62 ) // Поиск партнера браминами by Kriegwolf
#define CTE_BRAHMIN_GROWTH						 ( 63 ) // Рост браминов by Kriegwolf
#define CTE_BRAHMIN_FOLLOW						 ( 64 ) // Следование за хозяином браминов by Kriegwolf

#define CTE_AGGRESSION						     ( 65 ) // Автоэмоуты агрессии
#define CTE_TYPING							     ( 66 ) // Оповещение о том, что игрок что-то пишет в чат ("...", как в дискорде)
#define CTE_PRAY							     ( 67 ) // Мольба ГМам/скриптам.
#define CTE_DIRT							     ( 68 ) // "Пот" - естественное накопление грязи.

#define CTE_THIRST                               ( 69 ) // Отдельный ивент для роста жажды.
// Drugs time events                40 (PID_STIMPAK) .. 1000

// Parameters
// / Stats
#define DYS										 ( 191 ) // Тик удушения
#define CHANCE								     ( 192 ) // Шанс выпадания при добыче руды//Длительность отхила сски
#define P_PSI								     ( 193 ) // Запас силы у пси-способностей ( 0 - способности отсутствуют )
#define P_PSI_MAX								 ( 194 ) // Максимальный запас
#define P_PSI_LIMIT								 ( 195 ) // Порог, после которого начинается процесс деградации псионика
#define ROLL									 ( 196 ) // Порог, после которого начинается процесс деградации псионика
#define STAT_BEGIN                               ( 0 )
#define STAT_END                                 ( 199 )
#define STAT_COUNT                               ( STAT_END - STAT_BEGIN + 1 )
#define STAT_EXT_BEGIN                           ( 32 )
#define STAT_EXT_END                             ( 63 )
#define ST_STRENGTH                              ( 0 )  // Hardcoded
#define ST_PERCEPTION                            ( 1 )  // Hardcoded
#define ST_ENDURANCE                             ( 2 )  // Hardcoded
#define ST_CHARISMA                              ( 3 )  // Hardcoded
#define ST_INTELLECT                             ( 4 )  // Hardcoded
#define ST_AGILITY                               ( 5 )  // Hardcoded
#define ST_LUCK                                  ( 6 )  // Hardcoded
#define ST_MAX_LIFE                              ( 7 )  // Hardcoded
#define ST_ACTION_POINTS                         ( 8 )  // Hardcoded
#define ST_ARMOR_CLASS                           ( 9 )  // Hardcoded
#define ST_MELEE_DAMAGE                          ( 10 ) // Hardcoded
#define ST_CARRY_WEIGHT                          ( 11 ) // Hardcoded
#define ST_SEQUENCE                              ( 12 ) // Hardcoded
#define ST_HEALING_RATE                          ( 13 ) // Hardcoded
#define ST_CRITICAL_CHANCE                       ( 14 ) // Hardcoded
#define ST_MAX_CRITICAL                          ( 15 )
#define ST_NORMAL_ABSORB                         ( 16 )
#define ST_LASER_ABSORB                          ( 17 )
#define ST_FIRE_ABSORB                           ( 18 )
#define ST_PLASMA_ABSORB                         ( 19 )
#define ST_ELECTRO_ABSORB                        ( 20 )
#define ST_EMP_ABSORB                            ( 21 )
#define ST_EXPLODE_ABSORB                        ( 22 )
#define ST_NORMAL_RESIST                         ( 23 ) // Hardcoded
#define ST_LASER_RESIST                          ( 24 )
#define ST_FIRE_RESIST                           ( 25 )
#define ST_PLASMA_RESIST                         ( 26 )
#define ST_ELECTRO_RESIST                        ( 27 )
#define ST_EMP_RESIST                            ( 28 )
#define ST_EXPLODE_RESIST                        ( 29 )
#define ST_RADIATION_RESISTANCE                  ( 30 ) // Hardcoded
#define ST_POISON_RESISTANCE                     ( 31 ) // Hardcoded
#define ST_STRENGTH_EXT                          ( 32 )
#define ST_PERCEPTION_EXT                        ( 33 )
#define ST_ENDURANCE_EXT                         ( 34 )
#define ST_CHARISMA_EXT                          ( 35 )
#define ST_INTELLECT_EXT                         ( 36 )
#define ST_AGILITY_EXT                           ( 37 )
#define ST_LUCK_EXT                              ( 38 )
#define ST_MAX_LIFE_EXT                          ( 39 )
#define ST_ACTION_POINTS_EXT                     ( 40 )
#define ST_ARMOR_CLASS_EXT                       ( 41 )
#define ST_MELEE_DAMAGE_EXT                      ( 42 )
#define ST_CARRY_WEIGHT_EXT                      ( 43 )
#define ST_SEQUENCE_EXT                          ( 44 )
#define ST_HEALING_RATE_EXT                      ( 45 )
#define ST_CRITICAL_CHANCE_EXT                   ( 46 )
#define ST_MAX_CRITICAL_EXT                      ( 47 )
#define ST_NORMAL_ABSORB_EXT                     ( 48 )
#define ST_LASER_ABSORB_EXT                      ( 49 )
#define ST_FIRE_ABSORB_EXT                       ( 50 )
#define ST_PLASMA_ABSORB_EXT                     ( 51 )
#define ST_ELECTRO_ABSORB_EXT                    ( 52 )
#define ST_EMP_ABSORB_EXT                        ( 53 )
#define ST_EXPLODE_ABSORB_EXT                    ( 54 )
#define ST_NORMAL_RESIST_EXT                     ( 55 )
#define ST_LASER_RESIST_EXT                      ( 56 )
#define ST_FIRE_RESIST_EXT                       ( 57 )
#define ST_PLASMA_RESIST_EXT                     ( 58 )
#define ST_ELECTRO_RESIST_EXT                    ( 59 )
#define ST_EMP_RESIST_EXT                        ( 60 )
#define ST_EXPLODE_RESIST_EXT                    ( 61 )
#define ST_RADIATION_RESISTANCE_EXT              ( 62 )
#define ST_POISON_RESISTANCE_EXT                 ( 63 )
#define ST_TOXIC                                 ( 64 )
#define ST_RADIOACTIVE                           ( 65 )
#define ST_KILL_EXPERIENCE                       ( 66 )
#define ST_BODY_TYPE                             ( 67 )
#define ST_LOCOMOTION_TYPE                       ( 68 ) // See Locomotion types
#define ST_DAMAGE_TYPE                           ( 69 )
#define ST_AGE                                   ( 70 ) // Hardcoded
#define ST_GENDER                                ( 71 ) // Hardcoded
#define ST_CURRENT_HP                            ( 72 ) // Hardcoded
#define ST_POISONING_LEVEL                       ( 73 ) // Hardcoded
#define ST_RADIATION_LEVEL                       ( 74 ) // Hardcoded
#define ST_CURRENT_AP                            ( 75 ) // Hardcoded
#define ST_EXPERIENCE                            ( 76 ) // Hardcoded
#define ST_LEVEL                                 ( 77 ) // Hardcoded
#define ST_UNSPENT_SKILL_POINTS                  ( 78 ) // Hardcoded
#define ST_UNSPENT_PERKS                         ( 79 ) // Hardcoded
#define ST_KARMA                                 ( 80 ) // Hardcoded
#define ST_FOLLOW_CRIT                           ( 81 ) // Hardcoded
#define ST_REPLICATION_MONEY                     ( 82 ) // Hardcoded
#define ST_REPLICATION_COUNT                     ( 83 ) // Hardcoded
#define ST_REPLICATION_TIME                      ( 84 ) // Hardcoded
#define ST_REPLICATION_COST                      ( 85 ) // Hardcoded
#define ST_TURN_BASED_AC                         ( 86 ) // Hardcoded
#define ST_MAX_MOVE_AP                           ( 87 ) // Hardcoded
#define ST_MOVE_AP                               ( 88 ) // Hardcoded
#define ST_NPC_ROLE                              ( 89 ) // Hardcoded
// ToDo: прочесать сприпты и отметить тут где юзаются ST_VARы для игроков. Для нпс только в системных скриптах вроде AI, боевки и т.п.
#define ST_VAR0                                  ( 90 ) // players: skins	npc: poker, repl_bank
#define ST_VAR1                                  ( 91 )
#define ST_VAR2                                  ( 92 )
#define ST_VAR3                                  ( 93 ) // player: active poll id
#define ST_VAR4                                  ( 94 )
#define ST_VAR5                                  ( 95 ) // players: antiflood protect
#define ST_VAR6                                  ( 96 )
#define ST_VAR7                                  ( 97 )
#define ST_VAR8                                  ( 98 )
#define ST_VAR9                                  ( 99 )  // npc: poker, repl_bank;
#define ST_PLAYER_KARMA                          ( 100 )
#define ST_BONUS_LOOK                            ( 101 ) // Hardcoded
#define ST_HANDS_ITEM_AND_MODE                   ( 102 ) // Hardcoded
#define ST_FREE_BARTER_PLAYER                    ( 103 ) // Hardcoded
#define ST_DIALOG_ID                             ( 104 ) // Hardcoded
#define ST_AI_ID                                 ( 105 ) // Hardcoded
#define ST_TEAM_ID                               ( 106 ) // Hardcoded
#define ST_BAG_ID                                ( 107 ) // Hardcoded
#define ST_LAST_STEAL_CR_ID                      ( 108 )
#define ST_STEAL_COUNT                           ( 109 )
#define ST_LAST_WEAPON_ID                        ( 110 ) // Hardcoded
#define ST_LAST_WEAPON_USE                       ( 111 )
#define ST_BASE_CRTYPE                           ( 112 ) // Hardcoded
#define ST_DEAD_BLOCKER_ID                       ( 113 )
#define ST_CURRENT_ARMOR_PERK                    ( 114 )
#define ST_TALK_DISTANCE                         ( 115 ) // Hardcoded, if zero than taked __TalkDistance
#define ST_SCALE_FACTOR                          ( 116 ) // Hardcoded
#define ST_WALK_TIME                             ( 117 ) // Hardcoded
#define ST_RUN_TIME                              ( 118 ) // Hardcoded
#define ST_MAX_TALKERS                           ( 119 ) // Hardcoded
// 120..129 reserved for hardcoded values


// q3: перенести все с 120 по 149 на 700+
#define ST_SPEED_MOD                             ( 120 ) // Скорость чара
#define ST_ARCADE_DEAD                           ( 121 )

#define ST_LOCALMAP_DIR                          ( 122 )
#define ST_LOCALMAP_PID                          ( 123 )

#define ST_EXPERIENCE_MULTIPLIER                 ( 124 ) // expbar
#define ST_EXPERIENCE_MULTIPLIER_TIME            ( 125 ) // expbar

#define ST_DYSPNEA                               ( 126 ) // кислород
#define ST_THRIST                                ( 127 ) // жажда
#define ST_HUNGER                                ( 128 ) // голод

#define ST_WAYPOINT_GROUP                        ( 129 )

#define ST_LAST_CONT_ID                          ( 130 )
#define ST_LAST_DOOR_ID                          ( 131 )

// @pm menu
#define ST_LAST_CRIT_ID                          ( 132 )
#define ST_OBJECT_TYPE                           ( 133 )
#define ST_ITEM_HEXX                             ( 134 )
#define ST_ITEM_HEXY                             ( 135 )
#define ST_ITEM_PID                              ( 136 )
#define ST_ACCESS_LEVEL                          ( 137 )
// #pm menu

#define ST_STUDY_EXP                             ( 138 )
#define ST_STUDY_EXP_MAX                         ( 139 )

#define ST_LTP_TYPE_DIR_HEX                      ( 140 )
#define ST_LTP_MAP                               ( 141 )
#define ST_LTP_TIME                              ( 142 )
#define ST_LTP_PARAM0                            ( 143 )
#define ST_LTP_PARAM1                            ( 144 )
#define ST_LTP_PARAM2                            ( 145 )

#define ST_CRSTATUS                              ( 146 )
#define ST_BLOOD_TOXIC                           ( 147 )
#define ST_OVERDOSE                              ( 148 )
#define ST_BLEED                                 ( 149 )
#define ST_ORG_DMG	                             ( 150 )

// Initial values of animation 3d layers
#define ST_ANIM3D_LAYERS                         ( 150 ) // Hardcoded
// 150..179 reserved for 30 layers

// q3: перенести все с 180 по 189 на 700+
#define ST_PARALYSIS_LEVEL                       ( 180 ) // Уровень паралича. TabaK
#define ST_WARNINGS                              ( 181 ) // Количество предупреждений. TabaK
#define HANDCUFFS                                ( 182 ) // Параметры наручников. TabaK
#define ST_MUTATION                              ( 183 ) // Уровень мутации. TabaK.
#define ST_ARCADE_DANGER                         ( 184 ) // Уровень невкусности.
#define LAST_ATTACKED                            ( 185 ) // Id последнего атакованного игрока.
#define ST_BLOCK                                 ( 186 ) // находится ли игрок в режиме блока
#define ST_DESEASE                               ( 187 ) // уровень болезни (также для контроля атаковался ли моб аркадой и освежован ли уже)
#define ST_KILLER_PERSON                         ( 188 ) // ID убийцы персонажа
#define ST_QMAP                                  ( 189 ) // q3: с какой картой синхронизирован
#define ST_STAMINA                               ( 190 ) // q3: с какой картой синхронизирован
#define ST_FACTION                               ( 191 ) // хэш имени фракции ( оно же id фракции )
// 192..199 

// Additional critter stats
#define ST_APREGEN							     ( 192 )
#define ST_FR_LEADERSHIP                         ( 193 ) // звание в фракции

//Randaru stack counters

#define ST_MANA									 ( 194 ) //Позволяет творить заклинания


// / Skills
#define SKILL_BEGIN                              ( __SkillBegin )
#define SKILL_END                                ( __SkillEnd )
#define SKILL_COUNT                              ( SKILL_END - SKILL_BEGIN + 1 )
#define MAX_SKILL_VAL                            ( __SkillMaxValue )
#define SK_SMALL_GUNS                            ( 200 )
#define SK_BIG_GUNS                              ( 201 )
#define SK_ENERGY_WEAPONS                        ( 202 )
#define SK_UNARMED                               ( 203 ) // Hardcoded
#define SK_MELEE_WEAPONS                         ( 204 )
#define SK_THROWING                              ( 205 )
#define SK_FIRST_AID                             ( 206 ) // Hardcoded
#define SK_DOCTOR                                ( 207 ) // Hardcoded
#define SK_SNEAK                                 ( 208 ) // Hardcoded
#define SK_LOCKPICK                              ( 209 ) // Hardcoded
#define SK_STEAL                                 ( 210 ) // Hardcoded
#define SK_TRAPS                                 ( 211 ) // Hardcoded
#define SK_SCIENCE                               ( 212 ) // Hardcoded
#define SK_REPAIR                                ( 213 ) // Hardcoded
#define SK_SPEECH                                ( 214 ) // Hardcoded
#define SK_BARTER                                ( 215 ) // Hardcoded
#define SK_GAMBLING                              ( 216 )
#define SK_OUTDOORSMAN                           ( 217 )
// 218..225

// / Tag skills
#define TAG_SKILL1                               ( 226 ) // Hardcoded
#define TAG_SKILL2                               ( 227 ) // Hardcoded
#define TAG_SKILL3                               ( 228 ) // Hardcoded
#define TAG_SKILL4                               ( 229 ) // Hardcoded

// / Timeouts
#define TIMEOUT_BEGIN                            ( __TimeoutBegin )
#define TIMEOUT_END                              ( __TimeoutEnd )
#define TIMEOUT_COUNT                            ( TIMEOUT_END - TIMEOUT_BEGIN + 1 )
#define TO_SK_FIRST_AID                          ( 230 )
#define TO_SK_DOCTOR                             ( 231 )
#define TO_SK_REPAIR                             ( 232 ) // Hardcoded
#define TO_SK_SCIENCE                            ( 233 ) // Hardcoded
#define TO_SK_LOCKPICK                           ( 234 )
#define TO_SK_STEAL                              ( 235 )
#define TO_SK_OUTDOORSMAN                        ( 236 )
#define TO_DEATH                                 ( 237 ) // 237
#define TO_BATTLE                                ( 238 ) // Hardcoded
#define TO_TRANSFER                              ( 239 ) // Hardcoded
#define TO_REMOVE_FROM_GAME                      ( 240 ) // Hardcoded
#define TO_REPLICATION                           ( 241 )
#define TO_TIREDNESS                             ( 242 ) // Hardcoded
#define TO_SNEAK                                 ( 243 )
#define TO_HEALING                               ( 244 )
// 245..247
#define TO_STEALING                              ( 248 )
#define TO_AGGRESSOR                             ( 249 )
#define TO_HAIR_GROW                             ( 250 )
#define TO_SAY                                   ( 251 )
#define TO_DEAD                                  ( 252 )
// 252..259

// / Kills
// Reserved 260..299 (BT_MEN..BT_GIANT_WASP)
#define KILL_BEGIN                               ( __KillBegin )
#define KILL_END                                 ( __KillEnd )
#define KILL_COUNT                               ( KILL_END - KILL_BEGIN + 1 )
// 281..299

// / Perks
#define PERK_BEGIN                               ( __PerkBegin )
#define PERK_END                                 ( __PerkEnd )
#define PERK_COUNT                               ( PERK_END - PERK_BEGIN + 1 )
#define PE_BOOKWORM                              ( 300 ) // Todo
#define PE_AWARENESS                             ( 301 )
#define PE_BONUS_HTH_ATTACKS                     ( 302 )
#define PE_BONUS_HTH_DAMAGE                      ( 303 )
#define PE_BONUS_MOVE                            ( 304 )
#define PE_BONUS_RANGED_DAMAGE                   ( 305 )
#define PE_BONUS_RATE_OF_FIRE                    ( 306 )
#define PE_EARLIER_SEQUENCE                      ( 307 )
#define PE_FASTER_HEALING                        ( 308 )
#define PE_MORE_CRITICALS                        ( 309 )
#define PE_NIGHT_VISION                          ( 310 ) // Todo
#define PE_PRESENCE                              ( 311 ) // Todo
#define PE_RAD_RESISTANCE                        ( 312 )
#define PE_TOUGHNESS                             ( 313 )
#define PE_STRONG_BACK                           ( 314 )
#define PE_SHARPSHOOTER                          ( 315 )
#define PE_SILENT_RUNNING                        ( 316 ) // Hardcoded
#define PE_SURVIVALIST                           ( 317 )
#define PE_MASTER_TRADER                         ( 318 ) // Hardcoded
#define PE_EDUCATED                              ( 319 )
#define PE_HEALER                                ( 320 )
#define PE_FORTUNE_FINDER                        ( 321 )
#define PE_BETTER_CRITICALS                      ( 322 )
#define PE_EMPATHY                               ( 323 ) // Todo
#define PE_SLAYER                                ( 324 )
#define PE_SNIPER                                ( 325 )
#define PE_SILENT_DEATH                          ( 326 )
#define PE_ACTION_BOY                            ( 327 )
#define PE_MENTAL_BLOCK                          ( 328 ) // Todo
#define PE_LIFEGIVER                             ( 329 )
#define PE_DODGER                                ( 330 )
#define PE_SNAKEATER                             ( 331 )
#define PE_MR_FIXIT                              ( 332 )
#define PE_MEDIC                                 ( 333 )
#define PE_MASTER_THIEF                          ( 334 )
#define PE_SPEAKER                               ( 335 )
#define PE_HEAVE_HO                              ( 336 )
#define PE_FRIENDLY_FOE                          ( 337 ) // Todo
#define PE_PICKPOCKET                            ( 338 )
#define PE_GHOST                                 ( 339 )
#define PE_CULT_OF_PERSONALITY                   ( 340 ) // Todo
#define PE_SCROUNGER                             ( 341 ) // Todo
#define PE_EXPLORER                              ( 342 )
#define PE_FLOWER_CHILD                          ( 343 ) // Todo
#define PE_PATHFINDER                            ( 344 )
#define PE_ANIMAL_FRIEND                         ( 345 ) // Todo
#define PE_SCOUT                                 ( 346 )
#define PE_MYSTERIOUS_STRANGER                   ( 347 ) // Todo
#define PE_RANGER                                ( 348 )
#define PE_QUICK_POCKETS                         ( 349 ) // Hardcoded
#define PE_SMOOTH_TALKER                         ( 350 ) // Hardcoded
#define PE_SWIFT_LEARNER                         ( 351 )
#define PE_TAG                                   ( 352 ) // Todo
#define PE_MUTATE                                ( 353 ) // Todo
// 354..379
#define PE_ADRENALINE_RUSH                       ( 380 )
#define PE_CAUTIOUS_NATURE                       ( 381 )
#define PE_COMPREHENSION                         ( 382 )
#define PE_DEMOLITION_EXPERT                     ( 383 )
#define PE_GAMBLER                               ( 384 )
#define PE_GAIN_STRENGTH                         ( 385 )
#define PE_GAIN_PERCEPTION                       ( 386 )
#define PE_GAIN_ENDURANCE                        ( 387 )
#define PE_GAIN_CHARISMA                         ( 388 )
#define PE_GAIN_INTELLIGENCE                     ( 389 )
#define PE_GAIN_AGILITY                          ( 390 )
#define PE_GAIN_LUCK                             ( 391 )
#define PE_HARMLESS                              ( 392 )
#define PE_HERE_AND_NOW                          ( 393 )
#define PE_HTH_EVADE                             ( 394 )
#define PE_KAMA_SUTRA_MASTER                     ( 395 )
#define PE_KARMA_BEACON		                     ( 396 )
#define PE_LIGHT_STEP                            ( 397 )
#define PE_LIVING_ANATOMY                        ( 398 )
#define PE_MAGNETIC_PERSONALITY                  ( 399 )
#define PE_NEGOTIATOR                            ( 400 )
#define PE_PACK_RAT                              ( 401 )
#define PE_PYROMANIAC                            ( 402 )
#define PE_QUICK_RECOVERY                        ( 403 )
#define PE_SALESMAN                              ( 404 )
#define PE_STONEWALL                             ( 405 )
#define PE_THIEF                                 ( 406 )
#define PE_WEAPON_HANDLING                       ( 407 )
#define PE_VAULT_CITY_TRAINING                   ( 408 )
#define PE_ALCOHOL_RAISED_HP                     ( 409 )
#define PE_ALCOHOL_RAISED_HP_II                  ( 410 )
#define PE_ALCOHOL_LOWERED_HP                    ( 411 )
#define PE_ALCOHOL_LOWERED_HP_II                 ( 412 )
#define PE_AUTODOC_RAISED_HP                     ( 413 )
#define PE_AUTODOC_RAISED_HP_II                  ( 414 )
#define PE_AUTODOC_LOWERED_HP                    ( 415 )
#define PE_AUTODOC_LOWERED_HP_II                 ( 416 )
#define PE_EXPERT_EXCREMENT                      ( 417 )
// 418
#define PE_JINXED_II                             ( 419 )
#define PE_TERMINATOR                            ( 420 )
// 421..429 Randaru placeholders please no touchie
#define PE_ART_KIT							 	 ( 425 )

// Quest perks
#define PE_GECKO_SKINNING                        ( 430 )
#define PE_VAULT_CITY_INOCULATIONS               ( 431 )
#define PE_DERMAL_IMPACT                         ( 432 )
#define PE_DERMAL_IMPACT_ENH                     ( 433 )
#define PE_PHOENIX_IMPLANTS                      ( 434 )
#define PE_PHOENIX_IMPLANTS_ENH                  ( 435 )
#define PE_NCR_PERCEPTION                        ( 436 )
#define PE_NCR_ENDURANCE                         ( 437 )
#define PE_NCR_BARTER                            ( 438 )
#define PE_NCR_REPAIR                            ( 439 )
#define PE_COWBOY                                ( 440 )
#define PE_FORT_LID_1							 ( 442 )
#define PE_FORT_LID_2							 ( 443 )
#define PE_FORT_LID_3							 ( 444 )
#define PE_ZLO_LID_1							 ( 445 )
#define PE_ZLO_LID_2							 ( 446 )
#define PE_ZLO_LID_3							 ( 447 )
#define PE_GM_CLON							 	 ( 448 )

// 441..469

// / Addictions
#define ADDICTION_BEGIN                          ( __AddictionBegin )
#define ADDICTION_END                            ( __AddictionEnd )
#define ADDICTION_COUNT                          ( ADDICTION_END - ADDICTION_BEGIN + 1 )
#define ADDICTION_NUKA_COLA                      ( 470 )
#define ADDICTION_BUFFOUT                        ( 471 )
#define ADDICTION_MENTATS                        ( 472 )
#define ADDICTION_PSYCHO                         ( 473 )
#define ADDICTION_RADAWAY                        ( 474 )
#define ADDICTION_JET                            ( 475 )
#define ADDICTION_TRAGIC                         ( 476 )
// 376..379

// / Karma perks
#define KARMA_BEGIN                              ( __KarmaBegin )
#define KARMA_END                                ( __KarmaEnd )
#define KARMA_COUNT                              ( KARMA_END - KARMA_BEGIN + 1 )
#define KARMA_BERSERKER                          ( 480 )
#define KARMA_CHAMPION                           ( 481 )
#define KARMA_CHILDKILLER                        ( 482 )
#define KARMA_SEXPERT                            ( 483 )
#define KARMA_PRIZEFIGHTER                       ( 484 )
#define KARMA_GIGOLO                             ( 485 )
#define KARMA_GRAVE_DIGGER                       ( 486 )
#define KARMA_MARRIED                            ( 487 )
#define KARMA_PORN_STAR                          ( 488 )
#define KARMA_SLAVER                             ( 489 )
#define KARMA_VIRGIN_WASTES                      ( 490 )
#define KARMA_MAN_SALVATORE                      ( 491 )
#define KARMA_MAN_BISHOP                         ( 492 )
#define KARMA_MAN_MORDINO                        ( 493 )
#define KARMA_MAN_WRIGHT                         ( 494 )
#define KARMA_SEPARATED                          ( 495 )
#define KARMA_PEDOBEAR                           ( 496 )
#define KARMA_VC_GUARDSMAN                       ( 497 )
// 498..499

// / Damages
#define DAMAGE_BEGIN                             ( __DamageBegin )
#define DAMAGE_END                               ( __DamageEnd )
#define DAMAGE_COUNT                             ( DAMAGE_END - DAMAGE_BEGIN + 1 )
#define DAMAGE_POISONED                          ( 500 ) // Hardcoded
#define DAMAGE_RADIATED                          ( 501 ) // Hardcoded
#define DAMAGE_EYE                               ( 502 )
#define DAMAGE_RIGHT_ARM                         ( 503 ) // Hardcoded
#define DAMAGE_LEFT_ARM                          ( 504 ) // Hardcoded
#define DAMAGE_RIGHT_LEG                         ( 505 ) // Hardcoded
#define DAMAGE_LEFT_LEG                          ( 506 ) // Hardcoded
// 507..509

// / Modes
#define MODE_BEGIN                               ( 510 )
#define MODE_END                                 ( 549 )
#define MODE_COUNT                               ( MODE_END - MODE_BEGIN + 1 )
#define MODE_HIDE                                ( 510 ) // Состояние скрытности                                   Hardcoded
#define MODE_NO_STEAL                            ( 511 ) // Нельзя обворовать                                      Hardcoded
#define MODE_NO_BARTER                           ( 512 ) // Нельзя тоговать                                        Hardcoded
#define MODE_NO_ENEMY_STACK                      ( 513 ) // Нпц не запоминает врагов                               Hardcoded
#define MODE_NO_PVP                              ( 514 ) // Запрещает ПвП для игрока                               Hardcoded
#define MODE_END_COMBAT                          ( 515 ) // Согласен ли игрок закончить пошаговый бой              Hardcoded
#define MODE_DEFAULT_COMBAT                      ( 516 ) // Режим боя по-умолчанию                                 Hardcoded
#define MODE_NO_HOME                             ( 517 ) // Нпц не возвращается в домашнюю позицию автоматически   Hardcoded
#define MODE_GECK                                ( 518 ) // Локация не удаляется при наличии такого нпц            Hardcoded
#define MODE_NO_FAVORITE_ITEM                    ( 519 ) // Режим установки итемов по-умолчанию                    Hardcoded
#define MODE_NO_ITEM_GARBAGER                    ( 520 ) // Итемы не удаляются движком                             Hardcoded
#define MODE_DLG_SCRIPT_BARTER                   ( 521 ) // Возможно торговать при активном скрипте на диалоге     Hardcoded
#define MODE_UNLIMITED_AMMO                      ( 522 ) // Бесконечные патроны                                    Hardcoded
#define MODE_NO_DROP                             ( 523 ) // Нельзя сбрасывать предметы
#define MODE_NO_LOOSE_LIMBS                      ( 524 ) // Не может терять конечности
#define MODE_DEAD_AGES                           ( 525 ) // Мёртвое тело не исчезает
#define MODE_NO_HEAL                             ( 526 ) // Повреждения не излечиваются с течением времени
#define MODE_INVULNERABLE                        ( 527 ) // Неуязвимый                                             Hardcoded
#define MODE_NO_FLATTEN                          ( 528 ) // Не помещать труп на задний план после смерти           Hardcoded
#define MODE_SPECIAL_DEAD                        ( 529 ) // Есть особый вид смерти
#define MODE_RANGE_HTH                           ( 530 ) // Возможна рукопашная атака на расстоянии                Hardcoded
#define MODE_NO_KNOCK                            ( 531 ) // Не может быть сбит с ног
#define MODE_NO_LOOT                             ( 532 ) // Нельзя лутать                                          Hardcoded
#define MODE_NO_SUPPLY                           ( 533 ) // Не приходят охотники за головами при смерти нпц
#define MODE_NO_KARMA_ON_KILL                    ( 534 ) // При смерти не производится перерасчета кармы игрока-убийцы
#define MODE_BARTER_ONLY_CASH                    ( 535 ) // При бартере нпц принимает оплату только наличными
#define MODE_NO_PUSH                             ( 536 ) // Can't be pushed                                        Hardcoded
#define MODE_NO_UNARMED                          ( 537 ) // Not have unarmed attacks                               Hardcoded
#define MODE_NO_AIM                              ( 538 ) // Critter can't do aim attacks                           Hardcoded
#define MODE_NO_WALK                             ( 539 ) // Critter can't walk                                     Hardcoded
#define MODE_NO_RUN                              ( 540 ) // Critter can't run                                      Hardcoded
#define MODE_NO_TALK                             ( 541 ) // Npc can't talk                                         Hardcoded
// 542..549

// / Traits
#define TRAIT_BEGIN                              ( __TraitBegin )
#define TRAIT_END                                ( __TraitEnd )
#define TRAIT_COUNT                              ( TRAIT_END - TRAIT_BEGIN + 1 )
#define TRAIT_FAST_METABOLISM                    ( 550 )
#define TRAIT_BRUISER                            ( 551 )
#define TRAIT_SMALL_FRAME                        ( 552 )
#define TRAIT_ONE_HANDER                         ( 553 )
#define TRAIT_FINESSE                            ( 554 )
#define TRAIT_KAMIKAZE                           ( 555 )
#define TRAIT_HEAVY_HANDED                       ( 556 )
#define TRAIT_FAST_SHOT                          ( 557 )
#define TRAIT_BLOODY_MESS                        ( 558 )
#define TRAIT_JINXED                             ( 559 )
#define TRAIT_GOOD_NATURED                       ( 560 )
#define TRAIT_CHEM_RELIANT                       ( 561 )
#define TRAIT_CHEM_RESISTANT                     ( 562 )
#define TRAIT_SEX_APPEAL                         ( 563 )
#define TRAIT_SKILLED                            ( 564 )
#define TRAIT_NIGHT_PERSON                       ( 565 )
// #define TRAIT_GIFTED                (566)
// 17..19

// / Reputation
// Used range in engine character screen __ReputationBegin..__ReputationEnd
#define REPUTATION_BEGIN                         ( __ReputationBegin )
#define REPUTATION_END                           ( __ReputationEnd )
#define REPUTATION_COUNT                         ( REPUTATION_END - REPUTATION_BEGIN + 1 )
#define REPUTATION_DEN                           ( 570 )
#define REPUTATION_KLAMATH                       ( 571 )
#define REPUTATION_MODOC                         ( 572 )
#define REPUTATION_VAULT_CITY                    ( 573 )
#define REPUTATION_GECKO                         ( 574 )
#define REPUTATION_BROKEN_HILLS                  ( 575 )
#define REPUTATION_NEW_RENO                      ( 576 )
#define REPUTATION_SIERRA                        ( 577 )
#define REPUTATION_VAULT15                       ( 578 )
#define REPUTATION_NCR                           ( 579 )
#define REPUTATION_CATHEDRAL                     ( 580 )
#define REPUTATION_SAD                           ( 581 )
#define REPUTATION_REDDING                       ( 582 )
#define REPUTATION_SF                            ( 583 )
#define REPUTATION_NAVARRO                       ( 584 )
#define REPUTATION_ARROYO                        ( 585 )
#define REPUTATION_PRIMAL_TRIBE                  ( 586 )
#define REPUTATION_RANGERS                       ( 587 )
#define REPUTATION_VAULT13                       ( 588 )
#define REPUTATION_SACRAMENTO                    ( 589 )
// 590..599

//	/// Good / Evil list (not used)
// #define GOOD_EVIL_LIST_BEGIN       (600)
// #define GOOD_EVIL_LIST_END         (799)
// #define GOOD_EVIL_LIST_COUNT       (GOOD_EVIL_LIST_END-GOOD_EVIL_LIST_BEGIN+1)

#define QST_MEDIUM                               ( 700 )
#define QST_INVIS                                ( 701 )
#define QST_VISION                               ( 702 )
#define QST_GAMEMODE                             ( 703 )

#define ST_CELL_X                                ( 704 )
#define ST_CELL_Y                                ( 705 )

//Хранит координаты, с которыми работает криттер.
#define CR_HEXX									 ( 706 )
#define CR_HEXY									 ( 707 )

//Переменные для ГМ-меню:
#define CR_VAL0								     ( 708 )
#define CR_VAL1								     ( 709 )
#define CR_VAL2								     ( 710 )
#define CR_VAL3								     ( 711 )
#define CR_VAL4								     ( 712 )
#define CR_VAL5								     ( 713 )
#define CR_VAL6								     ( 714 )
#define CR_VAL7								     ( 715 )
#define CR_VAL8								     ( 716 )
#define CR_VAL9								     ( 717 )

#define CR_ROULETTE_START_MONEY					 ( 718 )

#define BP_ROBOT_SELF_REPAIR                     ( 720 ) //Кривое говно, без вмешательства ГМа дефолтно равно 0 (т.е. не проходит проверки и связанная с ним логика не фурычит).
#define BP_BLOOD_LOSS                            ( 721 ) 

#define CR_STRENGTH                              ( 722 ) //Параметры, в которых хранится база стата до применения нейротоксина.
#define CR_PERCEPTION                            ( 723 ) //Параметры, в которых хранится база стата до применения нейротоксина.
#define CR_AGILITY                               ( 724 ) //Параметры, в которых хранится база стата до применения нейротоксина.
#define CR_ENDURANCE                             ( 725 ) //Параметры, в которых хранится база стата до применения нейротоксина.

#define CR_IS_AGGRESSIVE                         ( 726 ) //Хранит в себе агрессивность криттера.
#define CR_SLEEPING_STATE                        ( 727 ) //Режим лежания.
#define CR_SINF_MODE                             ( 728 ) //Режим просмотра айдишников у ГМа.
#define CR_LAST_ROTTEN_CYCLE                     ( 729 ) //Номер последнего цикла гниения, который был в инвентаре существа.
#define CR_FIXED_SPEED                           ( 730 ) //Флаг того, что скорость криттера не меняется.
#define CR_IS_WINDUPED                           ( 731 ) //Флаг того, что криттер подготовлен к бою.
#define CR_AUTO_AIM                              ( 732 ) //Номер части тела, в которую автоматом стреляет криттер.
#define CR_DIRTINESS                             ( 733 ) //Уровень грязности персонажа.
#define CR_CRAFT_MENU                            ( 734 ) //Фильтр сортировки крафта.
#define CR_CRAFT_GRADE                           ( 735 ) //Фильтр сортировки крафта, костыльная заглушка.
//Скипнул немного позиций на всякий случай. Впрочем, это дефайны, и тут можно безболезненно пододвинуть кого-либо.

#define CR_TYPING_TIME							 ( 740 ) //Время, в течении которого над персонажем выводится оповещение о том, что он печатает "..."
#define __TypingDelay							 ( 5 ) //Дефолтное время задержки отображения "...", в секундах.

#define CR_TALKING_TARGET_ID					 ( 741 ) //Айди криттера, за которого говорит чар.
#define CR_FITNESS		  						 ( 742 ) //Количество "натренированной силы"
#define CR_RELAXED		  						 ( 743 ) //Количество "накопленного отдыха"

#define P_CRITTER_ID							 ( 760 )
#define P_BODYSWAPPED							 ( 761 )

#define CR_HUNGER_SPEED							 ( 762 ) // Скорость роста голода.
#define CR_THIRST_SPEED							 ( 763 ) // Скорость роста жажды.



#define GAME_INVALID                             ( -1 )
#define GAME_START                               ( 0 )
#define GAME_ADVENTURE                           ( 1 )
#define GAME_SURVIVAL                            ( 2 )
#define GAME_ARCADE                              ( 3 )
#define GAME_TEST                                ( 4 )
// #define GAME_VIRTUAL	(5)
#define GAME_MAX                                 ( 5 )

// / Mercenary settings
#define MERC_BEGIN                               ( 800 )
#define MERC_END                                 ( 810 )
#define MERC_COUNT                               ( MERC_END - MERC_BEGIN + 1 )
#define MERC_MASTER_ID                           ( 800 ) // Id хозяина мерка
#define MERC_ALWAYS_RUN                          ( 801 ) // Признак, мерк перемещаетя бегом при следовании за хозяином
#define MERC_CANCEL_ON_ATTACK                    ( 802 ) // Признак, отменяет ли мерк службу, если хозяин атакует самого мерка.
#define MERC_LOSE_DIST                           ( 803 ) // Дистанция, при превышении которой мерк "отстает" от хозяина и отменяет режиме мерка.
#define MERC_MASTER_DIST                         ( 804 ) // Дистанция, которой придерживается мерк в режиме следования за хозяином
#define MERC_TYPE                                ( 805 ) // Тип мерка. См. merc_h
#define MERC_DEFEND_MASTER                       ( 806 ) // Признак: мерк защищает хозяина, если тот атакован
#define MERC_ASSIST_MASTER                       ( 807 ) // Признак: если хозяин атакует цель, мерк присоединяется к атаке
#define MERC_CANCEL_TIME                         ( 808 ) // Время завершения службы
#define MERC_CANCEL_ON_GLOBAL                    ( 809 ) // Признак: мерк отменяет службу, если хозяин вышел на глобальную карту.
#define MERC_WAIT_FOR_MASTER                     ( 810 ) // Признак: мерк ожидает хозяина на конкретном месте

//
// 830..999
//

#define PARAMS_COUNT                             ( 1000 )

// Planes types
#define AI_PLANE_MISC                            ( 0 )
#define AI_PLANE_ATTACK                          ( 1 )
#define AI_PLANE_WALK                            ( 2 )
#define AI_PLANE_PICK                            ( 3 )
#define AI_PLANE_PATROL                          ( 4 ) // WIP
#define AI_PLANE_COURIER                         ( 5 ) // WIP

// Planes deault priority
#define AI_PLANE_MISC_PRIORITY                   ( 10 )
#define AI_PLANE_ATTACK_PRIORITY                 ( 50 )
#define AI_PLANE_WALK_PRIORITY                   ( 20 )
#define AI_PLANE_PICK_PRIORITY                   ( 35 )
#define AI_PLANE_PATROL_PRIORITY                 ( 25 )
#define AI_PLANE_COURIER_PRIORITY                ( 30 )

// Plane begin/end/run reasons
// Begin
#define REASON_GO_HOME                           ( 10 )
#define REASON_FOUND_IN_ENEMY_STACK              ( 11 )
#define REASON_FROM_DIALOG                       ( 12 )
#define REASON_FROM_SCRIPT                       ( 13 )
#define REASON_RUN_AWAY                          ( 14 )
// End
#define REASON_SUCCESS                           ( 30 )
#define REASON_HEX_TOO_FAR                       ( 31 )
#define REASON_HEX_BUSY                          ( 32 )
#define REASON_HEX_BUSY_RING                     ( 33 )
#define REASON_DEADLOCK                          ( 34 )
#define REASON_TRACE_FAIL                        ( 35 )
#define REASON_POSITION_NOT_FOUND                ( 36 )
#define REASON_FIND_PATH_ERROR                   ( 37 )
#define REASON_CANT_WALK                         ( 38 )
#define REASON_TARGET_DISAPPEARED                ( 39 )
#define REASON_USE_ITEM_NOT_FOUND                ( 40 )
#define REASON_GAG_CRITTER                       ( 41 )
#define REASON_GAG_ITEM                          ( 42 )
#define REASON_NO_UNARMED                        ( 43 )
// Run
#define REASON_ATTACK_TARGET                     ( 50 )
#define REASON_ATTACK_WEAPON                     ( 51 )
#define REASON_ATTACK_DISTANTION                 ( 52 )
#define REASON_ATTACK_USE_AIM                    ( 53 )

// Locker
#define LOCKER_ISOPEN                            ( 0x01 ) // Hardcoded
#define LOCKER_LOCKED                            ( 0x02 )
#define LOCKER_JAMMED                            ( 0x04 )
#define LOCKER_BROKEN                            ( 0x08 )
#define LOCKER_NOOPEN                            ( 0x10 ) // Hardcoded
#define LOCKER_ELECTRO                           ( 0x20 )

// Timer
#define TIMER_MIN_VALUE                          ( 1 )
#define TIMER_MAX_VALUE                          ( 599 )

// Timeouts in real seconds, generic values
// Roleplay
// binyan: timeout to hotkey say
#define SAY_TIMEOUT                              ( __FullSecond + REAL_SECOND( 3 ) )
// #define FIRST_AID_TIMEOUT #(cr)     (__FullSecond+(__TimeMultiplier*100/(((cr.Skill[SK_FIRST_AID])>3?cr.Skill[SK_FIRST_AID]:3)*100/MAX_SKILL_VAL))*60) // Orig 3 time on day, 5 min - sk
// #define DOCTOR_TIMEOUT #(cr)        (__FullSecond+(__TimeMultiplier*100/(((cr.Skill[SK_DOCTOR])>3?cr.Skill[SK_DOCTOR]:3)*100/MAX_SKILL_VAL)*3)*60) // Orig 1 time on day, 20 min - sk
#define FIRST_AID_TIMEOUT                        # (cr)     ( __FullSecond + REAL_SECOND( 15 ) )
#define DOCTOR_TIMEOUT                           # (cr)        ( __FullSecond + REAL_SECOND( 30 ) )
#define REPAIR_TIMEOUT                           # (cr)        ( __FullSecond + REAL_SECOND( 20 ) ) // Orig 4 time on day, 1 min
#define SCIENCE_TIMEOUT                          # (cr)       ( __FullSecond + REAL_SECOND( 20 ) )  // Orig 6 time on day, 1 min
#define LOCKPICK_TIMEOUT                         # (cr)      ( __FullSecond + REAL_SECOND( 30 ) )   // Orig 15 minutes, 2 min
#define STEAL_TIMEOUT                            # (cr)         ( __FullSecond ) // 2 minutes
#define TRANSFER_TIMEOUT                         # (cr)      ( __FullSecond + __TimeoutTransfer )
#define BATTLE_TIMEOUT                           # (cr)        ( __FullSecond + MAX( __TimeoutBattle - REAL_SECOND( cr.Stat[ ST_ARMOR_CLASS ] ), int( REAL_SECOND( 12 ) ) ) )
#define TRAPS_TIMEOUT                            # (cr)         ( __FullSecond + REAL_SECOND( 30 ) )
#define SNEAK_TIMEOUT                            # (cr)         ( __FullSecond + REAL_SECOND( MAX( 34 - cr.Stat[ ST_SEQUENCE ], 3 ) ) ) // 34 second - sequence
#define HEALING_TIMEOUT                          # (cr) ( __FullSecond + REAL_MINUTE( 4 ) )                                             // 2 minutes
#define IS_TURN_BASED_TIMEOUT                    # (cr) ( cr.Timeout[ TO_BATTLE ] > 10000000 )
#define MAXIMUM_TIMEOUT                          ( REAL_HOUR( 5 ) )                                                                     // Doctor timeout with min skill

// Transfer types
#define TRANSFER_CLOSE                           ( 0 )
#define TRANSFER_HEX_CONT_UP                     ( 1 )
#define TRANSFER_HEX_CONT_DOWN                   ( 2 )
#define TRANSFER_SELF_CONT                       ( 3 )
#define TRANSFER_CRIT_LOOT                       ( 4 )
#define TRANSFER_CRIT_STEAL                      ( 5 )
#define TRANSFER_CRIT_BARTER                     ( 6 )
#define TRANSFER_FAR_CONT                        ( 7 )
#define TRANSFER_FAR_CRIT                        ( 8 )

// Scores
#define SCORE_EVIL_OF_HOUR                       ( 0 )
#define SCORE_HERO_OF_HOUR                       ( 1 )
#define SCORE_KARMA_ON_HOUR                      ( 2 )
#define SCORE_SPEAKER                            ( 3 ) // Hardcoded
#define SCORE_TRADER                             ( 4 ) // Hardcoded
#define SCORE_ZOMBY                              ( 5 )
#define SCORE_PATY                               ( 6 )
#define SCORE_MANIAC                             ( 7 )
#define SCORE_SCAUT                              ( 8 )
#define SCORE_DOCTOR                             ( 9 )
#define SCORE_SHOOTER                            ( 10 )
#define SCORE_MELEE                              ( 11 )
#define SCORE_UNARMED                            ( 12 )
#define SCORE_THIEF                              ( 13 )
#define SCORE_DRIVER                             ( 14 )
#define SCORE_KILLER                             ( 15 )
#define SCORE_SNIPER                             ( 16 )
#define SCORE_ADVENTURER                         ( 17 )
#define SCORE_CRACKER                            ( 18 )
#define SCORE_UNARMED_DAMAGE                     ( 19 )
#define SCORE_RITCH                              ( 20 )
#define SCORE_CHOSEN_ONE                         ( 21 )
#define SCORE_SIERRA_CUR                         ( 40 )
#define SCORE_MARIPOSA_CUR                       ( 41 )
#define SCORE_CATHEDRAL_CUR                      ( 42 )
#define SCORE_SIERRA_BEST                        ( 43 )
#define SCORE_MARIPOSA_BEST                      ( 44 )
#define SCORE_CATHEDRAL_BEST                     ( 45 )
#define SCORE_SIERRA_ORG                         ( 46 )
#define SCORE_MARIPOSA_ORG                       ( 47 )
#define SCORE_CATHEDRAL_ORG                      ( 48 )
#define SCORE_BASE_BEST_ORG                      ( 49 )
#define SCORES_MAX                               ( 50 )

// Car flags
#define CAR_BIO_ENGINE                           ( 0x0001 )
#define CAR_NO_LOCKPICK                          ( 0x0002 )

// Body types
#define BT_MEN                                   ( 0 )
#define BT_WOMEN                                 ( 1 )
#define BT_CHILDREN                              ( 2 )
#define BT_SUPER_MUTANT                          ( 3 )
#define BT_GHOUL                                 ( 4 )
#define BT_BRAHMIN                               ( 5 )
#define BT_RADSCORPION                           ( 6 )
#define BT_RAT                                   ( 7 )
#define BT_FLOATER                               ( 8 )
#define BT_CENTAUR                               ( 9 )
#define BT_ROBOT                                 ( 10 )
#define BT_DOG                                   ( 11 )
#define BT_MANTI                                 ( 12 )
#define BT_DEADCLAW                              ( 13 )
#define BT_PLANT                                 ( 14 )
#define BT_GECKO                                 ( 15 )
#define BT_ALIEN                                 ( 16 )
#define BT_GIANT_ANT                             ( 17 )
#define BT_BIG_BAD_BOSS                          ( 18 )
#define BT_GIANT_BEETLE                          ( 19 )
#define BT_GIANT_WASP                            ( 20 )
#define BT_ZOMBIE                                ( 29 )
#define MAX_BODY_TYPES                           ( 30 )

// Locomotion types
#define LOCOMOTION_BIPED                         ( 0 )
#define LOCOMOTION_QUADRUPED                     ( 1 )
#define LOCOMOTION_ROBOTIC                       ( 2 )
#define LOCOMOTION_FLY                           ( 3 )

// Other
#define FLUSH_SCREEN_DEFAULT                     ( 1000 ) // Flush screen time

// Dilalog functions
#define IS_DIALOG_END                            # (str)        ( not valid( str ) )
#define IS_DIALOG_GENERATED                      # (str)  ( valid( str ) && str.length() == 0 )
#define IS_DIALOG_SAY_MODE                       # (str)   ( valid( str ) && str.length() > 0 )

// Time
#define IS_MORNING                               # (hour)          ( ( hour ) >= 7 && ( hour ) <= 11 )   // 5 hours
#define IS_AFTERNOON                             # (hour)        ( ( hour ) >= 12 && ( hour ) <= 21 )    // 10 hours
#define IS_NIGHT                                 # (hour)            ( ( hour ) >= 22 || ( hour ) <= 6 ) // 9 hours

// Item deterioration info
#define MAX_DETERIORATION                        ( 10000 )                                               // Hardcoded
#define MAX_BROKENS                              ( 10 )
// Broken Information
#define BI_LOWBROKEN                             ( 0x01 )
#define BI_NORMBROKEN                            ( 0x02 )
#define BI_HIGHBROKEN                            ( 0x04 )
#define BI_NOTRESC                               ( 0x08 )
#define BI_BROKEN                                ( 0x0F )      // Hardcoded
#define BI_SERVICE                               ( 0x10 )
#define BI_SERVICE_EXT                           ( 0x20 )
#define BI_ETERNAL                               ( 0x40 )

// Combat modes
#define COMBAT_MODE_ANY                          ( 0 )
#define COMBAT_MODE_REAL_TIME                    ( 1 )
#define COMBAT_MODE_TURN_BASED                   ( 2 )

// Show screen modes
// Ouput: it is 'uint param' in Critter::ShowScreen.
// Input: I - integer value 'uint answerI', S - string value 'string& answerS' in 'answer_' function.
#define SCREEN_CLOSE                             ( 0 )  // Close top window.
#define SCREEN_TIMER                             ( 1 )  // Timer box. Output: picture index in INVEN.LST. Input I: time in game minutes (1..599).
#define SCREEN_DIALOGBOX                         ( 2 )  // Dialog box. Output: buttons count - 0..20 (exit button added automatically). Input I: Choosed button - 0..19.
#define SCREEN_SKILLBOX                          ( 3 )  // Skill box. Input I: selected skill.
#define SCREEN_BAG                               ( 4 )  // Bag box. Input I: id of selected item.
#define SCREEN_SAY                               ( 5 )  // Say box. Output: all symbols - 0 or only numbers - any other number. Input S: typed string.
#define SCREEN_ELEVATOR                          ( 6 )  // Elevator. Output: look ELEVATOR_* macro. Input I: Choosed level button.
#define SCREEN_INVENTORY                         ( 7 )  // Inventory.
#define SCREEN_CHARACTER                         ( 8 )  // Character.
#define SCREEN_FIXBOY                            ( 9 )  // Fix-boy.
#define SCREEN_PIPBOY                            ( 10 ) // Pip-boy.
#define SCREEN_MINIMAP                           ( 11 ) // Mini-map.

// @pm menu
// new context menu defines(for actions) pm add
#define ARRAY_SCREEN_INDEX                       ( 0 )
#define ARRAY_ACTION_INDEX                       ( 1 )
#define ARRAY_ID_INDEX                           ( 2 )
#define ARRAY_OBJ_INDEX                          ( 3 )
#define ARRAY_PICK_TYPE                          ( 4 )
#define ARRAY_ITEM_HEXX                          ( 5 )
#define ARRAY_ITEM_HEXY                          ( 6 )
#define ARRAY_ITEM_PID                           ( 7 )
#define ARRAY_SKILL_INDEX                        ( 8 )

#define OBJECT_CRITTER                           ( 2 )
#define OBJECT_ITEM                              ( 3 )
#define OBJECT_SCENERY                           ( 4 )
// #pm menu


// pm exit grid
#define EXIT_GRID_PID                            ( 4053 )
#define EXIT_GRID_DISTATION                      ( 3 )

// Global map fog
#define FOG_FULL                                 ( 0 )
#define FOG_HALF                                 ( 1 )
#define FOG_HALF_EX                              ( 2 )
#define FOG_NONE                                 ( 3 )

// Critter extra flags, only for read
#define CRITTER_PLAYER                           ( 0x00010000 ) // Игрок.
#define CRITTER_NPC                              ( 0x00020000 ) // Нпц.
#define CRITTER_DISCONNECT                       ( 0x00080000 ) // В оффлайне.
#define CRITTER_CHOSEN                           ( 0x00100000 ) // Криттер игрока. Используется только при отправке сообщения клиенту для идентификации его персонажа.
#define CRITTER_RULEGROUP                        ( 0x00200000 ) // Рулевой в группе на глобале.

// Hit locations
#define HIT_LOCATION_NONE                        ( 0 )
#define HIT_LOCATION_HEAD                        ( 1 )
#define HIT_LOCATION_LEFT_ARM                    ( 2 )
#define HIT_LOCATION_RIGHT_ARM                   ( 3 )
#define HIT_LOCATION_TORSO                       ( 4 )
#define HIT_LOCATION_RIGHT_LEG                   ( 5 )
#define HIT_LOCATION_LEFT_LEG                    ( 6 )
#define HIT_LOCATION_EYES                        ( 7 )
#define HIT_LOCATION_GROIN                       ( 8 )
#define HIT_LOCATION_UNCALLED                    ( 9 )

// Sound types
// Generic <Type Subtype SoundId SoundIdExt X X X X>
// Weapon <Type Subtype SoundId SoundIdExt X X X [Random 1 or 2]>
#define SOUND_WEAPON                             'W'
#define SOUND_WEAPON_USE                         'A'
#define SOUND_WEAPON_FLY                         'F'
#define SOUND_WEAPON_MISS                        'H'
#define SOUND_WEAPON_EMPTY                       'O'
#define SOUND_WEAPON_RELOAD                      'R'
// Door <Type Subtype D O O R S SoundId>
#define SOUND_DOOR                               'S'
#define SOUND_DOOR_OPEN                          'O'
#define SOUND_DOOR_LOCK                          'L'
#define SOUND_DOOR_CLOSE                         'C'
#define SOUND_DOOR_NOT_OPEN                      'N'

// Critter find types
// Combine groups with | operator
#define FIND_LIFE                                ( 0x01 ) // First group
#define FIND_KO                                  ( 0x02 )
#define FIND_DEAD                                ( 0x04 )
#define FIND_LIFE_AND_KO                         ( 0x03 )
#define FIND_LIFE_AND_DEAD                       ( 0x05 )
#define FIND_KO_AND_DEAD                         ( 0x06 )
#define FIND_ALL                                 ( 0x0F )
#define FIND_ONLY_PLAYERS                        ( 0x10 ) // Second group
#define FIND_ONLY_NPC                            ( 0x20 )

// Elevators
#define ELEVATOR_X                               # ( elevator, current_level )( ( uint( ( current_level ) & 0xFFFF ) << 16 ) | ( elevator ) & 0xFFFF )
#define ELEVATOR_BOS_1234                        # (current_level)         ( ELEVATOR_X( 0, current_level ) )
#define ELEVATOR_BOS_01                          # (current_level)           ( ELEVATOR_X( 1, current_level ) )
#define ELEVATOR_MASTER_123                      # (current_level)       ( ELEVATOR_X( 2, current_level ) )
#define ELEVATOR_MASTER_34                       # (current_level)        ( ELEVATOR_X( 3, current_level ) )
#define ELEVATOR_MILITARY_123                    # (current_level)     ( ELEVATOR_X( 4, current_level ) )
#define ELEVATOR_MILITARY_34                     # (current_level)      ( ELEVATOR_X( 5, current_level ) )
#define ELEVATOR_MILITARY_346                    # (current_level)     ( ELEVATOR_X( 6, current_level ) ) // Use 6 level as 5
#define ELEVATOR_MILITARY_456                    # (current_level)     ( ELEVATOR_X( 7, current_level ) )
#define ELEVATOR_VAULT_123                       # (current_level)        ( ELEVATOR_X( 8, current_level ) )

// Dialog links
#define DIALOG_END                               uint( -1 )
#define DIALOG_BACK                              uint( -2 )
#define DIALOG_BARTER                            uint( -3 )
#define DIALOG_ATTACK                            uint( -4 )

// Fix boy function call states
#define FIXBOY_LIST                              ( 0 )
#define FIXBOY_BUTTON                            ( 1 )
#define FIXBOY_CRAFT                             ( 2 )

// Fix boy craft results
#define FIXBOY_ALLOW_CRAFT                       ( 0x0001 )
#define FIXBOY_CHECK_TIMEOUT                     ( 0x0002 )
#define FIXBOY_SET_TIMEOUT                       ( 0x0004 )
#define FIXBOY_CHECK_PARAMS                      ( 0x0008 )
#define FIXBOY_CHECK_MATERIALS                   ( 0x0010 )
#define FIXBOY_CHECK_TOOLS                       ( 0x0020 )
#define FIXBOY_SUB_MATERIALS                     ( 0x0040 )
#define FIXBOY_ADD_CRAFT_ITEMS                   ( 0x0080 )
#define FIXBOY_ADD_EXPERIENCE                    ( 0x0100 )
#define FIXBOY_SEND_SUCC_MESSAGE                 ( 0x0200 )
#define FIXBOY_SEND_FAIL_MESSAGE                 ( 0x0400 )
#define FIXBOY_DEFAULT                           ( 0xFFFF )

// Access levels
#define ACCESS_CLIENT                            ( 0 )
#define ACCESS_TESTER                            ( 1 )
#define ACCESS_MODER                             ( 2 )
#define ACCESS_ADMIN                             ( 3 )

// Special skill values
#define SKILL_PICK_ON_GROUND                     ( -1 )
#define SKILL_PUT_CONT                           ( -2 )
#define SKILL_TAKE_CONT                          ( -3 )
#define SKILL_TAKE_ALL_CONT                      ( -4 )
#define SKILL_LOOT_CRITTER                       ( -5 )
#define SKILL_PUSH_CRITTER                       ( -6 )
#define SKILL_TALK                               ( -7 )

// Look checks
#define LOOK_CHECK_DIR                           ( 0x01 )                	// Nerfe look by directions of look
#define LOOK_CHECK_SNEAK_DIR                     ( 0x02 )                	// Nerfe opponent sneak by directions of look
#define LOOK_CHECK_SNEAK_WEIGHT                  ( 0x04 )                	// Nerfe sneak by current weight
#define LOOK_CHECK_TRACE                         ( 0x08 )                	// Tracing for wall aviablility
#define LOOK_CHECK_SCRIPT                        ( 0x10 )                	// Allow bool check_look(...) in main.fos, all other defines ignored
#define LOOK_CHECK_ITEM_SCRIPT                   ( 0x20 )                	// Allow bool check_trap_look(...) in main.fos, for items with ITEM_TRAP flag

// Critter base types  Скины
#define CRTYPE_DEFAULT_M                         ( 62 )						//CRTYPE_LHD_JUMPSUIT // CRTYPE_VAULT_M
#define CRTYPE_DEFAULT_F                         ( 61 )						//CRTYPE_DW_JUMPSUIT_F
#define CRTYPE_NONE                              ( 0 )						// Used with ST_BASE_CRTYPE as default

//OLD:

// Dweller
#define CRTYPE_DW_JUMPSUIT_M                     ( 11 )
#define CRTYPE_DW_JUMPSUIT_F                     ( 4 )
#define CRTYPE_DW_LEATHER_JACKET_F               ( 6 )
#define CRTYPE_COMBAT_ARM_1						 ( 10 )
#define CRTYPE_DW_LEATHER_ARMOR_M                ( 12 )
#define CRTYPE_DW_LEATHER_ARMOR_M_2              ( 136 )
#define CRTYPE_DW_LEATHER_JACKET_M               ( 13 )
#define CRTYPE_DW_METAL_ARMOR_M                  ( 14 )
#define CRTYPE_DW_TRIBAL_F                       ( 63 )
#define CRTYPE_DW_TRIBAL_M                       ( 64 )
#define CRTYPE_DW_LEATHERBLUE_M                  ( 124 )
// Vault citizen
#define CRTYPE_VAULT_M                           ( 69 )
#define CRTYPE_VAULT_F                           ( 74 )
// Robots
#define CRTYPE_ROBOT                             ( 66 )
// Long Hair Dude
#define CRTYPE_LHD_JUMPSUIT                      ( 106 )					// Used with ST_BASE_CRTYPE
#define CRTYPE_LHD_LEATHER_ARMOR                 ( 107 )
#define CRTYPE_LHD_LEATHER_JACKET                ( 108 )
#define CRTYPE_LHD_METAL_ARMOR                   ( 109 )
#define CRTYPE_LHD_TRIBAL                        ( 110 )
#define CRTYPE_LHD_LEATHER_ARMOR_MK2             ( 140 )
#define CRTYPE_LHD_LEATHERBLUE                   ( 125 )
// Bald dude
#define CRTYPE_BLD_JUMPSUIT                      ( 116 )
#define CRTYPE_BLD_LEATHER_ARMOR                 ( 117 )
#define CRTYPE_BLD_LEATHER_ARMOR_MK2             ( 139 )
#define CRTYPE_BLD_LEATHER_JACKET                ( 118 )
#define CRTYPE_BLD_METAL_ARMOR                   ( 119 )
#define CRTYPE_BLD_TRIBAL                        ( 120 )
#define CRTYPE_BLD_LEATHERBLUE                   ( 126 )

// Серый коготь 122 песочная роба
#define AZMADON_JUMP		                     ( 100 ) 					//Серый коготь
#define AZMADON_SNEAK		                     ( 99 )  					//Роба когтя
#define AZMADON_HALAT		                     ( 122 ) 					//Песонач роба
#define LEATHER_ARMOR_MK_III					 ( 142 ) 					//Кожанка МК3

// Олимпус 2077. Нигер
#define NIG_JUMPSUIT							 ( 149 )
#define NIG_LEATHER_JACKET						 ( 153 )
#define NIG_LEATHER_JACKET_MEH					 ( 150 )	
#define NIG_METAL_ARMOR							 ( 155 )
#define NIG_METAL_ARMOR_NAG						 ( 151 )
#define NIG_CA									 ( 154 )
#define NIG_CA_NH								 ( 152 )







// Криттеры и одевание брони
// Принцип группировки
# define SKIN_NAKED									( 0 )			//Дикарь, голый
# define SKIN_JUMPSUIT								( 1 )			//Комбенизон убежища синий
# define SKIN_JUMPSUIT_BLACK						( 2 )			//Комбенизон убежища черный
# define SKIN_JUMPSUIT_LIGHT_GREEN					( 3 )			//Комбенизон убежища светло-зеленый
# define SKIN_JUMPSUIT_RED							( 4 )			//Комбенизон убежища красный
# define SKIN_JUMPSUIT_SAND							( 5 )			//Комбенизон убежища песчаный
# define SKIN_JUMPSUIT_GRAY							( 6 )			//Комбенизон убежища серый
# define SKIN_JACKET								( 7 )			//Куртка кожаная
# define SKIN_LEATHER_COAT							( 8 )			//Плащ кожаный
# define SKIN_LEATHER_ARMOR_MK1						( 9 )			//Броня кожаная МК1
# define SKIN_LEATHER_ARMOR_MK2						( 10 )			//Броня кожаная МК2
# define SKIN_LEATHER_ARMOR_BLUE					( 11 )			//Броня кожаная огнеупорная
# define SKIN_LEATHER_ARMOR_CAMMO					( 12 )			//Броня кожаная серая каммо
# define SKIN_LEATHER_ARMOR_RED						( 13 )			//Броня кожаная красная
# define SKIN_METAL									( 14 )			//Броня металлическая МК1, ржавая
# define SKIN_METAL_MK2								( 15 )			//Броня металлическая МК2, полированная
# define SKIN_METAL_TESLA							( 16 )			//Броня металлическая, тесла

// Имена групп
# define SKIN_TYPE_WOMAN							( 0 )			//Женщина
# define SKIN_TYPE_PUNKESS							( 1 )			//Женщина-панк
# define SKIN_TYPE_MAN								( 2 )			//Мужчина
# define SKIN_TYPE_HAIRY							( 3 )			//Мужчина патлач
# define SKIN_TYPE_BALD								( 4 )			//Мужчина лысый
# define SKIN_TYPE_BLACK							( 5 )			//Мужчина негр
# define SKIN_TYPE_FAT								( 6 )			//Мужчина жиробас

// Стандартная женщина
# define CRTYPE_DW_TRIBAL_F							( 61 )			//Дикарка стандартная, голая
# define CRTYPE_DW_JUMPSUIT_F						( 4 )			//Комбенизон убежища синий
# define CRTYPE_DW_JUMPSUIT_BLACK_F					( 331 )			//Комбенизон убежища черный
# define CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_F			( 329 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_DW_JUMPSUIT_RED_F					( 327 )			//Комбенизон убежища красный
# define CRTYPE_DW_JUMPSUIT_SAND_F					( 325 )			//Комбенизон убежища песчаный
# define CRTYPE_DW_JUMPSUIT_GRAY_F					( 323 )			//Комбенизон убежища серый
# define CRTYPE_DW_LEATHER_JACKET_F					( 6 )			//Куртка кожаная
# define CRTYPE_DW_LEATHER_COAT_F					( 333 )			//Плащ кожаный
# define CRTYPE_DW_LEATHER_ARMOR_MK1_F				( 5 )			//Броня кожаная МК1
# define CRTYPE_DW_LEATHER_ARMOR_MK2_F				( 165 )			//Броня кожаная МК2
# define CRTYPE_DW_LEATHER_ARMOR_BLUE_F				( 123 )			//Броня кожаная огнеупорная
# define CRTYPE_DW_LEATHER_ARMOR_CAMMO_F			( 200 )			//Броня кожаная серая каммо
# define CRTYPE_DW_LEATHER_ARMOR_RED_F				( 207 )			//Броня кожаная красная
# define CRTYPE_DW_METAL_ARMOR_F					( 335 )			//Броня металлическая МК1, ржавая
# define CRTYPE_DW_METAL_ARMOR_MK2_F				( 7 )			//Броня металлическая МК2, полированная
# define CRTYPE_DW_METAL_TESLA_F					( 339 )			//Броня металлическая, тесла

// Баба-панкуха
# define CRTYPE_PUNKESS_TRIBAL						( 151 )			//Дикарка-панк, голая
# define CRTYPE_PUNKESS_JUMPSUIT					( 152 )			//Комбенизон убежища синий
# define CRTYPE_PUNKESS_JUMPSUIT_BLACK				( 152 )			//Комбенизон убежища черный
# define CRTYPE_PUNKESS_JUMPSUIT_LIGHT_GREEN		( 152 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_PUNKESS_JUMPSUIT_RED				( 152 )			//Комбенизон убежища красный
# define CRTYPE_PUNKESS_JUMPSUIT_SAND				( 152 )			//Комбенизон убежища песчаный
# define CRTYPE_PUNKESS_JUMPSUIT_GRAY				( 152 )			//Комбенизон убежища серый
# define CRTYPE_PUNKESS_LEATHER_JACKET				( 34 )			//Куртка кожаная
# define CRTYPE_PUNKESS_LEATHER_COAT				( 34 )			//Плащ кожаный
# define CRTYPE_PUNKESS_LEATHER_ARMOR_MK1			( 153 )			//Броня кожаная МК1
# define CRTYPE_PUNKESS_LEATHER_ARMOR_MK2			( 153 )			//Броня кожаная МК2
# define CRTYPE_PUNKESS_LEATHER_ARMOR_BLUE			( 195 )			//Броня кожаная огнеупорная
# define CRTYPE_PUNKESS_LEATHER_ARMOR_CAMMO			( 201 )			//Броня кожаная серая каммо
# define CRTYPE_PUNKESS_LEATHER_ARMOR_RED			( 208 )			//Броня кожаная красная
# define CRTYPE_PUNKESS_METAL_ARMOR					( 154 )			//Броня металлическая МК1, ржавая
# define CRTYPE_PUNKESS_METAL_ARMOR_MK2				( 154 )			//Броня металлическая МК2, полированная
# define CRTYPE_PUNKESS_METAL_TESLA					( 154 )			//Броня металлическая, тесла

// Стандартный мужчина
# define CRTYPE_DW_TRIBAL_M							( 62 )			//Дикарь стандартный, голый
# define CRTYPE_DW_JUMPSUIT_M 						( 11 )			//Комбенизон убежища синий
# define CRTYPE_DW_JUMPSUIT_BLACK_M					( 332 )			//Комбенизон убежища черный
# define CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_M			( 330 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_DW_JUMPSUIT_RED_M					( 328 )			//Комбенизон убежища красный
# define CRTYPE_DW_JUMPSUIT_SAND_M					( 326 )			//Комбенизон убежища песчаный
# define CRTYPE_DW_JUMPSUIT_GRAY_M					( 324 )			//Комбенизон убежища серый
# define CRTYPE_DW_LEATHER_JACKET_M					( 13 )			//Куртка кожаная
# define CRTYPE_DW_LEATHER_COAT_M					( 334 )			//Плащ кожаный
# define CRTYPE_DW_LEATHER_ARMOR_MK1_M				( 12 )			//Броня кожаная МК1
# define CRTYPE_DW_LEATHER_ARMOR_MK2_M				( 166 )			//Броня кожаная МК2
# define CRTYPE_DW_LEATHER_ARMOR_BLUE_M				( 124 )			//Броня кожаная огнеупорная
# define CRTYPE_DW_LEATHER_ARMOR_CAMMO_M			( 202 )			//Броня кожаная серая каммо
# define CRTYPE_DW_LEATHER_ARMOR_RED_M				( 209 )			//Броня кожаная красная
# define CRTYPE_DW_METAL_ARMOR_M					( 336 )			//Броня металлическая МК1, ржавая
# define CRTYPE_DW_METAL_ARMOR_MK2_M				( 14 )			//Броня металлическая МК2, полированная
# define CRTYPE_DW_METAL_TESLA_M					( 340 )			//Броня металлическая, тесла

// Патлатый
# define CRTYPE_LHD_TRIBAL							( 110 )			//Дикарь патлатый, голый
# define CRTYPE_LHD_JUMPSUIT						( 106 )			//Комбенизон убежища синий
# define CRTYPE_LHD_JUMPSUIT_BLACK					( 106 )			//Комбенизон убежища черный
# define CRTYPE_LHD_JUMPSUIT_LIGHT_GREEN			( 106 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_LHD_JUMPSUIT_RED					( 106 )			//Комбенизон убежища красный
# define CRTYPE_LHD_JUMPSUIT_SAND					( 106 )			//Комбенизон убежища песчаный
# define CRTYPE_LHD_JUMPSUIT_GRAY					( 106 )			//Комбенизон убежища серый
# define CRTYPE_LHD_LEATHER_JACKET					( 108 )			//Куртка кожаная
# define CRTYPE_LHD_LEATHER_COAT					( 108 )			//Плащ кожаный
# define CRTYPE_LHD_LEATHER_ARMOR_MK1				( 107 )			//Броня кожаная МК1
# define CRTYPE_LHD_LEATHER_ARMOR_MK2				( 167 )			//Броня кожаная МК2
# define CRTYPE_LHD_LEATHER_ARMOR_BLUE				( 125 )			//Броня кожаная огнеупорная
# define CRTYPE_LHD_LEATHER_ARMOR_CAMMO				( 204 )			//Броня кожаная серая каммо
# define CRTYPE_LHD_LEATHER_ARMOR_RED				( 211 )			//Броня кожаная красная
# define CRTYPE_LHD_METAL_ARMOR						( 337 )			//Броня металлическая МК1, ржавая
# define CRTYPE_LHD_METAL_ARMOR_MK2					( 109 )			//Броня металлическая МК2, полированная
# define CRTYPE_LHD_METAL_TESLA						( 341 )			//Броня металлическая, тесла

// Лысый
# define CRTYPE_BLD_TRIBAL							( 120 )			//Дикарь лысый, голый
# define CRTYPE_BLD_JUMPSUIT						( 116 )			//Комбенизон убежища синий
# define CRTYPE_BLD_JUMPSUIT_BLACK					( 116 )			//Комбенизон убежища черный
# define CRTYPE_BLD_JUMPSUIT_LIGHT_GREEN			( 116 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_BLD_JUMPSUIT_RED					( 116 )			//Комбенизон убежища красный
# define CRTYPE_BLD_JUMPSUIT_SAND					( 116 )			//Комбенизон убежища песчаный
# define CRTYPE_BLD_JUMPSUIT_GRAY					( 116 )			//Комбенизон убежища серый
# define CRTYPE_BLD_LEATHER_JACKET					( 118 )			//Куртка кожаная
# define CRTYPE_BLD_LEATHER_COAT					( 118 )			//Плащ кожаный
# define CRTYPE_BLD_LEATHER_ARMOR_MK1				( 117 )			//Броня кожаная МК1
# define CRTYPE_BLD_LEATHER_ARMOR_MK2				( 168 )			//Броня кожаная МК2
# define CRTYPE_BLD_LEATHER_ARMOR_BLUE				( 126 )			//Броня кожаная огнеупорная
# define CRTYPE_BLD_LEATHER_ARMOR_CAMMO				( 203 )			//Броня кожаная серая каммо
# define CRTYPE_BLD_LEATHER_ARMOR_RED				( 210 )			//Броня кожаная красная
# define CRTYPE_BLD_METAL_ARMOR						( 338 )			//Броня металлическая МК1, ржавая
# define CRTYPE_BLD_METAL_ARMOR_MK2					( 119 )			//Броня металлическая МК2, полированная
# define CRTYPE_BLD_METAL_TESLA						( 342 )			//Броня металлическая, тесла

// Негр
# define CRTYPE_BLACK_TRIBAL						( 140 )			//Дикарь лысый, голый
# define CRTYPE_BLACK_JUMPSUIT						( 142 )			//Комбенизон убежища синий
# define CRTYPE_BLACK_JUMPSUIT_BLACK				( 142 )			//Комбенизон убежища черный
# define CRTYPE_BLACK_JUMPSUIT_LIGHT_GREEN			( 142 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_BLACK_JUMPSUIT_RED					( 142 )			//Комбенизон убежища красный
# define CRTYPE_BLACK_JUMPSUIT_SAND					( 142 )			//Комбенизон убежища песчаный
# define CRTYPE_BLACK_JUMPSUIT_GRAY					( 142 )			//Комбенизон убежища серый
# define CRTYPE_BLACK_LEATHER_JACKET				( 144 )			//Куртка кожаная
# define CRTYPE_BLACK_LEATHER_COAT					( 144 )			//Плащ кожаный
# define CRTYPE_BLACK_LEATHER_ARMOR_MK1				( 146 )			//Броня кожаная МК1
# define CRTYPE_BLACK_LEATHER_ARMOR_MK2				( 146 )			//Броня кожаная МК2
# define CRTYPE_BLACK_LEATHER_ARMOR_BLUE			( 196 )			//Броня кожаная огнеупорная
# define CRTYPE_BLACK_LEATHER_ARMOR_CAMMO			( 206 )			//Броня кожаная серая каммо
# define CRTYPE_BLACK_LEATHER_ARMOR_RED				( 213 )			//Броня кожаная красная
# define CRTYPE_BLACK_METAL_ARMOR					( 9 )			//Броня металлическая МК1, ржавая
# define CRTYPE_BLACK_METAL_ARMOR_MK2				( 9 )			//Броня металлическая МК2, полированная
# define CRTYPE_BLACK_METAL_TESLA					( 9 )			//Броня металлическая, тесла

// Жирный мужик
# define CRTYPE_FAT_TRIBAL							( 91 )			//Жиробас, Вик
# define CRTYPE_FAT_JUMPSUIT						( 91 )			//Комбенизон убежища синий
# define CRTYPE_FAT_JUMPSUIT_BLACK					( 91 )			//Комбенизон убежища черный
# define CRTYPE_FAT_JUMPSUIT_LIGHT_GREEN			( 91 )			//Комбенизон убежища светло-зеленый
# define CRTYPE_FAT_JUMPSUIT_RED					( 91 )			//Комбенизон убежища красный
# define CRTYPE_FAT_JUMPSUIT_SAND					( 91 )			//Комбенизон убежища песчаный
# define CRTYPE_FAT_JUMPSUIT_GRAY					( 91 )			//Комбенизон убежища серый
# define CRTYPE_FAT_LEATHER_JACKET					( 160 )			//Куртка кожаная
# define CRTYPE_FAT_LEATHER_COAT					( 160 )			//Плащ кожаный
# define CRTYPE_FAT_LEATHER_ARMOR_MK1				( 161 )			//Броня кожаная МК1
# define CRTYPE_FAT_LEATHER_ARMOR_MK2				( 161 )			//Броня кожаная МК2
# define CRTYPE_FAT_LEATHER_ARMOR_BLUE				( 161 )			//Броня кожаная огнеупорная
# define CRTYPE_FAT_LEATHER_ARMOR_CAMMO				( 205 )			//Броня кожаная серая каммо
# define CRTYPE_FAT_LEATHER_ARMOR_RED				( 212 )			//Броня кожаная красная
# define CRTYPE_FAT_METAL_ARMOR						( 162 )			//Броня металлическая МК1, ржавая
# define CRTYPE_FAT_METAL_ARMOR_MK2					( 162 )			//Броня металлическая МК2, полированная
# define CRTYPE_FAT_METAL_TESLA						( 162 )			//Броня металлическая, тесла


// Роботы
# define CRTYPE_ROBOT								( 66 )			//Робот-охранник
# define CRTYPE_ROBOBRAIN							( 53 )			//Робомозг
# define CRTYPE_ROBOEYE								( 54 )			//Робоглаз
# define CRTYPE_TURRET_LASER						( 90 )			//Лазерная турель
# define CRTYPE_TURRET_MINIGUN						( 101 )			//Пулеметная турель
# define CRTYPE_ROBOT_HANDY							( 17 )			//Мистер Помошник

// Социальные скины Муж
# define CRTYPE_BOY         					  ( 27 )		//Пацан
# define CRTYPE_BOMM        					  ( 31 )		//Отшельник в робе
# define CRTYPE_YELLOW_M    					  ( 40 )		//мужик в желтой рубахе
# define CRTYPE_NIGGER_RED  					  ( 39 )		//нигер в красной рубахе
# define CRTYPE_BALD_GREEN  					  ( 41 )		//лысый в зеленом свитере
# define CRTYPE_DWARF      		    			  ( 42 )		//карлик
# define CRTYPE_THIN       	  				      ( 43 )		//худой алкаш
# define CRTYPE_DREDMAN       				      ( 45 )		//патлач с синими штанами
# define CRTYPE_CAPMAN        				      ( 48 )		//инженер в кепке
# define CRTYPE_BUTCHER       				      ( 57 )		//мясник
# define CRTYPE_TRIBAL_M      				      ( 64 )		//дикарь с копной волос
# define CRTYPE_RICH_M        				      ( 72 )		//мужчина в пиджаке
# define CRTYPE_BRUISER_BLUE  				      ( 77 )		//синий громила
# define CRTYPE_BRUISER_GRAY  				      ( 78 )		//серый громила
# define CRTYPE_ASIAT_M       				      ( 83 )		//азиат в рванье
# define CRTYPE_POLICE  				      	  ( 87 )		//полицейский
# define CRTYPE_TEENAGER  				          ( 88 )		//молодой человек
# define CRTYPE_SCIENTIST 				          ( 89 )		//ученый
# define CRTYPE_ASIAT_RED 				          ( 92 )		//азиат в кожанке и красной одежде
# define CRTYPE_ASIAT_BLUE				          ( 93 )		//азиат в кожанке и синей одежде
# define CRTYPE_MACHO 				              ( 95 )		//мачо в куртке
# define CRTYPE_WRESTLER 				          ( 96 )		//боксёр
# define CRTYPE_OLD_MAN 				          ( 98 )		//зажиточный старик
# define CRTYPE_PANTS_YELLOW_BOLD 				  ( 130 )		//голый торс, желтые штаны, лысый
# define CRTYPE_PANTS_YELLOW_HAIRY				  ( 134 )		//голый торс, желтые штаны, патлач
# define CRTYPE_PANTS_BLACK 				      ( 131 )		//голый торс, черные штаны
# define CRTYPE_PANTS_ALL_BLACK 				  ( 132 )		//загорелый мулат с голым торсом и черными штанами
# define CRTYPE_DREDMAN_ARMORED 				  ( 133 )		//патлач в более толстой броне
# define CRTYPE_TWO_ARMS_JACKET_REGULAR 		  ( 138 )		//двурукая косуха, обычный
# define CRTYPE_TWO_ARMS_JACKET_HAIRY 		      ( 139 )		//двурукая косуха, патлач
# define CRTYPE_TWO_ARMS_JACKET_HAIRY_BLOND       ( 197 )		//двурукая косуха, патлач блондин
# define CRTYPE_COAT_GUY  				          ( 169 )		//парень в пальто
# define CRTYPE_BLACK_COAT_GUY  				  ( 198 )		//парень в черном пальто
# define CRTYPE_BLUE_SUIT 				          ( 171 )		//парень в синем кителе
# define CRTYPE_DREDMAN_YELLOW  		          ( 172 )		//патлач в более толстой броне, теперь с желтыми штанами.
# define CRTYPE_DREDMAN_DARK_YELLOW 	          ( 173 )		//более смуглая версия патлача в более толстой броне, с желтыми штанами.
# define CRTYPE_PRIMAL_MOHAWK_LEATHER_JACKET      ( 343 )		//Мужик - дикарь - иракез кожанка
# define CRTYPE_PRIMAL_MOHAWK_LEATHER_ARMOR       ( 344 )		//Мужик - дикарь - иракез кожаная броня
# define CRTYPE_PRIMAL_MOHAWK_METALL_ARMOR        ( 345 )		//Мужик - дикарь - иракез металл
# define CRTYPE_PRIMAL_MOHAWK_COMBAT_ARMOR        ( 346 )		//Мужик - дикарь - иракез ББ
//# define CRTYPE_FAT_CA_MK1 		                  ( 351 )		//Жирный мужик в ББ МК1

// Социальные скины Жен
# define CRTYPE_GIRL								( 103 )			//девочка
# define CRTYPE_YELLOW_F							( 33 )			//желтое платье
# define CRTYPE_METAL_YELLOW_F						( 35 )			//баба в железке с желтыми штанами
# define CRTYPE_METAL_PINK_F						( 35 )			//баба в железке с фиолетовыми штанами
# define CRTYPE_TANDI								( 36 )			//танди
# define CRTYPE_WHORE								( 37 )			//шлюха из Рено
# define CRTYPE_REDHEADED_F							( 38 )			//красноволовая пижамиха
# define CRTYPE_TRIBAL_F							( 63 )			//дикарка с копной волос
# define CRTYPE_RICH_F								( 73 )			//женщина в платье
# define CRTYPE_VAULT_F								( 74 )			//женщина в пижаме без номера
# define CRTYPE_BLACK_F								( 83 )			//Линетт, негритянка в пижаме
# define CRTYPE_ASIAT_F								( 94 )			//азиатка в рванье
# define CRTYPE_TANDI_BLACK							( 164 )			//танди, покрасившая волосы в черный
# define CRTYPE_DW_BLACK_AND_RED_LEATHER_ARMOR_F	( 378 )			//Стандартная баба, кожаная броня красная с черным
# define CRTYPE_DW_TWO_HAND_LEATHER_JACKET_F		( 379 )			//Стандартная баба, кожаная куртка два рукава
# define CRTYPE_DW_METAL_TESLA_ORANGE_F				( 380 )			//Стандартная баба, кожаная куртка два рукава


// Брони Муж
# define CRTYPE_PA_HEADLESS  				      ( 30 )		//ПА без шлема
# define CRTYPE_PA  				              ( 1 )			//ПА
# define CRTYPE_PA_HARDY 				          ( 193 )		//ПА закаленная
# define CRTYPE_PA_OXIDE 				          ( 194 )		//ПА ржавая
# define CRTYPE_PRIMAL_MOHAWK_POWER_ARMOR         ( 347 )		//Мужик - дикарь - иракез ПА
# define CRTYPE_APA  				              ( 71 )		//АПА
# define CRTYPE_CA_ENCLAVE_M  				      ( 361 )   	//Боевая броня "Анклава"
# define CRTYPE_CA_M	 				          ( 10 )		//ББ
# define CRTYPE_CA_FOR_NIGGERS  			      ( 150 )		//ББшка с нигером внутри
# define CRTYPE_CA_BLUE_M  				          ( 104 )		//Полицейская синяя ББ
# define CRTYPE_CA_DARK_M  				          ( 112 )		//Кустарная ББ
# define CRTYPE_CA_BALD  				          ( 158 )		//ББшка для лысых
# define CRTYPE_CA_BALD_BLACK  				      ( 199 )		//ББшка для лысых черная
# define CRTYPE_CA_CLAW_M  				          ( 177 )		//Боевая броня "Коготь"
# define CRTYPE_CA_SAND_1_M  				      ( 178 )		//Боевая броня "Пустынник" МК1
# define CRTYPE_CA_SAND_2_M  				      ( 179 )		//Боевая броня "Пустынник" МК2
# define CRTYPE_CA_SAND_3_M  				      ( 180 )		//Боевая броня "Пустынник" МК3
# define CRTYPE_CA_NIGHT_M  				      ( 181 )		//Боевая броня "Ночь"
# define CRTYPE_CA_MKII_M  				     	  ( 182 )		//Боевая броня МК2
# define CRTYPE_CA_REN_MKI_M  				      ( 183 )		//Боевая броня "Ренегат" МК1
# define CRTYPE_CA_REN_MKII_M  				      ( 184 )		//Боевая броня "Ренегат" МК2
# define CRTYPE_EXO_BROWN						  ( 241 )		//Экзоскелет коричневый
# define CRTYPE_EXO_GRAY						  ( 242 )		//Экзоскелет серый
# define CRTYPE_EXO_GOLD						  ( 302 )		//Экзоскелет золотой
# define CRTYPE_PA_CLAW_M          				  ( 304 )		//Силовая броня "Коготь"
# define CRTYPE_RESEARCH_ARMOR_M                  ( 296 )		//Иследовательский доспех
# define CRTYPE_PA_RAIDER                         ( 295 )		//Силовая броня "Рейдерская"
# define CRTYPE_PA_HYDROID_MK2_M                  ( 306 )		//Силовая броня "Гидройд" МК2
# define CRTYPE_PA_HYDROID_M                      ( 302 )   	//Силовая броня "Гидройд" МК1

// Брони Жен
# define CRTYPE_CA_ENCLAVE_F  				      ( 360 )   	//Боевая броня "Анклава"
# define CRTYPE_CA_F	 				          ( 3 )			//ББ
# define CRTYPE_CA_BLUE_F 				          ( 105 )		//Полицейская синяя ББ
# define CRTYPE_CA_DARK_F  				          ( 111 )		//Кустарная ББ
# define CRTYPE_CA_CLAW_F  				          ( 185 )		//Боевая броня "Коготь"
# define CRTYPE_CA_SAND_1_F  				      ( 186 )		//Боевая броня "Пустынник" МК1
# define CRTYPE_CA_SAND_2_F  				      ( 187 )		//Боевая броня "Пустынник" МК2
# define CRTYPE_CA_SAND_3_F  				      ( 188 )		//Боевая броня "Пустынник" МК3
# define CRTYPE_CA_NIGHT_F  				      ( 189 )		//Боевая броня "Ночь"
# define CRTYPE_CA_MKII_F  				     	  ( 190 )		//Боевая броня МК2
# define CRTYPE_CA_REN_MKI_F  				      ( 191 )		//Боевая броня "Ренегат" МК1
# define CRTYPE_CA_REN_MKII_F  				      ( 192 )		//Боевая броня "Ренегат" МК2
# define CRTYPE_PA_CLAW_F          				  ( 305 )		//Силовая броня "Коготь"
# define CRTYPE_RESEARCH_ARMOR_F                  ( 297 )		//Иследовательский доспех
# define CRTYPE_PA_HYDROID_MK2_F                  ( 307 )		//Силовая броня "Гидройд" МК2
# define CRTYPE_PA_HYDROID_F                      ( 303 )   	//Силовая броня "Гидройд" МК1

// Мантии
# define CRTYPE_ROBE_PURPLE				          ( 2 )			//Пурпурная мантия
# define CRTYPE_ROBE_BLACK				          ( 84 )		//Серая мантия
# define CRTYPE_ROBE_SAND  				          ( 122 )		//Песочная мантия
# define CRTYPE_ROBE_BLUE  				          ( 26 )		//Синяя мантия
# define CRTYPE_ROBE_BROWN  			          ( 56 )		//Светло-коричневая мантия
# define CRTYPE_ROBE_DARK_GREEN  			      ( 159 )		//Зеленая мантия
# define CRTYPE_ROBE_RED_RITUAL  			      ( 225 )		//Красная ритуальная мантия
# define CRTYPE_ROBE_BLACK_RITUAL  			      ( 226 )		//Черная ритуальная мантия
# define CRTYPE_ROBE_DARK_BLACK  			      ( 317 )		//Черная мантия
# define CRTYPE_ROBE_DARK_RED  			          ( 318 )		//Темно-красная мантия
# define CRTYPE_ROBE_RED  			              ( 319 )		//Светло-красная мантия
# define CRTYPE_ROBE_DARK_BROWN  			      ( 320 )		//Темно-коричневая мантия
# define CRTYPE_ROBE_DARK_BLUE  			      ( 321 )		//Темно-синяя мантия
# define CRTYPE_ROBE_ATOM_CHILD  			      ( 322 )		//Одеяние Детей Атома

// Мутанты
# define CRTYPE_GHOUL_GREEN  			          ( 28 )		//обычный гуль
# define CRTYPE_GHOUL_WHITE  			          ( 29 )		//светящийся гуль
# define CRTYPE_GHOUL_AVERAGE  			          ( 137 )		//не очень светящийся гуль
# define CRTYPE_GHOUL_GRAY  			          ( 155 )		//серый гуль
# define CRTYPE_GHOUL_RUNNING  			          ( 79 )		//бегающий гуль (ленни)
# define CRTYPE_GHOUL_RUNNING_GREEN  	          ( 174 )		//бегающий гуль (ленни), зелёный
# define CRTYPE_GHOUL_RUNNING_GRAY 		          ( 175 )		//бегающий гуль (ленни), серый
# define CRTYPE_SUPERMUTE_NORMAL  		          ( 21 )		//обычный супермут
# define CRTYPE_SUPERMUTE_JACKET  	 	          ( 20 )		//кожанка для супермутов
# define CRTYPE_SUPERMUTE_METAL  			      ( 114 )		//металка для супермутов
# define CRTYPE_SUPERMUTE_METAL_BLACK 		      ( 170 )		//металка для супермутов, моднявая

// Прочие
# define CRTYPE_VAULT_BOY                         ( 249 )		//Кукла Волт-бой
# define CRTYPE_SMALL_ROBE						  ( 99 )		//Роба смертокогтя-Гориса






// 3d critters
# define CRTYPE_3D_MALE_NORMAL                    ( 290 )
# define CRTYPE_3D_MALE_WIRY                      ( 291 )
# define CRTYPE_3D_MALE_STRONG                    ( 292 )
# define CRTYPE_3D_MALE_FAT                       ( 293 )
# define CRTYPE_3D_MALE_SKELETON                  ( 294 )
# define CRTYPE_3D_FEMALE_NORMAL                  ( 295 )
# define CRTYPE_3D_FEMALE_WIRY                    ( 296 )
# define CRTYPE_3D_FEMALE_STRONG                  ( 297 )
# define CRTYPE_3D_FEMALE_FAT                     ( 298 )
# define CRTYPE_3D_FEMALE_SKELETON                ( 299 )
# define CRTYPE_3D_ANT                            ( 300 )
# define CRTYPE_3D_ANT_QUEEN                      ( 301 )
# define CRTYPE_3D_BAT                            ( 302 )
# define CRTYPE_3D_BEETLE                         ( 303 )
# define CRTYPE_3D_CENTIPEDE                      ( 304 )
# define CRTYPE_3D_COUGAR                         ( 305 )
# define CRTYPE_3D_COW                            ( 306 )
# define CRTYPE_3D_DEATHCLAW                      ( 307 )
# define CRTYPE_3D_DESERT_STALKER                 ( 308 )
# define CRTYPE_3D_DOG                            ( 309 )
# define CRTYPE_3D_GILA                           ( 310 )
# define CRTYPE_3D_MANTRAP                        ( 311 )
# define CRTYPE_3D_RAD_TOAD                       ( 312 )
# define CRTYPE_3D_RAT                            ( 313 )
# define CRTYPE_3D_THORN_SLINGER                  ( 314 )
# define CRTYPE_3D_WASP_GIANT                     ( 315 )
# define CRTYPE_3D_WEEDLING                       ( 316 )




// Tactics
# define CRTYPE_TACTICS_RHUMANOID                 ( 460 )


// Arcanum
# define CRTYPE_ARCANUM_GEN_CR_BEGIN              ( 600 )
# define CRTYPE_ARCANUM_GEN_CR_END                ( 699 )

// Global map events
#define GLOBAL_PROCESS_MOVE                      ( 0 ) // Called every __GlobalMapMoveTime
#define GLOBAL_PROCESS_ENTER                     ( 1 )
#define GLOBAL_PROCESS_START_FAST                ( 2 )
#define GLOBAL_PROCESS_START                     ( 3 )
#define GLOBAL_PROCESS_SET_MOVE                  ( 4 )
#define GLOBAL_PROCESS_STOPPED                   ( 5 )
#define GLOBAL_PROCESS_NPC_IDLE                  ( 6 )    // Called every __CritterIdleTick
#define GLOBAL_PROCESS_KICK                      ( 7 )
#define GLOBAL_MAP_BASE_SPEED                    ( 2.0f ) // Base speed, 2 pixels per second

#define ZONE_COUNT_X                             ( 7 )
#define ZONE_COUNT_Y                             ( 12 )
#define ZONE_LENGTH                              ( 50 )

// Global map walk types
#define GM_WALK_GROUND                           ( 0 )
#define GM_WALK_FLY                              ( 1 )
#define GM_WALK_WATER                            ( 2 )

// AngelScript properties
#define AS_ALLOW_UNSAFE_REFERENCES               ( 1 )  // true
#define AS_OPTIMIZE_BYTECODE                     ( 2 )  // true
#define AS_COPY_SCRIPT_SECTIONS                  ( 3 )  // true
#define AS_MAX_STACK_SIZE                        ( 4 )  // 0 (unlimited)
#define AS_USE_CHARACTER_LITERALS                ( 5 )  // false
#define AS_ALLOW_MULTILINE_STRINGS               ( 6 )  // false
#define AS_ALLOW_IMPLICIT_HANDLE_TYPES           ( 7 )  // false
#define AS_BUILD_WITHOUT_LINE_CUES               ( 8 )  // false
#define AS_INIT_GLOBAL_VARS_AFTER_BUILD          ( 9 )  // true
#define AS_REQUIRE_ENUM_SCOPE                    ( 10 ) // false
#define AS_SCRIPT_SCANNER                        ( 11 ) // 0
#define AS_INCLUDE_JIT_INSTRUCTIONS              ( 12 ) // false
#define AS_STRING_ENCODING                       ( 13 ) // 0 (ascii)
#define AS_PROPERTY_ACCESSOR_MODE                ( 14 ) // 0 disable, 1 app registered only, 2 app and script created (default)

// Item data masks
#define ITEM_DATA_MASK_CHOSEN                    ( 0 )
#define ITEM_DATA_MASK_CRITTER                   ( 1 )
#define ITEM_DATA_MASK_CRITTER_EXT               ( 2 )
#define ITEM_DATA_MASK_CONTAINER                 ( 3 )
#define ITEM_DATA_MASK_MAP                       ( 4 )

// Radio
// Flags, Item/ItemCl::RadioFlags
#define RADIO_DISABLE_SEND                       ( 0x0001 ) // Hardcoded
#define RADIO_DISABLE_RECV                       ( 0x0002 ) // Hardcoded
#define RADIO_DISABLE_SHIFT_SEND                 ( 0x0100 )
#define RADIO_DISABLE_SHIFT_RECV                 ( 0x0200 )
#define RADIO_DISABLE_SHIFT_BC_SEND              ( 0x0400 )
#define RADIO_DISABLE_SHIFT_BC_RECV              ( 0x0800 )
#define RADIO_DISABLE_SHIFT_CHANNEL              ( 0x1000 )
// Broadcast, Item/ItemCl::RadioBroadcastSend/RadioBroadcastRecv, Hardcoded
#define RADIO_BROADCAST_WORLD                    ( 0 )                   // Send/recv in all world
#define RADIO_BROADCAST_MAP                      ( 20 )                  // Send/recv only on one map
#define RADIO_BROADCAST_LOCATION                 ( 40 )                  // Send/recv only on one location
#define RADIO_BROADCAST_ZONE                     # (x)   ( 100 + ( x ) ) // Send/recv only in x (1..100) zones radius on global map
#define RADIO_BROADCAST_FORCE_ALL                ( 250 )                 // Force send/recv in any place

// Item uses
#define USE_PRIMARY                              ( 0 )
#define USE_SECONDARY                            ( 1 )
#define USE_THIRD                                ( 2 )
#define USE_RELOAD                               ( 3 )
#define USE_USE                                  ( 4 )
#define MAX_USES                                 ( 3 )

// New defaults
#define DEFAULT_WAIT_TIME						 (1200) // ms
#define DEFAULT_AP_SKILL 						 (30) // APs
#define DEFAULT_AP_USE							 (0)
#define DEFAULT_AP_ACTION						 (20)
#define DEFAULT_AP_RELOAD						 (2)
#define DEFAULT_EXPLOSION_RADIUS				 (3)

// AP Cost multiplicators for Traits & Perks
#define QUICK_POCKETS_AP_MUL					 (0.8)
#define FAST_RELOAD_AP_MUL						 (0.85)
#define BROF_AP_MUL								 (0.85)
#define BHTH_AP_MUL								 (0.85)
#define FAST_SHOT_AP_MUL						 (0.85)

// Critter Stats Constants - Formulas.fos + Parameters.fos
	// SPECIAL-independent stats
#define APPOINTS_BASE                            ( 100 )
#define APREGEN_BASE							 ( 120 )  // Base amount of action points regenerated, divide by 100 = 1.2 APs.
#define HITPOINTS_BASE							 ( 120 )
#define ARMOR_CLASS_BASE						 ( 0 )
#define HEALINGRATE_BASE						 ( 3 )
#define NORMAL_RESIST_BASE						 ( 0 )
#define MELEE_DAMAGE_BASE						 ( 3 )
#define CW_BASE						 			 ( 15 )
#define BASE_AP									 ( 100 )
#define AP_DIVIDER								 ( 100 )
#define AP_REGEN_TIME							 ( 1000 ) // time in real ms
	// Agility
#define APREGEN_PER_AGI						     ( 45 )   // Amount of action points regenerated per Agility point, divided by 100 = 0.45 AP.
#define ARMORCLASS_PER_AGI						 ( 5 )
	// Strength
#define HITPOINTS_PER_STR						 ( 3 )
#define CW_PER_STR                     			 ( 10 )
#define MELEE_DAMAGE_PER_STR 				     ( 2 )
	// Endurance
#define HITPOINTS_PER_END						 ( 5 )
#define APREGEN_PER_END						     ( 20 )
#define HEALINGRATE_PER_END						 ( 1 )
#define POISON_RESIST_PER_END					 ( 5 )
#define RADIATION_RESIST_PER_END				 ( 2 )
	// Perception
#define SEQUENCE_PER_PE							 ( 3 )
//#define FIELDOFVIEW_PER_PE						 ( 4 )
	// Luck
#define CRITCHANCE_PER_LUCK						 ( 2 )
// Traits
	// TRAIT_HEAVY_HANDED
#define HEAVY_HANDED_MELEE_DAMAGE_BONUS			 ( 1 )
#define HEAVY_HANDED_AP_REGEN_MALUS				 ( 25 ) // Float value, divide by 100 = 0.15 AP Regen malus
#define HEAVY_HANDED_CRIT_MALUS					 ( 30 )
	// TRAIT_BRUISER
#define BRUISER_MAX_AP_MALUS			         ( 25 )
#define BRUISER_STRENGTH_BONUS					 ( 3 )
	// TRAIT_SMALL_FRAME
#define SMALL_FRAME_AGI_BONUS					 ( 1 )
#define SMALL_FRAME_CW_MALUS_DIV			     ( 4 )
#define SMALL_FRAME_CW_BONUS					 ( 5000 )
	// TRAIT_FINESSE
#define FINESSE_CRITCHANCE_BONUS				 ( 10 )
	// TRAIT_KAMIKAZE
#define KAMIKAZE_SEQUENCE_BONUS					 ( 25 )

// Skills formulas, not used yet!
#define SMALL_GUNS_BASE                          ( 5 )
#define SMALL_GUNS_PER_AGI                       ( 4 )
#define BIG_GUNS_BASE                            ( 0 )
#define BIG_GUNS_PER_AGI                         ( 2 )
#define ENERGY_WEAPONS_BASE                      ( 0 )
#define ENERGY_WEAPONS_PER_AGI                   ( 2 )
#define UNARMED_BASE			                 ( 30 )
#define UNARMED_PER_STATS		                 ( 2 )
#define MELEE_WEAPONS_BASE                       ( 20 )
#define MELEE_WEAPONS_PER_STATS                  ( 2 )       
#define THROWING_BASE			                 ( 0 )
#define THROWING_PER_AGI                         ( 4 )
#define FIRST_AID_BASE			                 ( 0 )
#define FIRST_AID_PER_STAT		                 ( 2 )
#define DOCTOR_BASE		                         ( 5 )
#define SNEAK_BASE		                         ( 5 )
#define SNEAK_PER_AGI	                         ( 3 )
#define LOCKPICK_BASE                            ( 10 )
#define STEAL_BASE                               ( 0 )
#define STEAL_PER_AGI	                         ( 3 )
#define TRAPS_BASE                               ( 10 )
#define SCIENCE_BASE	                         ( 0 )
#define SCIENCE_PER_INT                          ( 4 )
#define REPAIR_BASE                              ( 0 )
#define REPAIR_PER_INT                           ( 3 )
#define SPEECH_BASE                              ( 0 )
#define SPEECH_PER_CHA                           ( 5 )
#define BARTER_BASE                              ( 0 )
#define BARTER_PER_CHA                           ( 4 )
#define GAMBLING_BASE                            ( 0 )
#define GAMBLING_PER_STAT                        ( 2 )
#define OUTDOORSMAN_BASE                         ( 0 )
#define OUTDOORSMAN_PER_STAT                     ( 2 )

// Weapon calibers
#define CALIBER_NONE                             ( 0 )
#define CALIBER_ROCKET                           ( 1 )
#define CALIBER_FLAMETHROWER_FUEL                ( 2 )
#define CALIBER_C_ENERGY_CELL                    ( 3 )
#define CALIBER_D_ENERGY_CELL                    ( 4 )
#define CALIBER_223                              ( 5 )
#define CALIBER_5MM                              ( 6 )
#define CALIBER_40                               ( 7 )
#define CALIBER_10MM                             ( 8 )
#define CALIBER_44                               ( 9 )
#define CALIBER_14MM                             ( 10 )
#define CALIBER_12_GAUGE                         ( 11 )
#define CALIBER_9MM                              ( 12 )
#define CALIBER_BB                               ( 13 )
#define CALIBER_45                               ( 14 )
#define CALIBER_2MM                              ( 15 )
#define CALIBER_4_7MM_CASELESS                   ( 16 )
#define CALIBER_HN_NEEDLER                       ( 17 )
#define CALIBER_7_62MM                           ( 18 )
#define CALIBER_700_NITRO_EXPRESS                ( 19 )

// Geomtry
#define GEOMETRY_FALLOUT                         ( 0 )
#define GEOMETRY_TACTICS                         ( 1 )
#define GEOMETRY_ARCANUM                         ( 2 )

// Constants collections
#define CONSTANTS_PARAM                          ( 0 )
#define CONSTANTS_ITEM                           ( 1 )
#define CONSTANTS_DEFINE                         ( 2 )
#define CONSTANTS_PICTURE                        ( 3 )
#define CONSTANTS_HASH                           ( 4 )

// Game images
#define IMAGE_RELIEF                             ( 0 ) // Global map relief

// Paths
// Client and mapper paths
#define PT_ROOT                                  ( 0 )
#define PT_DATA                                  ( 1 )
#define PT_ART                                   ( 2 )
#define PT_ART_CRITTERS                          ( 3 )
#define PT_ART_INTRFACE                          ( 4 )
#define PT_ART_INVEN                             ( 5 )
#define PT_ART_ITEMS                             ( 6 )
#define PT_ART_MISC                              ( 7 )
#define PT_ART_SCENERY                           ( 8 )
#define PT_ART_SKILLDEX                          ( 9 )
#define PT_ART_SPLASH                            ( 10 )
#define PT_ART_TILES                             ( 11 )
#define PT_ART_WALLS                             ( 12 )
#define PT_TEXTURES                              ( 13 )
#define PT_EFFECTS                               ( 14 )
#define PT_SND_MUSIC                             ( 16 )
#define PT_SND_SFX                               ( 17 )
#define PT_SCRIPTS                               ( 18 )
#define PT_VIDEO                                 ( 19 )
#define PT_TEXTS                                 ( 20 )
#define PT_SAVE                                  ( 21 )
#define PT_FONTS                                 ( 22 )
#define PT_CACHE                                 ( 23 )
// Server paths
#define PT_SERVER_ROOT                           ( 30 )
#define PT_SERVER_DATA                           ( 31 )
#define PT_SERVER_TEXTS                          ( 32 )
#define PT_SERVER_DIALOGS                        ( 33 )
#define PT_SERVER_MAPS                           ( 34 )
#define PT_SERVER_PRO_ITEMS                      ( 35 )
#define PT_SERVER_PRO_CRITTERS                   ( 36 )
#define PT_SERVER_SCRIPTS                        ( 37 )
#define PT_SERVER_SAVE                           ( 38 )
#define PT_SERVER_CLIENTS                        ( 39 )
#define PT_SERVER_BANS                           ( 40 )
// Other
#define PT_MAPPER_ROOT                           ( 45 )
#define PT_MAPPER_DATA                           ( 46 )

// Internal server commands
#define COMMAND_EXIT                             ( 1 )
#define COMMAND_MYINFO                           ( 2 )
#define COMMAND_GAMEINFO                         ( 3 )
#define COMMAND_CRITID                           ( 4 )
#define COMMAND_MOVECRIT                         ( 5 )
#define COMMAND_KILLCRIT                         ( 6 )
#define COMMAND_DISCONCRIT                       ( 7 )
#define COMMAND_TOGLOBAL                         ( 8 )
#define COMMAND_RESPAWN                          ( 9 )
#define COMMAND_PARAM                            ( 10 )
#define COMMAND_GETACCESS                        ( 11 )
#define COMMAND_ADDITEM                          ( 12 )
#define COMMAND_CRASH                            ( 13 )
#define COMMAND_ADDITEM_SELF                     ( 14 )
#define COMMAND_ADDNPC                           ( 15 )
#define COMMAND_ADDLOCATION                      ( 16 )
#define COMMAND_RELOADSCRIPTS                    ( 17 )
#define COMMAND_LOADSCRIPT                       ( 18 )
#define COMMAND_RELOAD_CLIENT_SCRIPTS            ( 19 )
#define COMMAND_RUNSCRIPT                        ( 20 )
#define COMMAND_RELOADLOCATIONS                  ( 21 )
#define COMMAND_LOADLOCATION                     ( 22 )
#define COMMAND_RELOADMAPS                       ( 23 )
#define COMMAND_LOADMAP                          ( 24 )
#define COMMAND_REGENMAP                         ( 25 )
#define COMMAND_RELOADDIALOGS                    ( 26 )
#define COMMAND_LOADDIALOG                       ( 27 )
#define COMMAND_RELOADTEXTS                      ( 28 )
#define COMMAND_RELOADAI                         ( 29 )
#define COMMAND_CHECKVAR                         ( 30 )
#define COMMAND_SETVAR                           ( 31 )
#define COMMAND_SETTIME                          ( 32 )
#define COMMAND_BAN                              ( 33 )
#define COMMAND_DELETE_ACCOUNT                   ( 34 )
#define COMMAND_CHANGE_PASSWORD                  ( 35 )
#define COMMAND_DROP_UID                         ( 36 )
#define COMMAND_LOG                              ( 37 )

// critter status flags
#define CR_STATUS_BLEED                          ( 0x001 )
#define CR_STATUS_STIMPAK_OVER                   ( 0x002 )
#define CR_STATUS_ILL                            ( 0x004 )
#define CR_STATUS_BLOOD_TOXIC                    ( 0x008 )
#define CR_STATUS_HEAVY_DMG                      ( 0x010 )
#define CR_STATUS_POWDER_OVER                    ( 0x020 )
#define CR_STATUS_ORG_DMG                        ( 0x060 )
#define CR_STATUS_BULLET_OVER                    ( 0x040 )

// firstaid item priority flags	is set use high tec , else low tec
// firstaid
#define HEAL_ANTISEPTIC                          ( 0x2 )
#define HEAL_HEALING                             ( 0x4 )
#define HEAL_BANDAGE                             ( 0x8 )

// doc
#define HEAL_MULTYTOOL                           ( 0x4 )
#define HEAL_SPLINT                              ( 0x8 )
#define HEAL_THREAD                              ( 0x10 )
#define HEAL_ANESTETIC                           ( 0x20 )

// inputbox flags
#define INPUTBOX_CLOSE_ON_ENTER                  ( 0x00000001 )
// #define INPUTBOX_CLOSE_ON_ENTER			(0x00000002)



#ifndef SKIP_PRAGMAS

// /
// / Global variables
// /

// Possible types:
// int8, int16, int32, int64, int,
// uint8, uint16, uint32, uint64, uint,
// bool, float, double, string.
// Default value is zero.
// To set start value use '=' after var name.
// This vars works like engine global vars.
// Also recommended use "__" prefix in var name.
# pragma globalvar "int  __GeometryType = 0" // See GEOMETRY_* constants, assigned in config.fos InitializeGeometry()
# pragma globalvar "uint __HitAimEyes  = 60"
# pragma globalvar "uint __HitAimHead  = 40"
# pragma globalvar "uint __HitAimGroin = 30"
# pragma globalvar "uint __HitAimTorso =  0"
# pragma globalvar "uint __HitAimArms  = 30"
# pragma globalvar "uint __HitAimLegs  = 20"
# pragma globalvar "uint __EncounterTime = 0" // Как часто пробовать создать энкаунтер, в миллисекундах

// TNF
# pragma globalvar "bool __Zombies  = false"

// /
// / Critter data parameters
// /

# pragma crdata "Stat           0 199"
# pragma crdata "Skill        200 217"
# pragma crdata "TagSkill     226 229"
# pragma crdata "Timeout      230 249"
# pragma crdata "Kill         260 280"
# pragma crdata "Perk         300 469"
# pragma crdata "Addiction    470 476"
# pragma crdata "Karma        480 497"
# pragma crdata "Damage       500 506"
# pragma crdata "Mode         510 549"
# pragma crdata "Trait        550 565"
# pragma crdata "Reputation   570 599"
// #pragma crdata "GoodEvilList 600 799"
# pragma crdata "Merc         800 829"

// /
// / Extended critter fields and methods
// /

# ifdef __SERVER
#  pragma bindfield "uint Critter::GlobalMapMoveCounter -> 0"

#  pragma bindfunc "bool Critter::IsInjured()    -> fonline_tnf.dll Critter_IsInjured   "
#  pragma bindfunc "bool Critter::IsDmgEye()     -> fonline_tnf.dll Critter_IsDmgEye    "
#  pragma bindfunc "bool Critter::IsDmgLeg()     -> fonline_tnf.dll Critter_IsDmgLeg    "
#  pragma bindfunc "bool Critter::IsDmgTwoLeg()  -> fonline_tnf.dll Critter_IsDmgTwoLeg "
#  pragma bindfunc "bool Critter::IsDmgArm()     -> fonline_tnf.dll Critter_IsDmgArm    "
#  pragma bindfunc "bool Critter::IsDmgTwoArm()  -> fonline_tnf.dll Critter_IsDmgTwoArm "
#  pragma bindfunc "bool Critter::IsAddicted()   -> fonline_tnf.dll Critter_IsAddicted  "
#  pragma bindfunc "bool Critter::IsOverweight() -> fonline_tnf.dll Critter_IsOverweight"

#  pragma bindfunc "void Critter::SetWorldPos(uint16 x, uint16 y) -> fonline_tnf.dll Critter_SetWorldPos" // pm added

//#  pragma bindfunc "bool Critter::SetAccess(int access) -> fonline_tnf.dll Critter_SetAccess"

#  pragma bindfunc "bool Item::Weapon_IsHtHAttack(uint8 mode)    -> fonline_tnf.dll Item_Weapon_IsHtHAttack   "
#  pragma bindfunc "bool Item::Weapon_IsGunAttack(uint8 mode)    -> fonline_tnf.dll Item_Weapon_IsGunAttack   "
#  pragma bindfunc "bool Item::Weapon_IsRangedAttack(uint8 mode) -> fonline_tnf.dll Item_Weapon_IsRangedAttack"

#  pragma bindfunc "int Map::GetScenParam(uint16 tx, uint16 ty, uint protoId, uint8 num) -> fonline_tnf.dll Map_GetScenParam"

// pm added
// #  pragma bindfunc "uint8 Item::GetDurability() -> fonline_tnf.dll Item_GetDurability"
// #  pragma bindfunc "uint8 Item::SetDurability(uint8 value) -> fonline_tnf.dll Item_SetDurability"
// #pragma bindfunc "uint Item::GetIndefineValue() -> fonline_tnf.dll Item_GetIndefineValue"
// #pragma bindfunc "uint Item::SetIndefineValue(uint16 value) -> fonline_tnf.dll Item_SetIndefineValue"
// #pragma bindfunc "uint Item::GetIndefineStat() -> fonline_tnf.dll Item_GetIndefineStat"
// #pragma bindfunc "bool Item::IsCanUseByIndefine(Critter& cr) -> fonline_tnf.dll Item_IsCanUseByIndefine"
// #pragma bindfunc "uint Item::ViewTimeEvent() -> fonline_tnf.dll Item_ViewTimeEvent"
// #pragma bindfunc "uint Item::CreateTimeEvent(uint16 identifier) -> fonline_tnf.dll Item_CreateTimeEvent"
#  pragma bindfunc "uint Item::SetMapPic(uint hash) -> fonline_tnf.dll Item_SetMapPic"

#  pragma bindfunc "uint Map::GetTile(uint16 tx, uint16 ty) -> fonline_tnf.dll Map_GetTile"
#  pragma bindfunc "uint Map::GetRoof(uint16 tx, uint16 ty) -> fonline_tnf.dll Map_GetRoof"
#  pragma bindfunc "bool Map::SetTile(uint16 tx, uint16 ty, uint picHash) -> fonline_tnf.dll Map_SetTile"
#  pragma bindfunc "bool Map::SetRoof(uint16 tx, uint16 ty, uint picHash) -> fonline_tnf.dll Map_SetRoof"

# endif

# ifdef __CLIENT

// used in dll
// important :)))
#  pragma globalvar "uint8 __CurrentAim			   = 0"

#  pragma bindfunc "bool CritterCl::IsInjured()    -> fonline_tnf_client.dll Critter_IsInjured  "
#  pragma bindfunc "bool CritterCl::IsDmgEye()     -> fonline_tnf_client.dll Critter_IsDmgEye   "
#  pragma bindfunc "bool CritterCl::IsDmgLeg()     -> fonline_tnf_client.dll Critter_IsDmgLeg   "
#  pragma bindfunc "bool CritterCl::IsDmgTwoLeg()  -> fonline_tnf_client.dll Critter_IsDmgTwoLeg"
#  pragma bindfunc "bool CritterCl::IsDmgArm()     -> fonline_tnf_client.dll Critter_IsDmgArm   "
#  pragma bindfunc "bool CritterCl::IsDmgTwoArm()  -> fonline_tnf_client.dll Critter_IsDmgTwoArm"
#  pragma bindfunc "bool CritterCl::IsAddicted()   -> fonline_tnf_client.dll Critter_IsAddicted "
#  pragma bindfunc "bool CritterCl::IsOverweight() -> fonline_tnf_client.dll Critter_IsOverweight"

#  pragma bindfunc "bool ItemCl::Weapon_IsHtHAttack(uint8 mode)    -> fonline_tnf_client.dll Item_Weapon_IsHtHAttack   "
#  pragma bindfunc "bool ItemCl::Weapon_IsGunAttack(uint8 mode)    -> fonline_tnf_client.dll Item_Weapon_IsGunAttack   "
#  pragma bindfunc "bool ItemCl::Weapon_IsRangedAttack(uint8 mode) -> fonline_tnf_client.dll Item_Weapon_IsRangedAttack"

#  pragma bindfunc "int GetScenParam(uint16 tx, uint16 ty, uint protoId, uint8 num) -> fonline_tnf_client.dll Map_GetScenParam"
#  pragma bindfunc "uint8 ItemCl::GetDurability() -> fonline_tnf_client.dll Item_GetDurability"
// pm added
// #pragma bindfunc "uint ItemCl::GetIndefineValue() -> fonline_tnf_client.dll Item_GetIndefineValue"
#  pragma bindfunc "void ItemCl::SetInvPic(uint hash) -> fonline_tnf_client.dll Item_SetInvPic"
// #pragma bindfunc "bool ItemCl::IsCanUseByIndefine(CritterCl& cr) -> fonline_tnf_client.dll Item_IsCanUseByIndefine"
// #pragma bindfunc "uint ItemCl::GetIndefineStat() -> fonline_tnf_client.dll Item_GetIndefineStat"



# endif

// /
// / Item prototypes fields
// /

// Whole size for data - 500 bytes
// Common
# pragma bindfield "const int    ProtoItem::MagicPower -> 0"
# pragma bindfield "const uint16 ProtoItem::IndefineValue -> 4"
# pragma bindfield "const uint16 ProtoItem::IndefineStat -> 6"
// Armor
# pragma bindfield "const uint   ProtoItem::Armor_CrTypeMale   -> 100"
# pragma bindfield "const uint   ProtoItem::Armor_CrTypeFemale -> 104"
# pragma bindfield "const int    ProtoItem::Armor_AC           -> 108"
# pragma bindfield "const uint   ProtoItem::Armor_Perk         -> 112"
# pragma bindfield "const int    ProtoItem::Armor_DRNormal     -> 116"
# pragma bindfield "const int    ProtoItem::Armor_DRLaser      -> 120"
# pragma bindfield "const int    ProtoItem::Armor_DRFire       -> 124"
# pragma bindfield "const int    ProtoItem::Armor_DRPlasma     -> 128"
# pragma bindfield "const int    ProtoItem::Armor_DRElectr     -> 132"
# pragma bindfield "const int    ProtoItem::Armor_DREmp        -> 136"
# pragma bindfield "const int    ProtoItem::Armor_DRExplode    -> 140"
# pragma bindfield "const int    ProtoItem::Armor_DTNormal     -> 144"
# pragma bindfield "const int    ProtoItem::Armor_DTLaser      -> 148"
# pragma bindfield "const int    ProtoItem::Armor_DTFire       -> 152"
# pragma bindfield "const int    ProtoItem::Armor_DTPlasma     -> 156"
# pragma bindfield "const int    ProtoItem::Armor_DTElectr     -> 160"
# pragma bindfield "const int    ProtoItem::Armor_DTEmp        -> 164"
# pragma bindfield "const int    ProtoItem::Armor_DTExplode    -> 168"
// Weapon
# pragma bindfield "const int    ProtoItem::Weapon_DmgType_0            -> 200"
# pragma bindfield "const int    ProtoItem::Weapon_DmgType_1            -> 204"
# pragma bindfield "const int    ProtoItem::Weapon_DmgType_2            -> 208"
# pragma bindfield "const uint   ProtoItem::Weapon_Anim2_0              -> 212"
# pragma bindfield "const uint   ProtoItem::Weapon_Anim2_1              -> 216"
# pragma bindfield "const uint   ProtoItem::Weapon_Anim2_2              -> 220"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMin_0             -> 224"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMin_1             -> 228"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMin_2             -> 232"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMax_0             -> 236"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMax_1             -> 240"
# pragma bindfield "const int    ProtoItem::Weapon_DmgMax_2             -> 244"
# pragma bindfield "const uint16 ProtoItem::Weapon_Effect_0             -> 248"
# pragma bindfield "const uint16 ProtoItem::Weapon_Effect_1             -> 250"
# pragma bindfield "const uint16 ProtoItem::Weapon_Effect_2             -> 252"
# pragma bindfield "const bool   ProtoItem::Weapon_Remove_0             -> 254"
# pragma bindfield "const bool   ProtoItem::Weapon_Remove_1             -> 255"
# pragma bindfield "const bool   ProtoItem::Weapon_Remove_2             -> 256"
# pragma bindfield "const uint   ProtoItem::Weapon_ReloadAp             -> 260"
# pragma bindfield "const int    ProtoItem::Weapon_UnarmedCriticalBonus -> 264"
# pragma bindfield "const uint   ProtoItem::Weapon_CriticalFailture     -> 268"
# pragma bindfield "const bool   ProtoItem::Weapon_UnarmedArmorPiercing -> 272"
// Server-specific shit, better move it later on to other places
# pragma bindfield "const uint8  ProtoItem::Item_Subtype			    -> 273"
# pragma bindfield "const uint16 ProtoItem::Windup_Time		            -> 274"
# pragma bindfield "const int    ProtoItem::Weapon_HearRadius           -> 276"
// Ammo                                                                 
# pragma bindfield "const int    ProtoItem::Ammo_AcMod                  -> 300"
# pragma bindfield "const int    ProtoItem::Ammo_DrMod                  -> 304"
# pragma bindfield "const uint   ProtoItem::Ammo_DmgMult                -> 308"
# pragma bindfield "const uint   ProtoItem::Ammo_DmgDiv                 -> 312"
// Other                                                                
# pragma bindfield "const uint16 ProtoItem::Food_Thrist                 -> 316"
# pragma bindfield "const uint16 ProtoItem::Food_Restore                -> 318"
# pragma bindfield "const uint	 ProtoItem::Food_Flags                  -> 320"
// Wait for it...                                                       
# pragma bindfield "const uint16 ProtoItem::Wait_Time_0                 -> 324"
# pragma bindfield "const uint16 ProtoItem::Wait_Time_1                 -> 326"
# pragma bindfield "const uint16 ProtoItem::Wait_Time_2                 -> 328"
# pragma bindfield "const uint16 ProtoItem::Wait_Time_3                 -> 330"
# pragma bindfield "const uint16 ProtoItem::Item_UseAp		            -> 332"
// Padding +2 bytes.

// Test function
# ifdef __SERVER
#  pragma bindfunc "void TestFunc(string&) -> fonline_test.dll TestFunc"
# endif
# ifdef __CLIENT
#  pragma bindfunc "void TestFunc(string&) -> fonline_test_client.dll TestFunc"
# endif

#endif // SKIP_PRAGMAS

// ////////////////////////////////
// FOnline Roleplay

// Бонусы от вторичных навыков при стрельбе.
#define SECONDARY_SKILLS_BONUS_CAP    ( 125 )
#define PID_WAYPOINT                  ( 1400 )

// Яйца и матки аркадников. Пошло звучит мля =/
#define TEAM_DEATHCLAW_METRA          ( 38 )
#define TEAM_ALIEN_METRA              ( 39 )
#define TEAM_FIREGECKO_METRA          ( 40 )
#define TEAM_CENTAUR_METRA            ( 41 )
// ///////////////////////////////////

#endif // __DEFINES__
