
enum FileCollectionType
{
	AvatarsCollection = 1
}

#ifdef __SERVER

const int Kbyte = 1024;
const int MegaByte = 1024*Kbyte;

const int PartSize = Kbyte; // Размер пакета который отправляется за одно обращение, скорость передачи равняется примерно размер пакета за пинг * 2

const int FileMaxSize = 512 * Kbyte;

const string[] AvatarsExt = { "bmp", "png", "jpg" };

void file_collection_download( Critter& critter, int type, const string&in md5, const string&in ext, uint filesize, int p0, int p1, int p2 )
{
	
}

int8 file_collection_download_reqest( Critter& critter, int type, uint16& speed, const string&in md5, const string&in ext, uint filesize, int p0, int p1, int p2 )
{
	if( type == FileCollectionType::AvatarsCollection )
	{	
		if( AvatarsExt.find( strlwr( ext ) ) == -1 )
			return -6;
			
		if( filesize > FileMaxSize )
		{
			speed = 0;
			return -5;
		}
		
		speed = PartSize;
		return 0;
	}
	
	return -7;
}

int file_collection_upload( Critter& critter, int type, const string&in md5, const string&in ext, uint filesize, int p0, int p1, int p2 )
{
	switch( type )
	{
		case (FileCollectionType::AvatarsCollection) :
		{
			return PartSize;
		}
		default: return 0;
	}
	
	return 0;
}

#endif
#ifdef __CLIENT

import void AvatarDownload( uint hash ) from "client_avatars";

void file_collection_download( int type, uint hash )
{
	switch( type )
	{
		case (FileCollectionType::AvatarsCollection):
		{
			AvatarDownload( hash );
		}
		default: break;
	}
}

#endif
