#ifndef FURNITURE
#define FURNITURE

#include "_utils.fos"
#include "furniture_h.fos"
#include "lockers_h.fos"
#include "plants_h.fos"
#include "item_h.fos"
#include "furnace_h.fos"
#include "smithing_h.fos"

import bool critter_use_item( Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param ) from "main";

FurnitureList@ furnitures;
void InitFurnitures()
{
	if( valid( furnitures ) )
	{
		return;
	}
	
	@furnitures = @CreateFurniture( "Furniture list")
	//					"name for script", 	Item Pid, pids of pivoted item arts
		.add( Furniture( "Portable workbench", PID_PORTABLE_WORKBENCH ).add( PID_WORKBENCH ) )
		.add( Furniture( "Wood chair", PID_CR_WOOD_CHAIR ).add( 2670 ).add( 2676 ).add( 2663 ) )
		.add( Furniture( "Comfortable chair", PID_CR_CMFRT_CHAIR ).add( 2672 ).add( 2677 ).add( 2662 ) )
		.add( Furniture( "Metal chair", PID_CR_METAL_CHAIR ).add(2673).add( 2674 ).add(2664) )
		.add( Furniture( "Cloth chair", PID_CR_RAGS_CHAIR ).add(2671).add( 2675 ).add(2665) )
		.add( Furniture( "Sleeping bag", PID_CR_SLP_BAG ).add( 2209 ) )
		.add( Furniture( "Matras", PID_CR_MTRS ).add( 2207 ) )
		.add( Furniture( "Double bed", PID_CR_BD_DBL_BED ).add( 2211 ) )
		.add( Furniture( "Single bed", PID_CR_JNK_BED ).add( 2212 ) )
		.add( Furniture( "Bunk", PID_CR_SUN_BED).add( 2949 ) )
		.add( Furniture( "Comfortable bed", PID_CR_WOOD_BED ).add( 2680 ) )
		.add( Furniture( "Luxury bed", PID_CR_LUX_BED ).add( 2681 ) )
		.add( Furniture( "Round wooden table", PID_CR_WOOD_TBL_GD ).add( 10706 ).add( 10707 ) )
		.add( Furniture( "Large metal table", PID_CR_MT_TBL_BG ).add( 2606 ) )
		.add( Furniture( "Large luxurious metal table", PID_CR_MT_TBL_BG_ALT ).add( 2607 ) )
		.add( Furniture( "Metal work desk", PID_CR_MT_TBL_WR ).add( 187 ) )
		.add( Furniture( "Rusted work desk", PID_CR_JNK_TBL_WR ).add( 184 ) )
		.add( Furniture( "Large wooden table", PID_CR_WOOD_TBL_DINNER ).add( 167 ) )
		.add( Furniture( "Wooden workdesk", PID_CR_WOOD_TBL_WR ).add( 8248 ) )
		.add( Furniture( "Crate", PID_CR_BOX ).add( 8254 ).add( 368 ).add( 370 ) )
		.add( Furniture( "Wooden wardrobe", PID_CR_WOOD_CAB_SMALL ).add( PID_BOOKCASE_14 ).add( PID_BOOKCASE_11 ).add( PID_BOOKCASE_13 ) )
		.add( Furniture( "Wooden shelves", PID_CR_WOOD_SHELF ).add( 247 ).add( 8260 ) )
		.add( Furniture( "Clean Locker", PID_CR_CLN_CAB ).add( PID_LOCKER_CLEAN_RIGHT ).add( PID_LOCKER_CLEAN_LEFT2 ).add( PID_LOCKER_CLEAN_RIGHT2 ) )
		.add( Furniture( "Rusty Locker", PID_CR_JNK_CAB ).add( PID_LOCKER_8 ).add( 8252 ).add( 8253 ) )
		.add( Furniture( "Mushroom bed", PID_MUSHBED_EMPTY ).add( 1628 ) )
		.add( Furniture( "Office chair", PID_CR_OF_CHAIR ).add( 2053 ).add( 2054 ).add( 2052 ) )
		.add( Furniture( "Office chair mk2", PID_CR_OF_CHAIR_2 ).add( 2057 ).add( 2059 ).add( 2060 ) )
		.add( Furniture( "Office chair mk3", PID_CR_OF_CHAIR_3 ).add( 16329 ).add( 16330 ).add( 16328 ) )
		.add( Furniture( "Handmade sofa", PID_CR_JNK_SOFA ).add( 2097 ).add( 2098 ).add ( 2099 ).add( 2100 ) )
		.add( Furniture( "Carpet", PID_CR_CARPET ).add( 2377 ).add( 2378 ).add( 16505 ).add( 16506 ).add( 16507 ).add( 16508 ) )
		.add( Furniture( "Skinning rack", PID_CR_DRYER ).add( 10118 ).add( 10119 ).add( 10120 ).add( 10121 ) )
		.add( Furniture( "Altar", PID_CR_ALTAR ).add( 4502 ).add( 4503 ).add( 4504 ) )
		.add( Furniture( "Tribal stand", PID_CR_STAND ).add( 4506 ).add( 4507 ).add( 4508 ) )
		.add( Furniture( "Wooden table with a lamp", PID_CR_WOOD_TBL_LP ).add( 3644 ) )
		.add( Furniture( "Stake", PID_CR_STAKE ).add( 3225 ).add( 3226 ).add( 3227 ) )
		.add( Furniture( "Large armchair", PID_CR_ARM_CHAIR ).add( 2231 ) )
		.add( Furniture( "Compost barrel", PID_SHIT_BAREL_FULL ).add( 9877 ).add( 9878 ).add( 9879 ).add( 16588 ).add( 16589 ) )
		.add( Furniture( "Compost bath", PID_SHIT_BATH_X_EMPTY ).add( PID_SHIT_BATH2_Y_EMPTY ).add( PID_SHIT_BATH1_X_FULL ).add( PID_SHIT_BATH2_Y_FULL ) )
		.add( Furniture( "Chest", PID_CR_CHEST ).add( 367 ).add( 369 ) )
		.add( Furniture( "Container", PID_IBOX_O ).add( PID_IBOX_OT ) )
		.add( Furniture( "Container2", PID_IBOX_N ).add( PID_IBOX_NT ) )
		.add( Furniture( "Bench", PID_CR_WOOD_BENCH ).add( 2262 ) )
		.add( Furniture( "Bar chair", PID_CR_BAR_CHAIR  ).add( 15278 ).add( 15275 ).add( 15276 ).add( 15279 ) )
		.add( Furniture( "Stool", PID_CR_TABOURET ).add( 23540 ) )
		.add( Furniture( "Sign", PID_SIGN ).add( 2596 ).add( 2600 ).add( 16383 ).add( 16384 ).add( 16385 ).add( 16386 ).add( 16387 ).add( 16388 ).add( 16389 ).add( 23083 ).add( 23156 ) )
		.add( Furniture( "Barrel", PID_BARREL_GENERIC ).add( 8103 ) )
		.add( Furniture( "Barrel Container", PID_BAREL_EMPTY ).add( 2551 ).add( 4727 ) )
		.add( Furniture( "Mailbox", PID_MAILBOX ).add( 2257 ) )
		;
}

class MenuFuriture: CenteredMenuHandler
{
	uint m_map_id;
	uint m_target_id;

	MenuFuriture( Map& map, Item& target )
	{
		m_map_id = map.Id;
		m_target_id = target.Id;
	}

	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		Map@ map = GetMap( m_map_id );
		Item@ furniture = GetItem( m_target_id );
		if( !valid( map ) )
		{
			return false;
		}
		
		if( !valid( furniture ) )
		{
			return false;
		}			
		
		uint16 pid = furniture.GetProtoId();
		bool isDragging = cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0;

		if( canSwitchLootability( cr, furniture ) )
		{
			if( menu.ButtonMsg( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) ? STR_FURNITURE_MENU_ANCHOR : STR_FURNITURE_MENU_DETACH ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture ); 
				}
				
				SwitchLootability( cr, furniture );
				return true;
			}
		}
		else
		{
			if( furniture.LockerId != 0 )
			{
				if( menu.ButtonMsg( locked_in_place( furniture ) ? STR_FURNITURE_MENU_LOCK : STR_FURNITURE_MENU_UNLOCK ) )
				{
					if( !IsKeyAviable( cr, furniture.LockerId ) )
					{
						LogCrimeMovement( cr, furniture, "can't open furniture without a key" ); 
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RIGHT_KEY );
						LockerBudge( furniture );
					}
					else
					{
						Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
						if( !valid( hand ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TAKE_KEY_IN_HAND );
						}
						else
						{
							critter_use_item( cr, hand, null, furniture, null, 0 );
						}
					}
					return true;
				}
			}
			else if( menu.ButtonMsg( STR_FURNITURE_MENU_DETACH ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
				critter_use_item( cr, hand, null, furniture, null, 0 );
				FurnitureSound( map, furniture );
				return true;
			}			
		}
		
		if( !IsAnimal( cr ) || !IsInsect( cr ) )
		{
			if( ( pid == PID_PORTABLE_WORKBENCH || pid == PID_AMMO_WORKBENCH ) && menu.ButtonMsg( STR_FURNITURE_MENU_CRAFT ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
				{
					SwitchLootability( cr, furniture );
				}
				
				SetWorkbench( cr, furniture.Id, 0, 0 );
				e_WorkBenchPick( furniture, cr, SKILL_PICK_ON_GROUND );
				return false;
			}
			
			if( (pid == PID_FURNACE_SMALL || pid == PID_ARC_FURNACE) && menu.ButtonMsg( STR_FURNITURE_MENU_SMELT ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
				{
					SwitchLootability( cr, furniture );
				}
				
				furniture.SetScript( "gm@_DeleteScript" );
				StartMenuFurnace( cr, furniture );
				return false;
			}
			
			if( furniture.GetProtoId() == PID_CRUSHER_2000 && menu.ButtonMsg( STR_FURNITURE_CRUSHER_INTERFACE ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
				{
					SwitchLootability( cr, furniture );
				}
				
				furniture.SetScript( "gm@_DeleteScript" );
				StartMenuCrusher( cr, furniture );
				return false;
			}
		}
		
		if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) && menu.ButtonMsg( STR_FURNITURE_MENU_TURN ) )
		{
			FurnitureSound( map, furniture );
			Rotate( cr, furniture );
			return true;
		}
		
		if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) && menu.ButtonMsg( isDragging ? STR_FURNITURE_MENU_STOP_PUSHING : STR_FURNITURE_MENU_PUSH ) )
		{
			Drag( cr, furniture );	
			return false;
		}
		
		bool canUse = true;
		string text = "";
		if( canPickup( cr, furniture ) )
		{
			if( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) && menu.ButtonMsg( STR_FURNITURE_MENU_PICKUP ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				PickItem( cr, furniture );
				FurnitureSound( map, furniture );
				return false;
			}
		}
		else if( isContainer( furniture ) )
		{
			int action;
			if( furniture.Proto.Container_Changeble )
			{
				action = FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ? STR_FURNITURE_MENU_CLOSE : STR_FURNITURE_MENU_OPEN;
			}
			else if( !IsAnimal( cr ) || !IsInsect( cr ) )
			{
				action = STR_FURNITURE_MENU_LOOK_INSIDE;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DOGS_CANT_DO_THAT );
				return false;
			}
		
			if( menu.ButtonMsg( action ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				if( FLAG( furniture.LockerCondition, LOCKER_LOCKED ) )
				{
					if( !IsKeyAviable( cr, furniture.LockerId ) )
					{
						LogCrimeMovement( cr, furniture, "can't open without key" ); 
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CONTAINER_LOCKED );
						LockerBudge( furniture );
						return true;
					}
					else
					{
						UNSETFLAG( furniture.LockerCondition, LOCKER_LOCKED );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_UNLOCK_DOOR );
						cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_UNLOCKS );
						PlayGenericSound( map, cr.HexX, cr.HexY, "ui_lockpicking_unlock.wav", 4 );
						return true;
					}
				}
				
				UseSkillOnLocker( cr, furniture, SKILL_PICK_ON_GROUND );
				FurnitureSound( map, furniture );
				return false;
			}
			
			if( isContainer( furniture ) && FLAG( furniture.LockerCondition, LOCKER_LOCKED ) && menu.ButtonMsg( STR_FURNITURE_MENU_LOCKPICK ) )
			{
				if( isDragging )
				{ 
					StopDragging( cr, furniture );
				}
				
				UseSkillOnLocker( cr, furniture, SK_LOCKPICK );	
				return false;
			}
		}
		
		if( !IsAnimal( cr ) || !IsInsect( cr ) )
		{
			if( empty_beds.find( furniture.GetProtoId() ) != -1 && menu.ButtonMsg( STR_FURNITURE_MENU_PLANTING ) )
			{
				if( isDragging )
				{
					StopDragging( cr, furniture );
				}
				
				StartMenuPlantBed( cr, furniture );
				return false;
			}
			
			if( furniture.GetProtoId() == PID_BARREL_GENERIC && menu.Button( "Convert to container" ) )
			{
				if( isDragging )
				{
					StopDragging( cr, furniture );
				}
				
				Item@ newBarrel = map.AddItem( furniture.HexX, furniture.HexY, PID_BAREL_EMPTY, 1 );
				if( valid( newBarrel ) )
				{
					_SubItem( furniture, 1 );
					return false;
				}
			}
			
			if( furniture.GetProtoId() == PID_BARREL_GENERIC && menu.Button( "Convert to Junk Barrel" ) )
			{
				if( isDragging )
				{
					StopDragging( cr, furniture );
				}
				
				Item@ newBarrel = map.AddItem( furniture.HexX, furniture.HexY, PID_SHIT_BAREL_FULL, 1 );
				if( valid( newBarrel ) )
				{
					_SubItem( furniture, 1 );
					return false;
				}
			}
			/*
			if( furniture.GetProtoId() == PID_BARREL_GENERIC && menu.Button( "Convert to Waterbarrel" ) )
			{
				if( isDragging )
				{
					StopDragging( cr, furniture );
				}
				
				Item@ newBarrel = map.AddItem( furniture.HexX, furniture.HexY, PID_WATER_BARREL, 1 );
				if( valid( newBarrel ) )
				{
					_SubItem( furniture, 1 );
					return false;
				}
			}*/
		}
		return true;
	}
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_FURNITURE_MENU_MAIN;
	}
	
	string@ Description( Critter& cr )
	{
		Item@ furniture = GetItem( m_target_id );
		float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ) * 0.001;
		float cont_weight = ItemsWeight( furniture ) * 0.001;
		
		string info = "$weight" + cont_weight + " / " + max_weight;
		
		info += "$testInfo";
		if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
		{
			info += " [" + cr.Stat[ ST_CARRY_WEIGHT ] * 0.001 + " x " + ContainerBonusWeight( furniture ) + "]";
		}
		
		info += "$volume";	
		if( isContainer( furniture ) )
		{		
			info += ContainmentVolume( furniture ) + " / " + furniture.Proto.Container_Volume;
		}
		
		return info;
	}
}

bool StartMenuFuriture( Critter& cr, Item& furniture )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	OpenMenu( cr, "Furniture", MenuFuriture( map, furniture ) );

	return true;
}

void StopDragging( Critter& cr, Item& item )
{
	item.SetScript( "_InitStopped" );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_STOP_PUSH );
	cr.EraseTimeEvents( CTE_FURNITURE_DRAGGING );
	LogItemMovement( cr, item, "stops moving furniture (" + cr.HexX + ", " + cr.HexY + ")" ); 
}

void _InitFurniture( Item& furniture, bool firstTime )
{
	furniture.SetEvent( ITEM_EVENT_USE, "_Use" );
	furniture.SetEvent( ITEM_EVENT_SKILL, "_Skill" );
}

bool _Use( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	return false;
}
	
bool _Skill( Item& furniture, Critter& cr, int skill )
{
	switch( skill )
	{
		case( SK_REPAIR ):
		{
			if( furniture.GetProtoId() >= PID_MUSHBED_EMPTY && furniture.GetProtoId() <= PID_MUSHBED_MUT && furniture.Val0 != 0 )
			{
				break;
			}
			return SwitchLootability( cr, furniture );
		}
		case( SKILL_PICK_ON_GROUND ):
		{
			if( growing_plants.find( furniture.GetProtoId() ) != -1 )
			{
				return StartMenuPlant( cr, furniture );
			}
			else
			{
				return StartMenuFuriture( cr, furniture );
			}
		}
		case( SKILL_PUT_CONT ):
			return FailedAttempt( cr );
	}
	return false;
}

bool FailedAttempt( Critter& cr )
{
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FAILED_TO_PUT_INTO );
	return true;
}

bool canPickup( Critter& cr, Item& furniture ) 
{
	bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
	bool isPickingUp = true;

	if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
	{
		if( DoorOrContainer )
		{
			isPickingUp = false;
		}
		else
		{			
			return false;
		}
	}

	return isPickingUp;
}

bool canSwitchLootability( Critter& cr, Item& furniture )
{
	if( !isGM( cr ) && furniture.Durability > 0 )
	{
		return false;
	}
	return true;
}

bool SwitchLootability( Critter& cr, Item& furniture )
{
	if( !isGM( cr ) && FLAG( furniture.LockerCondition, LOCKER_LOCKED ) )
	{
		LogCrimeMovement( cr, furniture, "can't move furniture that is locked" );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OPEN_LOCK_FIRST );	
		return true;
	}
	
	bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
	
	string state = "";
	if( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
	{
		UNSETFLAG( furniture.Flags, ITEM_CAN_USE );
		SETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MOVABLE_FURNITURE );
	}
	else
	{
		SETFLAG( furniture.Flags, ITEM_CAN_USE );
		UNSETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_IMMOVABLE_FURNITURE );
	}		
	
	if( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
	{
		switch( furniture.GetProtoId() )
		{
			case( PID_CRUSHER_2000 ):
				BlockCrusher( furniture );
				break;
			case( PID_ARC_FURNACE ):
				BlockArcFurnace( furniture );
				break;
			default:
				break;
		}
	}
	else
	{
		_DeleteBlockers( furniture, true );
	}
	
	LogItemMovement( cr, furniture, "changes furniture state" );
	return true;
}

bool Rotate( Critter@ cr, Item& furniture, bool clockwise = true )
{
	InitFurnitures();
	return furnitures.rotate( cr, furniture, clockwise );
}

bool Drag( Critter@ cr, Item& furniture )
{
	InitFurnitures();
	return furnitures.Drag( cr, furniture );
}

void _InitDragging( Item& item, bool firstTime )
{
	SETFLAG( item.Flags, ITEM_NO_BLOCK );
	item.SetEvent( ITEM_EVENT_WALK, "e_DragMoving" );
	
	_InitFurniture( item, firstTime );
	item.Update();
}

void _InitStopped( Item& item, bool firstTime )
{
	if( !FLAG( item.Flags, ITEM_FLAT ) )
	{
		UNSETFLAG( item.Flags, ITEM_NO_BLOCK );
	}
	
	item.SetEvent( ITEM_EVENT_WALK, null );
	item.HolderCr = 0;
	
	_InitFurniture( item, firstTime );
	item.Update();
}

void e_DragMoving( Item& item, Critter& cr, bool entered, uint8 dir ) 
{
	if( !entered || item.HolderCr != int( cr.Id ) )
	{
		return;
	}
	
	Map@ map = cr.GetMap();
	uint16   x = cr.HexX, y = cr.HexY;
	map.MoveHexByDir( x, y, dir, 1 );
	
	if( !map.IsHexPassed( x, y ) )
	{
		map.SetTextMsg( item.HexX, item.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BANG );
		StopDragging( cr, item );
		return;
	}
	
	DraggingSound( map, item, x, y );
	MoveItem( item, 1, map, x, y );
}

uint cte_DraggingFurniture( Critter& cr, int identifier, uint& rate )
{
	Item@ furniture = GetItem( rate );
	if( !valid( furniture ) )
	{
		return 0;
	}
	
	uint dist = GetDistantion( cr.HexX, cr.HexY, furniture.HexX, furniture.HexY );
	
	Map@ map = cr.GetMap();
	if( map.Id != furniture.MapId )
	{
		dist = 0;
	}
	
	uint16 x = cr.HexX, y = cr.HexY;
	map.MoveHexByDir( x, y, cr.Dir, 1 );

	bool stopped = dist > 2 || !valid( map )
							|| MovementState( cr ) == MOVE_STATE_RUN || cr.IsDead() || cr.IsKnockout()
							|| cr.StatBase[ ST_LAST_CONT_ID ] != int(rate)
							|| !map.IsHexPassed( x, y )
							;

	if( stopped )
	{
		if( !map.IsHexPassed( x, y ) )
		{
			Item@ rateFurniture = GetItem( rate );
			map.SetTextMsg( rateFurniture.HexX, rateFurniture.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BANG );
		}
		
		StopDragging( cr, furniture );
		return 0;
	}

	
	setCartPicMap( furniture, cr.Dir );
	
	DraggingSound( map, furniture, x, y );
	MoveItem( furniture, 1, map, x, y );
	
	return REAL_SECOND( 1 );
}

void DraggingSound( Map& map, Item& furniture, uint x, uint y )
{
	if( furniture.HexX == x && furniture.HexY == y )
	{
		return;
	}

	if( furniture.GetProtoId() == PID_CR_CART )
	{	
		PlayGenericSound( map, x, y, _GetOneRandom( CartSoundNames ), 10 );
	}
	else if( furniture.Proto.Material != MATERIAL_METAL )
	{
		PlayGenericSound( map, x, y, _GetOneRandom( DraggingSoundNames ), 20 );
	}
	else
	{
		PlayGenericSound( map, x, y, _GetOneRandom( MetalSoundNames ), 20 );
	}
}

void CheckCartPicMap( Item& furniture ) 
{
	if( furniture.GetProtoId() != PID_CR_CART )
	{
		return;
	}
	
	uint[] values = { furniture.Id };
	CreateTimeEvent( __FullSecond + REAL_SECOND( 1 ), "furniture@e_checkCartPicMap", values, true );
}

uint e_checkCartPicMap( uint[]@ values )
{
	if( !valid( values ) || values.length() != 1 )
	{
		return 0;
	}
	
	Item@ cart = GetItem( values[0] );
	if( !valid( cart ) )
	{
		return 0;
	}
	
	setCartPicMap( cart, cart.FurnitureState );
	return 0;
}

bool setCartPicMap( Item& furniture, uint dir )
{
	if( furniture.GetProtoId() != PID_CR_CART )
	{
		return false;
	}
	
	if( int(dir) != furniture.FurnitureState )
	{
		furniture.FurnitureState = dir;
		furniture.PicMap = GetStrHash( "art\\items\\misc\\cart\\cart_dir" + dir + ".fofrm" );
		SETFLAG( furniture.Flags, ITEM_SHOW_ANIM_EXT );
	}
	
	Item_SetFrame( furniture, LoadedPercent( furniture ) / 20 );
	
	furniture.Update();
	
	return true;
}

FurnitureList@ CreateFurniture( string name )
{
	return FurnitureList( name );
}

class FurnitureList
{
	string name;
	Furniture@[] list;
	
	FurnitureList( string name )
	{
		this.name = name;
	}
	
	FurnitureList@ add( Furniture@ item )
	{
		list.insertLast( item );
		return this;
	}
		
	bool rotate( Critter@ cr, Item& furniture, bool clockwise = true )
	{
		for( uint i = 0; i < list.length(); i++ )
		{
			if( list[i].Rotate( furniture, clockwise ) )
			{
				LogItemMovement( cr, furniture, "turns " + ( clockwise ? "clockwise" : "counter-clockwise" ) );
				return true;
			}
		}
		return false;
	}
	
	bool Drag( Critter& cr, Item& furniture ) 
	{
		if( furniture.HolderCr != 0 && furniture.HolderCr != int(cr.Id) )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_TRY_STOP );
			return true;
		}
		
		if( cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0 )
		{
			StopDragging( cr, furniture );
			return true;
		}
		
		if( furniture.GetType() == ITEM_TYPE_DOOR )
		{
			return false;
		}
		
		if( !isGM(cr) && furniture.LockerId != 0 )
		{
			LogCrimeMovement( cr, furniture, "can't move locked furniture" );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_UNLOCK_FURNITURE );	
			return true;
		}
		
		if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
		{
			LogCrimeMovement( cr, furniture, "cant move fixed furniture" ); 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DISMANTLING_REQUIRED );
			return true;
		}
		
		if( FLAG( furniture.LockerCondition, LOCKER_JAMMED ) || FLAG( furniture.LockerCondition, LOCKER_BROKEN ) || FLAG( furniture.LockerCondition, LOCKER_NOOPEN ) )
		{
			LogCrimeMovement( cr, furniture, "can't move rooted furniture" ); 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DID_NOTHING );
			return true;
		}
		
		if( ( furniture.Proto.Container_Changeble && !FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ) || FLAG( furniture.LockerCondition, LOCKER_LOCKED ) )
		{
			LogCrimeMovement( cr, furniture, "tried to move locked furniture" ); 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_UNLOCK_FURNITURE );
			return true;
		}

		int freeWeight = int( cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ) ),
			contWeight = ItemsWeight( furniture );
			
		if( !isGM(cr) && freeWeight < contWeight )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OBJECT_TOO_HEAVY );
			LogItemMovement( cr, furniture, "can't move heavy furniture" );
			return true;
		}

		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_START_PUSH );
		
		furniture.SetScript( "_InitDragging" );
		furniture.HolderCr = cr.Id;
		
		cr.StatBase[ ST_LAST_CONT_ID ] = furniture.Id;
		cr.AddTimeEvent( "cte_DraggingFurniture", 0, CTE_FURNITURE_DRAGGING, furniture.Id );		
		
		LogItemMovement( cr, furniture, "pushes furniture (" + cr.HexX + ", " + cr.HexY + ")" );
		return true;
	}
	
	bool has( uint pid )
	{
		for( uint i = 0; i < list.length(); i++ )
		{
			if( list[i].has( pid ) )
			{
				return true;
			}
		}
		return false;
	}
}

Furniture@ CreateFurniture( string name, uint basePID )
{
	return Furniture( name, basePID );
}

class Furniture
{
	uint basePID;
	string name;
	uint[] pids;
	
	Furniture( string name, uint basePID )
	{
		this.name = name;
		this.basePID = basePID;
		this.pids.insertLast( basePID );
	}
	
	void set( uint[] pids )
	{
		this.pids = pids;
	}
	
	bool has( uint pid )
	{
		if( basePID == pid )
		{
			return true;
		}
		
		for( uint i = 0; i < pids.length(); i++ )
		{
			if( pids[i] == pid )
			{
				return true;
			}
		}
		return false;
	}
	
	Furniture@ add( uint rotation_picture_pid )
	{
		if( rotation_picture_pid != 0 )
		{
			pids.insertLast( rotation_picture_pid );
		}
		return this;
	}
	
	bool setPic( Item& target )
	{
		return setPic( target, target.FurnitureState );
	}

	bool setPic( Item& target, uint index )
	{
		if( index >= pids.length() )
		{
			return false;
		}
		
		return setItemPic( target, pids[index] );
	}
	
	bool ChangeState( Item& target, bool clockwise = true )
	{
		if( clockwise )
		{
			target.FurnitureState++;
		}
		else
		{
			target.FurnitureState--;
		}
		
		int state = target.FurnitureState;
		
		if( state >= int( pids.length() ) )
		{
			target.FurnitureState = 0;
			return true;
		}
		
		if( state < 0 )
		{
			target.FurnitureState = pids.length() - 1;
			return true;
		}
		
		return true;
	}
	
	bool Rotate( Item& target, bool clockwise = true )
	{
		if( target.GetProtoId() != basePID || pids.length() == 0 )
		{
			return false;
		}
		
		if( !setCartPicMap( target, ( target.FurnitureState + ( clockwise ? 1 : 6 ) ) % 6 ) )
		{
			ChangeState( target, clockwise );
		}
		
		setPic( target );
		return true;
	}
}

bool setItemPic( Item& target, uint protoPID )
{
	if( protoPID == 0 )
	{
		return false;
	}
	
	ProtoItem@ proto = GetProtoItem( protoPID );
	if( !valid( proto ) )
	{
		return false;
	}
	target.PicMap = proto.PicMap;
	target.PicInv = proto.PicMap;
	target.Update();
	return true;
}

void Item_SetFrame( Item& item, uint8 frame )
{
    item.AnimStayBegin      = frame;
    item.AnimStayEnd        = frame;
    item.AnimShowBegin      = frame;
    item.AnimShowEnd        = frame;
    item.AnimHideBegin      = frame;
    item.AnimHideEnd        = frame;

    return;
}

bool BarrelCheck( Critter& cr, Item@ barrel, Item@ target )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( barrel ) )
	{
		return false;
	}
	
	if( !valid( target ) )
	{
		return false;
	}
	
	if( barrel.GetProtoId() != PID_BARREL_GENERIC )
	{
		return false;
	}
	
	if( target.GetProtoId() == PID_BARREL_3 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STACK_TOO_HIGH );
		return false;
	}
	
	Critter@[] critters; 
	map.GetCrittersHex( target.HexX, target.HexY, 0, FIND_LIFE_AND_KO, critters );
	if( critters.length() > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OBSTACLE_CRITTER );
		return false;
	}
	
	AddBarrel( cr, barrel, target, map );
	return true;
}

void AddBarrel( Critter& cr, Item& barrel, Item& target, Map& map )
{
	uint16 newPid = target.GetProtoId() == PID_BARREL_GENERIC ? PID_BARREL_2 : PID_BARREL_3;
	Item@ newBarrel = map.AddItem( target.HexX, target.HexY, newPid, 1 );
	if( valid( newBarrel ) )
	{
		_SubItem( barrel, 1 );
		DeleteItem( target );
		FurnitureSound( map, newBarrel );
	}
}

void TakeBarrel( Critter& cr, Item& targetItem )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return;
	}
	
	uint16 targetPid = targetItem.GetProtoId();
	uint16 newPid = targetPid == PID_BARREL_3 ? PID_BARREL_2 : PID_BARREL_GENERIC;
	
	Item@ newBarrel = map.AddItem( targetItem.HexX, targetItem.HexY, newPid, 1 );
	_SubItem( targetItem, 1 );
	FurnitureSound( map, newBarrel );
	
	if( newPid == PID_BARREL_GENERIC )
	{
		newBarrel.SetScript( "furniture@_InitFurniture" );
	}

	newBarrel.Update();
	cr.AddItem( PID_BARREL_GENERIC, 1 );
}

bool ContainerCheck( Critter& cr, Item@ container, Item@ target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( container ) )
	{
		return false;
	}
	
	if( !valid( target ) )
	{
		return false;
	}
	
	uint16 containerPid = container.GetProtoId();
	if( ContainersX1.find( containerPid ) == -1 )
	{
		return false;
	}
	
	uint16 targetPid = target.GetProtoId();
	if( ContainersX3.find( targetPid ) != -1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STACK_TOO_HIGH );
		return false;
	}

	Critter@[] critters; 
	map.GetCrittersHex( target.HexX, target.HexY, 0, FIND_LIFE_AND_KO, critters );
	if( critters.length() > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OBSTACLE_CRITTER );
		return false;
	}
	
	AddContainer( cr, container, target, map );
	return true;
}

void AddContainer( Critter& cr, Item& container, Item& target, Map& map )
{
	if( valid( container ) && valid( target ) )
	{	
		Item@[] stuff_container;
		container.GetItems( uint( -1 ), stuff_container );
		Item@[] stuff_target;
		target.GetItems( uint( -1 ), stuff_target );
		
		uint16 hx = target.HexX, hy = target.HexY;
		uint16 oldPid = target.GetProtoId();
		uint16 newPid;
		uint16 containerPid = container.GetProtoId();
		if( containerPid == PID_IBOX_O )
		{
			switch( oldPid ) 
			{
				case( PID_IBOX_O ):
					newPid = PID_IBOX_OO;
					break;
				case( PID_IBOX_N ):
					newPid = PID_IBOX_NO;
					break;
				case( PID_IBOX_OO ):
					newPid = PID_IBOX_OOO;
					break;
				case( PID_IBOX_ON ):
					newPid = PID_IBOX_ONO;
					break;
				case( PID_IBOX_NO ):
					newPid = PID_IBOX_NOO;
					break;
				case( PID_IBOX_NN ):
					newPid = PID_IBOX_NNO;
					break;
			}
		}
		else
		{
			switch( oldPid ) 
			{
				case( PID_IBOX_O ):
					newPid = PID_IBOX_ON;
					break;
				case( PID_IBOX_N ):
					newPid = PID_IBOX_NN;
					break;
				case( PID_IBOX_OO ):
					newPid = PID_IBOX_OON;
					break;
				case( PID_IBOX_ON ):
					newPid = PID_IBOX_ONN;
					break;
				case( PID_IBOX_NO ):
					newPid = PID_IBOX_NON;
					break;
				case( PID_IBOX_NN ):
					newPid = PID_IBOX_NNN;
					break;
			}
		}
		
		Item@ newContainer = map.AddItem( hx, hy, newPid, 1 );
		if( stuff_container.length() > 0 )
		{
			MoveItems( stuff_container, newContainer, 0 );
		}
		
		if( stuff_target.length() > 0 )
		{
			MoveItems( stuff_target, newContainer, 0 );
		}
		
		DeleteItem( target );
		_SubItem( container, 1 );
		newContainer.Update();
		FurnitureSound( map, newContainer );
	}
}

bool TakeX3Container( Critter& cr, Item& targetItem )
{
	uint16 tiPid = targetItem.GetProtoId();
	Map@ map = cr.GetMap();
	if( ContainmentVolume( targetItem ) > 10000 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OVERLOADED_CONTAINER );
		return false;
	}
	
	uint16 newPid;
	uint16 contPid;
	switch( tiPid )
	{
		case( PID_IBOX_OOO ):
			newPid = PID_IBOX_OO;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_NOO ):
			newPid = PID_IBOX_NO;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_ONO ):
			newPid = PID_IBOX_ON;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_OON ):
			newPid = PID_IBOX_OO;
			contPid = PID_IBOX_N;
			break;
		case( PID_IBOX_ONN ):
			newPid = PID_IBOX_ON;
			contPid = PID_IBOX_N;
			break;					
		case( PID_IBOX_NON ):
			newPid = PID_IBOX_NO;
			contPid = PID_IBOX_N;
			break;
		case( PID_IBOX_NNO ):
			newPid = PID_IBOX_NN;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_NNN ):
			newPid = PID_IBOX_NN;
			contPid = PID_IBOX_N;
			break;
	}
	targetItem.ChangeProto( newPid );
	cr.AddItem( contPid, 1 );
	FurnitureSound( map, targetItem );
	return true;
}

bool TakeX2Container( Critter& cr, Item& targetItem )
{
	uint16 tiPid = targetItem.GetProtoId();
	Map@ map = cr.GetMap();
	if( ContainmentVolume( targetItem ) > 5000 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OVERLOADED_CONTAINER );
		return false;
	}
	
	uint16 newPid;
	uint16 contPid;
	switch( tiPid )
	{
		case( PID_IBOX_OO ):
			newPid = PID_IBOX_O;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_NO ):
			newPid = PID_IBOX_N;
			contPid = PID_IBOX_O;
			break;
		case( PID_IBOX_ON ):
			newPid = PID_IBOX_O;
			contPid = PID_IBOX_N;
			break;
		case( PID_IBOX_NN ):
			newPid = PID_IBOX_N;
			contPid = PID_IBOX_N;
			break;
	}
	
	targetItem.ChangeProto( newPid );
	cr.AddItem( contPid, 1 );
	targetItem.SetScript( "furniture@_InitFurniture" );
	targetItem.Update();
	FurnitureSound( map, targetItem );
	return true;
}

void FurnitureSound( Map& map, Item& furniture )
{
	if( furniture.Proto.Material == MATERIAL_METAL )
	{
		PlayGenericSound( map, furniture.HexX, furniture.HexY, _GetOneRandom( MetalSoundNames ), 20 );
	}
	else
	{
		PlayGenericSound( map, furniture.HexX, furniture.HexY, _GetOneRandom( DraggingSoundNames ), 20 );
	}
}

void UpdateFurniture( Critter& cr, int p0, int p1, int p2 )
{
	Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		InitFurniture( maps[i] );
	}
}

void InitFurniture( Map& map )
{
	Item@[] furnitures;
	Item@ furniture = null;
	map.GetItemsByType( ITEM_TYPE_MISC, furnitures );
	map.GetItemsByType( ITEM_TYPE_CONTAINER, furnitures );
	for( uint i = 0, len = furnitures.length(); i < len; i ++ )
	{
		@ furniture = furnitures[i];
		if( valid( furniture ) )
		{
			if( furniture.Proto.Item_Subtype == ITEM_SUBTYPE_FURNITURE )
			{
				furniture.SetScript( "_InitFurniture" );
				furniture.Update();
			}
		}
	}
}

void _DeleteBlockers( Item& item, bool deleted )
{
	if( deleted )
	{
		int item_id = item.Id;
		Item@[] blockers;
		Item@[] delete;
		Item@ blocker = null;
		
		for( uint16 i = PID_NO_SHOOT_WOOD_BLOCKER; i < PID_STONE_BLOCKER; i ++ )
		{
			GetAllItems( i, blockers );
		}

		for( uint i = 0, len = blockers.length(); i < len; i ++ )
		{
			@ blocker = blockers[i];
			if( valid( blocker ) )
			{
				if( blocker.PARENT_ITM_ID == item_id )
				{
					delete.insertLast( blocker );
				}
			}
		}
		
		if( delete.length() > 0 )
		{
			DeleteItems( delete );
		}
	}
}
#endif //FURNITURE
