#ifndef DEFIB
#define DEFIB

#include "_utils.fos"
#include "defib_h.fos"
#include "_ltp.fos"

bool TryReanimate( Critter& cr, Critter& targetCr, Item& item )
{
	if( !valid( targetCr ) )
	{
		return false;
	}
	
	if( !targetCr.IsDead() || IsRobot( targetCr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_PATIENT_ALIVE );
		return false;
	}
	
	if( item.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_HOLD_DEFIB );
		return false;
	}
	
	if( targetCr.ParamBase[ CR_DEATH_STAGE ] >= 50 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TARGET_CRIT_DEATH );
		return false;
	}

    if( cr.Skill[ SK_DOCTOR ] + cr.Skill[ SK_FIRST_AID ] + cr.Skill[ SK_SCIENCE ] < 200 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_LOW_DOCTOR );
        return true;
	}
	
	if( item.ITEM_CHARGE < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_REQUIRE_CELLS );
		return false;
	}
	
	StartDefib( cr, targetCr, item );
	return true;
}

bool ltp_defib_inited = false;
void ltp_defib_init()
{
    LTPREG( LTP_DEFIB, process_defib )
    ltp_defib_inited = true;
}

bool StartDefib( Critter& cr, Critter& targetCr, Item& item )
{
	if( !ltp_defib_inited )
	{
		ltp_defib_init();
	}

	if( !valid( item ) )
	{
		return false;
	}
	
	if( !valid( targetCr ) )
	{
		return false;
	}
	
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 15000 - ( cr.Skill[ SK_DOCTOR ] * 40 );
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 1;
	
	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
	
	StartProcess( cr, LTP_DEFIB, 0, targetCr.Id, item.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );

	cr.SayMsg( SAY_EMOTE, TEXTMSG_GAME, STR_EMOTE_ENGAGE_DEFIB );
	return true;
}

uint process_defib( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_DEFIB )

    Critter@ targetCr = GetCritter( param1 );
	Item@ item = GetItem( param2 );
    if( !valid( targetCr ) || !valid( item ) )
	{
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
        return 0;
	}
	
	Map@ map = targetCr.GetMap();
	if( !valid( map ) )
	{
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		return 0;
	}
	
	if( param0 == 0 )
	{
		param0 ++;
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	else if( targetCr.Anim2Dead <= ANIM2_DEAD_BACK && targetCr.Stat[ ST_MAX_LIFE ] > 100 )
	{

		for( int dx = -1; dx < 2; dx++ )
		{
			for( int dy = -1; dy < 2; dy++ )
			{
				if( map.IsHexPassed( targetCr.HexX + dx, targetCr.HexY + dy ) )
				{
					targetCr.TransitToHex( targetCr.HexX + dx, targetCr.HexY + dy, targetCr.Dir );
					break;
				}
			}
		}
				
		targetCr.ToLife();
		targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 1000, targetCr.HexX, targetCr.HexY );

		targetCr.StatBase[ ST_MAX_LIFE_EXT ] -= 5;
	
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_APLIED_DEFIB );
		
		if( targetCr.IsPlayer() )
		{
			targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_RESURECTION_SUCCESS );
		}
		
        if( targetCr.IsNpc() )
		{
            targetCr.ClearEnemyStack();
		}
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		item.ITEM_CHARGE = 0;
		PlayGenericSound( map, cr.HexX, cr.HexY, "WAY1XXX2.mp3", 10 ); 
        return 0;
    }
	else
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TARGET_CRIT_DEATH );
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		item.ITEM_CHARGE = 0;
		PlayGenericSound( map, cr.HexX, cr.HexY, "Pulse_explode.mp3", 10 ); 
        return 0;
    }
}

bool ChargeDefib( Critter& cr, Item& battery, Item& defib )
{
	if( defib.ITEM_CHARGE > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DEFIB_ALREADY_CHARGED );
		return true;
	}
	
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, "WRJ1XXX1.mp3", 6 );
	}
	
	defib.ITEM_CHARGE ++;
	cr.SayMsg( SAY_EMOTE, TEXTMSG_GAME, STR_EMOTE_RECHARGE_DEFIB );
	cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RECHARGE_DEFIB );
	_SubItem( battery, 1 );
	return true;
}

#endif //DEFIB