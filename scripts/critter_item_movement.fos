// Author: cvet
#include "_macros.fos"
#include "wait_time_h.fos"

#ifdef __CLIENT
# define Critter    CritterCl
# define Item       ItemCl
#endif

const uint[] skin_supermute = 
{ //Супермутанты:
	CRTYPE_SUPERMUTE_NORMAL,
	CRTYPE_SUPERMUTE_JACKET,
	CRTYPE_SUPERMUTE_METAL,
	CRTYPE_SUPERMUTE_METAL_BLACK,
};
const uint[] skin_robot = 
{ //Роботы
	CRTYPE_ROBOT,
	CRTYPE_ROBOBRAIN,
	CRTYPE_ROBOEYE,
	CRTYPE_TURRET_LASER,
	CRTYPE_TURRET_MINIGUN,
	CRTYPE_ROBOT_HANDY,
};

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.

bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
	if (item.Proto.Type == 15) return true;
    int fromSlot = item.CritSlot;
	const uint16 pid = item.GetProtoId( );
	// Фикс снятия ошейников и наручников на глобале:
	if( ( pid >= PID_HANDCUFFS_USED && pid <= PID_ROPE_USED && toSlot != SLOT_HAND1 && fromSlot == SLOT_HAND1 ) || 
		 ( pid == PID_COLLAR && ( toSlot != SLOT_HAND2 && ( fromSlot == SLOT_HAND2 || fromSlot == SLOT_HAND1 ) ) ) )
    {
	
#ifdef __CLIENT
        Message( TEXTMSG_GAME, 12945 );
#endif
		return false;
    }
	
	if( pid == PID_WORKBENCH_TOKEN || pid == PID_FIREPLACE_TOKEN )
	{
#ifndef __CLIENT
        DeleteItem( item );
#endif
		return true;
	}
	
    bool  moveFreeze = false,
          dropFreeze = false;

    if( cr.Stat[ ST_BODY_TYPE ] > 4 && cr.Stat[ ST_BODY_TYPE ] < 10 || cr.Stat[ ST_BODY_TYPE ] > 10 ) // TabaK. Запрет на оружие животным. //q3 перенес из critter_move_item, надо перенести в gamemodes/arcade
    {
        moveFreeze = true;
        dropFreeze = true;
    }

    // Drop
    if( toSlot == SLOT_GROUND )
        return !dropFreeze;             // q3

		
	if( @itemSwap !is null )
	{	
		const uint16 swapPid = itemSwap.GetProtoId( );
		if( ( swapPid == PID_COLLAR && toSlot == SLOT_HAND2 ) || ( swapPid >= PID_HANDCUFFS_USED && swapPid <= PID_ROPE_USED && toSlot == SLOT_HAND1 ) )
			return false;
	}
    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( valid( itemSwap ) && !handsSwap )
        return false;

    if( moveFreeze && !handsSwap )
        return false;                          // q3

    // Weapon animation
    if( toSlot == SLOT_HAND1 )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
            return false;
    }

    // Armor animation
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
            return false;
        if( item.Proto.Slot != SLOT_INV )
            return false;
		/* //Ниебу, где эта ф-я определена, и что она делает!
		if( !IsCritterCanArmor( cr.CrType ) )
            return false;
		*/
		uint16 pid = item.GetProtoId();
		uint16 skin = cr.Stat[ ST_BASE_CRTYPE ];
		if( skin == 0 ) //Стандартный скин М/Ж
			skin = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		bool isMutePlayer = skin_supermute.find( skin ) != -1,
			 isRoboPlayer = skin_robot.find( skin ) != -1,
			 isMuteArmor = pid == 592 || pid == 593;
		if( isRoboPlayer || isMutePlayer != isMuteArmor )
			return false;
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER

import void ChangeCritterSpeed( Critter& cr ) from "speed";                        // q3: pm speed
////////////////////////////////////////////////////////////////////////////////////////////////////
const uint[] skin_small = //Скин не меняется, если не одета ББшка или халат, но халат делается МАЛЕНЬКИМ (привет, Горис):
{
	CRTYPE_BOY,
	CRTYPE_GIRL,
	CRTYPE_DWARF,
};
const uint[] skin_male = 
{ //Мужские персонажи:
	CRTYPE_BOMM,
	CRTYPE_YELLOW_M,
	CRTYPE_NIGGER_RED,
	CRTYPE_BALD_GREEN,
	CRTYPE_THIN,
	CRTYPE_DREDMAN,
	CRTYPE_CAPMAN,
	CRTYPE_BUTCHER,
	CRTYPE_TRIBAL_M,
	CRTYPE_RICH_M,
	CRTYPE_BRUISER_BLUE,
	CRTYPE_BRUISER_GRAY,
	CRTYPE_ASIAT_M,
	CRTYPE_POLICE,
	CRTYPE_TEENAGER,
	CRTYPE_SCIENTIST,
	CRTYPE_ASIAT_RED,
	CRTYPE_ASIAT_BLUE,
	CRTYPE_MACHO,
	CRTYPE_WRESTLER,
	CRTYPE_OLD_MAN,
	CRTYPE_PANTS_YELLOW_BOLD,
	CRTYPE_PANTS_YELLOW_HAIRY,
	CRTYPE_PANTS_BLACK,
	CRTYPE_PANTS_ALL_BLACK,
	CRTYPE_DREDMAN_ARMORED,
	CRTYPE_TWO_ARMS_JACKET_REGULAR,
	CRTYPE_TWO_ARMS_JACKET_HAIRY,
	CRTYPE_TWO_ARMS_JACKET_HAIRY_BLOND,
	CRTYPE_COAT_GUY,
	CRTYPE_BLACK_COAT_GUY,
	CRTYPE_BLUE_SUIT,
	CRTYPE_DREDMAN_YELLOW,
	CRTYPE_DREDMAN_DARK_YELLOW,
	CRTYPE_PRIMAL_MOHAWK_LEATHER_JACKET,
	CRTYPE_PRIMAL_MOHAWK_LEATHER_ARMOR,
	CRTYPE_PRIMAL_MOHAWK_METALL_ARMOR,
};
const uint[] skin_female = 
{ //Женские персонажи:
	CRTYPE_YELLOW_F,
	CRTYPE_METAL_YELLOW_F,
	CRTYPE_METAL_PINK_F,
	CRTYPE_TANDI,
	CRTYPE_WHORE,
	CRTYPE_REDHEADED_F,
	CRTYPE_TRIBAL_F,
	CRTYPE_RICH_F,
	CRTYPE_VAULT_F,
	CRTYPE_BLACK_F,
	CRTYPE_ASIAT_F,
	CRTYPE_TANDI_BLACK,
	CRTYPE_DW_BLACK_AND_RED_LEATHER_ARMOR_F,
	CRTYPE_DW_TWO_HAND_LEATHER_JACKET_F,
	CRTYPE_DW_METAL_TESLA_ORANGE_F,
};
const uint[] skin_ghoul = 
{ //Гули:
	CRTYPE_GHOUL_GREEN,
	CRTYPE_GHOUL_WHITE,
	CRTYPE_GHOUL_AVERAGE,
	CRTYPE_GHOUL_GRAY,
	CRTYPE_GHOUL_RUNNING,
	CRTYPE_GHOUL_RUNNING_GREEN,
	CRTYPE_GHOUL_RUNNING_GRAY,
};
const uint[] skin_robe = 
{ //Робы:
	CRTYPE_ROBE_PURPLE,
	CRTYPE_ROBE_BLACK,
	CRTYPE_ROBE_SAND,
	CRTYPE_ROBE_BLUE,
	CRTYPE_ROBE_BROWN,
	CRTYPE_ROBE_DARK_GREEN,
	CRTYPE_ROBE_RED_RITUAL,
	CRTYPE_ROBE_BLACK_RITUAL,
	CRTYPE_ROBE_DARK_BLACK,
	CRTYPE_ROBE_DARK_RED,
	CRTYPE_ROBE_RED,
	CRTYPE_ROBE_DARK_BROWN,
	CRTYPE_ROBE_DARK_BLUE,
	CRTYPE_ROBE_ATOM_CHILD,
};
const uint[] skin_armor =  //Скин "брони", не меняется при одевании любой брони
{
	CRTYPE_CA_BALD,
	CRTYPE_CA_BALD_BLACK,
	CRTYPE_CA_F,
	CRTYPE_CA_M,
	CRTYPE_CA_FOR_NIGGERS,
	CRTYPE_CA_BLUE_M,
	CRTYPE_CA_BLUE_F,
	CRTYPE_CA_DARK_M,
	CRTYPE_CA_DARK_F,
	CRTYPE_CA_CLAW_M,
	CRTYPE_CA_CLAW_F,
	CRTYPE_CA_SAND_1_M,
	CRTYPE_CA_SAND_1_F,
	CRTYPE_CA_SAND_2_M,
	CRTYPE_CA_SAND_2_F,
	CRTYPE_CA_SAND_3_M,
	CRTYPE_CA_SAND_3_F,
	CRTYPE_CA_NIGHT_M,
	CRTYPE_CA_NIGHT_F,
	CRTYPE_CA_ENCLAVE_M,
	CRTYPE_CA_ENCLAVE_F,
	CRTYPE_CA_MKII_M,
	CRTYPE_CA_MKII_F,
	CRTYPE_CA_REN_MKI_M,
	CRTYPE_CA_REN_MKI_F,
	CRTYPE_CA_REN_MKII_M,
	CRTYPE_CA_REN_MKII_F,
	CRTYPE_PRIMAL_MOHAWK_COMBAT_ARMOR,
	CRTYPE_PRIMAL_MOHAWK_POWER_ARMOR,
	CRTYPE_PA_HEADLESS,
	CRTYPE_PA,
	CRTYPE_APA,
	CRTYPE_PA_HARDY,
	CRTYPE_PA_OXIDE,
	CRTYPE_EXO_BROWN,
	CRTYPE_EXO_GRAY,
	CRTYPE_EXO_GOLD,
	CRTYPE_PA_CLAW_M,
	CRTYPE_PA_CLAW_F,
	CRTYPE_RESEARCH_ARMOR_M,
	CRTYPE_RESEARCH_ARMOR_F,
	CRTYPE_PA_RAIDER,
	CRTYPE_PA_HYDROID_MK2_M,
	CRTYPE_PA_HYDROID_MK2_F,
	CRTYPE_PA_HYDROID_M,
	CRTYPE_PA_HYDROID_F,
};
const uint[] skin_armor_levels_male = //Уровни градации броней, список нужен для сравнения с уровнем защищённости скина
{
	CRTYPE_DW_JUMPSUIT_M,
	CRTYPE_DW_JUMPSUIT_BLACK_M,
	CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_M,
	CRTYPE_DW_JUMPSUIT_RED_M,
	CRTYPE_DW_JUMPSUIT_SAND_M,
	CRTYPE_DW_JUMPSUIT_GRAY_M,
	CRTYPE_DW_LEATHER_JACKET_M,
	CRTYPE_DW_LEATHER_COAT_M,
	CRTYPE_DW_LEATHER_ARMOR_MK1_M,
	CRTYPE_DW_LEATHER_ARMOR_MK2_M,
	CRTYPE_DW_LEATHER_ARMOR_BLUE_M,
	CRTYPE_DW_LEATHER_ARMOR_CAMMO_M,
	CRTYPE_DW_LEATHER_ARMOR_RED_M,
	CRTYPE_DW_METAL_ARMOR_M,
	CRTYPE_DW_METAL_ARMOR_MK2_M,
	CRTYPE_DW_METAL_TESLA_M,
};
const uint[] skin_armor_levels_female = //Уровни градации броней, список нужен для сравнения с уровнем защищённости скина
{
	CRTYPE_DW_JUMPSUIT_F,
	CRTYPE_DW_JUMPSUIT_BLACK_F,
	CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_F,
	CRTYPE_DW_JUMPSUIT_RED_F,
	CRTYPE_DW_JUMPSUIT_SAND_F,
	CRTYPE_DW_JUMPSUIT_GRAY_F,
	CRTYPE_DW_LEATHER_JACKET_F,
	CRTYPE_DW_LEATHER_COAT_F,
	CRTYPE_DW_LEATHER_ARMOR_MK1_F,
	CRTYPE_DW_LEATHER_ARMOR_MK2_F,
	CRTYPE_DW_LEATHER_ARMOR_BLUE_F,
	CRTYPE_DW_LEATHER_ARMOR_CAMMO_F,
	CRTYPE_DW_LEATHER_ARMOR_RED_F,
	CRTYPE_DW_METAL_ARMOR_F,
	CRTYPE_DW_METAL_ARMOR_MK2_F,
	CRTYPE_DW_METAL_TESLA_F,
};
const uint[][] skin_packs = //стандартные наборы скинов
{
	{ //SKIN_TYPE_WOMAN
		CRTYPE_DW_TRIBAL_F,
		CRTYPE_DW_JUMPSUIT_F,
		CRTYPE_DW_JUMPSUIT_BLACK_F,
		CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_F,
		CRTYPE_DW_JUMPSUIT_RED_F,
		CRTYPE_DW_JUMPSUIT_SAND_F,
		CRTYPE_DW_JUMPSUIT_GRAY_F,
		CRTYPE_DW_LEATHER_JACKET_F,
		CRTYPE_DW_LEATHER_COAT_F,
		CRTYPE_DW_LEATHER_ARMOR_MK1_F,
		CRTYPE_DW_LEATHER_ARMOR_MK2_F,
		CRTYPE_DW_LEATHER_ARMOR_BLUE_F,
		CRTYPE_DW_LEATHER_ARMOR_CAMMO_F,
		CRTYPE_DW_LEATHER_ARMOR_RED_F,
		CRTYPE_DW_METAL_ARMOR_F,
		CRTYPE_DW_METAL_ARMOR_MK2_F,
		CRTYPE_DW_METAL_TESLA_F,
	},{ //SKIN_TYPE_PUNKESS
		CRTYPE_PUNKESS_TRIBAL,
		CRTYPE_PUNKESS_JUMPSUIT,
		CRTYPE_PUNKESS_JUMPSUIT_BLACK,
		CRTYPE_PUNKESS_JUMPSUIT_LIGHT_GREEN,
		CRTYPE_PUNKESS_JUMPSUIT_RED,
		CRTYPE_PUNKESS_JUMPSUIT_SAND,
		CRTYPE_PUNKESS_JUMPSUIT_GRAY,
		CRTYPE_PUNKESS_LEATHER_JACKET,
		CRTYPE_PUNKESS_LEATHER_COAT,
		CRTYPE_PUNKESS_LEATHER_ARMOR_MK1,
		CRTYPE_PUNKESS_LEATHER_ARMOR_MK2,
		CRTYPE_PUNKESS_LEATHER_ARMOR_BLUE,
		CRTYPE_PUNKESS_LEATHER_ARMOR_CAMMO,
		CRTYPE_PUNKESS_LEATHER_ARMOR_RED,
		CRTYPE_PUNKESS_METAL_ARMOR,
		CRTYPE_PUNKESS_METAL_ARMOR_MK2,
		CRTYPE_PUNKESS_METAL_TESLA,
	},{ //SKIN_TYPE_MAN
		CRTYPE_DW_TRIBAL_M,
		CRTYPE_DW_JUMPSUIT_M,
		CRTYPE_DW_JUMPSUIT_BLACK_M,
		CRTYPE_DW_JUMPSUIT_LIGHT_GREEN_M,
		CRTYPE_DW_JUMPSUIT_RED_M,
		CRTYPE_DW_JUMPSUIT_SAND_M,
		CRTYPE_DW_JUMPSUIT_GRAY_M,
		CRTYPE_DW_LEATHER_JACKET_M,
		CRTYPE_DW_LEATHER_COAT_M,
		CRTYPE_DW_LEATHER_ARMOR_MK1_M,
		CRTYPE_DW_LEATHER_ARMOR_MK2_M,
		CRTYPE_DW_LEATHER_ARMOR_BLUE_M,
		CRTYPE_DW_LEATHER_ARMOR_CAMMO_M,
		CRTYPE_DW_LEATHER_ARMOR_RED_M,
		CRTYPE_DW_METAL_ARMOR_M,
		CRTYPE_DW_METAL_ARMOR_MK2_M,
		CRTYPE_DW_METAL_TESLA_M,
	},{ //SKIN_TYPE_HAIRY
		CRTYPE_LHD_TRIBAL,
		CRTYPE_LHD_JUMPSUIT,
		CRTYPE_LHD_JUMPSUIT_BLACK,
		CRTYPE_LHD_JUMPSUIT_LIGHT_GREEN,
		CRTYPE_LHD_JUMPSUIT_RED,
		CRTYPE_LHD_JUMPSUIT_SAND,
		CRTYPE_LHD_JUMPSUIT_GRAY,
		CRTYPE_LHD_LEATHER_JACKET,
		CRTYPE_LHD_LEATHER_COAT,
		CRTYPE_LHD_LEATHER_ARMOR_MK1,
		CRTYPE_LHD_LEATHER_ARMOR_MK2,
		CRTYPE_LHD_LEATHER_ARMOR_BLUE,
		CRTYPE_LHD_LEATHER_ARMOR_CAMMO,
		CRTYPE_LHD_LEATHER_ARMOR_RED,
		CRTYPE_LHD_METAL_ARMOR,
		CRTYPE_LHD_METAL_ARMOR_MK2,
		CRTYPE_LHD_METAL_TESLA,
	},{ //SKIN_TYPE_BALD
		CRTYPE_BLD_TRIBAL,
		CRTYPE_BLD_JUMPSUIT,
		CRTYPE_BLD_JUMPSUIT_BLACK,
		CRTYPE_BLD_JUMPSUIT_LIGHT_GREEN,
		CRTYPE_BLD_JUMPSUIT_RED,
		CRTYPE_BLD_JUMPSUIT_SAND,
		CRTYPE_BLD_JUMPSUIT_GRAY,
		CRTYPE_BLD_LEATHER_JACKET,
		CRTYPE_BLD_LEATHER_COAT,
		CRTYPE_BLD_LEATHER_ARMOR_MK1,
		CRTYPE_BLD_LEATHER_ARMOR_MK2,
		CRTYPE_BLD_LEATHER_ARMOR_BLUE,
		CRTYPE_BLD_LEATHER_ARMOR_CAMMO,
		CRTYPE_BLD_LEATHER_ARMOR_RED,
		CRTYPE_BLD_METAL_ARMOR,
		CRTYPE_BLD_METAL_ARMOR_MK2,
		CRTYPE_BLD_METAL_TESLA,
	},{ //SKIN_TYPE_BLACK
		CRTYPE_BLACK_TRIBAL,
		CRTYPE_BLACK_JUMPSUIT,
		CRTYPE_BLACK_JUMPSUIT_BLACK,
		CRTYPE_BLACK_JUMPSUIT_LIGHT_GREEN,
		CRTYPE_BLACK_JUMPSUIT_RED,
		CRTYPE_BLACK_JUMPSUIT_SAND,
		CRTYPE_BLACK_JUMPSUIT_GRAY,
		CRTYPE_BLACK_LEATHER_JACKET,
		CRTYPE_BLACK_LEATHER_COAT,
		CRTYPE_BLACK_LEATHER_ARMOR_MK1,
		CRTYPE_BLACK_LEATHER_ARMOR_MK2,
		CRTYPE_BLACK_LEATHER_ARMOR_BLUE,
		CRTYPE_BLACK_LEATHER_ARMOR_CAMMO,
		CRTYPE_BLACK_LEATHER_ARMOR_RED,
		CRTYPE_BLACK_METAL_ARMOR,
		CRTYPE_BLACK_METAL_ARMOR_MK2,
		CRTYPE_BLACK_METAL_TESLA,
	},{ //SKIN_TYPE_FAT
		CRTYPE_FAT_TRIBAL,
		CRTYPE_FAT_JUMPSUIT,
		CRTYPE_FAT_JUMPSUIT_BLACK,
		CRTYPE_FAT_JUMPSUIT_LIGHT_GREEN,
		CRTYPE_FAT_JUMPSUIT_RED,
		CRTYPE_FAT_JUMPSUIT_SAND,
		CRTYPE_FAT_JUMPSUIT_GRAY,
		CRTYPE_FAT_LEATHER_JACKET,
		CRTYPE_FAT_LEATHER_COAT,
		CRTYPE_FAT_LEATHER_ARMOR_MK1,
		CRTYPE_FAT_LEATHER_ARMOR_MK2,
		CRTYPE_FAT_LEATHER_ARMOR_BLUE,
		CRTYPE_FAT_LEATHER_ARMOR_CAMMO,
		CRTYPE_FAT_LEATHER_ARMOR_RED,
		CRTYPE_FAT_METAL_ARMOR,
		CRTYPE_FAT_METAL_ARMOR_MK2,
		CRTYPE_FAT_METAL_TESLA,
	}
};
// Call on critter item moved.
import void ChangeWindup( Critter& cr, bool ignore_bussy ) from "main";
void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
	if( cr.ParamBase[ CR_IS_WINDUPED ] != 0 && fromSlot == SLOT_HAND1 && item.GetType() == ITEM_TYPE_WEAPON )
		ChangeWindup( cr, true );
	
    uint8 toSlot = item.CritSlot;
	//Работа с рюкзаком и сумками в инвентаре.
    if( fromSlot == 255 || toSlot == 255 ) 
    {
        ChangeCritterSpeed( cr );       // pm added
        if( item.GetType() == ITEM_TYPE_CONTAINER )
        {
            int  contWeight = 0;
            Item@[] items;
            for( uint i = 0, len = item.GetItems( uint( -1 ), items ); i < len; i++ )
            {
                if( @items[ i ] is null )
                    continue;
                contWeight += int( items[ i ].Proto.Weight * items[ i ].GetCount() );
            }
            if( fromSlot == 255 )
                contWeight *= -1;
            cr.StatBase[ ST_CARRY_WEIGHT_EXT ] += contWeight;
            return;
        }
    }
    if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
    { //Снятие/одевание брони и одежды:
		bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ); //пол персонажа
		uint armor_skin = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );
		uint skin_base = cr.Stat[ ST_BASE_CRTYPE ]; //хранит в себе значение скина "под бронёй"
		if( skin_base == 0 ) //Стандартный скин М/Ж
			skin_base = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		uint crType = skin_base; //главная рабочая переменная функции
		uint16 pid = item.GetProtoId(); //номер прототипа брони
        if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D ) 
		{ //Увы, 3Д не завезли, только 2Д:
			if( toSlot == SLOT_ARMOR ) 
			{ //Одеваем броню:
				if( skin_robe.find( armor_skin ) != -1 && skin_small.find( skin_base ) != -1 )
					crType = CRTYPE_SMALL_ROBE; //Дети и карлики в маленьких робах.
				else { //Супермутанты и их брони:
					if( skin_supermute.find( skin_base ) < skin_supermute.find( armor_skin ) )
						crType = armor_skin; //Скин меняет лишь та броня, что старше его по уровню.
					else { //Все кроме детей, карликов и супермутантов:
						if( skin_armor.find( skin_base ) != -1 ) {
							if( skin_armor.find( armor_skin ) > skin_armor.find( skin_base ) )
								crType = armor_skin; //Броне-скины заменялся реально одетой броней только если та выше их по "защищённости" (следующая в списке скинов)
							else
								crType = skin_base;
						} else if( skin_robe.find( skin_base ) != -1 ) {
							if ( skin_armor.find( armor_skin ) != -1 )
								crType = armor_skin; //Скины халатов меняются лишь на броню.
						} else { //Если, в итоге, дефолтный скин - это не броня и не халат:
							if( skin_armor.find( armor_skin ) != -1 ||
								 skin_robe.find( armor_skin ) != -1 )
								 crType = armor_skin; //Броня и халаты меняют любой социальный/боевой скин.
							else if( skin_male.find( skin_base ) != -1   ||
									 skin_female.find( skin_base ) != -1 ||
									 skin_ghoul.find( skin_base ) != -1 ) {
									//Тут мог размещаться механ смены социальных скинов при одевании обычных броней.
							} else { //Если дефолтный скин не социальный:
								int skin_armor_level = ( isMale ? skin_armor_levels_male.find( armor_skin ) : skin_armor_levels_female.find( armor_skin ) ) + 1;
								for( uint n = 0; n < skin_packs.length(); n++ )
								{ //Находим тот набор, которому принадлежит дефолтный скин персонажа
									int skin_level = skin_packs[n].find( skin_base );
									if( skin_level >= 0 ) { //Нашли наш пак скинов:
										if( skin_level < skin_armor_level && skin_packs[n].length > uint( skin_armor_level ) )
											crType = skin_packs[n][skin_armor_level]; //Заменяем, если уровень брони выше нашего уровня скина.
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		//cr.Say( SAY_NETMSG, "" + cr.CrType + " -> " + crType + " / " + armor_skin );
		if( cr.CrType != crType ) {
			cr.ChangeCrType( crType );
			ChangeCritterSpeed( cr );
		}

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );
        switch( item.Proto.Armor_Perk )
        {
        case ARMOR_PERK_POWERED:         // +3 strength, +30 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
            break; 
        case ARMOR_PERK_COMBAT:         // +20 radiation resist
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
            break;
        case ARMOR_PERK_ADVANCED_I:     // +4 strength, +60 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
            break;
        case ARMOR_PERK_ADVANCED_II:         // +4 strength, +75 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
            break;
        case ARMOR_PERK_CHARISMA:         // +1 charisma
            cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
            break;
        case ARMOR_PERK_UGLY:         // -1 charisma
            cr.StatBase[ ST_CHARISMA_EXT ] -= 2 * sign;
            break;
        default:
            break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }
	
	if(cr.IsNpc())
		cr.Wait(GetActionTime(ACTION_MOVE_ITEM, cr));

    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}
#endif
