#ifndef CRITTER_ITEM_MOVEMENT
#define CRITTER_ITEM_MOVEMENT

#include "_utils.fos"
#include "wait_time_h.fos"
#include "critter_item_movement_h.fos"
#include "sandbag_h.fos"
#include "furniture_h.fos"
#include "handcuffs_h.fos"

#ifdef __CLIENT
	# define Critter    CritterCl
	# define Item       ItemCl
#endif // __CLIENT

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.

bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
#ifndef __CLIENT
	if( cr.Anim2Life == ANIM2_WINDUP )
	{
		cr.ParamBase[ CR_IS_WINDUPED ] = 0;
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	}
#endif // __CLIENT

    int fromSlot = item.CritSlot;
	uint16 pid = item.GetProtoId( );

#ifdef __SERVER
	if( item.Proto.Item_Subtype == ITEM_SUBTYPE_BONDAGE && item.BONDAGE_STATE == BONDAGE_STATE_ON )
    {
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_FREE_YOURSELF);
		return false;
    }

	if( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR )
	{
		if( HandsTied( cr ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FREE_HANDS );
			return false;
		}
		
		if( cr.IsPlayer() )
		{
			Item@ back = _CritGetItemBack( cr );
			if( valid( back ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CLOGGED_BAG );
				return false;
			}
		}
	}

	if( pid == PID_WORKBENCH_TOKEN || pid == PID_FIREPLACE_TOKEN || pid == PID_AMMOBENCH_TOKEN )
	{
        DeleteItem( item );
		return false;
	}

	if( cr.Stat[ ST_BODY_TYPE ] == BT_DOG )
	{
		if( ( toSlot == SLOT_ARMOR && pid != PID_DOG_ARMOR ) || toSlot == SLOT_HAND2 || toSlot == SLOT_MISC )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DOGS_CANT_DO_THAT );
			return false;
		}
	}
	
	if( ( toSlot == SLOT_ARMOR || toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2 || toSlot == SLOT_HEAD ) && FLAG( item.BrokenFlags, BI_BROKEN ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_BROKEN );
		return false;
	}
	
#endif // __SERVER
    bool  moveFreeze = false;
    bool  dropFreeze = false;

#ifndef __CLIENT
	if( toSlot == SLOT_GROUND )
	{
		uint16 itmPid = item.GetProtoId();
		if( itmPid == PID_SINGLE_SANDBAG || ContainersX1.find( itmPid ) != -1 || itmPid == PID_BARREL_GENERIC )
		{
			Item@[] ground;
			Map@ map = cr.GetMap();
			if( map.GetItems( cr.HexX, cr.HexY, ground ) > 0 )
			{
				for( uint i = 0, len = ground.length(); i < len; i++ )
				{
					uint16 groundPid = ground[i].GetProtoId();
					
					uint16[] list;
					switch( itmPid )
					{
						case( PID_SINGLE_SANDBAG ):
							list = Sandbags;
							break;
						case( PID_BARREL_GENERIC ):
							list = Barrels;
							break;
						default:
							list = ContainersX1;
							break;
					}
					
					if( list.find( groundPid ) != -1 )
					{
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MOVE_TO_PLACE );
						return false;
					}
				}
			}
		}

		LogItemMovement( cr, item, "puts on ground" );
		if( item.IsStackable() )
		{
			uint[] values = { item.Id };
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "critter_item_movement@e_stack_items", values, true );
		}
	}
	else
	{
		string actionStr = "";
		switch( toSlot )
		{
			case( SLOT_ARMOR ):
				actionStr = "puts on";
				break;
			case( SLOT_HAND1 ):
				actionStr = "takes in hand";
				break;
			case( SLOT_HAND2 ):
				actionStr = "takes in offhand";
				break;
			case( SLOT_MISC ):
				actionStr = "equips in misc";
				break;
			case( SLOT_HEAD ):
				actionStr = "puts on head";
				break;
			case( SLOT_BACK ):
				actionStr = "puts on back";
				break;
		}
		
		switch( fromSlot )
		{
			case( SLOT_ARMOR ):
				actionStr = "takes off";
				break;
			case( SLOT_HAND1 ):
				actionStr = "removes from hand";
				break;
			case( SLOT_HAND2 ):
				actionStr = "removes from offhand";
				break;
			case( SLOT_MISC ):
				actionStr = "removes from misc";
				break;
			case( SLOT_HEAD ):
				actionStr = "removes from head";
				break;
			case( SLOT_BACK ):
				actionStr = "removes from back";
				break;
		}
		
		LogItemMovement( cr, item, actionStr );
	}
#endif // __CLIENT
	
    // Drop
    if( toSlot == SLOT_GROUND )
	{
        return !dropFreeze;
	}	
	
	if( @itemSwap !is null )
	{
		if( itemSwap.Proto.Item_Subtype == ITEM_SUBTYPE_BONDAGE && itemSwap.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			#ifdef __CLIENT
			 Message( TEXTMSG_TEXT, STR_CANT_FREE_YOURSELF);
			#endif //__CLIENT
			return false;
		}
	}

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( cr.IsPlayer() && valid( itemSwap ) && !handsSwap )
	{
        return false;
	}
	
    if( cr.IsPlayer() && moveFreeze && !handsSwap )
	{
        return false;
	}
	
    // Weapon animation
    if( cr.IsPlayer() && ( toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2 ) )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
		{
			#ifdef __CLIENT
			Message( TEXTMSG_TEXT, STR_NO_REQUIRED_ANIM ); 
            #endif // __CLIENT
			return false;
		}
		Item@ offhand = _CritGetItemHandExt( cr );
		if( valid( offhand ) )
		{
			if( offhand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, offhand.Proto.Weapon_Anim1 ) )
			{
				#ifdef __CLIENT
				Message( TEXTMSG_TEXT, STR_NO_REQUIRED_ANIM );  
				#endif // __CLIENT
				return false;
			}
		}
    }

	// Armor animation
	uint16 skin = cr.Stat[ ST_BASE_CRTYPE ];
	if( skin == 0 )
	{
		skin = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
	}
	
	bool isRoboPlayer = skin_robot.find( skin ) != -1;
	bool isRoboArmor = armor_robots.find( pid ) != -1;
	bool isMutePlayer = skin_supermute.find( skin ) != -1;
	bool isMuteArmor = armor_supermutants.find( pid ) != -1;
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
		{
            return false;
        }
		
		if( ( !isRoboPlayer && isRoboArmor ) || ( isRoboPlayer && !isRoboArmor ) || isMutePlayer != isMuteArmor || ( cr.Stat[ ST_BODY_TYPE ] != BT_DOG && pid == PID_DOG_ARMOR ) )
		{
			#ifdef __CLIENT
			Message( TEXTMSG_TEXT, STR_HUMANS_CANT_WEAR ); 
			#endif // __CLIENT
			return false;
		}
	}

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot || ( fromSlot == SLOT_ARMOR && toSlot == SLOT_BACK ) )
		{
            return false;
		}
		
		if( toSlot == SLOT_BACK && item.GetType() == ITEM_TYPE_ARMOR )
		{
			if( isRoboPlayer || isMutePlayer || ( !IsHuman( cr ) && cr.Stat[ ST_BODY_TYPE ] != BT_GHOUL ) )
			{
				#ifdef __CLIENT
				Message( "|0xFFFF00 You can't wear robes like that!" ); 
				#endif // __CLIENT
				return false;
			}
			
			Item@ armor = _CritGetItemArmor( cr );
			if( valid( armor ) )
			{
				uint16 armor_pid = armor.GetProtoId();
				if( FLAG( armor.Proto.Armor_Perk, ARMOR_PERK_FULLBODY ) || PowerArmors.find( armor_pid ) != -1 )
				{
					#ifdef __CLIENT
					Message( "|0xFFFF00 You can't wear robe over this type or armor" ); 
					#endif // __CLIENT
					return false;
				}
			}
		}
	}

    // Allow moving
    return true;
}

#ifdef __SERVER

#include "speed_h.fos"
#include "windup_h.fos"
#include "_ltp.fos"
#include "effects_h.fos"

import void LookDataRefresh( Critter& critter ) from "main";

// Call on critter item moved.
void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
	uint8 toSlot = item.CritSlot;
	uint16 pid = item.GetProtoId();
	uint8 type = item.GetType();
	
	if( toSlot == SLOT_HEAD || fromSlot == SLOT_HEAD )
	{	
		int signH = ( toSlot == SLOT_HEAD ? int(1) : -1 );
		
		if( FLAG( item.Proto.HeadItem_Perk, HEAD_PERK_COOL ))
		{
			if( cr.StatBase[ ST_CHARISMA ] > 1 )
			{
				cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
			}
		}
			
		if( FLAG( item.Proto.HeadItem_Perk, HEAD_PERK_VERY_COOL ))
		{
			if( cr.StatBase[ ST_CHARISMA ] > 1 )
			{
				cr.StatBase[ ST_CHARISMA_EXT ] += 2 * signH;
			}
		}
		
		if( FLAG( item.Proto.HeadItem_Perk, HEAD_PERK_LUCKY_CHARM ))
		{
			cr.StatBase[ ST_LUCK_EXT ] += 1 * signH;
		}

		//face mask
		if( toSlot == SLOT_HEAD && FLAG( item.Proto.HeadItem_Perk, HEAD_PERK_HIDE_FACE ))
		{
			SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		}
		else
		{
			UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		}
		
		if( toSlot == SLOT_HEAD && pid == PID_SANDBAG_EMPTY )
		{
			FlushScreen( cr, COLOR_BLACK, 0, 3000 ); 
		}
		
		ArmorEffects( cr, item );
	}
	
	if( cr.ParamBase[ CR_IS_WINDUPED ] != 0 && fromSlot == SLOT_HAND1 && type == ITEM_TYPE_WEAPON )
	{
		ChangeWindup( cr, true );
	}
	
	bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
	uint armor_skin = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );
	
	//Robes overide current skin in back slot
	if( type == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_BACK || toSlot == SLOT_BACK ) )
	{
		uint crType = cr.Stat[ ST_ARMOR_SKIN ] == 0 ? cr.Stat[ ST_BASE_CRTYPE ] : cr.Stat[ ST_ARMOR_SKIN ];

		if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
		{
			if( toSlot == SLOT_BACK )
			{
				if( skin_robe.find( armor_skin ) != -1 )
				{
					if( skin_small.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
					{
						crType = CRTYPE_SMALL_ROBE;  //kids, dwarfs and goris
					}
					else
					{
						crType = armor_skin;
					}
					
					cr.StatBase[ ST_ARMOR_SKIN ] = cr.CrType;
				}
				
				//Flags for face, avatar and description hiding items
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_HAS_HOOD ) )
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
			}
			else
			{
				cr.StatBase[ ST_ARMOR_SKIN ] = 0;
				
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_HAS_HOOD ) )
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
			}
			
			ArmorEffects( cr, item );
		}
		
		if( cr.CrType != crType ) 
		{
			cr.ChangeCrType( crType );
		}
	}
	
	//Armor skins change
	if( type == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
	{
		if( cr.Stat[ ST_BASE_CRTYPE ] == 0 )
		{
			cr.StatBase[ ST_BASE_CRTYPE ] = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}
		
		uint crType = cr.Stat[ ST_BASE_CRTYPE ];

		if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
		{
			if( toSlot == SLOT_ARMOR )
			{
				if( skin_robe.find( armor_skin ) != -1 && skin_small.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
				{
					crType = CRTYPE_SMALL_ROBE;  //kids, dwarfs and goris
				}
				else // super mutants
				{
					if( skin_supermute.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1  )
					{
						switch( pid )
						{
							case( PID_MUTARMOR_LEATHER ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_JACKET : CRTYPE_SUPERMUTE_JACKET;
								break;
							}
							case( PID_MUTARMOR_METAL ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_METAL : CRTYPE_SUPERMUTE_METAL;
								break;
							}
							case( PID_MUTARMOR_METAL_MK2 ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_METAL_BLACK : CRTYPE_SUPERMUTE_METAL_BLACK;
								break;
							}
							default:
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_NORMAL : CRTYPE_SUPERMUTE_NORMAL;
								crType = cr.Stat[ ST_BASE_CRTYPE ];
								break;
							}
						}
					}
					//Lab coat overide
					else if( pid == PID_LAB_COAT && ( crType == CRTYPE_BL_TRIBAL || crType == CRTYPE_FR_TRIBAL_F || crType == CRTYPE_OLDW_TRIBAL_F ) )
					{
						crType = CRTYPE_BLOND_WHITE_DRESS;
					}
					//Bold CA green overide
					else if( ( pid == PID_COMBAT_ARMOR_MK1 || pid == PID_COMBAT_ARMOR_MK2 || pid == PID_COMBAT_ARMOR_MK3 || pid == PID_RIOT_ARMOR || pid == PID_CA_BROTHERHOOD || pid == PID_CA_MOD_MK1 || pid == PID_CA_MOD_MK2 || pid == PID_CA_MOD_MK3 ) && crType == CRTYPE_BLD_TRIBAL )
					{
						crType = CRTYPE_CA_BALD;
					}
					//Bold CA gray overide
					else if( ( pid == PID_CA_LGRAY_MK1 || pid == PID_CA_LGRAY_MK2 || pid == PID_CA_LGRAY_MK3 || pid == PID_CA_REBERA || pid == PID_CA_REBERA_MK_II ) && cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL )
					{
						crType = CRTYPE_CA_BALD_BLACK;
					}
					else // other skins
					{
						if( skin_armor.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
						{
							if( skin_armor.find( armor_skin ) > skin_armor.find( cr.Stat[ ST_BASE_CRTYPE ] ) )
							{
								crType = ArmorSkin( cr, armor_skin ); //Armor is equiped based on armor array position in comparison to skin
							}
							else
							{
								crType = cr.Stat[ ST_BASE_CRTYPE ];
							}
						}
						else if( skin_robe.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
						{
							if ( skin_armor.find( armor_skin ) != -1 )
							{
								crType = armor_skin; //Robes change for CA and PA only
							}
						}
						else // if default skin is not armor or robe
						{
							bool foundIt = false;
							int skin_armor_level = ( isMale ? skin_armor_levels_male.find( armor_skin ) : skin_armor_levels_female.find( armor_skin ) ) + 1;
							for( uint n = 0; n < skin_packs.length(); n++ )
							{ // get set for cr skin set
								int skin_level = skin_packs[n].find( cr.Stat[ ST_BASE_CRTYPE ] );
								//if skin pack found
								if( skin_level >= 0 )
								{
									if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
									{
										cr.Say( SAY_NORM, skin_level + " -> " + (skin_armor_level+1) + " of " + skin_packs[n].length() );
									}
									
									if( skin_level < skin_armor_level && skin_packs[n].length() > uint( skin_armor_level + 1 ) )
									{
										crType = skin_packs[n][skin_armor_level];//change if armour level higher than skin
										foundIt = true;
									}
									break;
								}
							}
							
							if( !foundIt )
							{
								if( skin_armor.find( armor_skin ) != -1 || skin_robe.find( armor_skin ) != -1 )
								{
									crType = ArmorSkin( cr, armor_skin ); //CA and robes change any skin
								}
								else if( skin_male.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 || skin_female.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 || skin_ghoul.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
								{
								}
								else if( cr.Stat[ ST_BODY_TYPE ] == BT_DOG && pid == PID_DOG_ARMOR )
								{
									crType = CRTYPE_DOG_K9;
								}
								else
								{ 
									//if default is social skin
								}
							}
						}
					}
				}
				
				uint index = skin_armor.find( crType );
				if( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLACK_TRIBAL && index < 37 )
				{
					crType = 150;
				}
				
				//Power armor features
				if( item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 )
				{
					PAAuth( cr, item );
				}
				
				//Flags for face, avatar and description hiding items
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_HAS_HOOD ))
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_FULLBODY ))
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
			}
			else
			{
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_HAS_HOOD ))
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				
				if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_FULLBODY ))
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
			}
			
			ArmorEffects( cr, item );
		}
		
		if( cr.CrType != crType ) 
		{
			cr.ChangeCrType( crType );
		}

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_ST_I ))
		{
			cr.StatBase[ ST_STRENGTH_EXT ] += 1 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_ST_II ))
		{
			cr.StatBase[ ST_STRENGTH_EXT ] += 2 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_ST_III ))
		{
			cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_ST_IIII ))
		{
			cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_CH_I ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_CH_II ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] += 2 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_CH_III ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] += 3 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_DEC_CH_I ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] -= 1 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_DEC_CH_II ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] -= 2 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_DEC_CH_III ))
		{
			cr.StatBase[ ST_CHARISMA_EXT ] -= 3 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_RAD_RES_I ))
		{
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 10 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_RAD_RES_II ))
		{
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_RAD_RES_III ))
		{
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
		}
		
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_RAD_RES_IIII ))
		{
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
		}
				
		if( FLAG( item.Proto.Armor_Perk, ARMOR_PERK_POWERED ))
		{
			cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign; 
		}
    }
	
	if( cr.IsNpc() )
	{
		cr.Wait( GetActionTime( ACTION_MOVE_ITEM, cr ) );
	}
	
	Item@ hand = _CritGetItemHand( cr );
	if( valid( hand ) )
	{
		if( hand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, hand.Proto.Weapon_Anim1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_ANIM_FOR_MAIN_HAND );
			cr.MoveItem( hand.Id, hand.GetCount(), SLOT_INV );
		}
	}
	
	Item@ offhand = _CritGetItemHandExt( cr );
	if( valid( offhand ) )
	{
		if( offhand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, offhand.Proto.Weapon_Anim1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_ANIM_FOR_OFF_HAND );
			cr.MoveItem( offhand.Id, offhand.GetCount(), SLOT_INV );
		}
	}
	
	ChangeCritterSpeed( cr );
	LookDataRefresh( cr );
	cr.RefreshVisible();
}

// ####################################################################################################
// #                                            PowerArmour auth                                      #
// ####################################################################################################
void PAAuth( Critter& cr, Item& armor )
{
	if( armor.ARMOR_BIOSCANNER == OWNER_CONFIRMED )
	{
		if( cr.Id == uint ( armor.ARMOR_OWNER ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PA_AUTH );
		}
		else
		{
			cr.AddTimeEvent( "cte_PAAuthFail", REAL_SECOND( 10 ), CTE_PA_AUTH, 0 ); 
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_PA_FAILSWITCH ); 
		}
	}
	else if( armor.ARMOR_BIOSCANNER == OWNER_PENDING )
	{ 
		armor.ARMOR_BIOSCANNER = OWNER_CONFIRMED; 
		armor.ARMOR_BIOSCANNER = cr.Id; 
	}
}

uint cte_PAAuthFail( Critter& cr, int identifier, uint& rate )
{
	Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( armor ) && ( armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 ) && armor.Val9 == 10 )
	{
		cr.MoveItem( armor.Id, 1, SLOT_GROUND );
		
		if( cr.Karma[ KARMA_SEPARATED ] == 0 ) //BOS aligment - need change for faction armours mechanics
		{ 
			cr.ToDead( ANIM2_DEAD_PULSE_DUST, null ); 
		}
		else
		{
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 0 ) ), 1000, cr.HexX, cr.HexY );
		}
	}
	return 0;
}

void ArmorEffects( Critter& cr, Item@ item )
{
	bool update = false;
	
	if( B_HideName( cr ) )
	{
		if( ABS( cr.Param[ QST_MEDIUM ] ) != 2 )
		{
			if( valid( item ) && FLAG( item.Proto.Armor_Perk, ARMOR_PERK_FULLBODY ) )
			{
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_HIDE_FACE );
			}
			
			cr.ParamBase[ QST_MEDIUM ] = 2;
			update = true;
		}
	}
	else
	{
		if( cr.Param[ QST_MEDIUM ] == 2 )
		{
			if( valid( item ) && FLAG( item.Proto.Armor_Perk, ARMOR_PERK_FULLBODY ) )
			{
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SHOW_FACE );
			}
			
			cr.ParamBase[ QST_MEDIUM ] = 0;
			update = true;
		}
	}

	if( valid( item ) && item.CritSlot != SLOT_BACK )
	{
		bool PAhelmetOn = hasItems( cr, HelmetsPA, SLOT_HEAD );
		bool CAhelmetOn = hasItems( cr, HelmetsCA, SLOT_HEAD );
		Item@ armor = _CritGetItemArmor( cr );
		if( valid( armor ) )
		{
			uint16 armorPid = armor.GetProtoId();
			if( PowerArmors.find( armorPid ) != -1 )
			{
				cr.ChangeCrType( PAhelmetOn ? CRTYPE_PA : CRTYPE_PA_HEADLESS );
			}
			else if( armorPid == PID_HARDENED_POWER_ARMOR )
			{
				cr.ChangeCrType( PAhelmetOn ? CRTYPE_PA_HARDY : CRTYPE_PA_HARDY_HEADLESS );
			}
			else if( ( armorPid == PID_COMBAT_ARMOR_MK1 || armorPid == PID_COMBAT_ARMOR_MK2 || armorPid == PID_COMBAT_ARMOR_MK3 || armorPid == PID_RIOT_ARMOR || armorPid == PID_CA_BROTHERHOOD || armorPid == PID_CA_MOD_MK1 || armorPid == PID_CA_MOD_MK2 || armorPid == PID_CA_MOD_MK3 ) && cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL )
			{
				cr.ChangeCrType( CAhelmetOn ? CRTYPE_CA_M : CRTYPE_CA_BALD ); 
			}
			else if( ( armorPid == PID_CA_LGRAY_MK1 || armorPid == PID_CA_LGRAY_MK2 || armorPid == PID_CA_LGRAY_MK3 || armorPid == PID_CA_REBERA || armorPid == PID_CA_REBERA_MK_II ) && cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL )
			{
				cr.ChangeCrType( CAhelmetOn ? CRTYPE_CA_REBERA_M : CRTYPE_CA_BALD_BLACK ); 
			}
		}
	}

	if( update )
	{
		Critter@[] crs;
		GetAllPlayers( crs );
		for( uint i = 0, l = crs.length(); i < l; i++ )
		{
			crs[ i ].RunClientScript( "client_main@_sinf", crs[ i ].Param[ CR_SINF_MODE ], 0, 0, null, null );
		}
	}
}

bool B_HideName( Critter& cr )
{
	int param = cr.ParamBase[ CR_HIDEFACE_ITM ];
	
	if( FLAG( param, ITM_FACE_MASK ) || FLAG( param, ITM_ARMOR_SUIT ) )
	{
		return true;
	}
	else if( FLAG( cr.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) )
	{
		if( FLAG( param, ITM_ARMOR_HOOD ) )
		{
			return true;
		}
	}
	return false;
}

uint ArmorSkin( Critter& cr, uint skin )
{
	if( skin == CRTYPE_PA || skin == CRTYPE_PA_HEADLESS )
	{
		if( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_SULIK_TRIBAL )
		{
			skin = CRTYPE_SULIK_PA;
		}
		else
		{
			skin = B_HideName( cr ) ? CRTYPE_PA : CRTYPE_PA_HEADLESS;
		}
	}
	else if( skin == CRTYPE_PA_HARDY || skin == CRTYPE_PA_HARDY_HEADLESS )
	{
		skin = B_HideName( cr ) ? CRTYPE_PA_HARDY : CRTYPE_PA_HARDY_HEADLESS;
	}
	
	return skin;
}

//Autostack items upon drop to ground - maybe move to somwhere else
uint e_stack_items( uint[]@ values ) 
{
    Item@ item = GetItem( values[0] );
	if( !valid( item ) )
	{
		return 0;
	}
	
    if( item.Accessory != ACCESSORY_HEX )
	{
		return 0;
	}
	
	uint16 x = 0, y = 0;
    Map@ map = item.GetMapPosition( x, y );

    Item@[] items;
    uint count = map.GetItems( x, y, items );
	
	Item@ groundItm = null;
	Item@ stackable = null;
	
    for( uint i = 0; i < count; i++ )
	{
		@ groundItm = items[i];
        if( !valid( groundItm ) )
		{
			continue;
		}
		
		if( !groundItm.IsStackable() )
		{
			continue;
		}
		
        uint16 protoid = groundItm.GetProtoId();
        uint itemCount = groundItm.GetCount();
		
        for( uint j = i + 1; j < count; j++ )
		{
			@ stackable = items[j];
			if( !valid( stackable ) )
			{
				continue;
			}

            if( protoid == stackable.GetProtoId() )
			{
                itemCount += stackable.GetCount();
                DeleteItem( stackable );
                @items[j] = null;
            }
        }

        groundItm.SetCount( itemCount );
		groundItm.Update( );
		
		switch( protoid ) 
		{
			case( PID_PREWAR_DOLLAR_1 ):
			case( PID_PREWAR_DOLLAR_5 ):
			case( PID_PREWAR_DOLLAR_20 ):
			case( PID_GOLDEN_COIN ):
			case( PID_BOTTLE_CAPS ):
				CoinAmountChanger( groundItm, itemCount );
				break;
			case( PID_SHELL_CASING ):
				ShellAmountChanger( groundItm, itemCount );
				break;
			case( PID_CIGARETTE_BUTT ):
				CigButtAmountChanger( groundItm, itemCount );
				break;
		}
    }
	
	items.resize(0);
	
    return 0;
}

// Change PicMap for dropped cig butts - Util func
void CigButtAmountChanger( Item& item, uint amount )
{
    if( amount <= 4 )
	{
		item.PicMap = CigButtAmoutHash[ amount ];
	}
	else
	{
		item.PicMap = CigButtAmoutHash[ 0 ];
	}
	
    item.Update();
}

// Change PicMap for dropped coins - Util func
void CoinAmountChanger( Item& item, uint amount )
{
    if( amount <= 8 )
	{
		item.PicMap = CoinAmoutHash[ amount ];
	}
	else
	{
		item.PicMap = CoinAmoutHash[ 0 ];
	}
	
    item.Update();
}

// Change PicMap for shells - Util func
void ShellAmountChanger( Item& item, uint amount )
{
    if( amount <= 8 )
	{
		item.PicMap = ShellAmoutHash[ amount ];
	}
	else
	{
		item.PicMap = ShellAmoutHash[ 0 ];
	}
	
    item.Update();
}

// Armor removal LTP
bool ltp_removeArmor_inited = false;
void ltp_removeArmor_init()
{
	LTPREG( LTP_REMOVE_ARMOR, process_removeArmor )
	ltp_removeArmor_inited = true;
}

void TryToTakeArmor( Critter& cr, Critter& targetCr, Item& armor )
{
	if( isGM( cr ) )
	{
		MoveItem( armor, armor.GetCount(), cr );
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOUR_ARMOR_REMOVED );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_TAKE_ARMOR );
		CrimeLog( cr, crInfo( cr ) + " takes armour by GM powers from " + crInfo( targetCr ) );
		return;
	}
	
	if( !ltp_removeArmor_inited )
	{
		ltp_removeArmor_init();
	}
	
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = armorDelay( armor );
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 0;
	StartProcess( cr, LTP_REMOVE_ARMOR, 0, targetCr.Id, armor.Id, cr.Param[ ST_LTP_SEQUENCE_WAIT ] );
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ATTEMPT_TAKE_ARMOR );
	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
}

uint process_removeArmor( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_REMOVE_ARMOR )

	Critter@ targetCr = GetCritter( param1 );
	Item@ armor = GetItem( param2 );
	if( valid( targetCr ) && valid( armor ) )
	{
		targetCr.MoveItem( armor.Id, armor.GetCount(), SLOT_INV );
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOUR_ARMOR_REMOVED );
		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_TAKE_ARMOR );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_TAKES_ARMOR );
		
		CrimeLog( cr, crInfo( cr ) + " removes armor from " + crInfo( targetCr ) );
		
		if( targetCr.IsNpc() )
		{
			SETFLAG( armor.BrokenFlags, BI_NOTRESC );
		}
	}

	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );

	return 0;
}

int armorDelay( Item& armor )
{
	uint16 pid = armor.GetProtoId();
	int delay = 1000;
	
	uint8 armor_material = _GetItemMaterial( armor );
	switch( armor_material )
	{
		case( MATERIAL_FABRIC ):
			delay = 5000;
			break;
		case( MATERIAL_LEATHER ):
			delay = 10000;
			break;
		case( MATERIAL_ARMORED_LEATHER ):
			delay = 15000;
			break;
		case( MATERIAL_METAL ):
			delay = 20000;
			break;
		case( MATERIAL_POLYMER ):
			delay = 30000;
			break;
		case( MATERIAL_COMPOSITE ):
			delay = 50000;
			break;
		default:
			delay = 10000;
			break;
	}
	
	return delay;
}

#endif // __SERVER

#endif //CRITTER_ITEM_MOVEMENT