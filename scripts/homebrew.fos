#ifndef HOMEBREW
#define HOMEBREW

#include "_utils.fos"
#include "homebrew_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "explode_h.fos"
#include "speed_h.fos"

class Ingredient
{
	uint pid;
	float sugar_level;
	uint taste;
	
	Ingredient( uint pid, float sugar_level, uint taste )
	{
		this.pid = pid;
		this.sugar_level = sugar_level;
		this.taste = taste;
	}
}

class IngredientList
{
	Ingredient@[] list;
	
	IngredientList@ add( uint pid, float sugar_level, uint taste )
	{
		return this.add( Ingredient( pid, sugar_level, taste ) );
	}
	
	IngredientList@ add( Ingredient@ item )
	{
		if( valid( item ) )
		{
			list.insertLast( item );
		}
		
		return this;
	}
	
	int length() { return list.length() - 1; }
	
	bool have( uint pid )
	{
		for( int i = 0, l = length(); i <= l; i++ )
		{
			if( list[i].pid == pid )
			{
				return true;
			}
		}
		
		return false;
	}

	int index( uint pid )
	{
		for( int i = 0, l = length(); i < l; i++ )
		{
			if( list[i].pid == pid )
			{
				return i;
			}
		}
		
		return -1;
	}
	
	float sugar_level( int index )
	{
		if( index < 0 || index > length() )
		{
			DebugLog( "Requested index[" + index + "] out of bounds " + length() + "." );
			return 0;
		}
		
		return list[index].sugar_level;
	}
	
	uint taste( int index )
	{
		if( index < 0 || index > length() )
		{
			return 0;
		}
		return list[index].taste;
	}
}

IngredientList@ ingredients;

void checkIngredients()
{
	if( valid( ingredients ) )
	{
		return;
	}
	
	@ingredients = IngredientList()
		.add( PID_CABBAGE, 			0.04f, DRINK_FLAG_CABBAGE )
		.add( PID_VOKAS, 			0.05f, DRINK_FLAG_NUTS )
		.add( PID_FLAPJACK, 		0.10f, DRINK_FLAG_BREAD )
		.add( PID_NIGHTSHADE, 		0.10f, DRINK_FLAG_NIGHTSHADE )
		.add( PID_MUTATED_FRUIT,	0.10f, DRINK_FLAG_FRUIT )
		.add( PID_PRETZEL, 			0.13f, DRINK_FLAG_VANILLA )
		.add( PID_CORN, 			0.19f, DRINK_FLAG_CORN )
		.add( PID_COOKIE,			0.20f, DRINK_FLAG_COOKIE )
		.add( PID_PROTEIN_BAR,		0.29f, DRINK_FLAG_PROTEIN )
		.add( PID_ITCANDY, 			0.75f, DRINK_FLAG_CANDY )
		.add( PID_CARAMEL2, 		0.98f, DRINK_FLAG_CARAMEL )
	;
}

bool exist( uint pid )
{
	checkIngredients();
	
	return ingredients.have( pid );
}

int ingredient_index( uint pid )
{
	checkIngredients();
	
	return ingredients.index( pid );
}

float ingredient_sugar_level( int index )
{
	checkIngredients();
	
	return ingredients.sugar_level( index );
}

uint ingredient_taste( int index )
{
	checkIngredients();
	
	return ingredients.taste( index );
}

bool ShowMenuBrew( Critter& cr, Item& target ) //exported
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    {
        return false;
    }
	
	if( target.PicMap == PIC_POT_CLOSED )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 2, "unknown_brew_state" );
		cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_POT_INFO_CLOSED );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_OPEN_POT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 1 ), TEXTMSG_TEXT, STR_FURNITURE_MENU_PICKUP );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 2 ), TEXTMSG_TEXT, STR_DO_NOTHING );
	}
	else if( target.STATE == STATE_PREPARE )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 7, "answer_brew" );
		cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_POT_INFO_OPENED, MenuInfoOpen( target )  );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_ADD_INGRIDIENT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 1 ), TEXTMSG_TEXT, STR_SLICE_INGRIDIENTS );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 2 ), TEXTMSG_TEXT, STR_TASTE );		
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 3 ), TEXTMSG_TEXT, STR_ADD_YEAST );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 4 ), TEXTMSG_TEXT, STR_POUR_EVERYTHING_OUT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 5 ), TEXTMSG_TEXT, STR_CLOSE_POT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 6 ), TEXTMSG_TEXT, STR_FURNITURE_MENU_PICKUP );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 7 ), TEXTMSG_TEXT, STR_DO_NOTHING );
	}
	else if( target.STATE == STATE_WORKING  )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 5, "answer_cooking_brew" );
		cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_POT_INFO_OPENED, MenuInfoOpen( target )  );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_CLOSE_POT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 1 ), TEXTMSG_TEXT, STR_TASTE );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 2 ), TEXTMSG_TEXT, STR_ADD_INGRIDIENT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 3 ), TEXTMSG_TEXT, STR_POUR_EVERYTHING_OUT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 4 ), TEXTMSG_TEXT, STR_FURNITURE_MENU_PICKUP );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 5 ), TEXTMSG_TEXT, STR_DO_NOTHING );
	}
	else if( target.STATE >= STATE_FINISH  )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 6, "answer_cooking_brew_fin" );
		cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_POT_INFO_OPENED, MenuInfoOpen( target )  );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_CLOSE_POT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 1 ), TEXTMSG_TEXT, STR_TASTE );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 2 ), TEXTMSG_TEXT, STR_TAKE_OUT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 3 ), TEXTMSG_TEXT, STR_POUR_INTO_BOTTLES );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 4 ), TEXTMSG_TEXT, STR_POUR_EVERYTHING_OUT );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 5 ), TEXTMSG_TEXT, STR_FURNITURE_MENU_PICKUP );
		cr.SayMsg( SAY_DIALOGBOX_BUTTON( 6 ), TEXTMSG_TEXT, STR_DO_NOTHING );
	}
	
	cr.StatBase[ST_VAR7] = target.Id;
	return true;	
}

void unknown_brew_state( Critter& cr, uint answerI, string& answerS )
{
	if( !UnknownStateActions( cr, answerI ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_DID_NOTHING );
	}
}

bool UnknownStateActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ):
			return OpenClose( cr );
		case( 1 ):
			PickItem( cr, GetItem( cr.StatBase[ST_VAR7] ) );
			ChangeCritterSpeed( cr );		
			return true;
	}
	
	return false;
}

void answer_brew( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewActions( cr, answerI ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_DID_NOTHING );
	}
}

bool BrewActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ):
			return AddIngrigient( cr );
		case( 1 ):
			return start_slicing( cr );
		case( 2 ):
			return Taste( cr );
		case( 3 ):
			return AddFerment( cr );	
		case( 4 ):
			return DisposeBrew( cr );
		case( 5 ):
			return OpenClose( cr );
		case( 6 ):
			PickItem( cr, GetItem( cr.StatBase[ST_VAR7] ) );
			ChangeCritterSpeed( cr );		
			return true;
	}
	
	return false;
}

void answer_cooking_brew( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewCookingActions( cr, answerI ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_DID_NOTHING );
	}
}

bool BrewCookingActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ):
			return OpenClose( cr );
		case( 1 ):
			return Taste( cr );
		case( 2 ):
			return AddIngrigient( cr );
		case( 3 ):
			return DisposeBrew( cr );
		case( 4 ):
			PickItem( cr, GetItem( cr.StatBase[ST_VAR7] ) );
			ChangeCritterSpeed( cr );		
			return true;
	}
	
	return false;
}

void answer_cooking_brew_fin( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewFinActions( cr, answerI ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_DID_NOTHING );
	}
}

bool BrewFinActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ):
			return OpenClose( cr );
		case( 1 ):
			return Taste( cr );
		case( 2 ):
			return AddIngrigient( cr );
		case( 3 ):
			return start_hb_pouring( cr );
		case( 4 ):
			return DisposeBrew( cr );
		case( 5 ):
			PickItem( cr, GetItem( cr.StatBase[ST_VAR7] ) );
			ChangeCritterSpeed( cr );		
			return true;
	}
	
	return false;
}

bool AddIngrigient( Critter& cr )
{
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( !valid( target ) ) 
	{ 
		return false; 
	}
	
	ShowContainer( cr, target, TRANSFER_HEX_CONT_UP );
	return true;
}

bool TransferToPot( Critter& cr, Item& targetItem, Item& cont )
{
	if( !valid( cont ) )
	{
		return false; 
	}
	
	if( cont.STATE > 1 )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOMEBREW_READY );	
		return false; 
	}
	
	if( targetItem.GetType() != ITEM_TYPE_FOOD && targetItem.GetType() != ITEM_TYPE_DRUG && targetItem.GetType() != ITEM_TYPE_DRINK )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_ITEM_HOMEBREW );
		return false; 
	}
	
	Map@ map = cr.GetMap();
	uint transferAmount = cr.ItemTransferCount();
	uint16 targetItemPid = targetItem.GetProtoId();
	if( find_glassed_drinks( targetItem ) )
	{
		cont.CURRENT_CAPACITY += ( targetItem.Proto.Weight - 150 ) * transferAmount;
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		
		switch( targetItemPid )
		{
			case( PID_DISTIL_WATER ):
			case( PID_GLASS_BOTTLE_FULL ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_WATER );
				break;
			case( PID_GLASS_BOTTLE_DIRTY_FULL ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount;
				cont.HB_POLUTION_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount / 10;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_BAD_WATER );
				break;
			case( PID_ATOM_COLA ):
			case( PID_ATOM_COLA_SEA ):
			case( PID_TURBO_COLA ):
			case( PID_NUKA_COLA ):
			case( PID_ATOM_COLA_CHERRY ):
			case( PID_SUPER_ENERGY_DRINK ):
			case( PID_ATOM_COLA_CRAFT ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 260 ) * transferAmount;
				cont.SUGAR_LEVEL += ( targetItem.Proto.Weight - 540 ) * transferAmount;				
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_COLA );
				break;
			case( PID_BEER ):
			case( PID_BEER_LIGHT ):
			case( PID_ROOTBEER ):
			case( PID_BEER_DARK ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 250 ) * transferAmount;
				cont.SUGAR_LEVEL += ( targetItem.Proto.Weight - 550 ) * transferAmount;				
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_BEER );
				break;
			case( PID_GAMMA_GULP_BEER ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 250 ) * transferAmount;
				cont.SUGAR_LEVEL += ( targetItem.Proto.Weight - 550 ) * transferAmount;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_GAMMA_GULP );
				break;
			case( PID_ATOMIC_COCTAIL ):
			case( PID_GROG ):
			case( PID_BLOODMARRY ):
			case( PID_WHISKEY ):
			case( PID_WHISKEY_PREWAR ):
			case( PID_LIQUER ):
			case( PID_ROT_GUT ):
			case( PID_ROENTGEN_RUM ):
			case( PID_SPIRIT ):
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount;
				cont.HB_POLUTION_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount / 100;			
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_STRONG_ALCOHOL );
				break;
			default:
				cont.LIQUID_LEVEL += ( targetItem.Proto.Weight - 150 ) * transferAmount;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_LIQUID );
				break;
		}
		
		cr.AddItem( PID_BOTTLE_GLASS, transferAmount );
		
		if( find_capped_bottles( targetItem ) )
		{
			cr.AddItem( PID_REAL_BOTTLE_CAPS, transferAmount );
		}
		
		if( targetItem.HB_POLUTION_LEVEL > 0 )
		{
			cont.HB_POLUTION_LEVEL += targetItem.HB_POLUTION_LEVEL * transferAmount;
		}
		
		_SubItem( targetItem, transferAmount );
	}
	else if( find_opened_drinks( targetItem ) )
	{
		
		cont.CURRENT_CAPACITY += targetItem.REMAINING_USES * 100;
		PlayGenericSound( map, cont.HexX, cont.HexY, "homebrew_pouring.ogg", 10 );
		
		switch( targetItemPid )
		{
			case( PID_DISTIL_WATER_PRT ):
			case( PID_GLASS_BOTTLE_FULL_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 100;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_WATER );
				break;
			case( PID_GLASS_BOTTLE_DIRTY_FULL_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 100;
				cont.HB_POLUTION_LEVEL += targetItem.REMAINING_USES * 10;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_BAD_WATER );
				break;
			case( PID_ATOM_COLA_PRT ):
			case( PID_ATOM_COLA_SEA_PRT ):
			case( PID_TURBO_COLA_PRT ):
			case( PID_NUKA_COLA_PRT ):
			case( PID_ATOM_COLA_CHERRY_PRT ):
			case( PID_SUPER_ENERGY_DRINK_PRT ):
			case( PID_ATOM_COLA_CRAFT_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 78;
				cont.SUGAR_LEVEL += targetItem.REMAINING_USES * 22;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_COLA );
				break;
			case( PID_BEER_PRT ):
			case( PID_BEER_LIGHT_PRT ):
			case( PID_ROOTBEER_PRT ):
			case( PID_BEER_DARK_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 80;
				cont.SUGAR_LEVEL += targetItem.REMAINING_USES * 20;				
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_BEER );
				break;
			case( PID_GAMMA_GULP_BEER_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 80;
				cont.SUGAR_LEVEL += targetItem.REMAINING_USES * 20;	
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_GAMMA_GULP );
				break;
			case( PID_ATOMIC_COCTAIL_PRT ):
			case( PID_GROG_PRT ):
			case( PID_BLOODMARRY_PRT ):
			case( PID_WHISKEY_PRT ):
			case( PID_WHISKEY_PREWAR_PRT ):
			case( PID_LIQUER_PRT ):
			case( PID_ROT_GUT_PRT ):
			case( PID_ROENTGEN_RUM_PRT ):
			case( PID_SPIRIT_PRT ):
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 100;
				cont.HB_POLUTION_LEVEL += targetItem.REMAINING_USES * 2;					
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_STRONG_ALCOHOL );
				break;
			default:
				cont.LIQUID_LEVEL += targetItem.REMAINING_USES * 100;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_LIQUID );
				break;
		}
		
		if( targetItem.HB_POLUTION_LEVEL > 0 )
		{
			cont.HB_POLUTION_LEVEL += targetItem.HB_POLUTION_LEVEL * targetItem.REMAINING_USES / ( targetItem.Proto.Partial_Item > 0 ? targetItem.Proto.Partial_Item : 1 );
		}
		
		cr.AddItem( PID_BOTTLE_GLASS, 1 );
		_SubItem( targetItem, 1 );
	}
	else
	{
		if( cont.STATE == STATE_PREPARE )
		{
			if( ( ( targetItem.Proto.Weight * transferAmount ) + cont.CURRENT_CAPACITY ) <= cont.CAPACITY )
			{
				MoveItem( targetItem, transferAmount, cont, 0 );
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_INGRIDIENT );
				cont.CURRENT_CAPACITY += targetItem.Proto.Weight * transferAmount;
				cont.STACH_LEVEL += targetItem.Proto.Weight * transferAmount;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOMEBREW_POT_FILLED );
				return false;
			}
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BREWING_UNDER_WAY );
			return false;
		} 
	}
	
	if( cont.CURRENT_CAPACITY >= cont.CAPACITY )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POT_FULL );
		if( cont.LIQUID_LEVEL > 0 )
		{
			map.SetTextMsg( cont.HexX, cont.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_WATER_OVERFLOW );
			cont.CURRENT_CAPACITY = cont.CAPACITY;
			cont.LIQUID_LEVEL = cont.CAPACITY - ( cont.STACH_LEVEL + cont.SUGAR_LEVEL );
		}
		else
		{
			cont.CURRENT_CAPACITY = cont.CAPACITY;
		}
	}	
	
	if( cont.LIQUID_LEVEL >= cont.CAPACITY )
	{
		cont.LIQUID_LEVEL = cont.CAPACITY;
	}
	
	ShowContainer( cr, cont, TRANSFER_HEX_CONT_UP );
	return true;
}

bool TransferFromPot( Critter& cr, Item& targetItem, Item& cont )
{
	if( !valid( cont ) )
	{
		return false; 
	}
	
	uint transferAmount = cr.ItemTransferCount();
	MoveItem( targetItem, transferAmount, cr );
	uint16 targetItemPid = targetItem.GetProtoId();
	cont.CURRENT_CAPACITY -= targetItem.Proto.Weight * transferAmount;
	cont.STACH_LEVEL -= targetItem.Proto.Weight * transferAmount;
	return true;
}

bool AddFerment( Critter& cr ) 
{
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( !valid( target ) )
	{
		return false; 
	}
	
	Item@ ferment = cr.GetItem( PID_FERMENT, -1 );
	if( !valid(ferment) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_YEAST );
		return false;
	}
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_ADD_YEAST );
	PlayGenericSound( map, target.HexX, target.HexY, "ROBE.mp3", 4 );
	_SubItem( ferment, 1 );
	cr.AddItem( PID_METAL_CAN, 1);
	start_brewing( cr, target );
	return true;
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_SLICING, process_slicing )
	ltp_inited = true;
}

bool start_slicing( Critter& cr )
{
	if(!ltp_inited)
	{
		ltp_init();
	}
	
	Item@ bladeItem = _CritGetItemHand( cr );
	if( !HasBlade( cr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MUST_HOLD_KNIFE );
		return false;
	}
	
	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsInjured() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem( cr.StatBase[ST_VAR7] );
	if( valid( target ) )
	{
		Item@[] ingredientsCheck;
		if( target.GetItems( uint( -1 ), ingredientsCheck ) == 0 )
		{
			return false;
		}

		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		
		Item@[] stuff;
		target.GetItems( uint( -1 ), stuff );
		for( uint i = 0; i < stuff.length(); i++ )
		{
			cr.ParamBase[ ST_LTP_SEQUENCE ] += stuff[i].GetCount();
		}
			
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 300 ) ), "e_SlicingSound", values, true );
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );	
		StartProcess( cr, LTP_SLICING, 0, 0, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_slicing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SLICING )

  	Item@ target = GetItem( param2 );

  	if( valid( target ) )
    {
      	param0++;

		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			RecalculateSugar( cr, target );
			return 0;
		}
		
		_CritAnimateUse(cr);
		
		uint autoemote = Random( 0, 4 );
		if( autoemote == 4 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_GRINDS_INGRIDIENTS );
		}
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 300 ) ), "e_SlicingSound", values, true );
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
    }
	return 0;
}

uint e_SlicingSound( uint[]@ values )
{
	Critter@cr = GetCritter( values[ 0 ] ); 
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( SlicingSoundNames ), 10 );
	return 0;
}

bool RecalculateSugar( Critter& cr, Item& target )
{
	if( !valid( target ) )
	{
		return false;
	}
	
	Item@[] ingredients;
	if( target.GetItems( uint( -1 ), ingredients ) == 0 )
	{
		return false;
	}

	int max_weight_index = -1;
	int max_weight_value = 0;
	for( uint i = 0; i < ingredients.length(); i++ )
	{
		float sugar = 0;
        uint ingredientPid = ingredients[i].GetProtoId();
        uint ingredientsCount = ingredients[i].GetCount();
		int index = ingredient_index( ingredientPid );
		if( index != -1 )
        {
			int weight = ingredients[i].Proto.Weight * ingredientsCount;
			
			sugar = weight * ingredient_sugar_level( index ); 
            target.SUGAR_LEVEL += int( sugar );
            target.STACH_LEVEL -= int( sugar );
			
			int percentage = weight * 100 / target.CURRENT_CAPACITY;
			
			if( percentage >= 30 && weight > max_weight_value ) 
			{
				max_weight_value = weight;
				max_weight_index = index;
			}
        }
		else
		{
			target.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL + ingredients[i].Proto.Weight * 10 * ingredientsCount / 100;
		}
		
		DeleteItem( ingredients[i] );
	}	
	
	target.HOMEBREW_TYPE = max_weight_index;
	
	return true;
}

bool start_brewing( Critter& cr, Item& target )
{
	if( !valid( target ) )
	{ 
		return false;
	}
	
	if( target.LIQUID_LEVEL == 0 || target.SUGAR_LEVEL == 0 )
	{
		if( target.LIQUID_LEVEL == 0 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YEAST_WASTED_NO_WATER ); 
		} 
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YEAST_WASTED_NO_SUGAR ); 
		}
		return false;
	}
	
	target.PicMap = PIC_POT_CLOSED;
	target.Update();
	target.STATE = 1;
	uint[] values = {target.Id};
	target.EVENT = CreateTimeEvent( AFTER( SUGAR_FERMENTING_TIME ), "e_Brewing", values, true );
	return true;
}

uint e_Brewing( uint[]@ values ) 
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( !valid( target ) )
	{ 
		return 0; 
	}
	
	if( target.SUGAR_LEVEL > 0 && ( ( target.HB_SPIRIT_LEVEL * 100 + target.HB_POLUTION_LEVEL * 100 ) / target.LIQUID_LEVEL ) < MAX_SPIRIT_LEVEL )
	{
		target.SUGAR_LEVEL = target.SUGAR_LEVEL - SUGAR_FERMENTING_AMOUNT;
		target.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL + ( SUGAR_FERMENTING_AMOUNT * FERMENTING_MODIFIER / 100 );
		if( target.STATE > 0 && target.PicMap != PIC_POT_CLOSED )
		{
			uint16 HexX=0, HexY=0;
			Map @map = target.GetMapPosition( HexX, HexY );
			map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_SICKENING_SMELL );
		}
		
		return SUGAR_FERMENTING_TIME;
	}
	
	target.HB_SPIRIT_LEVEL = CLAMP( ( target.HB_SPIRIT_LEVEL * 100 / target.LIQUID_LEVEL ), 0, MAX_SPIRIT_LEVEL );
	target.STATE = STATE_FINISH;
	
	Item@[] rooted;
	target.GetItems( uint( -1 ), rooted );
	DeleteItems( rooted );
	
	if( target.STACH_LEVEL > 500 )
	{
		uint amount = uint( floor( target.STACH_LEVEL / 500 ) );
		for( uint i = 0; i < amount; i++ )
		{
			target.AddItem( PID_SHIT_BIG, 1, 0 );
			target.STACH_LEVEL -= 500;
		}
	}
	
	EraseTimeEvent( target.EVENT );
	target.EVENT = 0;
	return 0;
}

bool OpenClose( Critter& cr )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false; 
	}
	
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( !valid( target ) )
	{
		return false; 
	}
	
	if( target.PicMap == PIC_POT_CLOSED )
	{
		ProtoItem@ proto = GetProtoItem( PID_POT_ALCO );
		target.PicMap = proto.PicMap;
		target.Update();
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_OPEN_LID );
		if( target.STATE >= 2 )
		{
			uint[] values = {target.Id};
			target.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_BrewSmell", values, true );
		}
	}
	else
	{
		target.PicMap = PIC_POT_CLOSED;
		target.Update();
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_CLOSE_LID );
	}
	
	if( target.STATE > 0 && target.PicMap != PIC_POT_CLOSED )
	{
		map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_SICKENING_SMELL );
	}
	
	PlayGenericSound( map, target.HexX, target.HexY, "ROCK.mp3", 6 );
	ShowMenuBrew( cr, target );
	return true;
}

uint e_BrewSmell( uint[]@ values ) 
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( !valid( target ) )
	{
		return 0;
	}
	
	if( target.STATE >= STATE_FINISH && target.PicMap != PIC_POT_CLOSED )
	{
		uint16 HexX=0, HexY=0;
		Map @map = target.GetMapPosition( HexX, HexY );
		map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_SICKENING_SMELL );
		return REAL_MINUTE( 5 );
	}
	
	if( target.PicMap == PIC_POT_CLOSED )
	{
		EraseTimeEvent( target.EVENT );
		target.EVENT = 0;
	}
	
	return 0;
}

bool Taste( Critter&cr )
{
	Map@ map = cr.GetMap();
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( !valid( target ) )
	{
		return false; 
	}
	
	if( target.LIQUID_LEVEL <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_TASTE );
		return false; 
	}

	uint sugar = 0;
	uint state = target.STATE == 0 ? STR_HOMEBREW_WATER : ( target.STATE == 1 ? STR_HOMEBREW_FERM_WATER : STR_HOMEBREW_HOMEBREW );
	uint alcohol = 0;
	uint polution = 0;
	uint taste = 0;
	if( target.SUGAR_LEVEL <= 0 )
	{
		sugar = STR_TASTE_PLAIN; 
	}
	else if( ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) >= 1 && ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) <= 5 )
	{
		sugar = STR_TASTE_L_SWEET; 
	}
	else if( ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) >= 6 && ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) <= 10 )
	{
		sugar = STR_TASTE_SWEET; 
	}
	else
	{
		sugar = STR_TASTE_SUGARY; 
	}
	
	if( target.HB_SPIRIT_LEVEL > 0 )
	{
		uint calcSpirit = target.STATE == 1 ? CLAMP( ( target.HB_SPIRIT_LEVEL * 100 / target.LIQUID_LEVEL ), 0, MAX_SPIRIT_LEVEL ) : target.HB_SPIRIT_LEVEL;
		if( calcSpirit >= 1 && calcSpirit <= 7 )
		{
			alcohol = STR_TASTE_L_BITTER;
		}
		else if( calcSpirit >= 8 && calcSpirit <= 15 )
		{
			alcohol = STR_TASTE_BITTER;
		}
		else
		{
			alcohol = STR_TASTE_V_BITTER;
		}
	}
	
	if( target.HB_POLUTION_LEVEL > 0 )
	{
		if( target.HB_POLUTION_LEVEL >= 1 && target.HB_POLUTION_LEVEL <= 10 )
		{
			polution = STR_TASTE_L_ROTTEN;
		}
		else if( target.HB_POLUTION_LEVEL >= 11 && target.HB_POLUTION_LEVEL <= 20 )
		{
			polution = STR_TASTE_ROTTEN;
		}
		else
		{
			polution = STR_TASTE_V_ROTTEN;
		}
	}
	
	if( target.HOMEBREW_TYPE < 0 )
	{
		taste = STR_TASTE_NOTHING_SPECIAL;
	}
	else
	{
		for( int i = 10; i < 20; i ++ )
		{
			if( ISBIT( target.HOMEBREW_TYPE, i ) )
			{
				taste = i;
			}
		}
	}
	
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOMEBREW_POT_TASTE, "$sugar@msg text " + sugar + "@$state@msg text " + state + "@$taste@msg text " + taste + "@" + ( alcohol == 0 ? "$alcohol@msg text " + STR_TASTE_EMPTY_STR + "@" : "$alcohol@msg text " + alcohol + "@" ) + ( polution == 0 ? "$polution@msg text " + STR_TASTE_EMPTY_STR + "@" : "$polution@msg text " + polution + "@" ) );
	ShowMenuBrew ( cr, target );
	return true;
}

bool another_ltp_inited = false;
void another_ltp_init()
{
	LTPREG( LTP_HB_POURING, process_pouring )
	another_ltp_inited = true;
}

bool start_hb_pouring( Critter& cr )
{
	if( !another_ltp_inited )
	{ 
		another_ltp_init();
	}
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem( cr.StatBase[ ST_VAR7 ] );
	if( valid( target ) )
	{
		if( ( target.LIQUID_LEVEL / 100 ) < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POURED_ALL_OUT );
			return false;
		}
		
		if( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_HOMEBREW_PRT ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_TARE );
			return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcSequence( cr, target );
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		StartProcess( cr, LTP_HB_POURING, 0, 0, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		return true;
	}
	
	return false;
}

int CalcSequence( Critter& cr, Item& target )
{
	int sequence = 0;
	
	int bottlesCount = cr.CountItem( PID_BOTTLE_GLASS );
	ProtoItem@ bottleProto = GetProtoItem( PID_BOTTLE_GLASS );
	sequence += bottlesCount * 5; // constant val for glass bottles, need rewamp with entire bottle code
	if( sequence > target.LIQUID_LEVEL / 100 )
	{
		sequence = target.LIQUID_LEVEL / 100;
	}

	return sequence;
}

uint process_pouring( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_HB_POURING )

  	Item@ target = GetItem( param2 );
  	if( valid( target ) )
	{
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_HOMEBREW_PRT ) ) || ( target.LIQUID_LEVEL / 100 ) < 1 )
		{
			uint TXT = target.LIQUID_LEVEL / 100 < 1 ? STR_BOTTLED_HOMEBREW : STR_NEED_MORE_BOTTLES;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, TXT );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FILLS_BOTTLE );
		}
		
		if( hasItem( cr, PID_HOMEBREW_PRT ) )
		{
			Item@ homebrewPrt = getItem( cr, PID_HOMEBREW_PRT );
			if( homebrewPrt.REMAINING_USES < int( homebrewPrt.Proto.Partial_Item ) )
			{
				target.LIQUID_LEVEL -= 100;
				homebrewPrt.REMAINING_USES ++;
				homebrewPrt.EXTRA_WEIGHT = homebrewPrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
				
				homebrewPrt.HOMEBREW_TYPE = ingredient_taste( target.HOMEBREW_TYPE );
				homebrewPrt.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL;
				homebrewPrt.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL;
				
				homebrewPrt.Update();
				
				if( homebrewPrt.REMAINING_USES == int( homebrewPrt.Proto.Partial_Item ) )
				{
				
					Item@ homebrew = cr.AddItem( PID_HOMEBREW, 1 );
					
					homebrew.HOMEBREW_TYPE = homebrewPrt.HOMEBREW_TYPE;
					homebrew.HB_SPIRIT_LEVEL = homebrewPrt.HB_SPIRIT_LEVEL;
					homebrew.HB_POLUTION_LEVEL = homebrewPrt.HB_POLUTION_LEVEL;

					_SubItem( homebrewPrt , 1 );
				
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BOTTLE_FULL_HOMEBREW );
				
					homebrew.Update();
				}
			}
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
		else
		{
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ homebrewPrt = cr.AddItem( PID_HOMEBREW_PRT, 1 );
		
			target.LIQUID_LEVEL -= 100;
			homebrewPrt.REMAINING_USES ++;
			homebrewPrt.EXTRA_WEIGHT = homebrewPrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
				
			homebrewPrt.HOMEBREW_TYPE = target.HOMEBREW_TYPE;
			homebrewPrt.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL;
			homebrewPrt.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL;
			
			homebrewPrt.Update();
		}
		
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
    }
	
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	return 0;
}

bool DisposeBrew( Critter& cr )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false; 
	}
	
	Item@ target = map.GetItem( cr.StatBase[ST_VAR7] );
	if( !valid( target ) )
	{
		return false; 
	}
	
	if( target.CURRENT_CAPACITY == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POT_CLEANED );
		return false;
	}
	
	_CritAnimateUse(cr);
	if( target.LIQUID_LEVEL == 0 && target.STACH_LEVEL > 0 )
	{
        cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_SHAKES_OUT );
		map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_INGRIDIENTS_SCATTER );
		DropContainerItems( map, target );
	}
	else if( target.LIQUID_LEVEL >= target.CURRENT_CAPACITY )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_POURS_OUT );
		map.SetTextMsg( target.HexX, target.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_PADDLE_FORMED );
		PlayGenericSound( map, target.HexX, target.HexY, "splash.ogg", 10 );
	}
	else
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_POURS_OUT );
		PlayGenericSound( map, target.HexX, target.HexY, "splash.ogg", 10 );
		DropContainerItems( map, target );
	}
	
	target.STATE = STATE_PREPARE;
	target.CURRENT_CAPACITY = 0;
	EraseTimeEvent( target.EVENT );
	target.EVENT = 0;
	target.LIQUID_LEVEL = 0;
	target.STACH_LEVEL = 0;
	target.SUGAR_LEVEL = 0;
	target.HB_POLUTION_LEVEL = 0;
	target.HOMEBREW_TYPE = -1;
	target.HB_SPIRIT_LEVEL = 0;
	ProtoItem@ proto = GetProtoItem( PID_POT_ALCO );
	target.PicMap = proto.PicMap;
	target.Update();
	
	return true;
}	

string MenuInfoOpen( Item& target)
{
	string lex = "$state";
	switch( target.STATE )
	{
		case( STATE_PREPARE ):
			lex += STR_INSERT_TEXT_LINE( STR_POT_INFO_STATE_PREPARE );
			break;
		case( STATE_WORKING ):
			lex += STR_INSERT_TEXT_LINE( STR_POT_INFO_STATE_WORKING );
			break;
		case( STATE_FINISH ):
			lex += STR_INSERT_TEXT_LINE( STR_POT_INFO_STATE_FINISH );
			break;
	}
	
	float CURRENT_CAPACITY = target.CURRENT_CAPACITY / 1000.0f;
	float CAPACITY = target.CAPACITY / 1000.0f;
	
	lex += "$current" + CURRENT_CAPACITY +  "$max" + CAPACITY;
	
	return lex;
}

//~run homebrew _GetHomebrew 0 0 0
void _GetHomebrew( Critter& player, int param0, int param1, int param2 )
{
	if( param0 == 0 && param1 == 0 && param2 == 0 )
	{
		Item@ homebrew = player.AddItem( PID_HOMEBREW, 1 );
		if( valid( homebrew ) )
		{
			homebrew.HB_SPIRIT_LEVEL = 40;
			SETFLAG( homebrew.HOMEBREW_TYPE, DRINK_FLAG_VANILLA );
			homebrew.Update();
		}
		return;
	}
	
	for( int i = 0; i < param2; i++ )
	{
		Item@ homebrew = player.AddItem( PID_HOMEBREW, 1 );
		if( valid( homebrew ) )
		{
			homebrew.HB_SPIRIT_LEVEL = param0;
			homebrew.HOMEBREW_TYPE = ingredients.list[param1].taste;
			homebrew.Update();
		}
	}
}

#endif //HOMEBREW
