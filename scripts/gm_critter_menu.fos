class GenericParam
{
	uint num;
	string name;

	GenericParam(uint num, string name)
	{
		this.num = num;
		this.name = name;
	}
}

class GenericParamArray
{
	GenericParam@[] arr;
	uint arrLen;

	GenericParamArray@ Add(num, name)
	{
		this.arr.insertLast(GenericParam(num, name));
		this.arrLen++;
		return this;
	}

	GenericParam@ Get(uint index)
	{
		if(index >= arrLen) return null;
		return arr[index];
	}

	uint GetLen()
	{
		return arrLen;
	}
}

class MenuGMCritter: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritter( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		if( menu.Button( "Parameters" ) )
		{
			MenuGMCritterStats@ menu_stats = MenuGMCritterStats( crId );
			menu_stats.level = level + 1;
			return menu.OpenChild( "Level " + menu_stats.level, menu_stats );
		}
		if( menu.Button( "NPC Flags" ) )
		{
			MenuGMCritterNPCModes@ menu_modes = MenuGMCritterNPCModes( crId );
			menu_modes.level = level + 1;
			return menu.OpenChild( "Level " + menu_modes.level, menu_modes );
		}
		if( menu.Button( "Inventory" ) )
		{
			ShowContainer( gm, cr, TRANSFER_FAR_CRIT );
			return false;
		}
		if( menu.Button( "Prone/Get up" ) )
		{
			unsafe_sleep( cr, Random( 0, 1 ), 1, 0, null, null );
			gm.Say( SAY_NETMSG, "Target " + ( cr.ParamBase[ CR_SLEEPING_STATE ] != 0 ? "can't get up" : "will get up soon" ) + "." );
			return true;
		}
		if( menu.ButtonMsg( TEXTMSG_TEXT, STR_GMBTN_SKILL_ROLL ) )
		{
			StartPlayerMenuSkillRolls( player, cr );
		}
		if( menu.ButtonSay( "Give item PID", "Item PID:" ) )
		{
			//int num = 0;
			//string sayStr = menu.GetSayValue();

			//if( !StrToInt( sayStr, num ) || number <= 0 )
			//{
			//	gm.Say( SAY_NETMSG, "Wrong number." );
			//	return true;
			//}

			//cr.AddItem( player.ParamBase[ CR_VAL0 ], number );
			//return true;
		}
		if( menu.Button( "Psy-mode" ) )
		{
			MenuGMCritterStatsPsy@ menu_psy = MenuGMCritterStatsPsy( crId );
			menu_psy.level = level + 1;
			return menu.OpenChild( "Level " + menu_psy.level, menu_psy );
		}
		if( menu.Button( "Full heal" ) )
		{
			FullHeal( cr );
			unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " healed NPC " + cr.Name + " " + cr.Id, null );
			return true;
		}
		if( menu.ButtonSay( "WALK " + cr.StatBase[ST_WALK_TIME], "ST_WALK_TIME:" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_WALK_TIME, num);
			return true;
		}
		if( menu.ButtonSay( "RUN " + cr.StatBase[ST_RUN_TIME], "ST_RUN_TIME" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_RUN_TIME, num);
			return true;
		}
		if( menu.Button( ( cr.ParamBase[ CR_FIXED_SPEED ] != 0 ? "" : "UN" ) + "FIXED SPEED" ) )
		{
			cr.ParamBase[ CR_FIXED_SPEED ] = cr.ParamBase[ CR_FIXED_SPEED ] == 0 ? 1 : 0;
			return true;
		}
		if( menu.Button( "Name NPC" ) )
		{

		}
		if( menu.Button( ( cr.ParamBase[ CR_AFK_MODE ] == 0 ? "Enable " : "Disable " ) + "AFK Mode") )
		{

		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";
		Critter@ cr = GetCritter(crId);

		if(valid(cr))
		{
			string ai_script = "\n|0x3CF800 AI_Script: |0xFFFF00 "; 
			uint script_id = cr.GetScriptId();
			ai_script += script_id > 0 ? GetScriptName( script_id ) : "none!";

			info = "NPC, PID #" + cr.GetProtoId() + ", dialog #" + cr.ParamBase[ ST_DIALOG_ID ] + ".\n" +
					"CRTYPE " + cr.StatBase[ST_BASE_CRTYPE] + " W " + cr.StatBase[ST_WALK_TIME] + " R " + cr.StatBase[ST_RUN_TIME] +
					( cr.ParamBase[ CR_FIXED_SPEED ] != 0 ? " FIXED " : "" ) + "\nTeam Id: |0xFFFF00 " + cr.Stat[ ST_TEAM_ID ] + " |0x3CF800 Aggression: |0xFFFF00 " + ( cr.ParamBase[ CR_IS_AGGRESSIVE ] == 0 ? "Passive" : "Active" )
					+ ai_script;
			
			if( cr.IsDead() )
			{
				info += "\nKilled by critter #" + cr.StatBase[ ST_KILLER_PERSON ];
				if( cr.StatBase[ ST_KILLER_PERSON ] != 0 )
				{
					Critter@ killer = GetCritter( cr.StatBase[ ST_KILLER_PERSON ] );
					if( !valid( killer ) )
					{
						info += " [N/A]";
					}
					else
					{
						if( killer.IsPlayer() )
						{
							info += " [player]:\n\t'" + GetPlayerName( killer.Id ) + "'";
						}
						else
						{
							info += " [mob]\nDLG " + killer.Stat[ST_DIALOG_ID] + " PID " + killer.GetProtoId() + "\nBODYTYPE " + killer.StatBase[ ST_BODY_TYPE ] + " SKIN " + killer.StatBase[ ST_BASE_CRTYPE ];
						}
					}
				}
				if( cr.StatBase[ ST_KILLER_WEAPON ] != 0 )
				{
					info += ", " + GetConstantName(CONSTANTS_ITEM, cr.StatBase[ ST_KILLER_WEAPON ]);
				}
			}
		}
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ NPCModesList;

class MenuGMCritterNPCModes: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterNPCModes( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		for(uint i = 0, len = NPCModesList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = NPCModesList.Get(i);
			if( menu.Button( "" + cr.ModeBase[ currParam.num ] + " - " + currParam.name ) )
			{
				cr.ModeBase[ currParam.num ] = (cr.Mode[ currParam.num ] == 0 ? 1 : 0);
				return true;
			}
		}

        if( menu.Button( "" + cr.ModeBase[ MODE_BARTER_ONLY_CASH ] + " - MODE_BARTER_ONLY_CASH" ) )
		{
			cr.ModeBase[ MODE_BARTER_ONLY_CASH ] = ( cr.ModeBase[ MODE_BARTER_ONLY_CASH ] + 1 ) % 3;
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "NPC Flags:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStats: DefaultMenuHandler
{
	uint crId
	uint level;
	
    MenuGMCritterStats( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "SPECIAL" ) )
		{
			MenuGMCritterStatsSPECIAL@ menu_special = MenuGMCritterStatsSPECIAL( crId );
			menu_special.level = level + 1;
			return menu.OpenChild( "Level " + menu_special.level, menu_special );
		}
        if( menu.Button( "SKILLS" ) )
		{
			MenuGMCritterStatsSkills@ menu_skills = MenuGMCritterStatsSkills( crId );
			menu_skills.level = level + 1;
			return menu.OpenChild( "Level " + menu_skills.level, menu_skills );
		}
        if( menu.Button( "Traumas" ) )
		{
			MenuGMCritterStatsTraumas@ menu_traumas = MenuGMCritterStatsTraumas( crId );
			menu_traumas.level = level + 1;
			return menu.OpenChild( "Level " + menu_traumas.level, menu_traumas );
		}
        if( menu.Button( "Modes" ) )
		{
			MenuGMCritterStatsModes@ menu_modes = MenuGMCritterStatsModes( crId );
			menu_modes.level = level + 1;
			return menu.OpenChild( "Level " + menu_modes.level, menu_modes );
		}
		if( cr.IsNpc() && menu.Button( "NPC Modes" ) )
		{
			MenuGMCritterNPCModes@ menu_npc_modes = MenuGMCritterNPCModes( crId );
			menu_npc_modes.level = level + 1;
			return menu.OpenChild( "Level " + menu_npc_modes.level, menu_npc_modes );
		}
        if( menu.Button( "Traits" ) )
		{
			MenuGMCritterStatsTraits@ menu_traits = MenuGMCritterStatsTraits( crId );
			menu_traits.level = level + 1;
			return menu.OpenChild( "Level " + menu_traits.level, menu_traits );
		}
        if( menu.Button( "Skin/bodytype" ) )
		{

		}
        if( menu.ButtonSay( "Faction", "ST_FACTION" ) )
		{
			string factionStr = menu.GetSayValue();
			int factionNum;
			
			if( factionStr == "0" || factionStr == " " )
			{
				factionNum = 0;
			}
			else
			{
				factionNum = GetStrHash( factionStr );
				if( GetName( factionNum ) == "" )
				{
					gm.Say( SAY_NETMSG, "Faction does not exist" );
				}
			}

			GMChangeParam( gm, cr, ST_FACTION, factionNum );
			
			return true;
		}
        if( menu.Button( "Extra Param" ) )
		{
			MenuGMCritterExtraParams@ menu_extra_params = MenuGMCritterExtraParams( crId );
			menu_extra_params.level = level + 1;
			return menu.OpenChild( "Level " + menu_extra_params.level, menu_extra_params );
		}
        if( menu.ButtonSay( "Lex" ) )
		{

		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";

		Critter@ cr = GetCritter(crId);

		if(valid(cr))
		{
			string[] SPECIAL_names = { "S", "P", "E", "C", "I", "A", "L" };
			info = "param, protoId - " + cr.GetProtoId() + ", dialog - " + cr.ParamBase[ ST_DIALOG_ID ] + "\n";
			for( uint i = 0; i < SPECIAL_names.length(); i++ )
			{
				info += SPECIAL_names[i] + cr.Param[ ST_STRENGTH + i ] + " ";
			}
			info += "\nLVL " + cr.StatBase[ ST_LEVEL ] + 
					" EXP " + cr.StatBase[ ST_EXPERIENCE ] + 
					" SP " + cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] + 
					" PP " + cr.StatBase[ ST_UNSPENT_PERKS ];
		}

		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ SPECIALList;

class MenuGMCritterStatsSPECIAL: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsSPECIAL( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		for(uint i = 0, len = SPECIALList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = SPECIALList.Get(i);
			if( menu.ButtonSay( "" + cr.ParamBase[ currParam.num ] + " - " + currParam.name, currParam.name ) )
			{
				sayStr = menu.GetSayValue();
				StrToInt(sayStr, num);
				GMPanelChangeParam(gm, cr, currParam.num, num);
				return true;
			}
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "SPECIAL:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ SkillsList;

class MenuGMCritterStatsSkills: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsSkills( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		for(uint i = 0, len = SkillsList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = SkillsList.Get(i);
			if( menu.ButtonSay( "" + cr.SkillBase[ currParam.num ] + " - " + currParam.name, currParam.name ) )
			{
				sayStr = menu.GetSayValue();
				StrToInt(sayStr, num);
				GMPanelChangeParam(gm, cr, currParam.num, num);
				return true;
			}
		}

		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Skills:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ TraumasList;

class MenuGMCritterStatsTraumas: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsTraumas( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		for(uint i = 0, len = TraumasList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = TraumasList.Get(i);
			if( menu.Button( "" + cr.DamageBase[ currParam.num ] + " - " + currParam.name ) )
			{
				cr.ParamBase[ currParam.num ] = (cr.Param[ currParam.num ] == 0 ? 1 : 0);
				return true;
			}
		}

        if( menu.Button( "" + FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) + " - bullet wound" ) )
		{
			ChangeStatus( cr, CR_STATUS_BULLET_OVER, 0, !FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) );
			return true;
		}
        if( menu.Button( "" + FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) + " - heavy wound" ) )
		{
			ChangeStatus( cr, CR_STATUS_HEAVY_DMG, 0, !FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) );
			return true;
		}
        if( menu.ButtonSay( "" + cr.StatBase[ ST_BLEED ] + " - bleeding", "bleeding" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_BLEED, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ CR_DIRTINESS ] + " - dirt", "dirt" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, CR_DIRTINESS, num);
			return true;
		}
        if( menu.Button( "medical check" ) )
		{
			ProccessDoctorSkill( player, cr, true );
			return false;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Traumas:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ PlayerModesList;

class MenuGMCritterStatsModes: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsModes( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		for(uint i = 0, len = PlayerModesList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = PlayerModesList.Get(i);
			if( menu.Button( "" + cr.ModeBase[ currParam.num ] + " - " + currParam.name ) )
			{
				cr.ModeBase[ currParam.num ] = (cr.Mode[ currParam.num ] == 0 ? 1 : 0);
				return true;
			}
		}

        if( menu.Button( "" + cr.ParamBase[ QST_MEDIUM ] + " - PSY_MODE" ) )
		{
			MenuGMCritterStatsPsy@ menu_psy = MenuGMCritterStatsPsy( crId );
			menu_psy.level = level + 1;
			return menu.OpenChild( "Level " + menu_psy.level, menu_psy );
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Player flags:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsPsy: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsPsy( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "0 - Default" ) )
		{
			GMChangePsyMode(cr, 0);
			return true;
		}
        if( menu.Button( "1 - Beast Master (disabled)" ) )
		{
			GMChangePsyMode(cr, 1);
			return true;
		}
        if( menu.Button( "2 - Faceless" ) )
		{
			GMChangePsyMode(cr, 2);
			return true;
		}
        if( menu.Button( "3 - Voice" ) )
		{
			GMChangePsyMode(cr, 3);
			return true;			
		}
        if( menu.ButtonSay( "4 - Mimic", "ID" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, QST_MEDIUM, num);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";
		Critter@ cr = GetCritter(crId);
		if(valid(cr))
		{
			info = "Psy-mode: " + cr.ParamBase[ QST_MEDIUM ];
		}
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ TraitsList;

class MenuGMCritterStatsTraits: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsTraits( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		for(uint i = 0, len = TraitsList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = TraitsList.Get(i);
			if( menu.Button( "" + cr.TraitBase[ currParam.num ] + " - " + currParam.name ) )
			{
				cr.TraitBase[ currParam.num ] = (cr.Trait[ currParam.num ] == 0 ? 1 : 0);
				return true;
			}
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "TRAITS:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

GenericParamArray@ ExtraParamList;

class MenuGMCritterExtraParams: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterExtraParams( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.ButtonSay( "" + cr.ParamBase[ ST_CURRENT_HP ] + " ST_CURRENT_HP" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);

			if(num > 0)
			{
				cr.ToLife();
			}

			GMPanelChangeParam(gm, cr, ST_CURRENT_HP, num);
			return true;
		}

		for(uint i = 0, len = ExtraParamList.GetLen(); i < len; i++)
		{
			GenericParam@ currParam = ExtraParamList.Get(i);
			if( menu.ButtonSay( "" + cr.ParamBase[ currParam.num ] + " - " + currParam.name ) )
			{
				sayStr = menu.GetSayValue();
				StrToInt(sayStr, num);
				GMPanelChangeParam(gm, cr, currParam.num, num);
				return true;
			}
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Extra parameters:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterNPCStats: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterNPCStats( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		menu.Button( "Dialog " + cr.ParamBase[ ST_DIALOG_ID ] )
		{

		}
        menu.Button( "AI_ID "  + cr.ParamBase[ ST_AI_ID ]  )
		{

		}
        menu.Button( "NPC ROLE " + cr.ParamBase[ ST_NPC_ROLE ]  )
		{

		}
        menu.Button( "Master Id " + cr.ParamBase[ MERC_MASTER_ID ] )
		{

		}
        menu.Button( "TEAM_ID " + cr.ParamBase[ ST_TEAM_ID ] )
		{

		}
        menu.Button( "Faction: " + GetName( cr.ParamBase[ ST_FACTION ] ) )
		{

		}
        menu.Button( "Rank( disabled ): " + cr.ParamBase[ ST_FR_LEADERSHIP ] )
		{

		}
		menu.Button( "Aggression: " + ( cr.ParamBase[ CR_IS_AGGRESSIVE ] == 0 ? "Passive" : "Active" ) )
		{

		}
		menu.Button( "BAG_ID " + cr.ParamBase[ ST_BAG_ID ] )
		{
			
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";
		Critter@ cr = GetCritter(crId);

		if(valid(cr))
		{
			info = "NPC params, protoId - " + cr.GetProtoId() + ", dialog - " + cr.ParamBase[ ST_DIALOG_ID ];
		}

		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

void GMChangeParam( Critter& gm, Critter& target, uint param, int val )
{
    if( !valid( target ) || !valid(gm) || !isGm(gm) )
	{
        return;
    }
	
	int last_value_base = target.ParamBase[ param ];
	int last_value = target.Param[ param ];
	
	target.ParamBase[ param ] = val;
	
	string text = "param " + param 
					+ " from " + last_value_base + "/" + last_value 
					+ " to " + val + " ( " + target.ParamBase[ param ] + "/" + target.Param[ param ] + " ) " 
					+ " for critter: " + target.Id + ".";
	
	gm.Say( SAY_NETMSG, "You have changed " + text );
	unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " changed " + text, null );
	
	if( param == ST_BLEED )
	{
		ChangeStatus( target, CR_STATUS_BLEED, 0, val > 0 );
	}
	
	if( param == QST_INVIS )
	{
		target.RefreshVisible();
	}
	
	if( param == QST_MEDIUM )
	{
		Critter@[] source = { target };
		Critter@[] crits;
		
		target.GetMap().GetCrittersSeeing( source, true, FIND_ALL | FIND_ONLY_PLAYERS, crits );

		for( int i = 0, j = crits.length(); i < j; i++ )
		{
			crits[i].RunClientScript( "client_names@_updateNick", target.Id, 0, 0, null, null );
		}
	}

	ChangeCritterSpeed(target);
}

void GMChangePsyMode(Critter& cr, uint mode)
{
	if(!valid(cr)) return;

	cr.ParamBase[ QST_MEDIUM ] = mode;
	if( mode == 2 )
	{
		cr.ParamBase[ QST_MEDIUM ] = -2;
	}
	
	Map@ map = cr.GetMap();

	if(!valid(map)) return;

	Critter@[] source = { cr };
	Critter@[] crits;
	map.GetCrittersSeeing( source, true, FIND_ALL | FIND_ONLY_PLAYERS, crits );

	for( int i = 0, j = crits.length(); i < j; i++ )
	{
		Critter@ crit = crits[ i ];
		if( crit.IsPlayer() )
		{
			crit.RunClientScript( "client_names@_updateNick", cr.Id, 0, 0, null, null );
		}
	}
}

void InitGMMenus()
{
	@NPCModesList = GenericParamArray();
	NPCModesList.Add(MODE_NO_HOME, "MODE_NO_HOME")
	.Add(MODE_NO_ENEMY_STACK, "MODE_NO_ENEMY_STACK")
	.Add(MODE_NO_LOOT, "MODE_NO_LOOT")
	.Add(MODE_NO_STEAL, "MODE_NO_STEAL")
	.Add(MODE_NO_PUSH, "MODE_NO_PUSH")
	.Add(MODE_NO_WALK, "MODE_NO_WALK")
	.Add(MODE_NO_RUN, "MODE_NO_RUN")
	.Add(MODE_NO_LOOSE_LIMBS, "MODE_NO_LOOSE_LIMBS")
	.Add(MODE_NO_KNOCK, "MODE_NO_KNOCK")
	.Add(MODE_NO_BARTER, "MODE_NO_BARTER")
	.Add(MODE_NO_TALK, "MODE_NO_TALK")
	.Add(MODE_UNLIMITED_AMMO, "MODE_UNLIMITED_AMMO")
	.Add(MODE_INVULNERABLE, "MODE_INVULNERABLE")
	.Add(MODE_QUESTGIVER, "MODE_QUESTGIVER")
	.Add(MODE_NO_CORPSE_DECAY, "MODE_NO_CORPSE_DECAY");

	@SPECIALList = GenericParamArray();
	SPECIALList.Add(ST_STRENGTH, "Strength")
	.Add(ST_PERCEPTION, "Perception")
	.Add(ST_ENDURANCE, "Endurance")
	.Add(ST_CHARISMA, "Charisma")
	.Add(ST_INTELLECT, "Intellect")
	.Add(ST_AGILITY, "Agility")
	.Add(ST_LUCK, "Luck");

	@SkillsList = GenericParamArray();
	SkillsList.Add(SK_SMALL_GUNS, "Small guns")
	.Add(SK_MEDIUM_GUNS, "Medium guns")
	.Add(SK_BIG_GUNS, "Big guns")
	.Add(SK_UNARMED, "Unarmed")
	.Add(SK_MELEE_WEAPONS, "Melee")
	.Add(SK_THROWING, "Thrown")
	.Add(SK_FIRST_AID, "First aid")
	.Add(SK_DOCTOR, "Doctor")
	.Add(SK_SNEAK, "Sneak")
	.Add(SK_LOCKPICK, "Lockpick")
	.Add(SK_STEAL, "Steal")
	.Add(SK_TRAPS, "Traps")
	.Add(SK_SCIENCE, "Science")
	.Add(SK_REPAIR, "Repair")
	.Add(SK_CRAFT, "Craft")
	.Add(SK_BARTER, "Barter")
	.Add(SK_GAMBLING, "Gambling")
	.Add(SK_OUTDOORSMAN, "Outdorsman");

	@TraumasList = GenericParamArray();
	TraumasList.Add(DAMAGE_EYE, "Eyes")
	.Add(DAMAGE_RIGHT_ARM, "Right Arm")
	.Add(DAMAGE_LEFT_ARM, "Left Arm")
	.Add(DAMAGE_RIGHT_LEG, "Right Leg")
	.Add(DAMAGE_LEFT_LEG, "Left Leg");

	@PlayerModesList = GenericParamArray();
	PlayerModesList.Add(MODE_NO_PVP, "MODE_NO_PVP")
	.Add(MODE_INVULNERABLE, "MODE_INVULNERABLE")
	.Add(MODE_NO_LOOT, "MODE_NO_LOOT")
	.Add(MODE_NO_STEAL, "MODE_NO_STEAL")
	.Add(MODE_NO_PUSH, "MODE_NO_PUSH")
	.Add(MODE_NO_WALK, "MODE_NO_WALK")
	.Add(MODE_NO_RUN, "MODE_NO_RUN")
	.Add(MODE_NO_LOOSE_LIMBS, "MODE_NO_LOOSE_LIMBS")
	.Add(MODE_NO_KNOCK, "MODE_NO_KNOCK")
	.Add(MODE_UNLIMITED_AMMO, "MODE_UNLIMITED_AMMO")
	.Add(MODE_QUESTGIVER, "MODE_QUESTGIVER")
	.Add(MODE_NO_CORPSE_DECAY, "MODE_NO_CORPSE_DECAY");

	@TraitsList = GenericParamArray();
	TraitsList.Add(TRAIT_FAST_METABOLISM, "TRAIT_FAST_METABOLISM")
	.Add(TRAIT_BRUISER, "TRAIT_BRUISER")
	.Add(TRAIT_SMALL_FRAME, "TRAIT_SMALL_FRAME")
	.Add(TRAIT_SADIST, "TRAIT_SADIST")
	.Add(TRAIT_FINESSE, "TRAIT_FINESSE")
	.Add(TRAIT_KAMIKAZE, "TRAIT_KAMIKAZE")
	.Add(TRAIT_HEAVY_HANDED, "TRAIT_HEAVY_HANDED")
	.Add(TRAIT_FAST_SHOT, "TRAIT_FAST_SHOT")
	.Add(TRAIT_BLOODY_MESS, "TRAIT_BLOODY_MESS")
	.Add(TRAIT_NERD, "TRAIT_NERD")
	.Add(TRAIT_SURE_FOOTED, "TRAIT_SURE_FOOTED")
	.Add(TRAIT_CHEM_RELIANT, "TRAIT_CHEM_RELIANT")
	.Add(TRAIT_CHEM_RESISTANT, "TRAIT_CHEM_RESISTANT")
	.Add(TRAIT_SEX_APPEAL, "TRAIT_SEX_APPEAL")
	.Add(TRAIT_SKILLED, "TRAIT_SKILLED")
	.Add(TRAIT_NIGHT_PERSON, "TRAIT_NIGHT_PERSON");

	@ExtraParamList = GenericParamArray();
	ExtraParamList.Add(ST_MAX_LIFE, "ST_MAX_LIFE")
	.Add(ST_AGE, "ST_AGE")
	.Add(ST_GENDER, "ST_GENDER")
	.Add(ST_DYSPNEA, "ST_DYSPNEA")
	.Add(ST_HUNGER, "ST_HUNGER")
	.Add(ST_THIRST, "ST_THIRST")
	.Add(ST_POISONING_LEVEL, "ST_POISONING_LEVEL")
	.Add(ST_RADIATION_LEVEL, "ST_RADIATION_LEVEL")
	.Add(ST_DRUNK, "ST_DRUNK")
	.Add(CR_DEATH_STAGE, "CR_DEATH_STAGE")
	.Add(ST_SCALE_FACTOR, "ST_SCALE_FACTOR");

}