#ifndef AI_TRADER
#define AI_TRADER

#include "_utils.fos"
#include "trader_table.fos"

void InitTradersOnMap( Critter& cr, int, int, int )
{
	Map@ map = cr.GetMap();
	if( !valid( map) )
	{
		return;
	}
	
	Critter@[] crs;
	uint count = map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, crs );
	for( uint i = 0; i < count; i++ )
	{
		if( !crs[i].IsPlayer() )
		{
			_TraderInit( crs[i], true );
		}
	}
	cr.Say( SAY_NETMSG, "Renewing merchendise for " + count + " traders." );
}

// To test: #trader npcId dialogId
// Example: #trader 5000325 370
void _TraderInit( Critter& trader, bool firstTime )
{
	trader.ModeBase[MODE_NO_TALK] = 0;
	trader.ModeBase[MODE_NO_BARTER] = 0;
	trader.Say( SAY_EMOTE, "Looks around" );
	trader.EraseTimeEvents( CTE_TRADER );
	trader.AddTimeEvent( "cte_UpdateItems", 0, CTE_TRADER );
}

uint cte_UpdateItems( Critter& trader, int identifier, uint& stage )
{
    if( trader.IsDead() )
	{
        return trader.Timeout[ TO_REPLICATION ] + REAL_MINUTE( 1 );
    }
	return UpdateItems( trader );
}

int GetTraderIndex( Critter& trader )
{
    int dialogId = trader.Stat[ ST_DIALOG_ID ];
    if( dialogId > 0 )
	{
        return dialogId;
    }
	return -1;
}

uint UpdateItems( Critter& trader )
{
    int traderIndex = GetTraderIndex( trader );
    if( traderIndex < 0 )
	{
        return 0;
	}
    GenerateItemsForTrader( trader, traderIndex );

    return REAL_HOUR( 2 );
}

#endif // AI_TRADER