
#ifndef CLIENT_EVENT_HEADER
#define CLIENT_EVENT_HEADER

/* usage 
add this header file to client_main or whatever your client loop() function is bounded, add there ProcessEvents() function ( anywhere you like )

create callback class object for your cause

class TestEvent : EventCallback
{
    uint function(array<uint>& variables)
    {
        Message("holy fuck it works !");
		
        return 0; // return value measuring time in MS to repeat the event ( same as server side )
    }
}
TestEvent testEventto;

 create event using your function pointer
 variables can be null, time event creator will make a dummy empty one in this case
CreateTimeEvent(3000, testEventto, null); */


shared interface EventCallback
{
	uint function(array<uint>@ values);
}

shared interface IEvent
{
	void SetFunc(EventCallback& callback);
	uint GetId();
	bool IsTime();
	void Destroy();
	void Execute();
}


#ifdef CLIENT_EVENT_MODULE
#include "_macros.fos"
#include "_time.fos"
#endif

#ifndef CLIENT_EVENT_MODULE
import IEvent@ CreateTimeEvent(uint time, EventCallback& function, array<uint>@ values) from "client_event";
import void ProcessEvents() from "client_event";
import void RemoveEvent(IEvent& eventRef) from "client_event";
import IEvent@ GetEvent(uint id) from "client_event";
#endif

#endif