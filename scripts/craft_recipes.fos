#ifndef CRAFT_RECIPES
#define CRAFT_RECIPES

#include "craft_recipes.fosh"

#include "_utils.fos"
#include "json_h.fos"
#include "serializator.fos"
#include "strtoint.fos"

bool isMainCraftListInited = false;
CraftList MainCraftList;

void InitCraftList()
{
	if(isMainCraftListInited) return;

	#include "_crafts.fos"

	JSON@ craftJson = JSONParse(craftList);
	_JSON_ForEach(craftJson, @ParseCraft);

	isMainCraftListInited = true;
}

void ParseCraft(JSON@ craft, uint index)
{
    CraftRecipe currRecipe;

	if(valid(craft["Tools"]) && !craft["Tools"].isUndefined())
	{
		uint toolFlag = 0;
		
		for(uint i = 0, len = craft["Tools"].length(); i < len; i++)
		{
			if(!craft["Tools"][i].isString()) continue;
			string toolString = "";
			craft["Tools"][i] >> toolString;
			
			if(toolString == "SCREWDRIVE")
			{
				SETFLAG(toolFlag, TOOL_SCREWDRIVE);
				continue;
			}
			else if(toolString == "KNIFE")
			{
				SETFLAG(toolFlag, TOOL_KNIFE);
				continue;
			}
			else if(toolString == "MULTITOOL")
			{
				SETFLAG(toolFlag, TOOL_MULTITOOL);
				continue;
			}
			else if(toolString == "SHOVEL")
			{
				SETFLAG(toolFlag, TOOL_SHOVEL);
				continue;
			}
			else if(toolString == "SOLDERING_TOOL")
			{
				SETFLAG(toolFlag, TOOL_SOLDERING_TOOL);
				continue;
			}
			else if(toolString == "NEEDLE")
			{
				SETFLAG(toolFlag, TOOL_NEEDLE);
				continue;
			}
			else if(toolString == "CHEM_TUBES")
			{
				SETFLAG(toolFlag, TOOL_CHEM_TUBES);
				continue;
			}
			else if(toolString == "CHEM_KIT")
			{
				SETFLAG(toolFlag, TOOL_CHEM_KIT);
				continue;
			}
			else if(toolString == "AXE")
			{
				SETFLAG(toolFlag, TOOL_AXE);
				continue;
			}
			else if(toolString == "WRENCH")
			{
				SETFLAG(toolFlag, TOOL_WRENCH);
				continue;
			}
			else if(toolString == "MORTAR")
			{
				SETFLAG(toolFlag, TOOL_MORTAR);
				continue;
			}
			else if(toolString == "SLEDGE")
			{
				SETFLAG(toolFlag, TOOL_SLEDGE);
				continue;
			}
			else if(toolString == "HAMMER")
			{
				SETFLAG(toolFlag, TOOL_HAMMER);
				continue;
			}
			else if(toolString == "WELDING")
			{
				SETFLAG(toolFlag, TOOL_WELDING);
				continue;
			}
			else if(toolString == "SCISSORS")
			{
				SETFLAG(toolFlag, TOOL_SCISSORS);
				continue;
			}
			else if(toolString == "TRIPOD")
			{
				SETFLAG(toolFlag, TOOL_TRIPOD);
				continue;
			}
			else if(toolString == "CENTRIFUGE")
			{
				SETFLAG(toolFlag, TOOL_CENTRIFUGE);
				continue;
			}
			else if(toolString == "DRILL")
			{
				SETFLAG(toolFlag, TOOL_DRILL);
				continue;
			}
			else if(toolString == "FIREPLACE")
			{
				SETFLAG(toolFlag, TOOL_FIREPLACE);
				continue;
			}
			else if(toolString == "FLINT")
			{
				SETFLAG(toolFlag, TOOL_FLINT);
				continue;
			}
			else if(toolString == "KAZAN")
			{
				SETFLAG(toolFlag, TOOL_KAZAN);
				continue;
			}
			else if(toolString == "WORKBENCH")
			{
				SETFLAG(toolFlag, TOOL_WORKBENCH);
				continue;
			}
			else if(toolString == "AMMOBENCH")
			{
				SETFLAG(toolFlag, TOOL_AMMOBENCH);
				continue;
			}
			else if(toolString == "SHIV")
			{
				SETFLAG(toolFlag, TOOL_SHIV);
				continue;
			}
			else
			{
				Log("'Tools' item num." + i + " in craft num." + index + " has not valid name " + toolString);
			}
		}

		currRecipe.SetTools(toolFlag);
	}
	else
	{
		//Log("'Tools' section in craft num." + index + " is not presented");
	}

	if(valid(craft["Resources"]) && !craft["Resources"].isUndefined())
	{
		uint16[] resPids;
		uint[] resCounts;

		string[] resKeys = craft["Resources"].getKeys();
		for(uint i = 0, len = resKeys.length(); i < len; i++)
		{	
			uint16 pid = 0;

			string currKey = resKeys[i];
			string pidStr = substring(currKey, 1, currKey.length() - 2);
			StrToInt(pidStr, pid);
			
			uint count = 0;
			craft["Resources"][currKey] >> count;

			if(pid == 0 || count == 0) continue;
			if(!valid(GetProtoItem(pid)))
			{
				Log("'Resources' item num." + i + " in craft num." + index + " has not valid ProtoId " + pid);
			}
			resPids.insertLast(pid);
			resCounts.insertLast(count);
		}
		currRecipe.SetResourcesPids(resPids);
		currRecipe.SetResourcesCounts(resCounts);
	}
	else
	{
		Log("'Resources' section in craft num." + index + " is not presented");
	}

	if(valid(craft["Output"]) && !craft["Output"].isUndefined())
	{
		uint16[] outPids;
		uint[] outCounts;

		string[] outKeys = craft["Output"].getKeys();
		for(uint i = 0, len = outKeys.length(); i < len; i++)
		{	
			uint16 pid = 0;

			string currKey = outKeys[i];
			string pidStr = substring(currKey, 1, currKey.length() - 2);
			StrToInt(pidStr, pid);
			
			uint count = 0;
			craft["Output"][currKey] >> count;

			if(pid == 0 || count == 0) continue;
			if(!valid(GetProtoItem(pid)))
			{
				Log("'Output' item num." + i + " in craft num." + index + " has not valid ProtoId " + pid);
			}
			outPids.insertLast(pid);
			outCounts.insertLast(count);
		}
		currRecipe.SetOutputPids(outPids);
		currRecipe.SetOutputCounts(outCounts);
	}
	else
	{
		Log("'Output' section in craft num." + index + " is not presented");
	}
	
	if(valid(craft["Profession"]) && !craft["Profession"].isUndefined())
	{
		string profStr = "";
		craft["Profession"] >> profStr;
		profStr = substring(profStr, 1, profStr.length() - 2);
		uint prof = 0;
		StrToInt(profStr, prof);
		currRecipe.SetProfession(prof);
	}
	else
	{
		Log("'Profession' key in craft num." + index + " is not presented");
	}

	if(valid(craft["Tier"]) && !craft["Tier"].isUndefined())
	{
		uint tier = 0;
		craft["Tier"] >> tier;
		currRecipe.SetTier(tier);
	}
	else
	{
		Log("'Tier' key in craft num." + index + " is not presented");
	}
	
	if(valid(craft["Filter"]) && !craft["Filter"].isUndefined())
	{
		for(uint i = 0, len = craft["Filter"].length(); i < len; i++)
		{
			if(!craft["Filter"][i].isString()) continue;
			string filterString = "";
			craft["Filter"][i] >> filterString;
			
			if(filterString == "CRAFT_PARTS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_PARTS);
				continue;
			}
			else if(filterString == "CRAFT_SMALL_GUNS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_SMALL_GUNS);
				continue;
			}
			else if(filterString == "CRAFT_CLOTHES")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_CLOTHES);
				continue;
			}
			else if(filterString == "CRAFT_MELEE")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_MELEE);
				continue;
			}
			else if(filterString == "CRAFT_TOOLS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_TOOLS);
				continue;
			}
			else if(filterString == "CRAFT_CHEM")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_CHEM);
				continue;
			}
			else if(filterString == "CRAFT_MEDIUM_GUNS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_MEDIUM_GUNS);
				continue;
			}
			else if(filterString == "CRAFT_ARMOR")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_ARMOR);
				continue;
			}
			else if(filterString == "CRAFT_TRAPS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_TRAPS);
				continue;
			}
			else if(filterString == "CRAFT_BACK")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_BACK);
				continue;
			}
			else if(filterString == "CRAFT_AMMO")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_AMMO);
				continue;
			}
			else if(filterString == "CRAFT_BIG_GUNS")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_BIG_GUNS);
				continue;
			}
			else if(filterString == "CRAFT_HEAD")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_HEAD);
				continue;
			}
			else if(filterString == "CRAFT_THROWN")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_THROWN);
				continue;
			}
			else if(filterString == "CRAFT_FURNITURE")
			{
				SETFLAG(currRecipe.FilterFlags, FILTER_FURNITURE);
				continue;
			}
			else
			{
				Log("'Filter' item num." + i + " in craft num." + index + " has not valid name " + filterString);
			}
		}
	}
	else
	{
		Log("'Filter' section in craft num." + index + " is not presented");
	}

	#ifdef __CLIENT
	string craftName = "";

	for(uint i = 0, len = currRecipe.Output.length(); i < len; i++)
	{
		craftName += GetMsgStr(TEXTMSG_ITEM, currRecipe.Output[i] * 100);
		if(currRecipe.OutputCount[i] > 1)
		{
			craftName += " " + currRecipe.OutputCount[i] + " " + GetMsgStr(TEXTMSG_GAME, STR_FIX_PIECES);
		}
		if(i != len - 1)
		{
			craftName += GetMsgStr(TEXTMSG_GAME, STR_AND);
		}
	}

	currRecipe.SetName(craftName);
	#endif // __CLIENT

	MainCraftList.Add(currRecipe);
}

CraftRecipe@ GetCraftByPID(uint pid)
{
	return MainCraftList.GetByPID(pid);
}

uint GetMaxCraftsCount()
{
	return MainCraftList.Len;
}

#endif // CRAFT_RECIPES