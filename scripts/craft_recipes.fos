#ifndef CRAFT_RECIPES
#define CRAFT_RECIPES

#include "_utils.fos"
#include "json_h.fos"
#include "serializator.fos"

class CraftRecipe
{
	// Tools needed in craft
	uint16[]	Tools;

	// Items needed in craft
	uint16[]	Resources;
	uint[]		ResourcesCount;

	// Output Items
	uint16[]	Output;
	uint[]		OutputCount;

	// Other
	uint Profession = 0;
	uint Tier = 0;

	CraftRecipe@ SetResourcesPids(uint16[] pids)
	{
		this.Resources = pids;
		return this;
	}

	CraftRecipe@ SetResourcesCounts(uint[] counts)
	{
		this.ResourcesCount = counts;
		return this;
	}

	CraftRecipe@ SetToolPids(uint16[] pids)
	{
		this.Tools = pids;
		return this;
	}

	CraftRecipe@ SetOutputPids(uint16[] pids)
	{
		this.Output = pids;
		return this;
	}

	CraftRecipe@ SetOutputCounts(uint[] counts)
	{
		this.OutputCount = counts;
		return this;
	}

	CraftRecipe@ SetProfession(uint profession)
	{
		this.Profession = profession;
		return this;
	}

	CraftRecipe@ SetTier(uint tier)
	{
		this.Tier = tier;
		return this;
	}

#ifdef __SERVER
	int[] Serialize()
	{
		Serializator serializator;

		serializator.Set(Tools);
		serializator.Set(Resources);
		serializator.Set(ResourcesCount);
		serializator.Set(Output);
		serializator.Set(OutputCount);
		serializator.Set(Profession);
		serializator.Set(Tier);
		
		return serializator.Buff2Int();
	}
#endif // __SERVER

#ifdef __CLIENT
	void Deserialize(Serializator& buff)
	{
		buff.Get(Tools);
		buff.Get(Resources);
		buff.Get(ResourcesCount);
		buff.Get(Output);
		buff.Get(OutputCount);
		buff.Get(Profession);
		buff.Get(Tier);
	}
#endif // __CLIENT
}

class CraftList
{
	CraftRecipe@[] Recipes;
	uint Len = 0;

	CraftList@ Add(CraftRecipe@ newEntry)
	{
		this.Recipes.insertLast(newEntry);
		Len = Recipes.length();
		return this;
	}

	CraftRecipe@ GetByPID(uint pid)
	{
		if(pid >= Len) return null;
		return Recipes[pid];
	}
}

bool isMainCraftListInited = false;
CraftList MainCraftList;
int crc32Sum = 0;

#ifdef __SERVER
int[] CraftListBin;

void InitCraftList()
{
	if(isMainCraftListInited) return;

	#include "_crafts.fos"

	JSON@ craftJson = JSONParse(craftList);
	_JSON_ForEach(craftJson, @ParseCraft);

	crc32Sum = crc32b(CraftListBin);

	isMainCraftListInited = true;
}

void PushCraftToBin(int[] craft)
{
	for(uint i = 0, len = craft.length(); i < len; i++)
	{
		CraftListBin.insertLast(craft[i]);
	}
}

void ParseCraft(JSON@ craft, uint index)
{
    CraftRecipe currRecipe;

	uint16[] toolPids;
	for(uint i = 0, len = craft["Tools"].length(); i < len; i++)
	{
		if(!craft["Tools"][i].isString()) continue;
		string toolString = "";
		craft["Tools"][i] >> toolString;
		int toolPid = GetProtoIdByName(toolString);
		if(toolPid == 0) continue;

		toolPids.insertLast(toolPid);
	}
	currRecipe.SetToolPids(toolPids);

	for(uint i = 0, len = currRecipe.Tools.length(); i < len; i++)
	{
		Log("" + currRecipe.Tools[i] + "\n");
	}

	PushCraftToBin(currRecipe.Serialize());
	MainCraftList.Add(currRecipe);
}

void unsafe_CompareCRC32( Critter& player, int clientCRC32, int, int, string@, int[]@ )
{
	if(clientCRC32 == crc32Sum) return;

	player.RunClientScript( "craft_recipes@RecvCraftList", 0, 0, 0, null, CraftListBin );
}

void unsafe_PleaseSendCraftList( Critter& player, int, int, int, string@, int[]@ )
{
	player.RunClientScript( "craft_recipes@RecvCraftList", 0, 0, 0, null, CraftListBin );
}

#endif // __SERVER

#ifdef __CLIENT
bool ShouldAskServerForCrafts = false;

void TryGetNewCraftList()
{
	if(!ShouldAskServerForCrafts)
	{
		RunServerScriptUnsafe( "craft_recipes@unsafe_CompareCRC32", crc32Sum, 0, 0, null, null );
	}
	else
	{
		RunServerScriptUnsafe( "craft_recipes@unsafe_PleaseSendCraftList", crc32Sum, 0, 0, null, null );
	}
}

void RecvCraftList( int, int, int, string@, int[]@ craftList )
{
	Serializator netRead(craftList);

	while(!netRead.IsEOF())
	{
		CraftRecipe currRecipe;
		currRecipe.Deserialize(netRead);
		MainCraftList.Add(currRecipe);
	}

	netRead.SetCurPos(0);
	crc32Sum = crc32b(netRead.Buff2Int());

	string binPath = "data\\cache\\" + __Host + "." + __Port + "\\crafts.bin";
	netRead.SaveFile(binPath);
	ShouldAskServerForCrafts = false;
}

bool TryParseCraftBin()
{
	string binPath = "data\\cache\\" + __Host + "." + __Port + "\\crafts.bin";
	
	Serializator fileRead;
	if(!fileRead.LoadFile(binPath))
	{
		return false;
	}

	while(!fileRead.IsEOF())
	{
		CraftRecipe currRecipe;
		currRecipe.Deserialize(fileRead);
		MainCraftList.Add(currRecipe);

		for(uint i = 0, len = currRecipe.Tools.length(); i < len; i++)
		{
			Message("" + currRecipe.Tools[i] + "\n");
		}
	}

	fileRead.SetCurPos(0);
	crc32Sum = crc32b(fileRead.Buff2Int());

	return true;
}

void InitCraftList()
{
	if(isMainCraftListInited) return;

	if(!TryParseCraftBin())
	{
		Log("Failed to load crafts from cache. Will try to download when connect to server.");
		ShouldAskServerForCrafts = true;
	}
	else
	{
		isMainCraftListInited = true;
	}
}
#endif // __CLIENT

#endif // CRAFT_RECIPES