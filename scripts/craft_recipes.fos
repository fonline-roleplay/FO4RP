#ifndef CRAFT_RECIPES
#define CRAFT_RECIPES

#include "craft_recipes.fosh"

#include "_utils.fos"
#include "json_h.fos"
#include "serializator.fos"
#include "strtoint.fos"

bool isMainCraftListInited = false;
CraftList MainCraftList;

void InitCraftList()
{
	if(isMainCraftListInited) return;

	#include "_crafts.fos"

	JSON@ craftJson = JSONParse(craftList);
	_JSON_ForEach(craftJson, @ParseCraft);

	isMainCraftListInited = true;
}

void ParseCraft(JSON@ craft, uint index)
{
    CraftRecipe currRecipe;

	uint16[] toolPids;
	for(uint i = 0, len = craft["Tools"].length(); i < len; i++)
	{
		if(!craft["Tools"][i].isString()) continue;
		string toolString = "";
		craft["Tools"][i] >> toolString;
		toolString = substring(toolString, 1, toolString.length() - 2);
		
		uint16 toolPid = 0;
		StrToInt(toolString, toolPid);
		if(toolPid == 0) continue;

		toolPids.insertLast(toolPid);
	}
	currRecipe.SetToolPids(toolPids);

	uint16[] resPids;
	uint[] resCounts;

	string[] resKeys = craft["Resources"].getKeys();
	for(uint i = 0, len = resKeys.length(); i < len; i++)
	{	
		uint16 pid = 0;

		string currKey = resKeys[i];
		string pidStr = substring(currKey, 1, currKey.length() - 2);
		StrToInt(pidStr, pid);
		
		uint count = 0;
		craft["Resources"][currKey] >> count;

		if(pid == 0 || count == 0) continue;
		resPids.insertLast(pid);
		resCounts.insertLast(count);
	}
	currRecipe.SetResourcesPids(resPids);
	currRecipe.SetResourcesCounts(resCounts);

	uint16[] outPids;
	uint[] outCounts;

	string[] outKeys = craft["Output"].getKeys();
	for(uint i = 0, len = outKeys.length(); i < len; i++)
	{	
		uint16 pid = 0;

		string currKey = outKeys[i];
		string pidStr = substring(currKey, 1, currKey.length() - 2);
		StrToInt(pidStr, pid);
		
		uint count = 0;
		craft["Output"][currKey] >> count;

		if(pid == 0 || count == 0) continue;
		outPids.insertLast(pid);
		outCounts.insertLast(count);
	}
	currRecipe.SetOutputPids(outPids);
	currRecipe.SetOutputCounts(outCounts);

	string profStr = "";
	craft["Profession"] >> profStr;
	profStr = substring(profStr, 1, profStr.length() - 2);
	uint prof = 0;
	StrToInt(profStr, prof);
	currRecipe.SetProfession(prof);

	uint tier = 0;
	craft["Tier"] >> tier;
	currRecipe.SetTier(tier);

	for(uint i = 0, len = craft["Filter"].length(); i < len; i++)
	{
		if(!craft["Filter"][i].isString()) continue;
		string filterString = "";
		craft["Filter"][i] >> filterString;
		
		if(filterString == "CRAFT_PARTS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_PARTS);
			continue;
		}
		else if(filterString == "CRAFT_SMALL_GUNS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_SMALL_GUNS);
			continue;
		}
		else if(filterString == "CRAFT_CLOTHES")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_CLOTHES);
			continue;
		}
		else if(filterString == "CRAFT_MELEE")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_MELEE);
			continue;
		}
		else if(filterString == "CRAFT_TOOLS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_TOOLS);
			continue;
		}
		else if(filterString == "CRAFT_CHEM")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_CHEM);
			continue;
		}
		else if(filterString == "CRAFT_MEDIUM_GUNS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_MEDIUM_GUNS);
			continue;
		}
		else if(filterString == "CRAFT_ARMOR")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_ARMOR);
			continue;
		}
		else if(filterString == "CRAFT_TRAPS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_TRAPS);
			continue;
		}
		else if(filterString == "CRAFT_BACK")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_BACK);
			continue;
		}
		else if(filterString == "CRAFT_AMMO")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_AMMO);
			continue;
		}
		else if(filterString == "CRAFT_BIG_GUNS")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_BIG_GUNS);
			continue;
		}
		else if(filterString == "CRAFT_HEAD")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_HEAD);
			continue;
		}
		else if(filterString == "CRAFT_THROWN")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_THROWN);
			continue;
		}
		else if(filterString == "CRAFT_FURNITURE")
		{
			SETFLAG(currRecipe.FilterFlags, FILTER_FURNITURE);
			continue;
		}
	}

	#ifdef __CLIENT
	string craftName = "";

	for(uint i = 0, len = currRecipe.Output.length(); i < len; i++)
	{
		craftName += GetMsgStr(TEXTMSG_ITEM, currRecipe.Output[i] * 100);
		if(currRecipe.OutputCount[i] > 1)
		{
			craftName += " " + currRecipe.OutputCount[i] + " " + GetMsgStr(TEXTMSG_GAME, STR_FIX_PIECES);
		}
		if(i != len - 1)
		{
			craftName += GetMsgStr(TEXTMSG_GAME, STR_AND);
		}
	}

	currRecipe.SetName(craftName);
	#endif // __CLIENT

	MainCraftList.Add(currRecipe);
}

CraftRecipe@ GetCraftByPID(uint pid)
{
	return MainCraftList.GetByPID(pid);
}

uint GetMaxCraftsCount()
{
	return MainCraftList.Len;
}

#endif // CRAFT_RECIPES