#ifndef CRITTER_STATUS
#define CRITTER_STATUS

#include "_utils.fos"
#include "critter_status_h.fos"

void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set )
{
    bool onlyFlag = false;

    if( set )
    {
        switch( status )
        {
			case( CR_STATUS_BLEED ):
				BleedCritter( cr, value );
				break;
			default:
				break;
        }
        SETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
    }
    else
    {
        switch( status )
        {
			case( CR_STATUS_HEAVY_DMG ):
				onlyFlag = true;
				break;
			case( CR_STATUS_BULLET_OVER ):
				onlyFlag = true;
				break;
			default:
				break;
        }

        if( onlyFlag && FLAG( cr.StatBase[ ST_CRSTATUS ], status ) )
		{
            UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
		}
	}
}

void BleedCritter( Critter& cr, int bleedValue )
{
	cr.StatBase[ ST_BLEED ] += bleedValue;
    
    uint[] indexes, durations, rates;
    int eventCount = cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates );
    if( eventCount > 0 )
    {
        return;
    }
    
    if( cr.StatBase[ ST_BLEED ] > 0 )
    {
        SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
    }
    else
    {
        UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
    }
    
    uint time = CLAMP( MAX_BLEED_TIME - cr.StatBase[ ST_BLEED ], MIN_BLEED_TIME, MAX_BLEED_TIME );
    cr.AddTimeEvent( "cte_bleed", REAL_SECOND( MIN_BLEED_TIME ), CTE_BLEED, 0 );
}

uint cte_bleed( Critter& cr, int identifier, uint& rate )
{
    if( !valid( cr ) )
    {
        return 0;
    }
    
	if( cr.Param[CR_IGNORE_BLEED] != 0 )
	{
		return REAL_SECOND( MIN_BLEED_TIME );
	}
	
	if( cr.IsDead() )
	{
		cr.StatBase[ ST_BLEED ] = 0;
	}
	
	int bleed_rate = BLEED_RATE;
	
	if( cr.IsKnockout() )
	{
		bleed_rate /= 2;
	}
	
    if( cr.Stat[ ST_BLEED ] <= 0 )
    {
        UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
        return 0;
    }
    
    cr.StatBase[ ST_CURRENT_HP ] -= bleed_rate;
    cr.StatBase[ ST_BLEED ] -= ( bleed_rate + cr.Trait[ TRAIT_FAST_METABOLISM ] );
    
    uint16 hx = cr.HexX, hy = cr.HexY;
    Map@ map = cr.GetMap();
    if( valid( map ) )
    {
        CheckBlood( map, hx, hy );
    }
    
    uint time = CLAMP( MAX_BLEED_TIME - cr.StatBase[ ST_BLEED ], MIN_BLEED_TIME , MAX_BLEED_TIME );
	
    return REAL_SECOND( time );
}

void CheckBlood( Map& map, uint16 hx, uint16 hy )
{
    bool wasBlooded = false;
    Item@[] dirts;
    Item@ dirt = null;
    map.GetItems( hx, hy, dirts );
	
    for( uint i = 0, len = dirts.length(); i < len; i ++ )
    {
        @ dirt = dirts[i];
        if( !valid( dirt ) )
        {
            continue;
        }
        
        uint dirtPid = dirt.GetProtoId();

        for( uint j = 0; j < 4; j ++ )
        {
			uint level = 0;
            if( bloods[j].find( dirtPid ) != -1 )
            {
                dirt.BLOOD_AMOUNT++;
				if( dirt.BLOOD_AMOUNT < 2 )
				{
					level = 1;
				}
				else if( dirt.BLOOD_AMOUNT < 3 )
				{
					level = 2;
				}
				else
				{
					level = 3;
				}

				if( dirt.BLOOD_AMOUNT < 4 )
				{
					dirt.ChangeProto( bloods[level][ Random( 0, bloods[level].length() - 1 )] );
				}
				
                wasBlooded = true;
                break;
            }
        }
    }
    
    dirts.resize(0);
    
    if( !wasBlooded )
    {
        AddBlood( map, hx, hy, 0 );
	}
}

void AddBlood( Map& map, uint16 hx, uint16 hy, uint size )
{
	uint pid = bloods[ size ][ Random( 0, bloods[size].length() - 1) ];
	map.AddItem( hx, hy, pid, 1 );
	
	Item@ blood = null;
	Item@[] ground;
	map.GetItems( hx, hy, ground );

	if( !valid( ground ) )
	{
		return;
	}
	
	for( uint i = 0, len = ground.length(); i < len; i++ )
	{
		if( bloods[size].find( ground[i].GetProtoId() ) > -1 )
		{
			@blood = ground[i];
			if( size == 2 )
			{
				blood.BLOOD_AMOUNT = 4;
			}
			break;
		}
	}
	
	ground.resize(0);
	
	if( valid( blood ) )
	{
		uint[] values = { blood.Id };
		blood.BLOOD_TE = CreateTimeEvent( __FullSecond + REAL_MINUTE( BLOOD_DRY_TO ), "e_dryup", values, true );
	}
}

uint e_dryup( uint[]@ values )
{
	Item@ blood = GetItem( values[0] );
	if( !valid( blood ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( blood.MapId );
	if( !valid( map ) )
	{
		return 0;
	}
	
	if( map.GetRain() == 0 || Random( 1, 5 ) != 5 || map.HasRoof( blood.HexX, blood.HexY ) )
	{
		DeleteItem( blood );
		return 0;
	}
	
	if( blood.BLOOD_AMOUNT > 0 )
	{
		blood.BLOOD_AMOUNT --;
		return REAL_MINUTE( BLOOD_DRY_TO );
	}
	
	DeleteItem( blood );
	return 0;
}

void DropBleed( Critter& cr )
{
    uint[] indexes;
    uint[] rates;
    uint[] durations;

    if( cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates ) > 0 )
	{
        cr.EraseTimeEvents( CTE_BLEED );
	}
}

#endif // CRITTER_STATUS