#include "_macros.fos"

import uint CountMapPlayers( Map@ map ) from "manager";
import uint GetAllPlayers( Critter@[]& crs ) from "manager";
import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";

#define MaxSize		19
#define ListSize	( MaxSize - 2 )

#define Page		ParamBase[ST_VAR1]

//~run teleports go 0 0 0
void go( Critter& cr, int p0, int p1, int p2 )
{
	ShowTeleports(cr);
}

//import void ShowTeleports( Critter& cr ) from "teleports";
void ShowTeleports( Critter& cr ) //exported
{
	InitTeleports();
	cr.Page = 0;
	teleports.show( cr );
}

TeleportList@ teleports;
void InitTeleports()
{
	if( valid( teleports ) ) return;

	@teleports = CreateTeleports( "Телепорты" )
	//  .add( "NAME",	   LOCATIONPID,	MAP_N,   X,   Y )
		//Базовые:
		.add( "Активация",			92,		0, 337, 184 )
		.add( "Сон",				93,		0, 296, 178 )
		.add( "Рай",				95,		0, 129, 77 )
		.add( "Ад",					300,	0, 229, 177 )
		//Побережье к северу от СФ:
		.add( "Подстанция",			102, 	0, 195, 221 )
		.add( "Магазины",			103, 	0, 193, 218 )
		.add( "Пирс",				104, 	0, 191, 229 )
		.add( "Холм",				105, 	0, 159, 175 )
		.add( "Шахта",				105, 	1, 195, 199 )
		.add( "Руины",				106, 	0, 182, 172 )
		.add( "Бродвей",			107, 	0, 169, 175 )
		.add( "Лагерь",				108, 	0, 161, 185 )
		.add( "Склады",				109, 	0, 195, 205 )
		//Внешняя пустошь:
		.add( "СФ-Пирс",			114,	0, 158, 198 )
		.add( "СФ-Главный",			117,	0, 167, 177 )
		.add( "НКР",				111,	0,  62, 102 )
		.add( "Рено",				112,	0, 269, 167 )
		//Танкер:
		.add( "Верхняя палуба",		110, 	0, 199, 228 )
		.add( "Торговая Палуба",	110, 	1, 165, 209 )
		.add( "Барная Палуба",		110, 	2, 165, 209 )
		.add( "Инженерная палуба",	110, 	3, 239, 200 )
		.add( "Дыра",				110,	4, 271, 202 )
		.add( "Башня",				110, 	5, 187, 246 )
		.add( "Подпалуба №1",		110, 	6, 187, 246 )
		.add( "Подпалуба №2",		110, 	7, 187, 246 )
		.add( "Подпалуба №3",		110, 	8, 187, 246 )
		//Ивент с урановым караваном:
		.add( "Поворот",			200,	0, 170, 174 )
		.add( "Дорога",				201,	0, 174, 174 )
		.add( "Заправка",			202,	0, 174, 174 )
		//Транзитные карты руин:
		.add( "Руины №1",			303,	0, 237, 184 )
		.add( "Руины №2",			303,	1, 237, 184 )
		.add( "Руины №3",			303,	2, 237, 184 )
		//Транзитные карты берега:
		.add( "ЧИСТО ВОДА",			304,	8, 237, 184 )
		.add( "Берег №1",			304,	0, 237, 184 )
		.add( "Берег №2",			304,	1, 237, 184 )
		.add( "Берег №3",			304,	2, 237, 184 )
		.add( "Берег №4",			304,	3, 237, 184 )
		.add( "Берег №5",			304,	4, 237, 184 )
		.add( "Берег №6",			304,	5, 237, 184 )
		.add( "Берег №7",			304,	6, 237, 184 )
		.add( "Берег №8",			304,	7, 237, 184 )
		//Транзитные карты леса:
		.add( "Лес №1",			    301,	0, 237, 184 )
		.add( "Лес №2",			    301,	1, 237, 184 )
		.add( "Лес №3",			    301,	2, 237, 184 )
		.add( "Лес №4",			    301,	3, 237, 184 )
		.add( "Лес №5",			    301,	4, 237, 184 )
		.add( "Лес №6",			    301,	5, 237, 184 )
		.add( "Лес №7",			    301,	6, 237, 184 )
		.add( "Лес №8",			    301,	7, 237, 184 )
		.add( "Лес №9",			    301,	8, 237, 184 )
		.add( "Лес №10",			301,	9, 237, 184 )
		//Транзитные карты пустыни:
		.add( "Пустыня №1",			302,	0, 237, 184 )
		.add( "Пустыня №2",			302,	1, 237, 184 )
		.add( "Пустыня №3",			302,	2, 237, 184 )
		.add( "Пустыня №4",			302,	3, 237, 184 )
		.add( "Пустыня №5",			302,	4, 237, 184 )
		.add( "Пустыня №6",			302,	5, 237, 184 )
		.add( "Пустыня №7",			302,	6, 237, 184 )
		.add( "Пустыня №8",			302,	7, 237, 184 )
		.add( "Пустыня №9",			302,	8, 237, 184 )
		.add( "Пустыня №10",		302,	9, 237, 184 )

		//Саттеро-сессия:
		// .add( "Форт Саттер",			25,		0, 237, 184 )
		// .add( "Старый Пирс",			40,		0, 157, 158 )
		// .add( "Феникс",				41,		0, 151, 167 )
		// .add( "Свалка",				42,		0, 207, 187 )
		// .add( "Северо-Запад",		13,		0, 237, 184 )
		// .add( "Север: Кратер",		14,		0, 237, 184 )
		// .add( "Север: Церковь",		15,		0, 237, 184 )
		// .add( "Северо-Восток",		16,		0, 237, 184 )
		// .add( "Запад: Руины",		17,		0, 237, 184 )
		// .add( "Восток: Руины",		18,		0, 237, 184 )
		// .add( "Запад: Железка",		19,		0, 237, 184 )
		// .add( "Восток: Железка",		20,		0, 237, 184 )
		// .add( "Юго-Запад",			21,		0, 237, 184 )
		// .add( "Юг: Руины",			22,		0, 237, 184 )
		// .add( "Юг: Парк",			23,		0, 237, 184 )
		// .add( "Юго-Восток",			24,		0, 237, 184 )
	;
}

#ifndef __TELEPORT_CLASSES
	#define __TELEPORT_CLASSES
	
	class Pos
	{
		uint mapId;
		uint x;
		uint y;
		
		Pos( Map@ map, uint x, uint y )
		{
			this.mapId = valid( map ) ? map.Id : 0;
			this.x = x;
			this.y = y;
		}

		Pos( uint mapId, uint x, uint y )
		{
			this.mapId = mapId;
			this.x = x;
			this.y = y;
		}
		
		bool TransitToMap( Critter& cr )
		{
			if( mapId == 0 ) return false;
			
			Map@ map = GetMap( mapId );
			if( !valid( map ) ) return false;
			
			int attempt = 0;
			uint16 hexX = x, hexY = y;
			while( attempt < 10 )
			{
				if( !map.IsHexPassed( hexX, hexY ) )
					map.MoveHexByDir( hexX, hexY, Random( 0, 5 ), 1 );
				attempt++;
			}

			if( !map.IsHexPassed( hexX, hexY ) )
			{
				cr.Say( SAY_NETMSG, "Гексы заняты." );
				return false;
			}
			
			cr.TransitToMap( mapId, hexX, hexY, cr.Dir );
			
			Location@ loc = map.GetLocation();
			if( valid(loc) )
				cr.SetWorldPos( loc.WorldX, loc.WorldY );
			else
				cr.Say( SAY_NETMSG, "Вы не знаете, где точно находитесь." );
			
			return true;
		}
	}

	class Teleport
	{
		string name;
		uint LocationPID;
		uint MapNumber;
		Pos pos;
		
		Teleport( string name, uint locPID, uint mapN, uint x, uint y )
		{
			this.name = name;
			this.LocationPID = locPID;
			this.MapNumber = mapN;
			this.pos = Pos( getMap(), x, y );
		}
		
		Map@ getMap()
		{
			return GetLocationMap( LocationPID, MapNumber );
		}
		
		string info()
		{
			Map@ map = getMap();
			return "[" + ( valid( map ) ? "" + CountMapPlayers( map ) : ( LocationPID + ":" + MapNumber ) ) + "] " + name;
			//return ( valid( map ) ? "" + CountMapPlayers( map ) : ( LocationPID + ":" + MapNumber ) ) + " " + name;
		}
		
		bool warp( Critter& cr )
		{
			return pos.TransitToMap( cr );
		}
	}

	//TODO: Группификаторы.
	
	class TeleportList
	{
		string name;
		Teleport[] list;
		
		TeleportList( string name )
		{
			this.name = name;
		}
		
		TeleportList@ add( string name, uint locPID, uint mapN, uint x, uint y )
		{
			return add( Teleport( name, locPID, mapN, x, y ) );
		}
		
		TeleportList@ add( Teleport teleport )
		{
			list.insertLast( teleport );
			return this;
		}
		
		bool show( Critter& cr )
		{
			Critter@[] crs;

			int x = cr.WorldX * 0.1, y = cr.WorldY * 0.1;
			string[] data = { "teleports@answer_TELEPORTS", "[" + x + ", " + y +"]\nСейчас " + CountMapPlayers( cr.GetMap() ) + " из " + GetAllPlayers( crs ) + " игроков на карте." };

			int len = list.length();

			if( len > MaxSize )
			{
				int start = cr.Page * ListSize;
				if( start < len )
				{
					int max = CLAMP( len, start, start + ListSize );
					data.insertLast( "[ НАЗАД ]" );
					for( int i = start; i < max; i++ )
						data.insertLast( list[i].info() );
						//data.insertLast( i + ":" + list[i].info() );
					data.insertLast( "[ ВПЕРЕД ]" );
					DIALOG_MENU( cr, data );
				}
				else
				{
					cr.Page = 0;
					return show(cr);
				}
			}
			else
			{
				for( int i = 0; i < len; i++ )
					data.insertLast( list[i].info() );
				DIALOG_MENU( cr, data );
			}
			
			return len > 0;
		}
		
		bool process( Critter& cr, uint answer )
		{
			if( list.length() > MaxSize )
			{
				if( answer == 0 )
				{
					cr.Page--;
					if( cr.Page < 0 )
						cr.Page = list.length() / ListSize;
					return show(cr);					
				}
				if( answer == ListSize + 1 || cr.Page * ListSize + answer - 1 == list.length() )
				{
					cr.Page++;
					if( cr.Page > list.length() / ListSize )
						cr.Page = 0;
					return show(cr);
				}
				return list[ cr.Page * ListSize + answer - 1 ].warp( cr );
			}
			
			if( answer < list.length() )
				return list[answer].warp( cr );
			
			return false;
		}
	}
#endif

#ifndef __TELEPORT_SUBFUNCTIONS
	#define __TELEPORT_SUBFUNCTIONS
	
	TeleportList@ CreateTeleports( string name )
	{
		return TeleportList( name );
	}

	Map@ GetLocationMap( uint location_pid )
	{
		return GetLocationMap( location_pid, 0 );
	}

	Map@ GetLocationMap( uint location_pid, uint map_index )
	{
		Location @ loc = GetLocationByPid( location_pid, 0 );
		if( !valid( loc ) ) 
		{
			Log( "There is no Location pid #" + location_pid + "." );
			return null;
		}
		Map @ map = loc.GetMapByIndex( map_index );
		if( !valid( map ) )
			Log( "There is no map # " + map_index + " at location pid #" + location_pid + "." );

		return map;
	}
	
	void answer_TELEPORTS( Critter& player, uint answerI, string& answerS )
	{
		teleports.process( player, answerI );
	}
#endif
