// Info Screen for displaying any kind of text info

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_utils.fos"
#include "serializator.fos"

string _local_buffer_string = "";

class ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@ screenOpt;
	InfoScreenOk@ OkButton;
    TextPanel @ Text;
	
    void OnShow( int p0, int p1, int p2 )
    {
        SetText( _local_buffer_string );
    }

    void OnHide( int p0, int p1, int p2 )
    {}
    
	uint8 GetTextLegth()
    {
        return Text.GetText().length();
    }
	
    void SetText( string text )
    {
        Text.SetText( text );
    }
	
	string GetText()
    {
        return Text.GetText();
    }

}

class TextPanel : IGUIElementCallbackInit, IGUIElementCallbackDraw
{
    IGUIElementOpt @ elementOpt;
    ScreenMain@ Instance;

    TextPanel( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Text = this;

    }

    void OnInit()
    {
        @elementOpt = GUI_GetElementOptions();
    }

    void OnDraw( int posX, int posY, int w, int h )
	{
		SetText( _local_buffer_string );
	}

    void SetText( string text )
    {
		elementOpt.Text( "" + text, FONT_FALLOUT, COLOR_GREEN, 0, FT_BORDERED );
    }

    string GetText()
    {
        return elementOpt.GetText();
    }
	
	uint8 GetTextLegth()
    {
        return elementOpt.GetText().length();
    }
}

class TestScreenButtonShow : IGUIElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        ::ShowScreen( CLIENT_SCREEN_INFOSCREEN, 30, 3, 3 );
    }
}

class InfoScreenOk : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    ScreenMain@ Instance;

    InfoScreenOk( ScreenMain & instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.OkButton = this;
    }

    void OnMouseClick( int click )
    {
        ::HideScreen( 0, 0, 0, 0 );
		ChangeCursor( GetLastCursor() );
    }
}

void ShowScreen( int p0, int p1, int p2, string@ p3, int[]@ p4 )
{
	string@[] tempStrs = split( p3, "#" );
	string FormattedStr;
	if( tempStrs.length() >= 2 )
	{
		FormattedStr = FormatTags( tempStrs[0], tempStrs[1] );
	}
	else
	{
		FormattedStr = tempStrs[0];
	}
	
    _local_buffer_string = FormattedStr;
    ShowScreen( CLIENT_SCREEN_INFOSCREEN, 0, p1, p2 );
}

void HideScreen( int p0, int p1, int p2, string@ p3, int[]@ p4 )
{
    GUI_HideScreen( CLIENT_SCREEN_INFOSCREEN, 0, 0, 0 );
}

void InitInfoScreen()
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_INFOSCREEN, "info_screen.png" )
    .CallbackHide( screenMain )
    .CallbackShow( screenMain )
    .AutoCursor( true, CURSOR_DEFAULT );

    TextPanel InputDigitsB( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_INFOSCREEN, "", 25, 39 )
    .CallbackInit( InputDigitsB )
	.Position( 25, 39, 355, 391 )
	.Text( "", FONT_FALLOUT, COLOR_LGREEN, 0, FT_CENTERX | FT_BORDERED );
	
	InfoScreenOk OkButton( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_INFOSCREEN, "MENUUP.FRM", 321, 466 )
    .CallbackInit( OkButton )
    .CallbackMouseClick( OkButton )
    .DownPic( "MENUDOWN.FRM" );
}

void ShowDrugScreen( int addicts_str, int drugs_str, int p2, string@ p3, int[]@ net_pack )
{
	string text;
	Serializator data(net_pack);
	int16[] addicts;
	data.Get( addicts );
	if( addicts_str > 0 )
	{
		text += YELLOW + STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_DESCRIPTION ) + GREEN;		
		for( uint i = 0; i < addicts.length(); i++ )
		{
			text += "\n" + "\t" + STR_INSERT_PARAM_NAME( addicts[i] );
		}
	}
	
	text += "\n\n" + YELLOW + STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_EFFECTS_LABEL ) + "\n";
	text += WHITE + STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_LABEL ) + GREEN;
	
    for( int i = 0; i < drugs_str; i++)
	{		
        uint8 phase_data = 0;
		uint16 drug_pid = 0;
		uint32 time_delta = 0;
		data.Get( phase_data ).Get( drug_pid ).Get( time_delta );

		string phase = formatted_stage_name( phase_data );
		string name  = formatted_pid_name( drug_pid );
		string time  = DeltaTime_HMS_short( time_delta );
		
		text += "\n" + FixedPixelSize( phase, 110 )
					 + FixedPixelSize( name,  170 )
					 + time;
	}

	_local_buffer_string = FormatTags( text, null );
    ShowScreen( CLIENT_SCREEN_INFOSCREEN, 0, 0, p2 );
}

void ShowHoloScreen( int holoId, int p1, int p2, string@ p3, int[]@ p4 )
{
    _local_buffer_string = GetMsgStr( TEXTMSG_HOLO, holoId * 10) + "\n\n" + GetMsgStr( TEXTMSG_HOLO, holoId * 10 + 1);
    ShowScreen( CLIENT_SCREEN_INFOSCREEN, 0, 0, p2 );
}

string formatted_stage_name( uint stage )
{
	string result = "[" + stage + "]";
	
	switch( stage )
	{
		case(1): result = STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_STAGE_1 ); break;
		case(2): result = STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_STAGE_2 ); break;
		case(4): result = STR_INSERT_TEXT_LINE( STR_ACTIVE_DRUGS_STAGE_ADDICTION ); break;
	}
	
	return FormatTags( result, null );
}

string formatted_pid_name( uint pid )
{
	string result;
	if( IN_RANGE( pid, ITEM_SUBTYPE_DRUG_BEGIN, ITEM_SUBTYPE_DRUG_END ) )
	{
		uint index = pid - ITEM_SUBTYPE_DRUG_BEGIN;
		result = STR_INSERT_TEXT_LINE( ITEM_SUBTYPE_DRUG_BEGIN + index );
	}
	else
	{
		result = STR_INSERT_ITEM_LINE( pid * 100 );
	}
	
	return FormatTags( result, null );
}