#ifndef WATERWORKS
#define WATERWORKS

#include "_utils.fos"
#include "waterworks_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "food_h.fos"
#include "flask_h.fos"
#include "drugs_h.fos"
#include "radiation_h.fos"
#include "firestarter_h.fos"
#include "scenery_h.fos"

class MenuWell: CenteredMenuHandler
{
    uint well_id;
    uint map_id;
	
    MenuWell(Item& well, Map& map)
	{
        well_id = well.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ well = GetItem( well_id );
		
		if( !valid( map ) )
		{
            return false;
        }

		if( !valid( well ) )
		{
            return false;
        }

		Item@ bucket = well.GetItem( PID_EMPTY_BUCKET, 0 );
		Item@ bucket2 = well.GetItem( PID_WATER_BUCKET, 0 );
		Item@ chain = well.GetItem( PID_CHAIN, 0 );

		if( isGM( cr ) )
		{
			string type = "$typeWaterworks" + STR_INSERT_ITEM_LINE( well.WATERSOURCE_DNA * 100 );
			
			if( menu.ButtonMsg( STR_WATERWORKS_MENU_TYPE, type) )
			{
				if( well.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
				{
					well.WATERSOURCE_DNA = PID_GLASS_BOTTLE_FULL_PRT;
				}
				else
				{
					well.WATERSOURCE_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
				}
			}

			if( !FLAG( well.BROKEN, BROKEN_MECHANICS ) && menu.ButtonMsg( STR_WATERWORKS_MENU_BREAK, "$breakWaterworks" ) )
			{
				SETFLAG( well.BROKEN, BROKEN_MECHANICS );
			}
			else if( FLAG( well.BROKEN, BROKEN_MECHANICS ) && menu.ButtonMsg( STR_WATERWORKS_MENU_FIX, "$fixWaterworks" ) )
			{
				UNSETFLAG( well.BROKEN, BROKEN_MECHANICS );
			}
		}
		
		if( !FLAG( well.BROKEN, BROKEN_MECHANICS ) )
		{
			if( ( valid( bucket ) || valid( bucket2 ) || well.BUCKET_POSITION > 0 ) && valid( chain ) ) 
			{ 
				@ bucket = valid( bucket) ? bucket : bucket2;
				if( well.BUCKET_POSITION == 0 )
				{
					if( menu.ButtonMsg( STR_WATERWORKS_MENU_DROP , "$dropWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_BUCKET) ) )
					{
						well.BUCKET_POSITION = CLAMP( ( 10 - well.REMAINING_CHARGE / 100 ), 1, 10);
						well.REMAINING_CHARGE += bucket.REMAINING_USES;
						
						if( well.REMAINING_CHARGE > well.MAX_CHARGE )
						{
							well.REMAINING_CHARGE = well.MAX_CHARGE;
						}
						
						DeleteItem( bucket );
						PlayChainSound( map, well );
						return true;
					}
				}
				else
				{					
					if( menu.ButtonMsg( STR_WATERWORKS_MENU_RAISE , "$raiseWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_BUCKET) ) )
					{
						start_waterwell( cr, well );
						return false;
					}
				}
			}
			
			if( well.BUCKET_POSITION == 0 )
			{
				if( menu.ButtonMsg( STR_WATERWORKS_MENU_CHECK , "$checkWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_WELL_MECHANISM) ) )
				{
					ShowContainer( cr, well, TRANSFER_HEX_CONT_UP );
					return false;
				}
			}
		}
		
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ well = GetItem(well_id);
		
		if( FLAG( well.BROKEN, BROKEN_MECHANICS ) )
		{
			return null;
		}
		
		string info;
		uint chargeInfo;
		uint bucketInfo;
		uint chainInfo;
		uint positionDisc;
		string bucketPos = "";
		
		if( ( valid( well.GetItem( PID_EMPTY_BUCKET, 0 ) ) || valid(well.GetItem( PID_WATER_BUCKET, 0 ) ) || well.BUCKET_POSITION != 0 ) )
		{
			bucketInfo = well.BUCKET_POSITION > 0 ? STR_WATERWORKS_MENU_DESC_CHAIN_UNFOLDED : STR_WATERWORKS_MENU_DESC_ALL_ORDER;
		}
		else
		{
			bucketInfo = STR_WATERWORKS_MENU_DESC_BUCKET_MISSING;
		}

		if( valid( well.GetItem( PID_CHAIN, 0 ) ) )
		{
			chainInfo =	STR_WATERWORKS_MENU_DESC_CHAIN_ORDER;
		}
		else
		{
			chainInfo = STR_WATERWORKS_MENU_DESC_NO_CHAIN_TIE;
		}
		
		 chargeInfo = well.REMAINING_CHARGE >= 700 ? STR_WATERWORKS_MENU_DESC_CLEARELY : well.REMAINING_CHARGE <= 3 ? STR_WATERWORKS_MENU_DESC_NOT_VISIBLE : STR_WATERWORKS_MENU_DESC_SHIMMERS;
		
		if( well.BUCKET_POSITION != 0 )
		{
			positionDisc = well.BUCKET_POSITION >= 7 ? STR_WATERWORKS_MENU_DESC_FULLY_UNFOLD : well.BUCKET_POSITION <= 3 ? STR_WATERWORKS_MENU_DESC_AMLOST_FULLY_UNFOLD :STR_WATERWORKS_MENU_DESC_PARTIALLY_UNFOLD;
			
			bucketPos = STR_INSERT_TEXT_LINE( STR_WATERWORKS_MENU_DESC_CHAIN ) + STR_INSERT_TEXT_LINE( positionDisc );
		}
		
		info = "$chargeWell" + STR_INSERT_TEXT_LINE( chargeInfo )
			 + "$bucketWell" + STR_INSERT_TEXT_LINE( bucketInfo )
			 + "$chainWell" + STR_INSERT_TEXT_LINE( chainInfo )
			 + "$posBucketWell" + bucketPos;

        return info;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		Item@ well = GetItem(well_id);
		return FLAG( well.BROKEN, BROKEN_MECHANICS ) ? STR_WATERWORKS_MENU_DESC_WELL_BROKEN : STR_WATERWORKS_MENU_DESC_WELL;
	}
	
}

void StartMenuWell( Critter& cr, Item& well )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }
	
    iMenuHandler@ handler = MenuWell( well, map );
    iDialogBox@ menu = OpenMenu( cr, "Well", handler );
}

void PlayChainSound( Map& map, Item & well )
{
	PlayGenericSound( map, well.HexX, well.HexY, "wellChain.ogg", 10 );
	uint[] values = {well.Id, map.Id};
	CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
}

uint e_Splash( uint[]@ values )
{
	int itemId = values[0];
	Item@ well = GetItem( itemId );
	int mapId = values[1];
	Map@ map = GetMap( mapId );
	PlayGenericSound( map, well.HexX, well.HexY, "BucketSplash.ogg", 10 );
	return 0;
}

// LongTimeProcess
bool ltp_waterwell_inited = false;
void ltp_waterwell_init()
{
	LTPREG( LTP_WATERWELL, process_waterwell )
	ltp_waterwell_inited = true;
}

bool start_waterwell( Critter& cr, Item& well )
{
	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsInjured() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	if( !ltp_waterwell_inited )
	{ 
		ltp_waterwell_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( well ) )
	{
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = well.BUCKET_POSITION;
		StartProcess( cr, LTP_WATERWELL, 0, 0, well.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_waterwell( Critter@ cr, int& param0, int& param1, int& param2 )
{
 	LTPROCESS( cr, param0, LTP_WATERWELL )

	Item@ well = GetItem( param2 );
	Map@ map = cr.GetMap();
	
  	if( valid( well ) && valid( map ) )
	{
		_CritAnimateUse(cr);
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{ 
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SPINS_BOBBIN );
		}
		
		param0++;
		
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		
		well.BUCKET_POSITION --; 
		
		map.PlaySound( WellReelSounds[ Random( 0, WellReelSounds.length() -1 ) ], well.HexX, well.HexY, 5 );
		
		if ( well.BUCKET_POSITION != 0 )
		{
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
		else if( well.BUCKET_POSITION < 0 )
		{
			
			well.BUCKET_POSITION = 0;
			uint[] values = {well.Id, map.Id};
			CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BUCKET_FELL );
			return 0;
		}
		else
		{
			if( well.REMAINING_CHARGE > 0 )
			{
				Item@ fullBucket = well.AddItem( PID_WATER_BUCKET, 1, 0 );
			
				if( well.REMAINING_CHARGE < int(fullBucket.Proto.Partial_Item) )
				{
					fullBucket.REMAINING_USES = well.REMAINING_CHARGE;
					well.REMAINING_CHARGE = 0;
				}
				else
				{
					fullBucket.REMAINING_USES = fullBucket.Proto.Partial_Item;
					well.REMAINING_CHARGE -= fullBucket.Proto.Partial_Item;
				}
				
				fullBucket.EXTRA_WEIGHT = fullBucket.REMAINING_USES * 100;
				fullBucket.DRINK_DNA = well.WATERSOURCE_DNA;
				fullBucket.FLASK_TOXIN_LEVEL = well.WATERSOURCE_TOXIN_LEVEL;
				fullBucket.FLASK_POLUTION_LEVEL = well.WATERSOURCE_POLUTION_LEVEL;
				fullBucket.Update();
				
			} 
			else
			{
				well.AddItem( PID_EMPTY_BUCKET, 1, 0 );
			}
			map.SetTextMsg( well.HexX, well.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BUCKET_APPEAR );
		}			
	}
	return 0;
}

//~run waterworks _WellsInit 0 0 0
void _WellsInit(Critter& player, int param0, int param1, int param2)
{
	FoceWellsCharge();
}

void FoceWellsCharge()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWellEvent( maps[i] );
	}
}

bool CheckMapWellEvent( Map& map )
{
	Item@[] activeWells;
	for( int i = 0, iend = Wells.length(); i < iend; i++ )
	{
		map.GetItems( Wells[i], activeWells );
	}
	
	if( activeWells.length != 0 )
	{
		for( int i = 0, iend = activeWells.length(); i < iend; i++ )
		{
			Item@ well = activeWells[i];
			if( !valid( well ) )
			{
				return false;
			}
			
			if( well.EVENT > 0 )
			{
				return false;
			}
			uint[] values = { well.Id };
			well.EVENT = CreateTimeEvent( AFTER( WATER_FILL_TIME ), "e_WellCharge", values, true );
			values.resize(0);
		}
	}
	activeWells.resize(0);
    return false;
} 

uint e_WellCharge( uint[] @ values ) 
{
	Item@ well = GetItem( values[ 0 ] );
	if( !valid( well ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( well.MapId );
	if( !valid( map ) )
	{
		return 0;
	}
	
	well.REMAINING_CHARGE += CLAMP( Random( 50, 150 ), 0, well.MAX_CHARGE );
	if( well.REMAINING_CHARGE > well.MAX_CHARGE )
	{
		well.REMAINING_CHARGE = well.MAX_CHARGE;
	}
	
	return WATER_FILL_TIME;
}


bool isFlask( Critter& cr, Item@ waterPump )
{
	return isFlask( cr, valid( waterPump ) ? waterPump.WATERSOURCE_DNA : PID_GLASS_BOTTLE_DIRTY_FULL_PRT );
}

bool isFlask( Critter& cr, int watersource_dna )
{
	Item@ flask = _CritGetItemHand( cr );
	if( !valid(flask) )
	{
		return false;
	}

	if( flask.Proto.Type != ITEM_TYPE_FLASK )
	{
		return false;
	}
	
	if( flask.DRINK_DNA == 0 || flask.DRINK_DNA == watersource_dna )
	{
		return true;
	}
	
	return false;
}

//WATERPUMP
class MenuWaterPump: CenteredMenuHandler
{
    uint waterPump_id;
    uint map_id;
	uint level;
	
    MenuWaterPump( Item& waterPump, Map& map )
	{
        waterPump_id = waterPump.Id;
        map_id = map.Id;
		level = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap(map_id);
        Item@ waterPump = GetItem(waterPump_id);
	
        if( !valid( map ) )
		{
            return false;
        }
		
		if( !valid( waterPump ) )
		{
            return false;
        }
		
		if( isGM( cr ) )
		{
			string type = "$typeWaterworks" + STR_INSERT_ITEM_LINE( waterPump.WATERSOURCE_DNA * 100 );
			
			if( menu.ButtonMsg( STR_WATERWORKS_MENU_TYPE, type) )
			{
				if( waterPump.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
				{
					waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_FULL_PRT;
				}
				else
				{
					waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
				}
				
				return true;
			}
			
			if( !FLAG( waterPump.BROKEN, BROKEN_MECHANICS ) && menu.ButtonMsg( STR_WATERWORKS_MENU_BREAK, "$breakWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_PUMP ) ) )
			{
				SETFLAG( waterPump.BROKEN, BROKEN_MECHANICS );
			}
			else if( FLAG( waterPump.BROKEN, BROKEN_MECHANICS ) && menu.ButtonMsg( STR_WATERWORKS_MENU_FIX, "$fixWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_PUMP ) ) )
			{
				UNSETFLAG( waterPump.BROKEN, BROKEN_MECHANICS );
			}
			
			if( !FLAG( waterPump.BROKEN, BROKEN_FILTER ) && menu.ButtonMsg( STR_WATERWORKS_MENU_BREAK, "$breakWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_FILTER ) ) )
			{
				SETFLAG( waterPump.BROKEN, BROKEN_FILTER );
				waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
			}
			else if( FLAG( waterPump.BROKEN, BROKEN_FILTER ) && menu.ButtonMsg( STR_WATERWORKS_MENU_FIX, "$fixWaterworks" + STR_INSERT_TEXT_LINE(STR_WATERWORKS_MENU_FILTER ) ) )
			{
				UNSETFLAG( waterPump.BROKEN, BROKEN_FILTER );
				waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_FULL_PRT;
			}
		}
		
		if( !FLAG( waterPump.BROKEN, BROKEN_MECHANICS ) )
		{
			if( waterPump.STATE > STATE_OFF )
			{
				if( menu.ButtonMsg( STR_WATERWORKS_MENU_SWITCH, "$switchWaterworks" + STR_INSERT_TEXT_LINE( STR_OFF ) ) )
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
					waterPump.STATE = STATE_OFF;
					setAnimState( waterPump );
					return true;
				}
				
				if( waterPump.REMAINING_CHARGE > 0 )
				{
					if( menu.ButtonMsg( STR_WATERWORKS_MENU_COLLECT_WATER ) )
					{
						if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, waterPump.WATERSOURCE_DNA, SLOT_HAND1 ) && !isFlask( cr, waterPump ) )
						{ 
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_TARE );
							return true;
						}

						start_gathering_water( cr, waterPump );
						return false;
						
					}
					
					if ( menu.ButtonMsg( STR_WATERWORKS_MENU_DRINK ) )
					{
						Item@ consumedDrink = cr.AddItem( waterPump.WATERSOURCE_DNA, 1 );
						consumedDrink.REMAINING_USES = 2;
						ProccessDrink( cr, cr, consumedDrink );
						_SubItem( consumedDrink, 1 );
						waterPump.REMAINING_CHARGE --;
						return true;
					}
				}
			}
			else if( menu.ButtonMsg( STR_WATERWORKS_MENU_SWITCH , "$switchWaterworks" + STR_INSERT_TEXT_LINE( STR_ON ) ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				Item@[] generators;
				map.GetItems( PID_COAL_POWERGEN, generators );

				if( generators.length() > 0 )
				{
					Item@ generator = generators[0];
					if( valid( generator ) )
					{
						if( generator.STATE != STATE_BURNING )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POWER_IS_OFF );
							return true;
						}
					}
				}
				
				waterPump.STATE = STATE_ON;
				setAnimState( waterPump );
				return true;
			}
		}
		
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ waterPump = GetItem( waterPump_id );
		Map@ map = GetMap( map_id );

		string info = STR_INSERT_TEXT_LINE( STR_WATERWORKS_MENU_DESC_WATERPUMP ) 			
					+ "$idWaterPump" + waterPump.Id	
					+ "$statusWaterPump" + STR_INSERT_TEXT_LINE( waterPump.STATE == STATE_ON ? STR_DEVICE_ONLINE : STR_DEVICE_OFFLINE )
					+ "$notFilterWaterPump"
		;		
		if( waterPump.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
		{ 
			info += STR_INSERT_TEXT_LINE( STR_NOT );
		}
		
		info += "$isBrokenWaterPump";
		if( FLAG( waterPump.BROKEN, BROKEN_MECHANICS ) )
		{
			info += STR_INSERT_TEXT_LINE( STR_WATERWORKS_MENU_DESC_PUMP_BROKEN );
		}
		
		info += "$filterDirtyWaterPump";
		if( FLAG( waterPump.BROKEN, BROKEN_FILTER ) )
		{
			info += STR_INSERT_TEXT_LINE( STR_WATERWORKS_MENU_DESC_FILTER_DIRTY );
		}
		
		float amount = waterPump.REMAINING_CHARGE / 10.0f;
		float maxAmount = waterPump.MAX_CHARGE / 10.0f;
		info += "$amountWaterPump" + amount + "$maxAmountWaterPump" + maxAmount;
		
		Item@[] generators;
		map.GetItems( PID_COAL_POWERGEN, generators );
		
		info += "$generatorWaterPump";
		if( generators.length() > 0 )
		{
			Item@ generator = generators[ 0 ];
			if( valid( generator ) )
			{
				info += STR_INSERT_TEXT_LINE( STR_WATERWORKS_MENU_DESC_STATUS_GENERATOR ) + "$statusGeneratorWaterPump" + STR_INSERT_TEXT_LINE( generator.STATE == STATE_BURNING ? STR_DEVICE_ONLINE : STR_DEVICE_OFFLINE ); 
			}
		}
		
        return info;
    }

	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_WATERWORKS_MENU_DESC_WATERPUMP;
	}
}

void StartMenuWaterPump( Critter& cr, Item& waterPump )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }
	
	iMenuHandler@ handler = MenuWaterPump( waterPump, map );
    iDialogBox@ menu = OpenMenu( cr, "Water pump", handler );
}

bool ltp_gathWater_inited = false;
void ltp_gathWater_init()
{
	LTPREG( LTP_GATHER_WATER, process_gather_water )
	ltp_gathWater_inited = true;
}

bool start_gathering_water( Critter& cr, Item@ waterPump )
{
	if( !ltp_gathWater_inited )
	{ 
		ltp_gathWater_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( waterPump ) )
	{
		if( waterPump.REMAINING_CHARGE < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_WATER_LEFT );
			return false;
		}
	
		if( waterPump.STATE < STATE_ON )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUMP_OFFLINE );
			return false;
		}
		
		Item@ hand = _CritGetItemHand( cr );
		if( !FindFlask( hand ) && !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, waterPump.WATERSOURCE_DNA, SLOT_HAND1 ) && !isFlask( cr, waterPump ) )
		{ 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_TARE );
			return false;
		}

		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcSequence( cr, waterPump );
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		StartProcess( cr, LTP_GATHER_WATER, 0, 0, waterPump.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		return true;
	}
	
	return false;
}

bool start_gathering_water( Critter& cr, uint scenery_pid )
{
	if( !ltp_gathWater_inited )
	{ 
		ltp_gathWater_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( scenSwampList.find( scenery_pid ) == -1 && water_sources.find( scenery_pid ) == -1 )
	{
		return false;
	}	

	Item@ hand = _CritGetItemHand( cr );
	if( !FindFlask( hand ) && !isFlask( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) && !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT, SLOT_HAND1 ) )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_TARE );
		return false;
	}

	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcSequence( cr, null );
	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
	StartProcess( cr, LTP_GATHER_WATER, 0, 0, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );

	return true;
}

int CalcSequence( Critter& cr, Item@ waterPump )
{
	int sequence = 0;
	
	Item@ flask = _CritGetItemHand( cr );
	if( !valid( flask ) )
	{
		return 0;
	}
	
	if( !valid( waterPump ) )
	{
		uint16 pid = flask.GetProtoId();
		if( pid == PID_BOTTLE_GLASS || pid == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
		{
			if(  pid == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
			{
				sequence += flask.Proto.Partial_Item - flask.REMAINING_USES;
			}
			
			int bottlesCount = cr.CountItem( PID_BOTTLE_GLASS );
			sequence += bottlesCount * 5;
			return sequence;
		}
		
		return flask.Proto.Partial_Item - flask.REMAINING_USES;
	}
	
	if( isFlask( cr, waterPump ) )
	{
		sequence = waterPump.REMAINING_CHARGE > ( flask.Proto.Partial_Item - flask.REMAINING_USES ) ? ( flask.Proto.Partial_Item - flask.REMAINING_USES ) : waterPump.REMAINING_CHARGE;
	}
	else
	{
		int bottlesCount = cr.CountItem( PID_BOTTLE_GLASS );
		sequence += bottlesCount * 5; // constant val for glass bottles, need rewamp with entire bottle code
		if( sequence > waterPump.REMAINING_CHARGE )
		{
			sequence = waterPump.REMAINING_CHARGE;
		}
	}
	
	return sequence;
}

uint process_gather_water( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_GATHER_WATER )

  	Item@ waterPump = null;
	if( param2 != 0 )
	{
		@waterPump = GetItem( param2 );
	}
	
	uint16 watersource_dna = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
	
  	if( valid( waterPump ) )
	{
		watersource_dna = waterPump.WATERSOURCE_DNA;
		
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, watersource_dna ) && !isFlask( cr, watersource_dna ) ) || waterPump.REMAINING_CHARGE < 1 )
		{
			uint warningMsg = ( !hasItem( cr, PID_BOTTLE_GLASS ) || !hasItem( cr, watersource_dna ) ) ? STR_NO_MORE_BOTTLES : STR_NO_MORE_WATER_LEFT;
			if( isFlask( cr, watersource_dna ) )
			{
				Item@ flask = _CritGetItemHand( cr );
				warningMsg = ( valid( waterPump ) && waterPump.REMAINING_CHARGE > flask.REMAINING_USES ) ? STR_FILLED_TARE : STR_NO_MORE_WATER_LEFT;
			}
			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, warningMsg );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FILLS_TARE );
		}
	}
	
	if( hasItem( cr, watersource_dna ) )
	{
		Item@ waterBottlePrt = getItem( cr, watersource_dna );
		if( waterBottlePrt.REMAINING_USES < int( waterBottlePrt.Proto.Partial_Item ) )
		{
			if( valid( waterPump ) )
			{
				waterPump.REMAINING_CHARGE --;
			}

			waterBottlePrt.REMAINING_USES ++;
			waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
			waterBottlePrt.Update();
		}
		else
		{
		
			Item@ waterBottle = null;
			if( watersource_dna == PID_GLASS_BOTTLE_FULL_PRT )
			{
				@ waterBottle = cr.AddItem( PID_GLASS_BOTTLE_FULL, 1 );
			}
			else
			{
				@ waterBottle = cr.AddItem( PID_GLASS_BOTTLE_DIRTY_FULL, 1 );
			}
			_SubItem( waterBottlePrt , 1 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_BOTTLE );
			waterBottle.Update();
		}
		
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	else if( isFlask( cr, watersource_dna ) )
	{
		Item@ flask = _CritGetItemHand( cr );
		if( valid( flask ) && ( flask.Proto.Partial_Item - flask.REMAINING_USES ) > 0 )
		{
			if( valid( waterPump ) )
			{
				waterPump.REMAINING_CHARGE --;
			}
			
			if( flask.REMAINING_USES == 0 )
			{
				ChangeFlaskProto( flask );	
			}
			
			flask.REMAINING_USES ++;
			flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;

			if( flask.DRINK_DNA == 0 )
			{
				flask.DRINK_DNA = watersource_dna;
			}

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
			flask.Update();
		}
		else
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_TARE );
			return 0;
		}
	}
	else
	{
		Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
		if( !valid( bottle ) )
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_MORE_BOTTLES );
			return 0;
		}
		
		_SubItem( bottle , 1 );
	
		cr.AddItem( watersource_dna, 1 );
		Item@ waterBottlePrt = cr.GetItem( watersource_dna, -1 );
		
		Item@ hands = cr.GetItem( 0, SLOT_HAND1 );
		if( valid( hands ) )
		{
			cr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
		}
		
		cr.MoveItem( waterBottlePrt.Id, waterBottlePrt.GetCount(), SLOT_HAND1 );
	
		if( valid( waterPump ) )
		{
			waterPump.REMAINING_CHARGE --;
		}
		
		waterBottlePrt.REMAINING_USES ++;
		waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

		Map@ map = cr.GetMap();
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );

		waterBottlePrt.Update();
	}
	
	return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
}

void setAnimState( Item& item )
{
	if( item.STATE == STATE_ON )
	{	
		SETFLAG( item.Flags, ITEM_SHOW_ANIM );
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	}
	else
	{
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM );
		SETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	}
	
	item.Update();
}

//~run waterworks _WaterPumpsInit 0 0 0
void _WaterPumpsInit(Critter& player, int param0, int param1, int param2)
{
	FoceWaterPumpsCharge();
}

void FoceWaterPumpsCharge()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWaterPumpEvent( maps[i] );
	}
}

bool CheckMapWaterPumpEvent( Map& map )
{
	Item@[] activeWaterPumps;

	map.GetItems( PID_OBJECT_WATERPUMP, activeWaterPumps );
	
	if( activeWaterPumps.length != 0 )
	{
		
		for( int i = 0, iend = activeWaterPumps.length(); i < iend; i++ )
		{
			Item@ waterPump = activeWaterPumps[i];
			
			if( !valid( waterPump ) )
			{
				return false;
			}
			
			if( waterPump.EVENT > 0 )
			{
				return false;
			}
			
			uint[] values = { waterPump.Id };
			
			if( waterPump.PUMP_EFFICIENCY < 1 )
			{
				waterPump.PUMP_EFFICIENCY = 1;
			}
			
			waterPump.EVENT = CreateTimeEvent( AFTER( PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY ), "e_WaterPumpCharge", values, true );
			values.resize(0);
		}
	}
	
	activeWaterPumps.resize(0);
    return false;
} 

uint e_WaterPumpCharge( uint[] @ values ) 
{
	Item@ waterPump = GetItem( values[ 0 ] );
	if( !valid( waterPump ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( waterPump.MapId );
	if( !valid( map ) )
	{
		return 0;
	}
	
	Item@[] generators;
	map.GetItems( PID_COAL_POWERGEN, generators );
	
	if( generators.length() > 0 )
	{
		Item@ generator = generators[0];
		if( valid( generator ) )
		{
			if( generator.STATE == STATE_EXTINGUISHED )
			{
				if( waterPump.STATE == STATE_ON )
				{
					waterPump.STATE = STATE_OFF;
					setAnimState( waterPump );
				}
				
				return PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY;
			}
		}
	}
	
	if( waterPump.BROKEN == 0 )
	{
		waterPump.REMAINING_CHARGE ++;
	}
	else
	{
		if( waterPump.STATE == STATE_ON )
		{
			waterPump.STATE = STATE_OFF;
			setAnimState( waterPump );
		}
		
		return PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY;
	}
	
	if( waterPump.REMAINING_CHARGE > waterPump.MAX_CHARGE )
	{
		waterPump.REMAINING_CHARGE = waterPump.MAX_CHARGE;
	}
	
	if( waterPump.PUMP_EFFICIENCY < 1 )
	{
		waterPump.PUMP_EFFICIENCY = 1;
	}
	
	return PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY;
}

//Character Washing
bool ltp_washing_inited = false;
void ltp_washing_init()
{
    LTPREG( LTP_WASHING, process_washing )
    ltp_washing_inited = true;
}

void start_washing( Critter& cr, bool handsOnly )
{
    if( !ltp_washing_inited )
	{
        ltp_washing_init();
	}
	
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 2000;
	cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcWashingIterations( cr.ParamBase[ CR_DIRTINESS ] );
	
	uint strMsg = handsOnly ? STR_EMOTE_WASH_HANDS : STR_EMOTE_WASH_SELF;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, strMsg );
	
	StartProcess( cr, LTP_WASHING, 0, handsOnly ? 0 : 1, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
}

int CalcWashingIterations( int param )
{
    int amount = 0;
    while( param > 0)
    {
		param -= int( 1 + param / 10 );
		amount++;
    }
	
    return amount - 1;
}

uint process_washing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_WASHING )

	cr.ParamBase[ CR_DIRTINESS ] -= ( 1 + cr.ParamBase[ CR_DIRTINESS ] / 10 );
	
	if( cr.ParamBase[ CR_DIRTINESS ] <= 0 )
	{
		cr.ParamBase[ CR_DIRTINESS ] = 0;
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WASH_SELF );
		return 0;
	}
	
	if( Random( 1, 10 ) == 10 )
	{
		uint strMsg = param1 == 0 ? STR_EMOTE_WASH_HANDS : STR_EMOTE_WASH_SELF;
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, strMsg );
	}
	
    return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
}

bool useWater( Critter& cr )
{
	Item@ water = null;
	int n = -1;
	
	for( uint i = 0; i < water_bottles.length(); i++ )
	{
		if( water_bottles[i].length() < 2 )
		{
			continue;
		}
		@water = cr.GetItem( water_bottles[i][0], -1 );

		if( valid(water) ) 
		{	
			if( water_bottles[i][0] == PID_GLASS_BOTTLE_DIRTY_FULL )
			{
				AffectRadiation( cr, 1 );
			}
			
			cr.AddItem( water_bottles[i][1], 1 );

			Map@ map = cr.GetMap();	
			PlayGenericSound( map, cr.HexX, cr.HexY, "splash.ogg", 10 );
			_SubItem( water, 1 );
			return true;
		}
	}
	
	return false;
}

bool isHandWasher( int water_source )
{
	uint[] hand_washers = { 2615, 2619, 23541, PID_WELL_1, PID_WELL_2, PID_NEW_WELL };
	return hand_washers.find(water_source) != -1;
}

bool PrepareCleaning( Critter& player, Critter& target, int water_source )
{
	if( water_source == 0 )
	{
		if( !useWater( player ) && !useWater( target ) )
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER );
			return false;
		}
	}
	else 
	{
		if( !isHandWasher( water_source ) )
		{
			Map@ map = player.GetMap();	
			PlayGenericSound( map, player.HexX, player.HexY, "shower.ogg", 10 );
		}
		else
		{
			Map@ map = player.GetMap();	
			if( water_source == 23541 || water_source == PID_WELL_1 || water_source == PID_WELL_2 || water_source == PID_NEW_WELL )
			{
				PlayGenericSound( map, player.HexX, player.HexY, "splash.ogg", 10 );
			}
			else
			{
				PlayGenericSound( map, player.HexX, player.HexY, "water_running.ogg", 10 );
			}
		}
	}
	
	return true;
}

void Cleaning( Critter& player, uint soap_pid, int water_source )
{
	Cleaning( player, player, soap_pid, water_source );
}

void Cleaning( Critter& player, Critter& target, uint soap_pid, int water_source )
{
	Item@ hand = player.GetItem( 0, SLOT_HAND1 );
	if( valid( hand ) )
	{
		switch( hand.GetProtoId() )
		{
			case( PID_BOTTLE_GLASS ): 
			case(PID_GLASS_BOTTLE_DIRTY_FULL_PRT ):
			{
				start_gathering_water( player, water_source );
				return;
			}
			case( PID_itplate2 ):
			{
				uint count = hand.GetCount();
				_SubItem( hand, count );
				player.AddItem( PID_itplate3, count );
				return;
			}
			default:
			{
				if( isFlask( player, water_source ) )
				{
					start_gathering_water( player, water_source );
				}
				return;
			}
		}
	}
	else if( PrepareCleaning( player, target, water_source ) )
	{
		SoapEffect( player, target, soap_pid, water_source );
	}
}

void SoapEffect( Critter& player, Critter& target, uint soap_pid, int water_source )
{
	Critter@ owner = @player;
	Item@ soap = getSoap( player, soap_pid );
	if( !valid( soap ) )
	{
		@soap = getSoap( target, soap_pid );
		if( valid( soap ) )
		{
			@owner = @target;
		}
	}
	
	bool isHandsOnly = isHandWasher( water_source );
	
	int pid = valid(soap) ? soap.GetProtoId() : 0;
	switch( pid )
	{
		case( PID_ITSOAP01 ):
		{
			owner.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FRESH_SOAP );
			_SubItem( soap, 1 );
			@soap = owner.AddItem( PID_ITSOAP01_PRT, 1 );
		}
		case( PID_ITSOAP01_PRT ):
		{
			uint msgStr = isHandsOnly ? STR_EMOTE_WASH_HANDS_UTILITY : STR_EMOTE_WASH_SELF_UTILITY;
			target.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, msgStr );
			target.ParamBase[ CR_DIRTINESS ] = int( target.ParamBase[ CR_DIRTINESS ] * 0.8 ) - 5;

			soap.REMAINING_USES--;
			soap.Update();
			if( soap.REMAINING_USES < 1 )
			{
				owner.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOAP_FINISH );
				_SubItem( soap, 1 );
			}
			
			break;
		}
		case( PID_FPSHL6 ):
		{
			owner.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FRESH_SOAP );
			_SubItem( soap, 1 );
			@soap = owner.AddItem( PID_FPSHL6_PRT, 1 );
		}	
		case( PID_FPSHL6_PRT ):
		{
			uint msgStr = isHandsOnly ? STR_EMOTE_WASH_HANDS_PERFUME : STR_EMOTE_WASH_SELF_PERFUME;
			target.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, msgStr );
			target.ParamBase[ CR_DIRTINESS ] = int( target.ParamBase[ CR_DIRTINESS ] * 0.6 ) - 10;
			
			if( target.ParamBase[ CR_DIRTINESS ] <= 0 )
			{
				target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SMELL_GOOD );
				target.StatBase[ ST_CHARISMA_EXT ] += 1;
				
				uint[] indexes, durations, rates;
				int eventCount = target.GetTimeEvents( CTE_SOAP_CHARISMA, indexes, durations, rates );
				if( eventCount > 0 )
				{
					target.ChangeTimeEvent( indexes[0], REAL_SECOND( 120 * 60 ), 0);
					target.StatBase[ ST_CHARISMA_EXT ] -= 1;
					return;
				}

				target.AddTimeEvent( "cte_soap_charisma", REAL_SECOND( 120 * 60 ), CTE_SOAP_CHARISMA, 0 );
			}
			soap.REMAINING_USES--;
			soap.Update();
			if( soap.REMAINING_USES < 1 )
			{
				owner.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOAP_FINISH );
				_SubItem( soap, 1 );
			}
			
			break;
		}
		default:
		{
			uint msgStr = isHandsOnly ? STR_EMOTE_WASH_HANDS : STR_EMOTE_WASH_SELF;
			target.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, msgStr );
			target.ParamBase[ CR_DIRTINESS ] -= 1 + Random( 0, int( target.ParamBase[ CR_DIRTINESS ] * 0.2 ) );
			
			if( water_source > 0 )
			{
				start_washing( target, isHandsOnly );
			}
			
			break;
		}
	}
}

Item@ getSoap( Critter& player, uint soap_pid )
{
	Item@ soap;
	for( uint i = 0, l = SoapItems.length(); i < l; i++ )
	{
		@soap = player.GetItem( soap_pid == 0 ? SoapItems[i] : soap_pid, -1 );
		if( valid( soap ) )
		{
			break;
		}
	}
	
	return soap;
}

uint cte_soap_charisma( Critter& cr, int identifier, uint& rate )
{
    if( !valid( cr ) )
    {
        return 0;
    }
	
	cr.StatBase[ ST_CHARISMA_EXT ] -= 1;
	
    return 0;
}


#endif //WATERWORKS