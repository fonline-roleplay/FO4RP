#ifndef CLIENT_GM
#define CLIENT_GM

#include "_utils.fos"

import int[] control() from "client_gui";
import void SetControlCritters( int Id ) from "client_gui";

/*****Instruction:
   If you wish to add new command:
   1. Define its name.
   2. Add Command's derived class.
   2.1 Assign required arguments value to "argsRequired" in constructor.
   2.2 You can also set command description in constructor by assigning description text to "description" field in constructor.
   2.3 Override "private void process()" method. See Command and CommandArgument classes definition for needed fields, methods etc. You can also look at existing implementation examples.
   3. Add code to GetCommandByName function.
*****************/

// NO ARGUMENTS COMMANDS
#define RESET_CHAR_COMMAND_NAME				   		   ( "#reset_char" )	 // #reset_char - resets character under cursor to it's blank "freshly registered" state.
#define ENLIST_TIME_EVENTS_COMMAND_NAME				   ( "#te" )			 // #te - Show list of time events for the critter under cursor
#define SHOW_FLAGS_COMMAND_NAME						   ( "#flags" )			 // #flags - Show flag number for item under cursor.
#define COPY_COMMAND_NAME    			               ( "#copy" )		 	 // #copy - makes copy of NPC; Copies stats of player; Copies item under coursor;
#define CLEAR_HEX_COMMAND_NAME    			           ( "#clhx" )		 	 // #clhx - makes hex empty
#define MAKE_FURNITURE					               ( "#frm" )			 // #frm - creates an item of an object under cursor.
#define RESPAWN_COMMAND_NAME                           ( "#r" )              // #r - former respawns self, now respawns critters around mouse cursor in a radius
#define TELEPORT_TO_TARGET_COMMAND_NAME                ( "#t" )              // #t - moves self to target
#define DELETE_MOB_COMMAND_NAME                        ( "#delmob" )         // #delmob - deletes target critter
#define MUTATE_MOB_COMMAND_NAME                        ( "#mutate" )         // #mutate - Makes Supermutant from mob
#define GET_ALL_COMMAND_NAME                           ( "#getall" )         // #getall - moves all items from target critter's inventory to the player's one
#define GIVE_ALL_COMMAND_NAME                          ( "#giveall" )        // #giveall - moves all items from player's inventory to the target critter's one
#define DELETE_ALL_COMMAND_NAME                        ( "#deleteall" )      // #deleteall - deletes all items from target critter's inventory
#define GM_CLONE_COMMAND_NAME                          ( "#gmclone" )        // #gmclone - clones target critter's SPECIAL, skills, resists, perks, traits, and karma to GM
#define CLONE_COMMAND_NAME                             ( "#clone" )          // #clone - All stats from critter to GM - easy to check things.
#define UNCLONE_COMMAND_NAME                           ( "#unclone" )        // #unclone - give to critter GM stats.
#define GOD_COMMAND_NAME                               ( "#god" )            // #god - sets all SPECIAL to 10, skills to 300, activates invisibility, and adds few useful perks
#define DELETE_ITEM_COMMAND_NAME                       ( "#delitem" )        // #delitem - deletes target item in a radius
#define DELETE_ITEM_ID_COMMAND_NAME                    ( "#delitemid" )      // #delitem - deletes target by Id
#define GETKEY_COMMAND_NAME                            ( "#getkey" )         // #getkey - generates key for lock on targeted item (works in inventory mode too!)
#define OPEN_DOOR_COMMAND_NAME                         ( "#open" )           // #open - opens target door
#define CLOSE_DOOR_COMMAND_NAME                        ( "#close" )          // #close - closes target door
#define BLOCK_DOOR_COMMAND_NAME                        ( "#blockdoor" )      // #blockdoor - makes target door not openable
#define CLEAR_DOOR_COMMAND_NAME                        ( "#cleardoor" )      // #cleardoor - clears target door settings and locks
#define SWITCH_GLOBAL_GRID_COMMAND_NAME                ( "#global_grid" )    // #global_grid - switches grid on the global map
#define SWITCH_GLOBAL_WILD_COMMAND_NAME                ( "#global_wild" )    // #global_wild - switches wildness map on the global map
#define PUPPET_CONTROL_COMMAND_NAME                    ( "#zc" )             // #zc - takes target mob under GM's control (makes it "puppet")
#define PUPPET_DELETE_COMMAND_NAME                     ( "#zd" )             // #zd - delete puppets
#define PUPPET_ATTACK_COMMAND_NAME                     ( "#za" )             // #za - makes puppet attack target critter
#define PUPPET_RAID_COMMAND_NAME                       ( "#zr" )             // #zr - sends all puppets to attack players around
#define PUPPET_HOME_COMMAND_NAME                       ( "#zh" )             // #zh - sends puppets to their home positions
#define PUPPET_GATHER_COMMAND_NAME                     ( "#zg" )             // #zg - teleports puppets to GM
#define PUPPET_WALK_COMMAND_NAME                       ( "#zw" )             // #zw - makes puppets walk to target hex
#define PUPPET_STOP_COMMAND_NAME                       ( "#zs" )             // #zs - makes puppets stop, look at cursor and prepare weapons
#define PUPPET_TIE_COMMAND_NAME                        ( "#zp" )             // #zp - ties puppets to target critter
#define WEBSITE_AUTH                                   ( "#auth" )           // #auth - get auth key from server and open link in browser
#define START_GAME                                     ( "#start_game" )     // #start_game - get auth key from server, associate character with Discord user and leave starting location

// 1 ARGUMENT COMMANDS
#define CHANGE_ITEM_PICTURE_COMMAND_NAME               ( "#picture" )		 // #picture pid:[proto_id] - setc pitcture of stated proto to object under cursor
#define ADD_ITEM_COMMAND_NAME                          ( "#additem" )        // #additem [proto_id] [count] - adds item to target hex, count is optional
#define SET_AUTO_DOOR_MODE_COMMAND_NAME                ( "#autodoor" )       // #autodoor [mode] - 0 - for everyone, 1 - for outlaws, 2 - disable autoopening
#define GIVE_ITEM_COMMAND_NAME                         ( "#give" )           // #give [id] - gives item to target critter
#define GET_PARAMETER_COMMAND_NAME                     ( "#getp" )           // #getp [param_id] - prints value of parameter with specified id
#define TRADER_INIT_COMMAND_NAME                       ( "#trader" )         // #trader [critter_id] - sets trader behavior to critter with specified id
#define DARKEN_SCREEN_COMMAND_NAME                     ( "#black" )          // #black [time_in_ms] - darkens target critter's screen
#define SET_SKIN_COMMAND_NAME                          ( "#skin" )           // #skin [proto_id] [random_range] - sets skin to critter, if positive random - then random shift else totally random
#define GM_SAY_COMMAND_NAME                            ( "#gm_say" )         // #gm_say [message_type] - say phrase on behalf of target critter. 1 - speech, 3 - shout, 5 - emotion, 7 - whisper
#define GET_ITEM_NAME                                  ( "#getitem" )        // #get item [id] - get item by id
#define CALL_CRITTER_COMMAND_NAME                      ( "#cr2me" )          // #cr2me [critter_id] - teleport critter to self
#define TELEPORT_TO_CRITTER_COMMAND_NAME               ( "#me2cr" )          // #me2cr [critter_id] - teleport to critter
#define GET_ITEMS_BY_PID_COMMAND_NAME                  ( "#getitems" )       // #getitems [proto_id] - get all items with specified proto
#define GET_CRITTER_NAME_COMMAND_NAME                  ( "#name" )           // #name [id] - get name of specified critter
#define SHOW_ITEM_VALUES_COMMAND_NAME                  ( "#showval" )        // #showval [id] - show item values by id
#define SERVICE_INFO_COMMAND_NAME                      ( "#sinf" )           // #sinf [flags] - make service info appear according to flags
#define FACTION_LIST_NAME                              ( "#faction" )        // #faction [faction_number] - shows command description
#define COMMAND_HELP_COMMAND_NAME                      ( "#chelp" )          // #chelp [command_name] - shows command description
#define COMMAND_DELETE_LOCATION						   ( "#delloc" )         // #delloc [locationId] - deletes location by unique ID			
#define MOB_INIT_COMMAND_NAME                          ( "#mobinit" )        // #mobinit - initializes target critter animal AI
#define GUARD_INIT_COMMAND_NAME                        ( "#guardinit" )      // #guardinit [team Id]- initializes target critter sentient AI
#define TOGGLE_LIGHTS                                  ( "#toggle_lights" )  // #toggle_lights 0/1 [off/on] - entire map global light and switch overide
#define PET_DOG_INIT_COMMAND_NAME					   ( "#petdoginit" )     // #petinit [critter_id]- initializes target critter pet dog AI for critter_id as master

// 2 ARGUMENTS COMMANDS
#define STOP_AREA_COMMAND_NAME    			           ( "#stop" )		 	 // #stop X Y - stops everyone in X radius for Y seconds.
#define SET_PARAMETER_COMMAND_NAME                     ( "#setp" )           // #setp [param_id] [value] [range] - sets parameter for critter under cursor or all critters in range
#define SET_DOOR_CODE_COMMAND_NAME                     ( "#setcodedoor" )    // #setcodedoor [digit_amount] [code] - sets code for target door
#define LOCK_DOOR_COMMAND_NAME                         ( "#lock" )           // #lock [complexity] [locker_id] - locks target door and places key in the inventory
#define BREAK_ITEM_COMMAND_NAME                        ( "#break" )          // #break [item_id] [breakage_rate] - breaks item for specified rate
#define KILL                                           ( "#kill" )           // #kill id deathAnim
#define CELL_DEL                                       ( "#celldel" )        // #celldel [x] [y]

// 3 AND MORE ARGUMENTS COMMANDS
#define ADD_LIGHT_COMMAND_NAME                         ( "#addlight" )       // #addlight [LightIntensity], [LightRadius], [LightColorArg], [LightFlags], [LightGroup]
#define DESC_COMMAND_NAME							   ( "#desc" )			 // #desc [time] [string] - time sets timer to delete the description, 0 by default (do not delete) 
#define LOCATION_BLIND_COMMAND_NAME               	   ( "#blind" )          // #blind [time] [radius] [color] - blinds targets in [radius] around cursor for [time] with [color]
#define LOCATION_TELEPORT_COMMAND_NAME                 ( "#tele" )           // #tele [location_Pid] [map_id] [skipCount] - teleport to specified location 
#define BUILD_COMMAND_NAME                             ( "#build" )          // #build [unknown] [unknown] [unknown] [unknown] - qthree build magic, better not touch :)
#define BAN                                            ( "#ban" )            // #banid [id] [hours] [kick]
#define BAN_KICK                                       ( "#kick" )           // #kick [id]
#define BAN_IP                                         ( "#banip" )          // #banip [id] [hours] [mask_level]
#define BAN_UNBAN                                      ( "#unban" )          // #unban [id]
#define BAN_GETIPS                                     ( "#getips" )         // #getips [id]
#define COMPARE_STAT                                   ( "#compare" )        // #compare [stat] [id0] [id1] ... [idN]
#define COMPARE_STAT_RADIUS                            ( "#compareradius" )  // #compare [stat] [radius]
#define CELL_CREATE                                    ( "#cellcreate" )     // #cellcreate [pid] [x] [y] [force]
#define CELL_CREATE_WILD                               ( "#cellcreatewild" ) // #cellcreate [pid] [x] [y] [wild] [livetime] [force]
#define CELL_MOVE                                      ( "#cellmove" )       // #cellcreate [x] [y] [x1] [y1]
#define CELL_SIZE                                      ( "#cellsize" )       // #cellsize [x] [y] [sizeX] [sizeY]
#define ITEM_RADIATE_COMMAND_NAME                      ( "#radiate" )        // #radiate VAL TIME DIST

// STRING COMMANDS
#define HASH_COMMAND_NAME                              ( "$hash" )           // $hash [string] - prints hash of specified string
#define SAY_TO_ALL_COMMAND_NAME                        ( "$s2a" )            // $s2a [message] - say message that everyone will hear
#define ANSWER_TO_GM_COMMAND_NAME                      ( "$ans" )            // $ans [message] - answer to GM who used $s2a last
#define ASK_HELP_COMMAND_NAME                          ( "$help" )           // $help [message] - sends message to all online GMs and admins
#define POLL_COMMAND_NAME                              ( "$poll" )           // $poll [poll_question@variant1@vartiant2@...@vatiantN] - starts poll
#define SET_CRITTER_DESCRIPTION_BY_ID_COMMAND_NAME     ( "$gmlex" )          // $gmlex [critter_id] [description] - sets critter description
#define SET_TARGET_CRITTER_DESCRIPTION_COMMAND_NAME    ( "$gmlex2" )         // $gmlex2 [description] - sets target critter description
#define SET_ITEM_DESCRIPTION_BY_ID_COMMAND_NAME        ( "$gmitemlex" )      // $gmitemlex [item_id] [description] - sets item description
#define SEND_SERVICE_MESSAGE_BY_ID_COMMAND_NAME        ( "$pm" )             // $pm [critter_id] [message] - sends private message to player
#define SEND_SERVICE_MESSAGE_TO_TARGET_COMMAND_NAME    ( "$pm2" )            // $pm2 [message] - sends private message to target player
#define SEND_SERVICE_INFORM_TARGET_COMMAND_NAME		   ( "$t" )              // $t [critter_id] [message] - sends information to player
#define SEND_SERVICE_INFORM_TARGET_COMMAND_NAME2       ( "$think" )          // $think [critter_id] [message] - sends information to player

// RUN COMMANDS
#define RUN_DEBUG_COMMAND_NAME                         ( "%d" )              // %d - same as "~run debug"
#define RUN_TEST_COMMAND_NAME                          ( "%t" )              // %t - same as "~run test"
#define RUN_SKINS_COMMAND_NAME                         ( "%sk" )             // %sk - same as "~run skins"
#define RUN_QMAP_DEBUG_COMMAND_NAME                    ( "%qd" )             // %qd - same as "~run qmap_debug"

// AUXILIARY
#define DEBUG_MODULE_NAME                              ( "debug" )
#define TEST_MODULE_NAME                               ( "test" )
#define SKINS_MODULE_NAME                              ( "skins" )
#define QMAP_DEBUG_MODULE_NAME                         ( "qmap_debug" )
#define RUN_MODULE_COMMAND_PREFIX                      ( "%" )

#define DEBUG_LOOK                                     ( "#debug_look" )     // #debug_look 0/1 or false/true or off/on [off/on] - debug look borders

class Command
{
    protected array<CommandArgument@> @args;
    protected int argsRequired;
    protected string@ description;
    protected string@ reformedMessage;
	protected uint carriage;

    Command()
    {
        argsRequired = 0;
        @description = null;
        @reformedMessage = null;
		carriage = 0;
		@args = array<CommandArgument@>();
    }

    CommandArgument@ getArg( uint index )
    {
        if( index >= args.length() )
		{
            return null;
		}
        return args[ carriage = index ];
    }
	
	CommandArgument@ get_arg( )
    {
        return @getArg( carriage++ );
    }

    uint argAmount()
    {
        return args.length();
    }

    void pushBackArg( CommandArgument& arg )
    {
        args.insertLast( @arg );
    }

    // returns command description (should be set in constructor)
    string getDescription()
    {
        string desc;
        if( !valid( description ) )
        {
            desc = "No description found.";
        }
        else
        {
            desc = description;
        }
        return desc;
    }

    // joins arguments and returns result
    string@ getArgumentString()
    {
        const string COMMAND_ARG_SEPARATOR = " ";
        string@[] arguments;
        for( uint i = 0; i < argAmount(); ++i )
		{
            arguments.insertLast( getArg( i ).getStringData() );
		}
		
        return join( arguments, COMMAND_ARG_SEPARATOR );
    }

    // used to pass message to global handler
    string@ getReformedMessage()
    {
        return reformedMessage;
    }

    // better make it pure virtual. But I'm not sure if such methods exist in AngelScript
    private void process(){}

    void run()
    {
        if( argAmount() >= uint( argsRequired ) || argsRequired == -1 )
		{
            process();
		}
	}
}

class CommandArgument
{
    private ArgumentType type;
    private float floatData;
    private int intData;
    private string@ stringData;
    private bool boolData;

    CommandArgument( string& str )
    {
		intData = 0;
		floatData = 0;
		@stringData = str;
        boolData = false;
		string@[] parts = split( str, "." );
		if( StrToInt( parts[ 0 ], intData ) )
		{
			floatData = intData;
			if( parts.length() == 2 )
			{
				StrToFloat( join( parts, "," ), floatData );
				type = ArgumentType::FLOAT;
			}
			else
			{
				type = ArgumentType::INTEGER;
			}
		}
		else
		{
            string temp = strlwr( str );
            if( temp == "false" || temp == "true" )
            {
                boolData = ( temp == "true" );
                type = ArgumentType::BOOL;
            }
            else
            {
			    type = ArgumentType::STRING;
            }
		}
	}

    ArgumentType getType()
    {
        return type;
    }

    int getIntData()
    {
        return intData;
    }

    float getFloatData()
    {
        return floatData;
    }

    string@ getStringData()
    {
        return @stringData;
    }

    bool getBoolData()
    {
        return boolData;
    }
}

enum ArgumentType
{
    NONE, INTEGER, STRING, FLOAT, BOOL
};

// returns null if no command with commandName name exists
Command@ GetCommandByName( string@ commandName )
{
    Command@ command = null;
	@commandName = strlwr( commandName );
    if( commandName == RESPAWN_COMMAND_NAME )
    {
        @command = RespawnCommand();
    }
	else if( commandName == ITEM_RADIATE_COMMAND_NAME )
    {
        @command = ItemRadiateCommand();
    }
    else if( commandName == TELEPORT_TO_TARGET_COMMAND_NAME )
    {
        @command = TeleportToTargetCommand();
    }
    else if( commandName == DELETE_MOB_COMMAND_NAME )
    {
        @command = DeleteMobCommand();
    }
    else if( commandName == MUTATE_MOB_COMMAND_NAME )
    {
        @command = MutateMobCommand();
    }
    else if( commandName == MOB_INIT_COMMAND_NAME )
    {
        @command = MobInitCommand();
    }
	else if( commandName == PET_DOG_INIT_COMMAND_NAME )
    {
        @command = PetDogInitCommand();
    }
	else if( commandName == GUARD_INIT_COMMAND_NAME )
    {
        @command = GuardInitCommand();
    }
    else if( commandName == GET_ALL_COMMAND_NAME )
    {
        @command = GetAllCommand();
    }
    else if( commandName == GIVE_ALL_COMMAND_NAME )
    {
        @command = GiveAllCommand();
    }
    else if( commandName == DELETE_ALL_COMMAND_NAME )
    {
        @command = DeleteAllCommand();
    }
    else if( commandName == GM_CLONE_COMMAND_NAME )
    {
        @command = GMCloneCommand();
    }
    else if( commandName == CLONE_COMMAND_NAME )
    {
        @command = CloneCommand();
    }
    else if( commandName == UNCLONE_COMMAND_NAME )
    {
        @command = UncloneCommand();
    }
    else if( commandName == GOD_COMMAND_NAME )
    {
        @command = GodCommand();
    }
    else if( commandName == DELETE_ITEM_COMMAND_NAME )
    {
        @command = DeleteItemCommand();
    }
	else if( commandName == DELETE_ITEM_ID_COMMAND_NAME )
    {
        @command = DeleteItemIdCommand();
    }
    else if( commandName == GETKEY_COMMAND_NAME )
    {
        @command = GetKeyCommand();
    }
    else if( commandName == OPEN_DOOR_COMMAND_NAME )
    {
        @command = OpenDoorCommand();
    }
    else if( commandName == CLOSE_DOOR_COMMAND_NAME )
    {
        @command = CloseDoorCommand();
    }
    else if( commandName == BLOCK_DOOR_COMMAND_NAME )
    {
        @command = BlockDoorCommand();
    }
    else if( commandName == CLEAR_DOOR_COMMAND_NAME )
    {
        @command = ClearDoorCommand();
    }
    else if( commandName == SWITCH_GLOBAL_GRID_COMMAND_NAME )
    {
        @command = SwitchGlobalGridCommand();
    }
    else if( commandName == SWITCH_GLOBAL_WILD_COMMAND_NAME )
    {
        @command = SwitchGlobalWildCommand();
    }
    else if( commandName == ADD_ITEM_COMMAND_NAME )
    {
        @command = AddItemCommand();
    }
	else if( commandName == ADD_LIGHT_COMMAND_NAME )
    {
        @command = AddLightCommand();
    }
	else if( commandName == DESC_COMMAND_NAME )
    {
        @command = DescCommand();
    }
    else if( commandName == SET_AUTO_DOOR_MODE_COMMAND_NAME )
    {
        @command = SetAutoDoorModeCommand();
    }
    else if( commandName == GIVE_ITEM_COMMAND_NAME )
    {
        @command = GiveItemCommand();
    }
    else if( commandName == GET_PARAMETER_COMMAND_NAME )
    {
        @command = GetParameterCommand();
    }
    else if( commandName == TRADER_INIT_COMMAND_NAME )
    {
        @command = TraderInitCommand();
    }
    else if( commandName == DARKEN_SCREEN_COMMAND_NAME )
    {
        @command = DarkenScreenCommand();
    }
    else if( commandName == SET_SKIN_COMMAND_NAME )
    {
        @command = SetSkinCommand();
    }
    else if( commandName == GM_SAY_COMMAND_NAME )
    {
        @command = GMSayCommand();
    }
    else if( commandName == CALL_CRITTER_COMMAND_NAME )
    {
        @command = CallCritterCommand();
    }
    else if( commandName == GET_ITEM_NAME )
    {
        @command = GetItemCommand();
    }
    else if( commandName == TELEPORT_TO_CRITTER_COMMAND_NAME )
    {
        @command = TeleportToCritterCommand();
    }
    else if( commandName == GET_ITEMS_BY_PID_COMMAND_NAME )
    {
        @command = GetItemsByPidCommand();
    }
    else if( commandName == GET_CRITTER_NAME_COMMAND_NAME )
    {
        @command = GetCritterNameCommand();
    }
    else if( commandName == SHOW_ITEM_VALUES_COMMAND_NAME )
    {
        @command = ShowItemValuesCommand();
    }
    else if( commandName == SERVICE_INFO_COMMAND_NAME )
    {
        @command = ServiceInfoCommand();
    }
    else if( commandName == FACTION_LIST_NAME )
    {
        @command = FactionListCommand();
    }
    else if( commandName == STOP_AREA_COMMAND_NAME )
    {
        @command = StopCommand();
    }
    else if( commandName == SET_PARAMETER_COMMAND_NAME )
    {
        @command = SetParameterCommand();
    }
    else if( commandName == SET_DOOR_CODE_COMMAND_NAME )
    {
        @command = SetDoorCodeCommand();
    }
    else if( commandName == LOCK_DOOR_COMMAND_NAME )
    {
        @command = LockDoorCommand();
    }
    else if( commandName == BREAK_ITEM_COMMAND_NAME )
    {
        @command = BreakItemCommand();
    }
	else if( commandName == LOCATION_BLIND_COMMAND_NAME )
    {
        @command = AreaBlindingCommand();
    }
    else if( commandName == LOCATION_TELEPORT_COMMAND_NAME )
    {
        @command = LocationTeleportCommand();
    }
	else if( commandName == CHANGE_ITEM_PICTURE_COMMAND_NAME )
    {
        @command = ChangeItemPictureCommand();
    }
	else if( commandName == RESET_CHAR_COMMAND_NAME )
    {
        @command = ResetCharCommand();
    }
	else if( commandName == ENLIST_TIME_EVENTS_COMMAND_NAME )
    {
        @command = EnlistTimeEventsCommand();
    }
	else if( commandName == SHOW_FLAGS_COMMAND_NAME )
    {
        @command = ShowFlagsCommand();
    }
	else if( commandName == COPY_COMMAND_NAME )
    {
        @command = CopyCommand();
    }
	else if( commandName == CLEAR_HEX_COMMAND_NAME )
    {
        @command = ClearHexCommand();
    }
	else if( commandName == MAKE_FURNITURE )
    {
        @command = MakeFurnitureCommand();
    }
    else if( commandName == BUILD_COMMAND_NAME )
    {
        @command = BuildCommand();
    }
    else if( commandName == HASH_COMMAND_NAME )
    {
        @command = HashCommand();
    }
    else if( commandName == ANSWER_TO_GM_COMMAND_NAME )
    {
        @command = AnswerToGmCommand();
    }
    else if( commandName == ASK_HELP_COMMAND_NAME )
    {
        @command = AskHelpCommand();
    }
    else if( commandName == POLL_COMMAND_NAME )
    {
        @command = PollCommand();
    }
    else if( commandName == SET_CRITTER_DESCRIPTION_BY_ID_COMMAND_NAME )
    {
        @command = SetCritterDescriptionByIdCommand();
    }
    else if( commandName == SET_TARGET_CRITTER_DESCRIPTION_COMMAND_NAME )
    {
        @command = SetTargetCritterDescriptionCommand();
    }
    else if( commandName == SET_ITEM_DESCRIPTION_BY_ID_COMMAND_NAME )
    {
        @command = SetItemDescriptionByIdCommand();
    }
    else if( commandName == SEND_SERVICE_MESSAGE_BY_ID_COMMAND_NAME )
    {
        @command = SendServiceMessageByIdCommand();
    }
    else if( commandName == SEND_SERVICE_MESSAGE_TO_TARGET_COMMAND_NAME )
    {
        @command = SendServiceMessageToTargetCommand();
    }
	else if( commandName == SEND_SERVICE_INFORM_TARGET_COMMAND_NAME || commandName == SEND_SERVICE_INFORM_TARGET_COMMAND_NAME2 )
	{
        @command = SendInformMessageToTargetCommand();
	}
    else if( commandName == SAY_TO_ALL_COMMAND_NAME )
    {
        @command = SayToAllCommand();
    }
    else if( commandName == COMMAND_HELP_COMMAND_NAME )
    {
        @command = CommandHelpCommand();
    }
	else if( commandName == COMMAND_DELETE_LOCATION )
    {
        @command = CommandDeleteLocation();
    }
    else if( commandName == PUPPET_CONTROL_COMMAND_NAME )
    {
        @command = PuppetControlCommand();
    }
    else if( commandName == PUPPET_DELETE_COMMAND_NAME )
    {
        @command = PuppetDeleteCommand();
    }
    else if( commandName == PUPPET_ATTACK_COMMAND_NAME )
    {
        @command = PuppetAttackCommand();
    }
    else if( commandName == PUPPET_RAID_COMMAND_NAME )
    {
        @command = PuppetRaidCommand();
    }
    else if( commandName == PUPPET_HOME_COMMAND_NAME )
    {
        @command = PuppetHomeCommand();
    }
    else if( commandName == PUPPET_GATHER_COMMAND_NAME )
    {
        @command = PuppetGatherCommand();
    }
    else if( commandName == PUPPET_WALK_COMMAND_NAME )
    {
        @command = PuppetWalkCommand();
    }
    else if( commandName == PUPPET_STOP_COMMAND_NAME )
    {
        @command = PuppetStopCommand();
    }
    else if( commandName == PUPPET_TIE_COMMAND_NAME )
    {
        @command = PuppetTieCommand();
    }
    else if( commandName == WEBSITE_AUTH )
    {
        @command = WebsiteAuth();
    }
    else if( commandName == START_GAME )
    {
        @command = StartGame();
    }
	else if( commandName == TOGGLE_LIGHTS )
	{
		@command = ToggleLights();
	}
    else if( commandName == DEBUG_LOOK )
    {
        @command = DebugLook();
    }
    else if( commandName == BAN )
    {
        @command = BanCommand();
    }
    else if( commandName == BAN_KICK )
    {
        @command = BanKickCommand();
    }
    else if( commandName == BAN_IP )
    {
        @command = BanIpCommand();
    }
    else if( commandName == BAN_UNBAN )
    {
        @command = BanUnBanCommand();
    }
    else if( commandName == BAN_GETIPS )
    {
        @command = BanGetIpsCommand();
    }
    else if( commandName == COMPARE_STAT )
    {
        @command = CompareStatCommand();
    }
    else if( commandName == COMPARE_STAT_RADIUS )
    {
        @command = CompareStatRadiusCommand();
    }
    else if( commandName == KILL )
    {
        @command = KillCommand();
    }
    else if( commandName == CELL_CREATE )
    {
        @command = CellCreateCommand();
    }
    else if( commandName == CELL_CREATE_WILD )
    {
        @command = CellCreateWildCommand();
    }
    else if( commandName == CELL_DEL )
    {
        @command = CellDelCommand();
    }
    else if( commandName == CELL_SIZE )
    {
        @command = CellSizeCommand();
    }
    else if( commandName == CELL_MOVE )
    {
        @command = CellMoveCommand();
    }
    else if( substring( commandName, 0, RUN_MODULE_COMMAND_PREFIX.length() ) == RUN_MODULE_COMMAND_PREFIX )
    {
        @command = RunModuleCommand();
        CommandArgument moduleNameArg( substring( commandName, RUN_MODULE_COMMAND_PREFIX.length(), commandName.length() - RUN_MODULE_COMMAND_PREFIX.length() ) );
        command.pushBackArg( moduleNameArg );
    }
	
    return command;
}

// ---- Command implementations ----

class MakeFurnitureCommand : Command
{
    MakeFurnitureCommand()
    {
        argsRequired = 0;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( !valid(item) )
			{
				Message( "Choose item to create furniture with its picture.");
				return;
			}
			
			int[] data = { item.Proto.ProtoId, item.Proto.PicMap, item.Proto.PicInv };
			RunServerScriptUnsafe( "test@unsafe_MakeFurniture", item.Id, 0, 0, null, data );
        }
    }
}

class ChangeItemPictureCommand : Command
{
    ChangeItemPictureCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( valid(item) )
			{
				 CommandArgument nameArgument = getArg( 0 );
				if( nameArgument.getType() == ArgumentType::STRING )
				{
					string name = nameArgument.getStringData();
					uint hash = 0;
					if( name.length( ) > 4 && substring( name, 0, 4 ) == "pid:" )
					{
						name = substring( name, 4, name.length() );
						int temp = 0;
						StrToInt( name, temp );
						ProtoItem@ proto = GetProtoItem( temp );
						if( valid(proto) )
						{
							hash = proto.PicMap;
						}
					}
					else
					{
						hash = GetStrHash( name );
					}
					
					if( hash != 0 )
					{
						RunServerScriptUnsafe( "test@unsafe_GM_ChangeItemPicture", item.Id, hash, 0, null, null );
					}
				}
			}
        }
    }
}

class ResetCharCommand : Command
{
    ResetCharCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			CritterCl@ target = MouseCritter;
			
			if( !valid(target) ) 
			{	
				Message( "Move cursor on target." );
				return;
			}
			
			RunServerScriptUnsafe( "gm@unsafe_resetCharacter", target.Id, 0, 0, null, null );
        }
    }
}

class EnlistTimeEventsCommand : Command
{
    EnlistTimeEventsCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			CritterCl@ target = MouseCritter;
			
			if( !valid(target) ) 
			{	
				Message( "Move cursor on target." );
				return;
			}
			
			RunServerScriptUnsafe( "drugs@unsafe_enlistTimeEvents", target.Id, 0, 0, null, null );
        }
    }
}

class ShowFlagsCommand : Command
{
    ShowFlagsCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			uint16     x = __MouseX, y = __MouseY;
			ItemCl@ target = GetMonitorItem( x, y );
			if( !valid(target) ) 
			{	
				Message( "Move the cursor on item or scenery." );
				return;
			}
			RunServerScriptUnsafe( "test@unsafe_ShowFlags", target.Id, 0, 0, null, null );
        }
    }
}

class CopyCommand : Command
{
    CopyCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			bool noTarget = false;
			
			int targetId = 0;
			CritterCl@ target = MouseCritter;
			if( !valid(target) || target.Id == chosen.Id ) 
			{	
				noTarget = true;
			}
			else
			{
				targetId = target.Id;
			}
			
			bool noItem = false;
			
			int itemId = 0;
			uint16 x = __MouseX, y = __MouseY;
			ItemCl@ item = GetMonitorItem( x, y );
			if( !valid( item ) && chosen.Param[ CR_TARGET_CONTAINER_ID ] == 0 )
			{	
				noItem = true;
			}
			else
			{
				itemId = valid( item ) ? item.Id : chosen.Param[ CR_TARGET_CONTAINER_ID ];
			}
			
			if( noItem && noTarget )
			{
				Message( "Move the cursor: NPC is copird with all stats and loot. If on player and tester mode is on copies all stats and loot. TE are listed but not copied. Item is copied with all contents but not time events.");
				return;
			}

			RunServerScriptUnsafe( "test@unsafe_Copy", targetId, itemId, 0, null, null );
        }
    }
}

class ClearHexCommand : Command
{
    ClearHexCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			if( hexX == 0 || hexY == 0 ) 
			{	
				Message( "Cursor is on interface." );
				return;
			}
			
			RunServerScriptUnsafe( "gm_commands@unsafe_ClearHex", hexX, hexY, 0, null, null );
        }
    }
}

class ItemRadiateCommand : Command
{
    ItemRadiateCommand()
    {
		argsRequired = 3;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            CommandArgument VAL  = getArg( 0 );
            CommandArgument TIME = getArg( 1 );
            CommandArgument DIST = getArg( 2 );
            if( VAL.getType() == ArgumentType::INTEGER && TIME.getType() == ArgumentType::INTEGER && DIST.getType() == ArgumentType::INTEGER )
            {
				uint16 hexX = 0, hexY = 0;
				GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
				if( hexX == 0 || hexY == 0 ) 
				{	
					Message( "Cursor is on interface." );
					return;
				}
				
				int[] args = { VAL.getIntData(), TIME.getIntData(), DIST.getIntData() };
				RunServerScriptUnsafe( "radiation@unsafe_GM_ItemRadiate", 0, hexX, hexY, null, args );
            }
			else
			{
				Message( "[ #radiate VAL TIME DIST ]\n Creates raduation sourece under cursor. All argumanets have to be positive." );
			}
        }
    }
}

class RespawnCommand : Command
{
    RespawnCommand()
    {
		argsRequired = 0;
    }

    private void process()
    {
		uint targetID = 0;
        CommandArgument@ ID  = getArg( 0 );
		if( valid(ID) && ID.getType() == ArgumentType::INTEGER )
		{
			targetID = ID.getIntData();
		}
		
		if( targetID == 0 )
		{
			CritterCl@ target = MouseCritter;
			if( valid( target ) )
			{
				targetID = target.Id;
			}
		}

		string@ mode = null;
		uint var0 = 0;
		uint16 var1 = 0, var2 = 0;
		if( argAmount() != 0 )
        {
			if( argAmount() >= 1 )
			{
				CommandArgument @_arg = @getArg(0);
				if( _arg.getType() == ArgumentType::INTEGER && GetMonitorHex( __MouseX, __MouseY, var1, var2 ) )
				{
					var0 = _arg.getIntData();
				}
			}
			
			if( argAmount() >= 2 )
			{
				@mode = getArg(1).getStringData();
			}
		}
		else
		{
			CritterCl@ target = MouseCritter;
			if( valid(target) )
			{
				var0 = target.Id;
			}
		}
		
		if( valid(mode) )
		{
			Message( mode );
		}
		
		if( var0 != 0 || ( var0 != 0 && var1 != 0 && var2 != 0 ) )
		{
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_respawnCritter",  var0, var1, var2, mode, null );
		}
	}
}

class TeleportToTargetCommand : Command
{
    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( !valid( chosen ) )
        {
            return;
        }
		
        uint16 hexX = 0, hexY = 0;
        GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
        @reformedMessage = "~move " + chosen.Id + " " + hexX + " " + hexY + " 1";
    }
}

class DeleteMobCommand : Command
{
    private void process()
    {
		string@ mode = null;
		uint var0 = 0;
		uint16 var1 = 0, var2 = 0;
		if( argAmount() != 0 )
        {
			if( argAmount() >= 1 )
			{
				CommandArgument @_arg = @getArg(0);
				if( _arg.getType() == ArgumentType::INTEGER && GetMonitorHex( __MouseX, __MouseY, var1, var2 ) )
				{
					var0 = _arg.getIntData();
				}
			}
			if( argAmount() >= 2 )
			{
				@mode = getArg( 1 ).getStringData();
			}
		}
		else
		{
			CritterCl@ target = MouseCritter;
			if( valid(target) )
			{
				var0 = target.Id;
			}
		}
		
		if( valid(mode) )
		{
			Message( mode );
		}
		
		if( var0 != 0 || ( var0 != 0 && var1 != 0 && var2 != 0 ) )
		{
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_deleteCritter",  var0, var1, var2, mode, null );
		}
	}
}

class MutateMobCommand : Command
{
    private void process()
    {
		uint var0 = 0;
		if( argAmount() != 0 )
        {
			CommandArgument idArg = getArg( 0 );
            if( idArg.getType() == INTEGER )
            {
                var0 = idArg.getIntData();
            }
		}
		else
		{
			CritterCl@ target = MouseCritter;
			if( valid(target) )
			{
				var0 = target.Id;
			}
		}
		
		if( var0 != 0 )
		{
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_mutateCritter", var0, 0, 0, null, null );
		}
	}
}

class GetAllCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
		int targetId = valid( target ) ? target.Id : 0;
		ItemCl@ container = GetMonitorItem( __MouseX, __MouseY );
		int containerId = valid( container ) ? container.Id : 0;
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_GiveAll", targetId, containerId, 0, null, null );
    }
}

class GiveAllCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
		int targetId = valid( target ) ? target.Id : 0;
		ItemCl@ container = GetMonitorItem( __MouseX, __MouseY );
		int containerId = valid( container ) ? container.Id : 0;
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_GiveAll", targetId, containerId, 1, null, null );
    }
}

class DeleteAllCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
		int targetId = valid( target ) ? target.Id : 0;
		ItemCl@ container = GetMonitorItem( __MouseX, __MouseY );
		int containerId = valid( container ) ? container.Id : 0;
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_GiveAll",  targetId, containerId, 2, null, null );
    }
}

class GMCloneCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_Clone",  target.Id, 0, 0, null, null );
    }
}

class CloneCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
		RunServerScriptUnsafe( "gm_commands@unsafe_Clone",  target.Id, 0, 0, null, null );
    }
}

class UncloneCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
		RunServerScriptUnsafe( "gm_commands@unsafe_Clone",  target.Id, 1, 0, null, null );
    }
}

class GodCommand : Command
{
    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_god",  chosen.Id, 1, 0, null, null );
        }
    }
}

class DeleteItemCommand : Command
{
    private void process()
    {
		uint var0 = 0;
		uint16 var1 = 0, var2 = 0;
		if( argAmount() == 1 )
        {
			CommandArgument @_arg = @arg;
			if( _arg.getType() == ArgumentType::INTEGER && GetMonitorHex( __MouseX, __MouseY, var1, var2 ) )
			{
				var0 = _arg.getIntData();
			}
		}
		else
		{
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( valid(item) )
			{
				var0 = item.Id;
			}
		}
		if( var0 != 0 || ( var0 != 0 && var1 != 0 && var2 != 0 ) )
		{
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_delItem",  var0, var1, var2, null, null );
		}
	}
}

class DeleteItemIdCommand : Command
{
    private void process()
    {
		uint ID = 0;
		uint16 var1 = 0, var2 = 0;
		if( argAmount() == 1 )
        {
			CommandArgument @_arg = @arg;
			if( _arg.getType() == ArgumentType::INTEGER && GetMonitorHex( __MouseX, __MouseY, var1, var2 ) )
			{
				ID = _arg.getIntData();
			}
		}
		else
		{
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( valid(item) )
			{
				ID = item.Id;
			}
		}
		
		if( ID != 0 )
		{
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_delItemId",  ID, var1, var2, null, null );
		}
	}
}

class GetKeyCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
		
		int id = valid( item ) ? item.Id : GetChosen().Param[ CR_TARGET_CONTAINER_ID ];
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_getkey", id, 0, 0, null, null );
    }
}

class OpenDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_openDoor",  item.Id, 0, 0, null, null );
    }
}

class CloseDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_closeDoor",  item.Id, 0, 0, null, null );
    }
}

class BlockDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_noopenDoor",  item.Id, 0, 0, null, null );
    }
}

class ClearDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScriptUnsafe( "gm_commands@unsafe_GM_clearDoor",  item.Id, 0, 0, null, null );
    }
}

class SwitchGlobalGridCommand : Command
{
    private void process()
    {
        __global ^= CONF_GLOB_GRID;
        Message( "Grid on Global map: " + ( ( __global & CONF_GLOB_GRID != 0 ) ? "on." : "off." ) );
    }
}

class SwitchGlobalWildCommand : Command
{
    private void process()
    {
        __global ^= CONF_GLOB_WILD;
        Message( "Wilderness on Global map is now: " + ( ( __global & CONF_GLOB_WILD != 0 ) ? "on." : "off." ) );
    }
}

class AddItemCommand : Command
{
    AddItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16 hexX = 0, hexY = 0;
            GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			
			int count = 1;
			if( argAmount() > 1 )
			{
				CommandArgument countArg = getArg( 1 );
				if( valid( countArg ) && countArg.getType() == INTEGER )
					count = countArg.getIntData();
			}
			
			int[] args = { protoIdArg.getIntData(), hexX, hexY, count };
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_AddItemOnMap",  0, 0, 0, null, args );
            //@reformedMessage = "~additem " + hexX + " " + hexY + " " + protoIdArg.getIntData() + " 1";
        }
    }
}

class AddLightCommand : Command
{
    AddLightCommand()
    {
        argsRequired = 5;
    }

    private void process()
    {
        CommandArgument LightIntensityArg = getArg( 0 );
		CommandArgument LightRadiusArg = getArg( 1 );
		CommandArgument LightColorArg = getArg( 2 );
		CommandArgument LightFlagsArg = getArg( 3 );
		CommandArgument LightGroupArg = getArg( 4 );
		
        if( LightIntensityArg.getType() == INTEGER )
        {
            uint16 hexX = 0, hexY = 0;
            GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			
			int[] args = { LightIntensityArg.getIntData(), LightRadiusArg.getIntData(), LightColorArg.getIntData(), LightFlagsArg.getIntData(), LightGroupArg.getIntData() };
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_AddLightOnMap",  PID_LIGHT_SOURCE, hexX, hexY, null, args );
        }
    }
}

class DescCommand : Command
{
    DescCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument mode = getArg( 0 );
        if( mode.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
				uint16 hexX = 0, hexY = 0;
				GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
                RunServerScriptUnsafe( "gm_commands@unsafe_GM_HexDesc",  mode.getIntData(), hexX, hexY, str, null );
            }
        }
    }
}

class SetAutoDoorModeCommand : Command
{
    SetAutoDoorModeCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument modeArg = getArg( 0 );
        if( modeArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScriptUnsafe( "gm_commands@unsafe_setautodoor",  item.Id, modeArg.getIntData(), 0, null, null );
        }
    }
}

class GiveItemCommand : Command
{
    GiveItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;
            RunServerScriptUnsafe( "gm_commands@unsafe_GiveItem",  target.Id, protoIdArg.getIntData(), 0, null, null );
        }
    }
}

class GetParameterCommand : Command
{
    GetParameterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument parameterIdArg = getArg( 0 );
        if( parameterIdArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;

			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			int[] coord = { hexX, hexY };

            RunServerScriptUnsafe( "gm_commands@unsafe_GM_GetParam", valid( target ) ? target.Id : 0, parameterIdArg.getIntData(), 0, null, coord );
        }
    }
}

class TraderInitCommand : Command
{
    TraderInitCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            CommandArgument@ dialogIdArg = getArg( 1 );
            int dialogId = valid(dialogIdArg) && dialogIdArg.getType() == INTEGER ? dialogIdArg.getIntData() : 0;
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_TraderInit",  critterIdArg.getIntData(), dialogId, 0, null, null );
        }
    }
}

class DarkenScreenCommand : Command
{
    DarkenScreenCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument timeArg = getArg( 0 );
        if( timeArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;
            RunServerScriptUnsafe( "gm_commands@unsafe_Flushblack",  target.Id, timeArg.getIntData(), 0, null, null );
        }
    }
}

class SetSkinCommand : Command
{
    SetSkinCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;

			CommandArgument@ random = getArg( 1 );
			int random_value = valid( random ) && random.getType() == INTEGER ? random.getIntData() : 0;

            if( !valid( target ) )
			{
                ::Message("No target set.");
                return;
            }

            RunServerScriptUnsafe( "skins@unsafe_GM_skin", target.Id, idArg.getIntData(), random_value, null, null );
        }
    }
}

class GMSayCommand : Command
{
    GMSayCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;
            RunServerScriptUnsafe( "gm@unsafe_GM_say",  target.Id, typeArg.getIntData(), 0, null, null );
        }
    }
}

class CallCritterCommand : Command
{
    CallCritterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm_commands@unsafe_ctd", idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class GetItemCommand : Command
{
    GetItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_GetItem",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class TeleportToCritterCommand : Command
{
    TeleportToCritterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm_commands@unsafe_ctd",  idArg.getIntData(), 0, 1, null, null );
        }
    }
}

class GetItemsByPidCommand : Command
{
    GetItemsByPidCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm@unsafe_GM_getItemsByPid",  protoIdArg.getIntData(), 0, 0, null, null );
        }
    }
}

class GetCritterNameCommand : Command
{
    GetCritterNameCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm@unsafe_GM_name",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class ShowItemValuesCommand : Command
{
    ShowItemValuesCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm@unsafe_GM_showVal",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class ServiceInfoCommand : Command
{
    ServiceInfoCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument flagsArg = getArg( 0 );
        if( flagsArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm@unsafe_sinf",  flagsArg.getIntData(), 0, 0, null, null );
        }
    }
}

class FactionListCommand : Command
{
    FactionListCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "factions@unsafe_ListFactions", typeArg.getIntData(), 0, 0, null, null );
        }
    }
}

class StopCommand : Command
{
    StopCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        CommandArgument radius = getArg( 0 );
		CommandArgument delay = getArg( 1 );

        if( valid( chosen ) && radius.getType() == INTEGER && delay.getType() == INTEGER )
        {
			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			int[] coord = { hexX, hexY };

            RunServerScriptUnsafe( "general_unsafe@unsafe_GM_stop",  radius.getIntData(), delay.getIntData(), 0, null, coord );
        }
    }
}

class SetParameterCommand : Command
{
    SetParameterCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        CommandArgument valueArg = getArg( 1 );

        CommandArgument@ radius = getArg( 2 );
		int radius_value = valid( radius ) && radius.getType() == INTEGER ? radius.getIntData() : 0;

        if( idArg.getType() == INTEGER && valueArg.getType() == INTEGER )
        {
            CritterCl@ target = MouseCritter;

			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );

			int[] data = { hexX, hexY, radius_value };
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_SetParam", valid( target ) ? target.Id : 0, idArg.getIntData(), valueArg.getIntData(), null, data );
        }
    }
}

class SetDoorCodeCommand : Command
{
    SetDoorCodeCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument digitAmountArg = getArg( 0 );
        CommandArgument codeArg = getArg( 1 );
        if( digitAmountArg.getType() == INTEGER && codeArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_setcodedoor",  item.Id, digitAmountArg.getIntData(), codeArg.getIntData(), null, null );
        }
    }
}

class LockDoorCommand : Command
{
    LockDoorCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument complexityArg = getArg( 0 );
        CommandArgument lockerIdArg = getArg( 1 );
        if( complexityArg.getType() == INTEGER && lockerIdArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_lock",  item.Id, complexityArg.getIntData(), lockerIdArg.getIntData(), null, null );
        }
    }
}

class BreakItemCommand : Command
{
    BreakItemCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        CommandArgument breakageRateArg = getArg( 1 );
        if( idArg.getType() == INTEGER && breakageRateArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm_commands@unsafe_GM_brokeItem",  idArg.getIntData(), breakageRateArg.getIntData(), 0, null, null );
        }
    }
}

class AreaBlindingCommand : Command
{
    AreaBlindingCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			if( hexX == 0 || hexY == 0 ) 
			{	
				Message( "Point cursor on hex." );
				return;
			}
			int[] cords = { hexX, hexY };
			
            CommandArgument time = getArg( 0 );
            CommandArgument radius = getArg( 1 );
			CommandArgument color = getArg( 2 );
			
            if( time.getType() == INTEGER && radius.getType() == INTEGER )
            {
                RunServerScriptUnsafe( "gm_commands@unsafe_GM_EffectOnHex", time.getIntData(), radius.getIntData(), 0, color.getStringData(), cords );
            }
        }
    }
}

class LocationTeleportCommand : Command
{
    LocationTeleportCommand()
    {
        argsRequired = 3;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            CommandArgument locationIdArg = getArg( 0 );
            CommandArgument mapIdArg = getArg( 1 );
			CommandArgument skipLoc = getArg( 2 );
            if( locationIdArg.getType() == INTEGER && mapIdArg.getType() == INTEGER )
            {
                RunServerScriptUnsafe( "gm_commands@unsafe_GM_tele", locationIdArg.getIntData(), mapIdArg.getIntData(), skipLoc.getIntData(), null, null );
            }
        }
    }
}

class BuildCommand : Command
{
    BuildCommand()
    {
        argsRequired = 3;
    }

    private void process()
    {
        if( getArg( 0 ).getType() == INTEGER && getArg( 1 ).getType() == INTEGER && getArg( 2 ).getType() == INTEGER )
        {
            string@ str = null;
            if( argAmount() >= 4 )
            {
                @str = getArg( 3 ).getStringData();
            }
            RunServerScriptUnsafe( "qmap_debug@unsafe_client_build",  getArg( 0 ).getIntData(), getArg( 1 ).getIntData(), getArg( 2 ).getIntData(), str, null );
        }
    }
}

class HashCommand : Command
{
    HashCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        uint   hash = GetStrHash( str );
        Message( "hash: " + int(hash) );
    }
}

class SayToAllCommand : Command
{
    SayToAllCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        RunServerScriptUnsafe( "gm@unsafe_say2all",  0, 0, 0, str, null );
    }
}

class AnswerToGmCommand : Command
{
    AnswerToGmCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			string str = getArgumentString();
			RunServerScriptUnsafe( "gm@unsafe_ans",  0, 0, 0, str, null );
			Message( "Message sent." );
        }
    }
}

class AskHelpCommand : Command
{
    AskHelpCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			string str = getArgumentString();
			RunServerScriptUnsafe( "gm@unsafe_help",  0, 0, 0, str, null );
			Message( "Message sent." );
        }
    }
}

class PollCommand : Command
{
    PollCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        RunServerScriptUnsafe( "gm@unsafe_poll",  0, 0, 0, str, null );
    }
}

class SetCritterDescriptionByIdCommand : Command
{
    SetCritterDescriptionByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
			
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScriptUnsafe( "gm@unsafe_gmlex",  critterIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SetTargetCritterDescriptionCommand : Command
{
    SetTargetCritterDescriptionCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        CritterCl@ target = MouseCritter;
        if( valid( target ) && str.length() > 0 )
        {
            RunServerScriptUnsafe( "gm@unsafe_gmlex", target.Id, 0, 0, str, null );
        }
    }
}

class SetItemDescriptionByIdCommand : Command
{
    SetItemDescriptionByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument itemIdArg = getArg( 0 );
        if( itemIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScriptUnsafe( "gm@unsafe_gmitemlex",  itemIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SendServiceMessageByIdCommand : Command
{
    SendServiceMessageByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScriptUnsafe( "gm@unsafe_private",  critterIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SendServiceMessageToTargetCommand : Command
{
    SendServiceMessageToTargetCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
		CritterCl@ target = MouseCritter;
        if( valid( target ) && str.length() > 0 )
        {
            RunServerScriptUnsafe( "gm@unsafe_private", target.Id, 0, 0, str, null );
        }
    }
}

class SendInformMessageToTargetCommand : Command
{
    SendInformMessageToTargetCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScriptUnsafe( "gm@unsafe_answer_GM_inform",  critterIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class PuppetControlCommand : Command
{
    private void process()
    {
		CritterCl@ target = MouseCritter;
        if( !valid( target ) )
		{
			return;
		}
		
		SetControlCritters( target.Id );
    }
}

class PuppetDeleteCommand : Command
{
    private void process()
    {
        RunServerScriptUnsafe( "mobcontrol@unsafe_deleteMob", 0, 0, 0, null, control() );
    }
}

class PuppetAttackCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
        if( valid( target ) )
        {
            RunServerScriptUnsafe( "mobcontrol@unsafe_attackMob", target.Id, 0, 0, null, control() );
        }
        else
        {
            uint16 hexX = 0, hexY = 0;
            GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
            RunServerScriptUnsafe( "mobcontrol@unsafe_moveMob", hexX, hexY, 1, null, control() );
        }
		
    }
}

class PuppetRaidCommand : Command
{
    private void process()
    {
        RunServerScriptUnsafe( "mobcontrol@unsafe_assaultMob", 0, 0, 0, null, control() );
    }
}

class PuppetHomeCommand : Command
{
    private void process()
    {
        RunServerScriptUnsafe( "mobcontrol@unsafe_HomeMob", 0, 0, 0, null, control() );
    }
}

class PuppetGatherCommand : Command
{
    private void process()
    {
        RunServerScriptUnsafe( "mobcontrol@unsafe_GatherMob", 0, 0, 0, null, control() );
    }
}

class PuppetWalkCommand : Command
{
    private void process()
    {
        uint16 hexX = 0, hexY = 0;
        GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
        RunServerScriptUnsafe( "mobcontrol@unsafe_moveMob", hexX, hexY, 0, null, control() );
    }
}

class PuppetStopCommand : Command
{
    private void process()
    {
        uint16 hexX = 0, hexY = 0;
        GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
        RunServerScriptUnsafe( "mobcontrol@unsafe_stopMob", hexX, hexY, 0, null, control() );
    }
}

class PuppetTieCommand : Command
{
    private void process()
    {
        CritterCl@ target = MouseCritter;
        if( !valid( target ) )
        {
			return;
        }
		
		RunServerScriptUnsafe( "mobcontrol@unsafe_chaseMob", target.Id, 0, 0, null, control() );
    }
}

import void RequestWebsiteAuth( CritterCl& player ) from "link";
class WebsiteAuth : Command
{
    private void process()
    {
        CritterCl@ ch = GetChosen();
        if( valid( ch ) )
        {
            RequestWebsiteAuth(ch);
        }
    }
}

import void RequestStartGame( CritterCl& player ) from "link";
class StartGame : Command
{
    private void process()
    {
        CritterCl@ ch = GetChosen();
        if( valid( ch ) )
        {
            RequestStartGame(ch);
        }
    }
}

class ToggleLights : Command
{
	ToggleLights()
	{
		argsRequired = 1;
	}
	
    private void process()
    {
		CommandArgument state = getArg( 0 );
		RunServerScriptUnsafe( "map_lights@unsafe_ToggleLights", state.getIntData(), 0, 0, null, null );
    }
}

class DebugLook : Command
{
	DebugLook()
	{
		argsRequired = -1;
	}
	
    private void process()
    {
        bool isDebug = false;
        if( argAmount() == 1 )
        {
            CommandArgument@ state = getArg( 0 );
            switch( state.getType() )
            {
                case (ArgumentType::INTEGER):
                {
                    isDebug = ( state.getIntData() != 0 );
                } break;
                case (ArgumentType::BOOL):
                {
                    isDebug = state.getBoolData();
                } break;
                case (ArgumentType::STRING):
                {
                    isDebug = ( strlwr( state.getStringData() ) == "on" );
                } break;
                default: break;
            }
        }
        SetDebugLookMode( isDebug );
    }
}

/*
 * #define BAN	("#ban") // #banid [id] [hours] [kick]
 ****#define BAN_KICK ("#kick") //#kick [id]
 ****#define BAN_IP	("#banip") //#banip [id] [hours] [mask_level]
 ****#define BAN_UNBAN	("#unban") //#unban [id]
 */

class BanCommand : Command
{
    BanCommand()
    {
        argsRequired = 2;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 ), hoursArg = getArg( 1 ), kickArg = getArg( 2 );
        // @reformedMessage = "~run banhammer BanId " + idArg.getIntData() + " "+ hoursArg.getIntData() +" "+ kickArg.getIntData();
        RunServerScriptUnsafe( "gm@unsafe_banid",  idArg.getIntData(), hoursArg.getIntData(), kickArg.getIntData(), null, null );
    }
}

class BanKickCommand : Command
{
    BanKickCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer KickId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScriptUnsafe( "gm@unsafe_kickid",  idArg.getIntData(), 0, 0, null, null );
    }
}

class BanIpCommand : Command
{
    BanIpCommand()
    {
        argsRequired = 3;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 ), hoursArg = getArg( 1 ), maskArg = getArg( 2 );
        // @reformedMessage = "~run banhammer KickBanIdIp " + idArg.getIntData() + " "+ hoursArg.getIntData() +" "+ maskArg.getIntData();
        RunServerScriptUnsafe( "gm@unsafe_kickbanipid",  idArg.getIntData(), hoursArg.getIntData(), maskArg.getIntData(), null, null );
    }
}

class BanUnBanCommand : Command
{
    BanUnBanCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScriptUnsafe( "gm@unsafe_unbanid",  idArg.getIntData(), 0, 0, null, null );
    }
}

class BanGetIpsCommand : Command
{
    BanGetIpsCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScriptUnsafe( "gm@unsafe_getips",  idArg.getIntData(), 0, 0, null, null );
    }
}

class CompareStatCommand : Command
{
    CompareStatCommand()
    {
        argsRequired = 3;
    }
    private void process()
    {
        CommandArgument statArg = getArg( 0 );
        CommandArgument idArg;

        int[] ids;

        for( uint8 i = 0, j = argAmount() - 1; i < j; ++i )
        {
            idArg = getArg( i );
            ids.insertLast( idArg.getIntData() );
        }

        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScriptUnsafe( "gm@unsafe_statcompare",  statArg.getIntData(), 0, 0, null, ids );
    }
}

class CompareStatRadiusCommand : Command
{
    CompareStatRadiusCommand()
    {
        argsRequired = 2;
    }
    private void process()
    {
        CommandArgument statArg = getArg( 0 );
        CommandArgument radiusArg = getArg( 1 );

        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScriptUnsafe( "gm@unsafe_statcompareradius",  statArg.getIntData(), radiusArg.getIntData(), 0, null, null );
    }
}

class KillCommand : Command
{
    KillCommand()
    {
        argsRequired = 0;
        @description = "#kill [id] [deathAnim]\nkills critter id (or under cursor) with deathAnim, if not stated - regular blood.";
    }
    private void process()
    {
        CommandArgument@ idArg = getArg( 0 ); 
		uint ID = valid( idArg ) ? idArg.getIntData() : 0;
		
        CommandArgument@ animArg = getArg( 1 );
		int anim = valid(animArg) ? animArg.getIntData() : 0;

        CommandArgument@ strengthArg = getArg( 2 ); 
		uint strength = valid( strengthArg ) ? strengthArg.getIntData() : 0;

		if( ID == 0 )
		{
			CritterCl@ target = MouseCritter;
			if( valid( target ) )
			{
				ID = target.Id;
			}
		}

        RunServerScriptUnsafe( "gm@unsafe_killbytype", ID, anim, strength, null, null );
    }
}

class CellCreateCommand : Command
{
    CellCreateCommand()
    {
        argsRequired = 3;
        @description = "#cellcreate [pid] [x] [y] [force]\ncreate location PID with coordinates x:y(coordinates are written in cell system). If force > 0 location rewritten.";
    }
    private void process()
    {
        CommandArgument pidArg = getArg( 0 );
        CommandArgument xArg = getArg( 1 );
        CommandArgument yArg = getArg( 2 );
        CommandArgument forceArg = getArg( 3 );

        int[] sendInfo = { pidArg.getIntData(), xArg.getIntData(), yArg.getIntData(), forceArg.getIntData() };

        RunServerScriptUnsafe( "gm@unsafe_cell_create", 0, 0, 0, null, sendInfo );
    }
}

class CellCreateWildCommand : Command
{
    CellCreateWildCommand()
    {
        argsRequired = 5;
        @description = "#cellcreatewild [pid] [x] [y] [wild] [livetime] [force]\ncreates location PID with coordinates x:y(coordinates are written in cell system). Wild - wilderness. Livetime - lifetime. If force > 0 location rewritten.";
    }
    private void process()
    {
        CommandArgument pidArg = getArg( 0 );
        CommandArgument xArg = getArg( 1 );
        CommandArgument yArg = getArg( 2 );
        CommandArgument wildArg = getArg( 3 );
        CommandArgument liveArg = getArg( 4 );
        CommandArgument forceArg = getArg( 5 );

        int[] sendInfo = { pidArg.getIntData(), xArg.getIntData(), yArg.getIntData(), wildArg.getIntData(), liveArg.getIntData(), forceArg.getIntData() };

        RunServerScriptUnsafe( "gm@unsafe_cell_create_wild", 0, 0, 0, null, sendInfo );
    }
}

class CellMoveCommand : Command
{
    CellMoveCommand()
    {
        argsRequired = 4;
        @description = "#cellmove [x] [y] [x1] [y1]\nmoves location with coorditanes x:y to coordinates x1:y1(coordinates are written in cell system).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );
        CommandArgument x1Arg = getArg( 2 );
        CommandArgument y1Arg = getArg( 3 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData(), x1Arg.getIntData(), y1Arg.getIntData() };

        RunServerScriptUnsafe( "gm@unsafe_cell_move", 0, 0, 0, null, sendInfo );
    }
}

class CellDelCommand : Command
{
    CellDelCommand()
    {
        argsRequired = 2;
        @description = "#celldel [x] [y]\ndeletes location with coordinates x:y(coordinates are written in cell system).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData() };

        RunServerScriptUnsafe( "gm@unsafe_cell_del", 0, 0, 0, null, sendInfo );
    }
}

class CellSizeCommand : Command
{
    CellSizeCommand()
    {
        argsRequired = 4;
        @description = "#cellsize [x] [y] [sizeX] [sizeY]\nchanges location size with coorditanes x:y(coordinates are written in cell system) for sizeX : sizeY(point of origin is top left corner.).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );
        CommandArgument sXArg = getArg( 2 );
        CommandArgument sYArg = getArg( 3 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData(), sXArg.getIntData(), sYArg.getIntData() };

        RunServerScriptUnsafe( "gm@unsafe_cell_size", 0, 0, 0, null, sendInfo );
    }
}

//~run MODULENAME FUNCTION.
class RunModuleCommand : Command
{
    RunModuleCommand()
    {
        // module name and function name are required, everything else will be checked on global level
        argsRequired = 2;
    }

    private void process()
    {
        const string RUN_COMMAND_NAME = "~run";
        const string COMMAND_ARG_SEPARATOR = " ";
        const string DEFAULT_PARAMETER = "0";
        const uint   ARGUMENTS_NEEDED = 6;

        string       moduleName = getArg( 0 ).getStringData();
        string       commandName = RUN_MODULE_COMMAND_PREFIX + moduleName;
        if( commandName == RUN_DEBUG_COMMAND_NAME )
        {
            moduleName = DEBUG_MODULE_NAME;
        }
        else if( commandName == RUN_TEST_COMMAND_NAME )
        {
            moduleName = TEST_MODULE_NAME;
        }
        else if( commandName == RUN_SKINS_COMMAND_NAME )
        {
            moduleName = SKINS_MODULE_NAME;
        }
        else if( commandName == RUN_QMAP_DEBUG_COMMAND_NAME )
        {
            moduleName = QMAP_DEBUG_MODULE_NAME;
        }

        string@[] runCommandParts;
        runCommandParts.insertLast( string( RUN_COMMAND_NAME ) );
        runCommandParts.insertLast( moduleName );
        for( uint i = 1; i < argAmount(); ++i )
        {
            runCommandParts.insertLast( getArg( i ).getStringData() );
        }
        for( uint i = runCommandParts.length(); i < ARGUMENTS_NEEDED; ++i )
        {
            runCommandParts.insertLast( string( DEFAULT_PARAMETER ) );
        }
        @reformedMessage = join( runCommandParts, COMMAND_ARG_SEPARATOR );
    }
}

class CommandHelpCommand : Command
{
    CommandHelpCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        const string INVALID_COMMAND_MESSAGE = "There is no such command.";
        Command@     correspondingCommand = GetCommandByName( getArg( 0 ).getStringData() );

        if( !valid( correspondingCommand ) )
        {
            Message( INVALID_COMMAND_MESSAGE );
        }
        else
        {
            Message( correspondingCommand.getDescription() );
        }
    }
}

class CommandDeleteLocation : Command
{
    CommandDeleteLocation()
    {
        argsRequired = 1;
    }
	
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        RunServerScriptUnsafe( "gm@unsafe_delete_location",  idArg.getIntData(), 0, 0, null, null );
    }
}

class MobInitCommand : Command
{
	MobInitCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
		CommandArgument temIdarg = getArg( 0 );
		int var1 = temIdarg.getIntData();
		if( var1 > 0 )
		{
			CritterCl@ target = MouseCritter;
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_mobinit", target.Id, var1, 0, null, null );
		}
    }
}

class PetDogInitCommand : Command
{
	PetDogInitCommand()
    {
        argsRequired = 1;
    }
	
    private void process()
    {
		CommandArgument temIdarg = getArg( 0 );
		int var1 = temIdarg.getIntData();
		if( var1 > 0 )
		{
			CritterCl@ target = MouseCritter;
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_PetDoginit", target.Id, var1, 0, null, null );
		}
    }
}

class GuardInitCommand : Command
{
	GuardInitCommand()
    {
        argsRequired = 1;
    }
	
    private void process()
    {
		CommandArgument temIdarg = getArg( 0 );
		int var1 = temIdarg.getIntData();
		if( var1 > 0 )
		{
			CritterCl@ target = MouseCritter;
			RunServerScriptUnsafe( "gm_commands@unsafe_GM_guard_init", target.Id, var1, 0, null, null );
		}
    }
}

bool gm_msg( string& message )
{
    if( message.length() < 2 || message[ 1 ] == ' ' )
	{
        return false;
	}
	
    string@[] @ parts = split( message, " " );
    if( !valid( parts ) )
	{
        return false;
    }
	
	Command@ command = GetCommandByName( parts[ 0 ] );

    if( !valid( command ) )  // no such command exists
    {
        return false;
    }
    for( uint i = 1; i < parts.length(); ++i )
	{
		command.pushBackArg( CommandArgument( parts[i] ) );
	}

    command.run();
    string@ reformedMessage = command.getReformedMessage();
    if( valid( reformedMessage ) )  // message should be passed further
    {
        message = reformedMessage;
        return true;
    }
	
    return false;
}

#endif // CLIENT_GM