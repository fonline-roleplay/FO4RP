#ifndef CLIENT_NAMES
#define CLIENT_NAMES

#include "_utils.fos"
#include "client_names_h.fos"
#include "client_gui_h.fos"

string cutOutAFK( string text, string signature = "_" )
{
	uint index = findFirstOf( text, signature, 0 );
	return substring( text, 0, index );
}

string console_name = "";

uint getHash( uint id, uint8 version )
{
    if( version == 0 || id == 0 )
	{
        return 0;
	}
	
    if( version == 2 )
    {
        uint temp = id + 23548;
        temp = temp * temp * temp;

        return temp;
    }
    else
	{
        return 0;
	}
}

class CritterName
{
    uint   Id;
    string Name;
    uint   Hash;

    CritterName()
    {
        Id = 0;
        Name = "???";
        Hash = 0;
    }

    CritterName( uint id, string & name )
    {
        Id = id;
        Name = name;
        Hash = getHash( Id, VERSION_HASH );
    }

    CritterName( string & name, uint hash )
    {
        Id = 0;
        Name = name;
        Hash = hash;
    }

    CritterName( uint id, string & name, uint hash )
    {
        Id = id;
        Name = name;
        if( hash == 0 )
		{
            Hash = getHash( Id, VERSION_HASH );
        }
		else
		{
            Hash = hash;
		}
	}
}

CritterName@[] CritterNames;

uint Target_id = 0;

bool CharClick( CritterCl@ target )
{
    if( !valid( target ) )
	{
        return false;
	}
	
    RunServerScriptUnsafe( "names@unsafe_char_middle_click",  target.Id, 0, 0, null, null );

	Target_id = target.Param[ QST_MEDIUM ] >= 4 ? target.Param[ QST_MEDIUM ] : target.Id;

    return true;
}

void _rememberChar( int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    CritterCl@ target = GetCritter( Target_id );
    if( !valid(target) || target.Param[ QST_MEDIUM ] == 3 || ABS( target.Param[ QST_MEDIUM ] ) == 2 )
    {
        Message( "Naming error!" );
        return;
    }
	
    if( RememberName( Target_id, param3 ) )
    {
        replaceNick( target );
        Message( GetMsgStr( TEXTMSG_GAME, STR_REMEMBER_NAME ) + COLOR_GRAY + " " + param3 + "|" + COLOR_TEXT + " \"." );
    }
    else
    {
        Message( "Naming (saving) error!" );
        return;
    }

    Target_id = 0;
}

bool RememberName( uint id, string& name )
{
    uint t_count = 0;

    uint hash = getHash( id, VERSION_HASH );
	#ifdef DEBUG_NAMES
	Message( "id: " + id + " hash: " + hash + " name: " + name );
    #endif
    if( id == 0 && name.length() == 0 )
	{
        return false;
	}
	
    else if( id == 0 )
    {

        for( uint i = 0; i < CritterNames.length(); i++ )
        {
            if( valid(CritterNames[ i ]) && CritterNames[ i ].Name == name )
            {
                @CritterNames[ i ] = null;
                t_count += 1;
            }
        }

    }

    else if( name.length() == 0 )
    {

        for( uint i = 0; i < CritterNames.length(); i++ )
        {
            if( valid(CritterNames[ i ]) && ( CritterNames[ i ].Id == id || CritterNames[ i ].Hash == hash ) )
            {
                @CritterNames[ i ] = null;
                t_count += 1;
            }
        }
    }

    else
    {

        for( uint i = 0; i < CritterNames.length(); i++ )
        {
            if( valid(CritterNames[ i ]) && ( CritterNames[ i ].Hash == hash || CritterNames[ i ].Id == id ) )
            {
                CritterNames[ i ].Name = name;
                t_count += 1;
                break;
            }

        }
        if( t_count < 1 )
        {
            uint len = CritterNames.length();
            CritterNames.resize( len + 1 );
            CritterName critterName( id, name );
            @CritterNames[ len ] = critterName;
            t_count += 1;
        }
    }
    return ( t_count > 0 );
}

//import string@ GetName( uint id ) from "client_names";
string@ GetName( uint id )
{
    uint hash = getHash( id, VERSION_HASH );

    string@ s_temp = null;
    for( uint i = 0; i < CritterNames.length(); i++ )
    {
        if( valid(CritterNames[ i ]) && ( ( id != 0 && CritterNames[ i ].Id == id ) || CritterNames[ i ].Hash == hash ) && CritterNames[ i ].Name.length() > 0 )
        {
            @s_temp = CritterNames[ i ].Name;
            break;
        }
    }
    return s_temp;
}

void SaveNames()
{
    uint len = CritterNames.length();
    #ifdef DEBUG_NAMES
    Message( "Saving..." + len );
    #endif
    if( len < 1 )
    {
        #ifdef DEBUG_NAMES
        Message( "Nothing to save" );
        #endif
        return;
    }

    CritterName@ cn = null;

    uint t_count = 0;

    for( uint i = 0; i < len; i++ )
    {
        @cn = CritterNames[ i ];

        if( VERSION_SAVE < VERSION_SAVE_NO_ID )
        {
            if( !valid(cn) || ( cn.Id == 0 ) || ( cn.Name.length() < 1 ) )
			{
                continue;
			}
		}
        else
        {
            if( !valid(cn) || ( cn.Name.length() < 1 ) )
			{
                continue;
			}
			
            if( cn.Hash == 0 )
            {
                if( cn.Id == 0 )
				{
                    continue;
                }
				cn.Hash = getHash( cn.Id, VERSION_HASH );
                if( cn.Hash == 0 )
				{
                    continue;
				}
			}
        }

        t_count += 1;
    }

    if( t_count < 1 )
    {
        #ifdef DEBUG_NAMES
			Message( "Nothing to save.2" );
        #endif
        return;
    }

    file f;
	string filename = "CritterNames_" + GetChosen().Id + ".txt";	
	if( !( f.open( NAMES_DIR + filename, "w" ) >= 0 ) && !( f.open( filename, "w" ) >= 0 ) )
    {
        Message( "Error creating file: CritterNames" + GetChosen().Id + ".txt" );
        return;
    }

    f.setPos( 0 );

    f.writeString( VERSION_SAVE + "\n" );

    f.writeString( t_count + "\n" );

    @cn = null;

    for( uint i = 0; i < len; i++ )
    {
        @cn = CritterNames[ i ];

        if( VERSION_SAVE < VERSION_SAVE_NO_ID )
        {
            if( !valid(cn) || ( cn.Id == 0 ) || ( cn.Name.length() < 1 ) )
			{
                continue;
            }
			f.writeString( cn.Id + "\n" );
        }
        else
        {
            if( !valid(cn) || ( cn.Hash == 0 ) || ( cn.Name.length() < 1 ) )
			{
                continue;
			}
		}

        if( VERSION_SAVE >= VERSION_SAVE_FIRST )
		{
            f.writeString( int(cn.Hash) + "\n" );
        }
		f.writeString( cn.Name + "\n" );
    }

    f.close();
    #ifdef DEBUG_NAMES
		Message( "Names saved: " + t_count );
    #endif
}

void LoadNames()
{
    #ifndef DEBUG_POSTCLEAR
		CritterNames.resize( 0 );
    #endif
    file f;

	string filename = "CritterNames_" + GetChosen().Id + ".txt";	
	if( !( f.open( NAMES_DIR + filename, "r" ) >= 0 ) && !( f.open( filename, "r" ) >= 0 ) )
    {
        return;
    }

    int version = 0;

    int count = 0;

    f.setPos( 0 );

    string s_version;

    string s_count;

    f.readLine( s_version );

    delN( s_version );

    if( !StrToInt( s_version, version ) )
    {
        Message( "Name file damaged.1-1" );
        return;
    }

    if( version <= VERSION_SAVE_NONE )
    {
        count = version;
    }
    else
    {
        f.readLine( s_count );

        delN( s_count );

        if( !StrToInt( s_count, count ) )
        {
            Message( "Name file damaged.1-2" );
            return;
        }
    }
	
    #ifdef DEBUG_NAMES
		Message( "Loading... " + CritterNames.length() );
    #endif

    #ifdef DEBUG_POSTCLEAR
		CritterNames.resize( 0 );
    #endif

    // CritterNames.resize(count);
    #ifdef DEBUG_NAMES
		Message( "a " + CritterNames.length() );
    #endif
	
    int    id = 0;
    string s_id;

    uint   hash = 0;
    int    i_hash = 0;
    string s_hash;

    string s_name;

    uint   t_count2 = 0;

    for( uint i = 0; i < uint( count ); i++ )
    {
        hash = 0;
        id = 0;

        if( version < VERSION_SAVE_NO_ID )
        {
            f.readLine( s_id );
            delN( s_id );
            if( !StrToInt( s_id, id ) || id < 1 )
            {
                Message( "Name file damaged.2" );
                return;
            }
        }
        if( version >= VERSION_SAVE_FIRST )
        {
            f.readLine( s_hash );
            delN( s_hash );
            i_hash = 0;
            if( !StrToInt( s_hash, i_hash ) || i_hash == 0 )
            {
                Message( "Name file damaged.2-2" );
                return;
            }
            hash = uint( i_hash );
        }
        f.readLine( s_name );
        if( s_name.length() < 2 )
        {
            Message( "Name file damaged.3" );
            return;
        }
        delN( s_name );

        uint t_count = 0;
        for( uint j = 0; j < CritterNames.length(); j++ )
        {
            if( version < VERSION_SAVE_NO_ID )
            {
                if( valid(CritterNames[ j ]) && CritterNames[ j ].Id == uint( id ) )
                {
                    CritterNames[ j ].Name = s_name;
                    t_count += 1;
                    break;
                }
            }
            else
            {
                if( valid(CritterNames[ j ]) && CritterNames[ j ].Hash == hash )
                {
                    CritterNames[ j ].Name = s_name;
                    t_count += 1;
                    break;
                }
            }
        }
		
        if( t_count < 1 )
        {
            uint len = CritterNames.length();
            CritterNames.resize( len + 1 );
            CritterName critterName( id, s_name, hash );
            @CritterNames[ len ] = critterName;
            t_count += 1;
        }
        t_count2 += t_count;
    }

    f.close();

    Message( GetMsgStr( TEXTMSG_GAME, STR_NAMES_REMEMBERED ) + t_count2 );
}

dictionary original_names;
bool updateNick( CritterCl& cr )
{
    if( cr.IsPlayer() )
	{
        string@ original_name;
        string key = ""+cr.Id;
        original_names.get(key, @original_name);
        if( !valid(original_name) )
		{
            if( cr.Name != "" || cr.Name != "???" )
			{
                original_names.set(key, cr.Name);
            }
        }
    }
    return replaceNick( cr );
}

string getGroups( CritterCl& cr )
{
	string result = "";
	
	int[] groups = getControlledGroups( cr );
	
	int l = groups.length();
	if( l == 0 )
	{
		return "";
	}
	
	bool first = true;
	for( int i = 0; i < l; i++ )
	{
		if( first )
		{
			if( groups[i] != -1 )
			{
				first = false;
			}
			else
			{
				continue;
			}
		}
		else
		{
			result += " ";
		}
		result += ( groups[i] + 1 );
	}
	
	return result;
}

string getHP( CritterCl& cr )
{
	if( cr.IsDead() )
	{
		return "|0xFFFFFF " + "R.I.P.";
	}
	
	int hp_proc = cr.Stat[ ST_CURRENT_HP ] * 100 / cr.Stat[ ST_MAX_LIFE ];

	if( cr.Stat[ ST_CURRENT_HP ] < 0 )
	{
		return "|0x990000 " + cr.Stat[ ST_CURRENT_HP ];
	}
	
	bool HP_PERCENT = ( __sinf & SINF_MOB_HP_PERCENT != 0 );

	string color = "|0x00FF00 ";
	
	if( hp_proc <= 30 )
	{
		color = "|0xBB5500 ";
		
		if( HP_PERCENT )
		{
			return color + hp_proc + "%";
		}
	}
	else if( hp_proc <= 50 )
	{
		color = "|0x999900 ";
		
		if( HP_PERCENT )
		{
			return color + hp_proc + "%";
		}
	}
	else if( hp_proc <= 70 )
	{
		color = "|0x55BB00 ";
		
		if( HP_PERCENT )
		{
			return color + hp_proc + "%";
		}
	}
	else if( hp_proc <= 90 )
	{
		color = "|0x009900 ";
		
		if( HP_PERCENT )
		{
			return color + hp_proc + "%";
		}
	}	
	
	if( HP_PERCENT )
	{
		return color + hp_proc + "%";
	}
	
	return color + cr.Stat[ ST_CURRENT_HP ] + " / " + cr.Stat[ ST_MAX_LIFE ];
}

string[] typing_dots = {".\n", ". .\n", ". . .\n", ". . . .\n", ". . . . .\n"};

void _updateNick( int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    CritterCl@ target = GetCritter( param0 );

	if( valid( target ) )
	{
		replaceNick( target );
	}
}

//import bool replaceNick( CritterCl& cr ) from "client_names";
bool replaceNick( CritterCl& cr )
{
    string@ original_name;
    if( cr.IsPlayer() )
	{
        original_names.get(""+cr.Id, @original_name);
        if( !valid(original_name) )
		{
            @original_name = "???";
        }
    }
	else
	{
        @original_name = "" + cr.Name;
    }

    string prefix = "";
	
	CritterCl@ chosen = GetChosen();
	
	if( isGM( chosen ) && cr.Param[ QST_INVIS ] != 0 )
	{
		prefix += "|0x606060 < Invisible >|0xFFFFFF \n";
	}
	
	if( isGM( chosen ) )
	{
		string hold_position = ( ( cr.Param[ ST_WALK_TIME ] == 0 && cr.Param[ ST_RUN_TIME ] == 0 ) ? "|0xFF0000 " + " X" + "|0xFFFFFF " : "" ) + "\n";
		string groupsList = getGroups( cr );
		if( ( isControlled( cr ) && isSelected( cr.Id ) ) )
		{
			if( groupsList.length() != 0 )
			{
				groupsList += "|0x606060  - ";
			}

			prefix += "|0xFFFFFF << |0x888FF " + groupsList + getHP( cr ) + " |0xFFFFFF >>" + hold_position;
		}
		else if( cr.IsPlayer() && ( ( __sinf & SINF_PLAYERS_HP ) != 0 ) )
		{
			if( groupsList.length() != 0 )
			{
				groupsList += "|0x606060  - ";
			}

			prefix += "|0xB0B0B0 < |0x888FF " + groupsList + getHP( cr ) + " |0xB0B0B0 >" + hold_position;
		}
	}

    if( ( cr.IsChosen() && FLAG( cr.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HP_ON_HEAD ) ) && ( __sinf & SINF_PLAYERS_HP ) == 0 )
    {
        prefix += "|0xB0B0B0 < |0x888FF " + getHP( cr ) + " |0xB0B0B0 >";
    }
	
    string@ s_temp = null;

    @s_temp = GetName( cr.Id );

    string color_name = "|0xff11ffff ";
    string color_login = (cr.IsNpc() ? "|0xff77AA99 " : "|0xff77ff22 ");
    string s_crid = ( ( ( __sinf & SINF_CRID_ON_HEAD ) != 0 ) ? " |0xffff0000 " + cr.Id : "" ) + color_login;
	
    cr.NameOnHead = "";

    if( ( __sinf & SINF_LOGIN ) != 0 )
    {
		original_name = cutOutAFK( original_name );
        cr.Name = original_name;

        if( valid(s_temp) )
		{
			@s_temp = cutOutAFK( s_temp );
            cr.NameOnHead = prefix + color_login + original_name + s_crid + "\n" + color_name + s_temp;
		}
		else
		{
            cr.NameOnHead = prefix + color_login + original_name + s_crid;
		}
		
	}
    else if( cr.Param[ QST_MEDIUM ] != 0 )
    {
        if( ABS( cr.Param[ QST_MEDIUM ] ) == 2 )
        {
            cr.Name = "";
            cr.NameOnHead = prefix + "";
        }
		
        if( cr.Param[ QST_MEDIUM ] == 3 )
        {
            @s_temp = cr.Lexems;
            if( valid(s_temp) )
            {
				@s_temp = cutOutAFK( s_temp );

				cr.Name = s_temp;
				cr.NameOnHead = prefix + s_temp + s_crid;
			}
        }
		
        if( cr.Param[ QST_MEDIUM ] >= 4 )
        {
			@s_temp = GetName( cr.Param[ QST_MEDIUM ] );
            if( valid(s_temp) )
            {
				cr.Name = s_temp;
				cr.NameOnHead = prefix + s_temp + s_crid;
            }
			else
			{
				cr.Name = "";
				cr.NameOnHead = prefix + "" + s_crid;
			}
        }
    }
    else if( valid(s_temp) )
    {
        if( cr.IsPlayer() )
		{
            cr.Name = s_temp;
		}
		cr.NameOnHead = prefix + s_temp + s_crid;
    }
    else if( cr.IsNpc() )
    {
        cr.NameOnHead = prefix + "|0x00000000 ";
    }
    else if( GetChosen().Id == cr.Id )
    {
		cr.Name = original_name;
        cr.NameOnHead = prefix + original_name + s_crid;
    }
    else
    {
        cr.Name = "???";
        cr.NameOnHead = prefix + "|0x00000000 ";
    }
	
    if( cr.Param[ CR_TYPING_TIME ] > int( __FullSecond ) )
	{
        uint time = ( ( cr.Param[CR_TYPING_TIME]-__FullSecond )/ __TimeMultiplier );
        cr.NameOnHead = typing_dots[ 4 - ( time % 5 ) ] + cr.NameOnHead;
    }

	if( cr.Param[ CR_AFK_MODE ] == 1 )
	{
		string afk_str = cr.Lexems;
		string signature = "_";
		int pos = findFirstOf( afk_str, signature, 0 );
		if( pos != -1 )
		{
			pos ++;
			afk_str = substring( afk_str, pos, afk_str.length() - pos ); 
			cr.NameOnHead = "|0x606060 < " + afk_str + " >|0xADADB9 \n" + cr.NameOnHead;
		}
	}
	
    return true;
}

bool updateAllNicks()
{
    CritterCl@[] critters;
    uint len = GetCritters( 0, FIND_ALL, critters );
    for( uint i = 0; i < len; i++ )
    {
        if( !valid(critters[ i ]) )
		{
            continue;
        }
		
		replaceNick( critters[ i ] );
    }

    return true;
}

void ClearNameCache()
{
    CritterNames.resize( 0 );
}

#endif //CLIENT_NAMES