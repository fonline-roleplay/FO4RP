#ifndef CRAFT_RECIPES_H
#define CRAFT_RECIPES_H

// Filters
#define FILTER_PARTS	 						( 0x00000001 )	// 1    Mechanical parts
#define FILTER_SMALL_GUNS   					( 0x00000002 )	// 2	Pistols, short guns, etc.
#define FILTER_CLOTHES    						( 0x00000004 )	// 3	Clothes
#define FILTER_MELEE      						( 0x00000008 )	// 4	Knifes, swords, katanas, etc.
#define FILTER_TOOLS							( 0x00000010 )	// 5	Crowbars, shivs, etc.
#define FILTER_CHEM        						( 0x00000020 )	// 6	Chemisty
#define FILTER_MEDIUM_GUNS    					( 0x00000040 )	// 7	Ranged & assault rifles
#define FILTER_ARMOR    						( 0x00000080 )	// 8	Armor
#define FILTER_TRAPS        					( 0x00000100 )	// 9	Beartraps, landmines, etc.
#define FILTER_BACK                				( 0x00000200 )	// 10	Backpacks & this kind of things
#define FILTER_AMMO       						( 0x00000400 )	// 11	Ammo
#define FILTER_BIG_GUNS       				    ( 0x00000800 )	// 12	Machineguns, antimaterial rifles, etc.
#define FILTER_HEAD            					( 0x00001000 )	// 13	Helmets, glasses, etc.
#define FILTER_THROWN      						( 0x00002000 )	// 14	Knifes, grenades, etc.
#define FILTER_FURNITURE   						( 0x00004000 )	// 15	Furniture
#define FILTER_16   							( 0x00008000 )	// 16	
#define FILTER_17   							( 0x00010000 )	// 17	
#define FILTER_18   							( 0x00020000 )	// 18	
#define FILTER_19       						( 0x00040000 )	// 19	
#define FILTER_20								( 0x00080000 )	// 20	
#define FILTER_21   							( 0x00100000 )	// 21	
#define FILTER_22   							( 0x00200000 )	// 22	
#define FILTER_23   							( 0x00400000 )	// 23	
#define FILTER_24   							( 0x00800000 )	// 24	
#define FILTER_25           					( 0x01000000 )	// 25	
#define FILTER_26       						( 0x02000000 )	// 26	
#define FILTER_27   							( 0x04000000 )	// 27	
#define FILTER_28   							( 0x08000000 )	// 28	
#define FILTER_29								( 0x10000000 )	// 29   
#define FILTER_30								( 0x20000000 )	// 30   
#define FILTER_31								( 0x40000000 )	// 31   
#define FILTER_32								( 0x80000000 )	// 32   

shared class CraftRecipe
{
	// Tools needed in craft
	uint16[]	Tools;

	// Items needed in craft
	uint16[]	Resources;
	uint[]		ResourcesCount;

	// Output Items
	uint16[]	Output;
	uint[]		OutputCount;

	// Other
	uint Profession = 0;
	uint Tier = 0;
	uint FilterFlags = 0;

	#ifdef __CLIENT
	string CraftName = "";
	#endif // __CLIENT

	CraftRecipe@ SetResourcesPids(uint16[] pids)
	{
		this.Resources = pids;
		return this;
	}

	CraftRecipe@ SetResourcesCounts(uint[] counts)
	{
		this.ResourcesCount = counts;
		return this;
	}

	CraftRecipe@ SetToolPids(uint16[] pids)
	{
		this.Tools = pids;
		return this;
	}

	CraftRecipe@ SetOutputPids(uint16[] pids)
	{
		this.Output = pids;
		return this;
	}

	CraftRecipe@ SetOutputCounts(uint[] counts)
	{
		this.OutputCount = counts;
		return this;
	}

	CraftRecipe@ SetProfession(uint profession)
	{
		this.Profession = profession;
		return this;
	}

	CraftRecipe@ SetTier(uint tier)
	{
		this.Tier = tier;
		return this;
	}

	#ifdef __CLIENT
	CraftRecipe@ SetName(string name)
	{
		this.CraftName = name;
		return this;
	}
	#endif // __CLIENT
}

shared class CraftList
{
	CraftRecipe@[] Recipes;
	uint Len = 0;

	CraftList@ Add(CraftRecipe@ newEntry)
	{
		this.Recipes.insertLast(newEntry);
		Len = Recipes.length();
		return this;
	}

	CraftRecipe@ GetByPID(uint pid)
	{
		if(pid >= Len) return null;
		return Recipes[pid];
	}
}

	#ifndef CRAFT_RECIPES
		import void InitCraftList() from "craft_recipes";
		import CraftRecipe@ GetCraftByPID(uint pid) from "craft_recipes";
		import uint GetMaxCraftsCount() from "craft_recipes"; 
	#endif // CRAFT_RECIPES

#endif // CRAFT_RECIPES_H