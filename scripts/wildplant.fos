#ifndef WILDPLANT
#define WILDPLANT

#include "_utils.fos"
#include "wildplant_h.fos"
#include "entire_h.fos"
#include "speed_h.fos"
#include "critter_skills_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";
import uint8 checkCave( Map& map, uint16 tx, uint16 ty ) from "qmap_cave";
import uint8 checkGrass( Map& map, uint16 tx, uint16 ty ) from "qmap_grass";
import uint8 checkCoast( Map& map, uint16 tx, uint16 ty ) from "qmap_coast";
import uint8 checkDirt( Map& map, uint16 tx, uint16 ty ) from "qmap_dirt";

class WildPlant
{
	uint16 pid;
	int stages;
	uint8 lifetime;
	uint8 min_resource;
	uint8 max_resource;
	uint8 fiber_gain;
	uint8 biome;
	int[] loot;
	
	WildPlant( uint16 pid, int stages, uint8 lifetime, uint8 min_resource, uint8 max_resource, uint8 fiber_gain, uint8 biome )
	{
        this.pid = pid;
		this.stages = stages;
		this.lifetime = lifetime;
		this.min_resource = min_resource;
		this.max_resource = max_resource;
		this.fiber_gain = fiber_gain;
		this.biome = biome;
	}
}

class WildPlantCollection
{
	WildPlant@[] list;
	WildPlantCollection()
	{
	}
	
	WildPlantCollection@ plant( uint16 pid, int stages, uint8 lifetime, uint8 min_resource, uint8 max_resource, uint8 fiber_gain, uint8 biome) 
	{
		this.list.insertLast( WildPlant( pid, stages, lifetime, min_resource, max_resource, fiber_gain, biome ) );
		return this;
	}
	
	WildPlantCollection@ loot( int loot ) 
	{
		this.list[ this.list.length() - 1 ].loot.insertLast( loot );
		return this;
	}
  
	WildPlantCollection@ get_by_biome( uint8 biome ) 
	{
		WildPlantCollection result;
		for( uint i = 0, len = this.list.length(); i < len; i++ )
		{
			if( this.list[i].biome == biome )
			{
				result.list.insertLast( this.list[i] );
			}
		}
		return result;
	}
	
	WildPlant@ get_by_pid( uint16 pid ) 
	{
		for( uint i = 0, len = this.list.length(); i < len; i++ )
		{
			if( this.list[i].pid == pid )
			{
				return this.list[i];
			}
		}
		return null;
	}
	
	
	WildPlant@ get_random()
	{
		uint len = this.list.length();
		if( len > 0 )
		{
			return this.list[ Random( 0, len-1 ) ];
		} 
		else 
		{
			return null; 
		}
	}
}

WildPlantCollection@ _wildPlants;
WildPlantCollection@ wildPlants()
{
	if( !valid( _wildPlants ) )
	{
		@_wildPlants = WildPlantCollection()
		//					pid, 					 stages, lifetime, min_resource, max_resource, fiber_gain,  biome
			.plant( PID_PLANT_BROC,						6, 		1, 			1,	 		 2,		 		1,		BIOME_SAND )
				.loot( PID_BROC_FLOWER )
			.plant( PID_PLANT_BROC,						6, 		1, 			1,	 		 2,				1,	 	BIOME_DIRT )
				.loot( PID_BROC_FLOWER )
			.plant( PID_PLANT_NIGHTSHADE,				5, 		1, 			10,	 		 20,			2, 		BIOME_COAST )
				.loot( PID_NIGHTSHADE )
			.plant( PID_PLANT_XANDER, 					4,		1, 			1, 			 2,				1,		BIOME_SAND )
				.loot( PID_XANDER_ROOT )
			.plant( PID_PLANT_XANDER, 					4,		1, 			1, 			 2,				1,		BIOME_DIRT )
				.loot( PID_XANDER_ROOT )
			.plant( PID_PLANT_MUSH_LOW,					1, 		3, 			1, 			 1,				0,		BIOME_SAND )
				.loot( PID_MUSH_LOW )
			.plant( PID_PLANT_MUSH_LOW,					1, 		3, 			1, 			 1,				0,		BIOME_DIRT )
				.loot( PID_MUSH_LOW )
			.plant( PID_PLANT_TONGUE_GECKO, 			3, 		1, 			1, 			 1,				0,		BIOME_CAVE )
				.loot( PID_SEEDLING_TONGUE_GECKO )
				.loot( PID_RISING_TONGUE_GECKO )
				.loot( PID_TONGUE_GECKO )
			.plant( PID_PLANT_MURAVNIKTAR, 				3, 		2, 			1,			 2,				0,		BIOME_CAVE )
				.loot( PID_SEEDLING_MURAVNIKTAR )
				.loot( PID_RISING_MURAVNIKTAR )
				.loot( PID_MURAVNIKTAR )
			.plant( PID_PLANT_BLACK_MUSHROOMS,			3, 		2, 			1, 			 3,				0,		BIOME_CAVE )
				.loot( PID_SEEDLING_BLACK_MUSHROOMS )
				.loot( PID_RISING_BLACK_MUSHROOMS )
				.loot( PID_BLACK_MUSHROOMS )
			.plant( PID_PLANT_PALE_MUSHROOM,			3, 		3, 			2, 			 4,				0,		BIOME_CAVE )
				.loot( PID_SEEDLING_PALE_MUSHROOM )
				.loot( PID_RISING_PALE_MUSHROOM )
				.loot( PID_PALE_MUSHROOM )
			.plant( PID_PLANT_MUTMUSH, 					3,		1, 			1, 			 1,				0,		BIOME_CAVE )
				.loot( PID_SEEDLING_MUTMUSH )
				.loot( PID_RISING_MUTMUSH )
				.loot( PID_MUTMUSH )
			.plant( PID_PLANT_PEYOTE,					4,		1, 			1, 			 1,				1,		BIOME_SAND )
				.loot( PID_PEYOTE )
			;
	}
	
	return _wildPlants;
}

WildPlant@ getWildplant( Item@ item ) 
{
    uint16 Pid = item.GetProtoId();
    return wildPlants().get_by_pid( Pid );
}	

WildPlant@ getRandomWildplant( uint8 biome ) 
{
    return wildPlants().get_by_biome( biome ).get_random();
}	

uint FindMapAmount( uint16 pid )
{    
    int index = 0;
    
    for( uint i = 0; i < Plant_Maps.length(); i++ )
    {
        if( pid == Plant_Maps[i][0] )
		{
            return Plant_Maps[i][1];
		}
	}
    return 0;
} 
 

bool KillWildPlant(Item& wildplant)
{
	if(!valid(wildplant)) return false;
	
	WildPlant@ plantProto = getWildplant( wildplant );
	if(!valid(plantProto)) return false;
	
	if(wildplant.GROWTH_STAGE > 1)
	{
		ChangeFrame( wildplant, plantProto.stages - 1 );
		wildplant.Animate( plantProto.stages - 1, plantProto.stages - 1);
	}
	wildplant.GROWTH_STAGE = plantProto.stages;
	return true;
}

uint e_WildPlantGrowth( uint[]@ values )
{
	uint itemId = values[0];
	Item@ wildplant = GetItem( itemId );
	if( valid( wildplant ) )
	{
		WildPlant@ plant = getWildplant( wildplant );
		
		uint8 lifetime = plant.lifetime;
		
		if( wildplant.GROWTH_STAGE < plant.stages )
		{
			wildplant.GROWTH_STAGE ++;
			uint8 i = wildplant.GROWTH_STAGE;
			ChangeFrame( wildplant, i );
			int time = wildplant.GROWTH_STAGE == ( plant.stages - 1 ) ? 3 : 1;
			return REAL_HOUR( lifetime * time );
		}
		
		EraseTimeEvent( wildplant.WILDPLANT_EVENT );
		wildplant.WILDPLANT_EVENT = 0;
		DeleteItem( wildplant );
	}
	
	return 0;
}

bool PickPlant( Critter& cr, Item& wildplant )
{
	if( !valid( wildplant) ) 
	{ 
		return false; 
	}
	
	uint16 wildplantPid = wildplant.GetProtoId();
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_PICK_PLANT );
	WildPlant@ plant = getWildplant( wildplant );
	
	bool isAlive = ( wildplant.GROWTH_STAGE < plant.stages ) || ( plant.stages == 1 );
	bool isDead = ( wildplant.GROWTH_STAGE >= plant.stages ); 
	
	if( isAlive	&& checkPlantStage( wildplant, plant ) ) 
	{

		int amount = Random( plant.min_resource, plant.max_resource );
		
		if( amount == 0 ) 
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
			return true;
		}
		
		uint16 pickedPlantPid = 0;
		
		if( plant.loot.length() > 1 ) 
		{
			pickedPlantPid = plant.loot[ wildplant.GROWTH_STAGE ];
		} 
		else 
		{
			pickedPlantPid = plant.loot[0];
		}
		
		if( cr.Skill[ SK_HERBALISM ] > 50 )
		{
			uint len = cr.Skill[ SK_HERBALISM ] / 50;
			for( uint i = 0; i < len; i++ )
			{
				if( Random( 1, 100 ) > 70 )
				{
					amount++;
				}
			}
		}
		
		cr.AddItem( pickedPlantPid, amount );
		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( pickedPlantPid * 100 ) + "@$amount" + amount );
		
		EraseTimeEvent( wildplant.WILDPLANT_EVENT );
		wildplant.WILDPLANT_EVENT = 0;
		DeleteItem( wildplant );
		raiseSkill( cr, SK_HERBALISM );
		ChangeCritterSpeed( cr );
	}
	else if( isDead && plant.fiber_gain > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GOT_FIBERS );
		
		cr.AddItem( PID_PLANT_FIBERS, plant.fiber_gain );
		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( PID_PLANT_FIBERS * 100 ) + "@$amount" + plant.fiber_gain );
		
		EraseTimeEvent( wildplant.WILDPLANT_EVENT );
		wildplant.WILDPLANT_EVENT = 0;
		DeleteItem( wildplant );
		ChangeCritterSpeed( cr );
	}
	else 
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_PLANT_STAGE );
		EraseTimeEvent( wildplant.WILDPLANT_EVENT );
		wildplant.WILDPLANT_EVENT = 0;
		DeleteItem( wildplant );
	}
	
	return true;
}

bool checkPlantStage( Item@ wildplant, WildPlant@ plant )
{
	if( plant.stages == 1 || ( plant.stages > 1 && wildplant.GROWTH_STAGE == plant.stages -1 ) || ( plant.loot.length() > 1 && wildplant.GROWTH_STAGE != plant.stages ) ) 
	{
		return true;
	}
	return false;
}

//===============WILDPLANT_SPAWNER_MECHANIC===============//
//~run wildplant _ForceWildplantsInit 0 0 0
void _ForceWildplantsInit( Critter& player, int param0, int param1, int param2 )
{
    Map@[] maps;
	Map@ map = null;
    Item@[] plants;
	Item@ plant = null;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
	{   
		@ map =  maps[i];
		if( valid( map ) )
		{
			if( FindMapAmount( map.GetProtoId() ) > 0 ) 
			{
				for( uint j = 0, len = Wildplants.length(); j < len; j++ ) 
				{
					map.GetItems( Wildplants[j], plants );
				}

				for( uint k = 0, klen = plants.length(); k < klen; k++ ) 
				{
					@ plant = plants[k];
					if( valid( plant ) )
					{
						DeleteItem( plant );
					}
				}
			}
		}
	}
	
	maps.resize(0);
	plants.resize(0);
    WildplantInit();
}

void WildplantInit()
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
	if( FindMapAmount( map.GetProtoId() ) > 0 ) 
	{
		int[] values = { map.Id };
		map.SetData( MAP_WILDPLANT_SPAWN_TE, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "wildplant@e_SpawnPlants", values, true ) );
		return true;
	}
	return false;
}

uint e_SpawnPlants( int[] @ values )
{
	Map@ map = GetMap( values[ 0 ] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	SpawnPlants( map );

	EraseTimeEvent( map.GetData( MAP_WILDPLANT_SPAWN_TE ) );
	map.SetData( MAP_WILDPLANT_SPAWN_TE, CreateTimeEvent( AFTER( DELAY_FOR_HARVESTABLE_LOOT_RESPAWN ), "wildplant@e_SpawnPlants", values, true ) );
	return 0;
}

//~run wildplant debug x y flood
void debug( Critter& player, int x, int y, int flood )
{
	Map@ map = player.GetMap();

	if( flood != 0 )
	{
		uint16 min_x = 0, min_y = 0;
		map.GetEntireCoords( MAP_EDGE_ENTIRE, 0, min_x, min_y );

		uint16 max_x = 0, max_y = 0;
		map.GetEntireCoords( 0, 0, max_x, max_y );

		for( x = min_x; x <= int(max_x); x++ )
		{
			for( y = min_y; y <= int(max_y); y++ )
			{
				bool cave = checkCave( map, H2T( x ), H2T( y ) ) != 0;
				bool sand = checkSand( map, H2T( x ), H2T( y ) ) != 0;
				bool coast = checkCoast( map, H2T( x ), H2T( y ) ) != 0;
				
				if( !map.IsHexPassed( x, y ) ) continue;
				
				if( cave ) map.AddItem( x, y, PID_ROCK, 1 );
				if( sand ) map.AddItem( x, y, PID_BROC_FLOWER, 1 );
				if( coast ) map.AddItem( x, y, PID_PEYOTE, 1 );
			}
		}
		
		return;
	}

	if( x != 0 && y != 0 )
	{
		player.TransitToHex( x, y, player.Dir );
		bool cave = checkCave( map, H2T( x ), H2T( y ) ) != 0;
		bool sand = checkSand( map, H2T( x ), H2T( y ) ) != 0;
		bool coast = checkCoast( map, H2T( x ), H2T( y ) ) != 0;

		player.Say( SAY_NETMSG, YELLOW + x + " " + y + " "
						+ ( cave ? WHITE : RED ) + "cave "
						+ ( sand ? WHITE : RED ) + "sand "
						+ ( coast ? WHITE : RED ) + "coast "
						);
		return;
	}
	
	player.Say( SAY_NETMSG, YELLOW + "You're standing on map#" + WHITE + map.Id 
						  + YELLOW + " [PID#" + WHITE + map.GetProtoId() + YELLOW + "]"
						  + " (" + WHITE + map.GetWidth() + YELLOW + "x" + WHITE + map.GetHeight() + YELLOW + ")" );
	
	SpawnPlants( map );
}

void SpawnPlants( Map& map )
{
    if( map.CountEntire( MAP_EDGE_ENTIRE ) != 1 )
	{
		Log( "No entire at map PID #" + map.GetProtoId() + "." );
		return;
	}

    Item@[] wildplants;
    for( uint i = 0; i < Wildplants.length(); i++ )
	{
        map.GetItems( Wildplants[i], wildplants );
    }
    
    uint amount = wildplants.length();
    uint mapAmount = FindMapAmount( map.GetProtoId() );
    int extraPlants = mapAmount - amount;
    
    if( extraPlants <= 0 )
	{ 
        return; 
    }

	uint16 hexX = 0, hexY = 0;
	map.GetEntireCoords( MAP_EDGE_ENTIRE, 0, hexX, hexY );

	uint16 edgeX = 0, edgeY = 0;
	map.GetEntireCoords( 0, 0, edgeX, edgeY );

	uint mapSize = REGULAR_MAP_SIZE;
	mapSize = GetDistantion(hexX, hexY, edgeX, edgeY);
	
    uint failed = 0;
	int pass_treshold = 100;
	for( int k = 0; k < extraPlants; k++ )
	{		
        uint16 x = Random( hexX + 1, edgeX - 1 );
        uint16 y = Random( hexY + 1, edgeY - 1 );

		bool cave = checkCave( map, H2T( x ), H2T( y ) ) != 0;
		bool sand = checkSand( map, H2T( x ), H2T( y ) ) != 0;
		bool coast = checkCoast( map, H2T( x ), H2T( y ) ) != 0;
		bool dirt = checkDirt( map, H2T( x ), H2T( y ) ) != 0;
		bool passed = ( ( x < map.GetWidth() && y < map.GetHeight() ) && map.IsHexPassed( x, y ) );
		
		if( !passed )
		{
			k--;
			pass_treshold--;
			if( pass_treshold > 0 ) continue;
		}
		pass_treshold = 100;
		
		if( passed )
		{
			WildPlant@ toBeSpawned;
			if( sand )	@toBeSpawned = getRandomWildplant( BIOME_SAND );
			if( cave )	@toBeSpawned = getRandomWildplant( BIOME_CAVE );
			if( coast ) @toBeSpawned = getRandomWildplant( BIOME_COAST );
			if( dirt ) @toBeSpawned = getRandomWildplant( BIOME_DIRT );
			
			if( valid( toBeSpawned ) )
			{
				Item@ wildplant = map.AddItem( x, y, toBeSpawned.pid, 1 );
				if( valid( wildplant ) )
				{
					uint[] values = { wildplant.Id };
					wildplant.WILDPLANT_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "wildplant@e_WildPlantGrowth", values, true );
					failed = 0;
					continue;
				}
			}
		}

		k--;            
		failed++;
		if( failed > 100 )
		{
			break;
		}
    }
}

#endif //WILDPLANT