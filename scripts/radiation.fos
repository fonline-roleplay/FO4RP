#ifndef RADIATION
#define RADIATION

#include "_utils.fos"
#include "radiation_h.fos"
#include "repair_h.fos"

import uint CountMapPlayers( Map@ map ) from "manager";

void AffectRadiation( Critter& cr, int value ) // Export
{
    int body = cr.Stat[ ST_BASE_CRTYPE ];

	if( cr.IsDead() )
	{
		return;
	}

    if( !IsHuman( cr ) )
	{
		return;
	}
	
	Item@ armor = _CritGetItemArmor( cr );

	if( valid( armor ) )
	{
		uint det = GetDeteriorationProcent( armor );
		if( FLAG( armor.Proto.Armor_Perk, ARMOR_PERK_ANTIRAD ) && det < 5 )
		{
			return;
		}
	}
	
    uint[] indexes;
    uint[] rates;
    bool isActive = cr.GetTimeEvents( CTE_RADIATION, indexes, null, rates ) != 0;
    int  levelVal = cr.Stat[ ST_RADIATION_LEVEL ];
    int  resistVal = cr.Stat[ ST_RADIATION_RESISTANCE ];

    if( value >= 0 )
	{
        value -= value * resistVal / 100;
    }
	
	cr.StatBase[ ST_RADIATION_LEVEL ] = CLAMP( levelVal + value, 0, 2000 );
    levelVal = cr.Stat[ ST_RADIATION_LEVEL ];

    if( value > RADIATION_HIGH_DOSE )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_HIGH_DOSE );
	}
	
    if( levelVal >= RADIATION_DAMAGE_VALUE )
    {
        if( cr.Damage[ DAMAGE_RADIATED ] == 0 )
		{
            cr.DamageBase[ DAMAGE_RADIATED ] = 1;
		}
	}
    else
    {
        if( cr.Damage[ DAMAGE_RADIATED ] != 0 )
		{
            cr.DamageBase[ DAMAGE_RADIATED ] = 0;
		}
	}

    if( isActive )   // Try begin event with new effects
    {
        uint stage = rates[ 0 ];
        uint newStage = GetRadiationStage( levelVal );
        if( stage != newStage )
		{
            cr.ChangeTimeEvent( indexes[ 0 ], 0, stage );
		}
	}
    else     // Try start new event
    {
        int stage1Val = TABLE_STAGE_VALUE( 1 );
        if( levelVal >= stage1Val )
		{
            cr.AddTimeEvent( "cte_Radiation", 0, CTE_RADIATION );
		}
	}

    if( levelVal >= RADIATION_DEAD_DOSE )
    {
        cr.ToDead( ANIM2_DEAD_FUSED, null );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_DIE );
    }
}

void DropRadiation( Critter& cr ) // Export
{
    bool isActive = cr.GetTimeEvents( CTE_RADIATION, null, null, null ) != 0;
    if( isActive )
    {
        uint stage = GetRadiationStage( cr.Stat[ ST_RADIATION_LEVEL ] );
        ChangeStage( cr, stage, false );
        cr.EraseTimeEvents( CTE_RADIATION );
    }
	
    cr.StatBase[ ST_RADIATION_LEVEL ] = 0;
    if( cr.Damage[ DAMAGE_RADIATED ] != 0 )
	{
        cr.DamageBase[ DAMAGE_RADIATED ] = 0;
	}
}

uint cte_Radiation( Critter& cr, int identifier, uint& stage )
{
    int body = cr.Stat[ ST_BASE_CRTYPE ];
    if( cr.IsDead() )
	{
        return REAL_MINUTE( 5 );
	}
	
    uint newStage = GetRadiationStage( cr.Stat[ ST_RADIATION_LEVEL ] );
    uint duration = RADIATION_DURATION;

    if( stage != newStage ) // Set new effects
    {
        ChangeStage( cr, stage, false );
        ChangeStage( cr, newStage, true );
        stage = newStage;
    }
    else     // Erase effects
    {
        ChangeStage( cr, stage, false );
        duration = 0;
    }
    return duration;
}

uint GetRadiationStage( int level )
{
    for( uint i = 0, j = RADIATION_STAGES; i <= j; i++ )
    {
        int valMin = ( i > 0 ? TABLE_STAGE_VALUE( i ) : 0 );
        int valMax = ( i < j ? TABLE_STAGE_VALUE( i + 1 ) : level + 1 );
        if( level >= valMin && level < valMax )
		{
            return i;
		}
	}
    return 0;
}

void ChangeStage( Critter& cr, uint stage, bool gain )
{
    if( stage == 0 )
	{
        return;
    }
	
	if( gain )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_STAGE( stage ) );
	}
	
    for( uint i = 0, j = RADIATION_STATS; i < j; i++ )
    {
        uint statIndex = TABLE_STAT_INDEX( i );
        int  statAmount = TABLE_STAT_AMOUNT( i, stage );

        if( statAmount != 0 )
        {
            int curVal = cr.Stat[ statIndex ];
			if( gain )
            {
                statAmount = -statAmount;
                if( statIndex < STAT_EXT_BEGIN )
				{
                    cr.StatBase[ STAT_EXT_BEGIN + statIndex ] += statAmount;
                }
				else if( statIndex == ST_CURRENT_HP )
                {
                    cr.StatBase[ ST_CURRENT_HP ] += statAmount;
                    if( cr.Stat[ ST_CURRENT_HP ] <= 0 )
					{
						cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_SUFFERS_FROM_RAD_SICKNESS );
					}
                }
            }
            else
            {
                if( statIndex < STAT_EXT_BEGIN )
				{
                    cr.StatBase[ STAT_EXT_BEGIN + statIndex ] += statAmount;
				}
			}
        }
    }
}

uint e_radFlow( uint[]@ values )
{
    Item@ radMarker = GetItem( values[0] );

    if( !valid( radMarker ) )
	{
		return 0;
	}
	
	uint16 x, y;
	Critter@ owner;
	Item@ cont;
	
	switch( radMarker.Accessory )
	{
		case( ACCESSORY_NONE ):
			DeleteItem( radMarker );
			return 0;
		case( ACCESSORY_CRITTER ):
		{
			@owner = GetCritter( radMarker.CritId );
			if( !valid( owner ) )
			{
				return REAL_MINUTE( 1 );
			}
			x = owner.HexX;
			y = owner.HexY;
			break;
		}
		case( ACCESSORY_HEX ): 
			x = radMarker.HexX;
			y = radMarker.HexY;
			break;
		case( ACCESSORY_CONTAINER ):
		{
			@cont = GetItem( radMarker.ContainerId );
			if( !valid( cont ) )
			{
				return REAL_MINUTE( 1 );
			}
			x = cont.HexX;
			y = cont.HexY;
			break;
		}
		default:
			DeleteItem( radMarker );
			return 0;
	}
	
    Map@ map = GetMap( radMarker.MapId );
    if( !valid( map ) )
	{
		DeleteItem( radMarker );
		return 0;
	}
	
	if( CountMapPlayers( map ) == 0 )
	{
		return REAL_MINUTE( radMarker.RADIATION_TICK );
	}
	
	Critter@[] critters;
    uint count = map.GetCrittersHex( x, y, radMarker.RADIATION_DISTANCE, FIND_LIFE_AND_KO, critters );
	if( count > 0 )
	{
		for( uint i = 0; i < count; i++ )
		{
			AffectRadiation( critters[i], radMarker.RADIATION_STRENGTH );
		}
	}
	
	return REAL_MINUTE( radMarker.RADIATION_TICK );
}

void unsafe_GM_ItemRadiate( Critter& cr, int param0, int hexX, int hexY, string@ param3, int[]@ data )
{
	if( !isGM( cr ) )
	{
		return;
	}
	
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Can't do on Global." );
        return;
	}
	
	if( data[1] < 1 || data[1] > 60 )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 You must set time between 1 and 60 minutes!" );
		return;
	}

	RadiateHex( cr, map.Id, hexX, hexY, data[0], data[1], data[2] );
}

void RadiateHex( Critter& cr, int mapID, int hx, int hy, int rad_strength, int rad_time, int rad_radius, int rad_epicentre=0 )
{
	if( rad_strength < 0 || rad_time < 0 || rad_radius < 0 )
	{
		return;
	}
	
	Map@ map = GetMap( mapID );
	if( !valid( map ) )
	{
		return;
	}
	
	Item@ radMarker = map.AddItem( hx, hy, PID_RADIATION_MARKER, 1 );
	if( valid( radMarker ) )
	{
		radMarker.RADIATION_STRENGTH = rad_strength;
		radMarker.RADIATION_TICK = rad_time;
		radMarker.RADIATION_DISTANCE = rad_radius;
		radMarker.RADIATION_EPICENTRE = rad_epicentre;
		radMarker.Update();
		
		uint[] values = { radMarker.Id };
		radMarker.RADIATION_EVENT = CreateTimeEvent( __FullSecond, "radiation@e_radFlow", values, true );
		cr.Say( SAY_NETMSG, "Radiation source set at X: " + hx + " Y: " + hy + " , strength: "+ rad_strength + " , tick: "+ rad_time + " minutes, radius: " + rad_radius + " hex " );
	}
}

#endif //RADIATION