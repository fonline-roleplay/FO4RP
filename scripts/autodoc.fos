#ifndef AUTODOC
#define AUTODOC

#include "_utils.fos"
#include "autodoc_h.fos"
#include "effects_h.fos"
#include "critter_status_h.fos"
#include "drugs_h.fos"

bool ChargeAutodoc( Critter& cr, Item@ biogel, Item@ autodoc ) 
{
	if( !valid( biogel ) || !valid( autodoc ) )
	{
		return false;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	if( biogel.GetProtoId() != PID_BIO_GEL )
	{
		return false;
	}
	
	if( autodoc.GetProtoId() != PID_OBJECT_AUTODOC )
	{
		return false;
	}
	
	autodoc.AUTODOC_BIOGEL_LEVEL += 50;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_CHARGE_BIOGEL );
	
	if( autodoc.AUTODOC_BIOGEL_LEVEL >= AUTODOC_BIOGEL_MAX )
	{
		autodoc.AUTODOC_BIOGEL_LEVEL = AUTODOC_BIOGEL_MAX;
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BIOGEL_FULL );
	} 
	
	_SubItem( biogel, 1 );
	return true;
}

string AutodocScan( Map& map, Item& terminal, Item& autodoc )
{
	string info = "> ";
	
	if( !valid( terminal ) )
	{ 
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_TERMINAL_ERROR );
		return info;
	}
	
	if( !valid( autodoc ) )
	{ 
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_AUTODOC_ERROR );
		return info;
	}
	
	if( !valid( map ) )
	{ 
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_WARP_ERROR );
		return info;
	}
	
	if( autodoc.AUTODOC_EVENT != 0 && autodoc.AUTODOC_PATIENT != 0 )
	{
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_ONGOING_PROCEDURE ) + "\n";

		Critter@ patient = GetCritter( autodoc.AUTODOC_PATIENT );
		if( !valid( patient ) )
		{
			info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_BIOSCANER_ERROR );
			return info;
		}
		
		int time = autodoc.AUTODOC_TIMER;
		int minutes = int( floor( time / 60 ) );
		int seconds = int( time - floor( minutes * 60 ) );

		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PROCEDURE_TIMEOUT )
			 + "$minute" + _D2( minutes ) + "$second" + _D2( seconds );
			 
		return info;
	}
	
	uint16 hx = autodoc.HexX, hy = autodoc.HexY;
	
	//check for junk inside autodoc
	Item@[] junk; 
	map.GetItems( hx, hy, junk );
	Item@ blood = null;
	uint len = junk.length();
	uint bloodCount = 0;
	for( uint i = 0; i < len; i ++ )
	{
		@blood = junk[i];
		if( valid( blood ) )
		{
			for( uint j = 0, len2 = bloods.length(); j < len2; j ++ )
			{
				if( bloods[j].find( blood.GetProtoId() ) != -1 )
				{
					bloodCount ++;
				}
			}
			
		}
	}
	
	len -= bloodCount;
	
	autodoc.AUTODOC_ERROR = 0;
	
	if( len > 1 )
	{
		autodoc.AUTODOC_PATIENT = 0;
		autodoc.AUTODOC_ERROR = 1;
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_ALIEN_OBJECT );
		return info;
	}
	
	Critter@[] critters;
	map.GetCrittersHex( hx, hy, 0, FIND_ALL, critters );
	uint len2 = critters.length();
	if( len2 > 1 )
	{
		autodoc.AUTODOC_PATIENT = 0;
		autodoc.AUTODOC_ERROR = 1;
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_MULTIPLE_SIGNATURES );
		return info;
		
	}
	else if( len2 == 1 )
	{
		autodoc.AUTODOC_PATIENT = critters[0].Id;
		Critter@ patient = critters[0];
		if( valid( patient ) )
		{
			if( patient.Stat[ ST_BODY_TYPE ] > BT_CHILDREN )
			{
				autodoc.AUTODOC_PATIENT = 0;
				autodoc.AUTODOC_ERROR = 1;
				info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_NON_HUMAN );
				return info;
			}
			
			Item@[] stuff; 
			patient.GetItems( -1, stuff );
			uint len3 = stuff.length();
			
			if( len3 > 0 )
			{
				autodoc.AUTODOC_PATIENT = 0;
				autodoc.AUTODOC_ERROR = 1;
				info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_NOT_NAKED );
				return info;
			}
			
			//begin bioscan
			info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_DETAILS )
				 + "$strGender";
			
			
			int gender = ( patient.Stat[ ST_GENDER ] == GENDER_MALE ? STR_MALE : STR_FEMALE );
			info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_INFO )
				 + "$gender" + STR_INSERT_TEXT_LINE( gender );

			//dead patient status
			if( patient.IsDead() )
			{
				if( patient.Param[ CR_DEATH_STAGE ] >= 100 )
				{
					autodoc.AUTODOC_PATIENT = 0;
					autodoc.AUTODOC_ERROR = 1;
					info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_DEAD );
				}
				else
				{
					info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_CRITICAL );
				}
				return info;
			}
			
			//live patient status
			info += "$stateHP" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_HP_MAXHP )
				 + "$HP" + patient.Param[ ST_CURRENT_HP ] 
				 + "$maxHP" + patient.Param[ ST_MAX_LIFE ] + patient.Param[ ST_MAX_LIFE_EXT ];
				 
				 
			info += "$baseHPState";
			int baseHP = patient.ParamBase[ ST_MAX_LIFE ] + patient.Param[ ST_MAX_LIFE_EXT ];
			if( baseHP != 0 )
			{
				string color = "|0xFF0000 ";
				baseHP > 0 ? color = "|0xFFFF00 " : color;
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_DEVIATION_BASEHP )
					 + "$color" + color 
					 + "$BaseHP" + baseHP;
			}
			
			info += "$addictedState";
			if( patient.IsAddicted() )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_DRUG_ADDICTION );
			}
			
			info += "$jettedState";
			if( patient.Param[ CR_JETTED ] > 0 )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_JET_EFFECTS );
			}
			
			info += "$stateDrunk";
			if( patient.Stat[ ST_DRUNK ] > 0 )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_ALCOHOL_LEVEL )
					 + "$drunk" + patient.Stat[ ST_DRUNK ];
			}

			info += "$statePoison";
			if( patient.Stat[ ST_POISONING_LEVEL ] > 0 )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_POISONING_LEVEL )
					 + "$poison" + patient.Stat[ ST_POISONING_LEVEL ];
			}
			
			info += "$stateRadiation";
			if( patient.Stat[ ST_RADIATION_LEVEL ] > 0 )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_RADIATION_LEVEL )
					 + "$radiation" + patient.Stat[ ST_RADIATION_LEVEL ];
			}
			
			info += "$stateInjures";
			if( patient.IsInjured() )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_INJURES )
					 + "$injures";
					 
				info += patient.IsDmgEye() ? 
					STR_INSERT_TEXT_LINE( STR_HEAL_MENU_DAMAGE_EYE_WOUND ) + "; " : "";
					
				info += patient.Param[ DAMAGE_RIGHT_LEG ] == 1 ? 
					STR_INSERT_TEXT_LINE( STR_HEAL_MENU_DAMAGE_RIGHT_LEG ) + "; " : "";
					
				info += patient.Param[ DAMAGE_LEFT_LEG ] == 1 ? 
					STR_INSERT_TEXT_LINE( STR_HEAL_MENU_DAMAGE_LEFT_LEG ) + "; " : "";
				
				info += patient.Param[ DAMAGE_RIGHT_ARM ] == 1 ? 
					STR_INSERT_TEXT_LINE( STR_HEAL_MENU_DAMAGE_RIGHT_ARM ) + "; " : "";
				
				info += patient.Param[ DAMAGE_LEFT_ARM ] == 1 ? 
					STR_INSERT_TEXT_LINE( STR_HEAL_MENU_DAMAGE_LEFT_ARM ) + "; " : "";
				
				info[ info.length() - 2 ] = '.';
				info[ info.length() - 1 ] = ' ';
			}

			info += "$stateBullet";
			if( FLAG( patient.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_BULLET_WOUND );
			}
			
			info += "$stateHeavy";
			if( FLAG( patient.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )
			{
				info += "\n" + STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_HEAVY_WOUND );
			}
		}
	}
	else
	{
		autodoc.AUTODOC_PATIENT = 0;
		autodoc.AUTODOC_ERROR = 0;
		info += STR_INSERT_TEXT_LINE( STR_AUTODOC_MENU_PATIENT_ABSENT );
	}
	return info;
}

//========== AUTODOC_PROCEDURE_REQUIREMENTS_CHECK ===============//
bool AutodocChecks( Item& autodoc, Critter@ patient, uint16 procedure )
{
	if( !valid( autodoc ) )
	{
		return false;
	}
	
	if( !valid( patient ) )
	{
		return false;
	}
	
	int duration;
	int biogelRequirement;
	
	switch( procedure ) 
	{
		case( AUTODOC_PROCEDURE_HEAL ):
			duration = PROCERUDE_HEAL_DURATION;
			biogelRequirement = AUTODOC_HEAL_BIOGEL;
			break;
		case( AUTODOC_PROCEDURE_WOUND ):
			duration = PROCERUDE_WOUND_DURATION;
			biogelRequirement = AUTODOC_WOUND_BIOGEL;
			break;	
		case( AUTODOC_PROCEDURE_BULLET ):
			duration = PROCERUDE_BULLET_DURATION;
			biogelRequirement = AUTODOC_BULLET_BIOGEL;
			break;	
		case( AUTODOC_PROCEDURE_BLOOD ):
			duration = PROCERUDE_BLOOD_DURATION;
			biogelRequirement = AUTODOC_BLOOD_BIOGEL;
			break;	
		case( AUTODOC_PROCEDURE_REABILITATE ):
			duration = PROCERUDE_REABILITATE_DURATION;
			biogelRequirement = AUTODOC_REABILITATE_BIOGEL;
			break;	
		case( AUTODOC_PROCEDURE_MEND_EYE ):
			duration = PROCERUDE_MEND_DURATION;
			biogelRequirement = AUTODOC_MEND2_BIOGEL;
			break;
		case( AUTODOC_PROCEDURE_MEND_RLEG ):
		case( AUTODOC_PROCEDURE_MEND_LLEG ):
		case( AUTODOC_PROCEDURE_MEND_RARM ):
		case( AUTODOC_PROCEDURE_MEND_LARM ):
			duration = PROCERUDE_MEND_DURATION;
			biogelRequirement = AUTODOC_MEND1_BIOGEL;
			break;	
		case( AUTODOC_PROCEDURE_REANIMATE ):
			duration = PROCERUDE_REANIMATE_DURATION;
			biogelRequirement = AUTODOC_REANIMATE_BIOGEL;
			break;
		case( AUTODOC_PROCEDURE_MODD_STR_UP ):
		case( AUTODOC_PROCEDURE_MODD_STR_DN ):	
		case( AUTODOC_PROCEDURE_MODD_PER_UP ):
		case( AUTODOC_PROCEDURE_MODD_PER_DN ):
		case( AUTODOC_PROCEDURE_MODD_END_UP ):
		case( AUTODOC_PROCEDURE_MODD_END_DN ):
		case( AUTODOC_PROCEDURE_MODD_CHA_UP ):
		case( AUTODOC_PROCEDURE_MODD_CHA_DN ):
		case( AUTODOC_PROCEDURE_MODD_AGI_UP ):
		case( AUTODOC_PROCEDURE_MODD_AGI_DN ):
		case( AUTODOC_PROCEDURE_MODD_GENDER ):		
			duration = PROCEDURE_MODD_DURATION;
			biogelRequirement = AUTODOC_MODD_BIOGEL;
			break;
		case( AUTODOC_PROCEDURE_KILL ):
			duration = PROCERUDE_KILL_DURATION;
			biogelRequirement = AUTODOC_KILL_BIOGEL;
			break;
		default:
			duration = 0;
			biogelRequirement = 0;
			break;
	}
	
	autodoc.AUTODOC_TIMER = duration / 1000;
	
	if( autodoc.AUTODOC_BIOGEL_LEVEL < biogelRequirement )
	{
		return false;
	}
	
	autodoc.AUTODOC_BIOGEL_LEVEL -= biogelRequirement;
	Map@ map = patient.GetMap();
	
	autodoc.AUTODOC_DOOR_BLOCK = 1;
	ToggleDocBlockers( map, autodoc );
	patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MANIPULATORS_HOLD );
	
	PlayGenericSound( map, autodoc.HexX, autodoc.HexY, "STEAM.mp3", 10 );
	
	uint[] values = { autodoc.Id, map.Id, procedure };
	autodoc.AUTODOC_EVENT = CreateTimeEvent( AFTER( REAL_MS( 0 ) ),"e_AutodocProcedure", values, true );
	
	uint[] val = { autodoc.Id, map.Id };
	autodoc.AUTODOC_EVENT = CreateTimeEvent( AFTER( REAL_MS( 0 ) ),"e_AutodocSFX", val, true );
	
	toggleDocAnimState( autodoc );
	return true;
}

//========== AUTODOC_PROCEDURE_END ===============//
uint e_AutodocProcedure( uint[]@ values )
{
	Item@ autodoc = GetItem( values[0] );
	if( !valid( autodoc ) )
	{
		return 0;
	}

	Critter@ patient = GetCritter( autodoc.AUTODOC_PATIENT );
	if( !valid( patient ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( values[1] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	if( autodoc.AUTODOC_TIMER > 0 )
	{
		autodoc.AUTODOC_TIMER --;
		
		if( Random( 1, 2 ) == 2 )
		{
			PlayGenericSound( map, autodoc.HexX, autodoc.HexY, _GetOneRandom( AutodocSounds ), 10 );
		}
		
		if( Random( 1, 10 ) == 10 )
		{
			FlushScreen( patient, COLOR_RED, 0, 5000 );
		}
		return REAL_SECOND( 1 );
	}
	
	uint procedure = values[2];

	switch( procedure ) 
	{
		case( AUTODOC_PROCEDURE_HEAL ):
			patient.StatBase[ ST_CURRENT_HP ] = patient.Stat[ ST_MAX_LIFE ] + patient.Stat[ ST_MAX_LIFE_EXT ];
			ChangeStatus( patient, CR_STATUS_BLEED, 0, false );
			break;
		case( AUTODOC_PROCEDURE_WOUND ):
			ChangeStatus( patient, CR_STATUS_HEAVY_DMG, 0, false );
			ChangeStatus( patient, CR_STATUS_BLEED, 0, false );
			break;
		case( AUTODOC_PROCEDURE_BULLET ):
			ChangeStatus( patient, CR_STATUS_BULLET_OVER, 0, false );
			ChangeStatus( patient, CR_STATUS_BLEED, 0, false );
			break;
		case( AUTODOC_PROCEDURE_BLOOD ):
			ChangeStatus( patient, CR_STATUS_BLOOD_TOXIC, 0, false );
			patient.StatBase[ ST_POISONING_LEVEL ] = 0;
			patient.StatBase[ ST_RADIATION_LEVEL ] = 0;
			patient.StatBase[ ST_DRUNK ] = 0;
			patient.ParamBase[ CR_JETTED ] = 0;
			clearDrugs( patient );
			break;
		case( AUTODOC_PROCEDURE_REABILITATE ):
		{
			patient.ParamBase[ ST_MAX_LIFE_EXT ] < 0 ? patient.ParamBase[ ST_MAX_LIFE_EXT ] += 5 : patient.ParamBase[ ST_MAX_LIFE_EXT ] = 0;
			patient.StatBase[ ST_CURRENT_HP ] = ( patient.Stat[ ST_MAX_LIFE ] + patient.Stat[ ST_MAX_LIFE_EXT ] );
			break;
		}
		case( AUTODOC_PROCEDURE_MEND_EYE ):
			patient.ParamBase[ DAMAGE_EYE ] = 0;
			break;
		case( AUTODOC_PROCEDURE_MEND_RLEG ):
			patient.ParamBase[ DAMAGE_RIGHT_LEG ] = 0;
			break;
		case( AUTODOC_PROCEDURE_MEND_LLEG ):
			patient.ParamBase[ DAMAGE_LEFT_LEG ] = 0;
			break;
		case( AUTODOC_PROCEDURE_MEND_RARM ):
			patient.ParamBase[ DAMAGE_RIGHT_ARM ] = 0;
			break;
		case( AUTODOC_PROCEDURE_MEND_LARM ):
			patient.ParamBase[ DAMAGE_LEFT_ARM ] = 0;
			break;
		case( AUTODOC_PROCEDURE_REANIMATE ):
			patient.ToLife();
			break;
		case( AUTODOC_PROCEDURE_MODD_STR_UP ):
		{
			if( patient.PerkBase[ PE_LOOSE_STRENGTH ] == 1 )
			{
				patient.PerkBase[ PE_LOOSE_STRENGTH ] --; 
			}
			else if( patient.PerkBase[ PE_GAIN_STRENGTH ] == 0 && ( Random( 1, 10 ) < ( 10 - patient.StatBase[ ST_STRENGTH ] ) ) )
			{
				patient.PerkBase[ PE_GAIN_STRENGTH ] ++;
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_STR_DN ):	
		{
			if( patient.PerkBase[ PE_GAIN_STRENGTH ] == 1 )
			{
				patient.PerkBase[ PE_GAIN_STRENGTH ] --;
			}
			else if( patient.PerkBase[ PE_LOOSE_STRENGTH ] == 0 )
			{
				patient.PerkBase[ PE_LOOSE_STRENGTH ] ++; 
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_PER_UP ):
		{
			if( patient.PerkBase[ PE_LOOSE_PERCEPTION ] == 1 )
			{
				patient.PerkBase[ PE_LOOSE_PERCEPTION ] --; 
			}
			else if( patient.PerkBase[ PE_GAIN_PERCEPTION ] == 0 && ( Random( 1, 10 ) < ( 10 - patient.StatBase[ ST_PERCEPTION ] ) ) )
			{
				patient.PerkBase[ PE_GAIN_PERCEPTION ] ++;
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_PER_DN ):
		{
			if( patient.PerkBase[ PE_GAIN_PERCEPTION ] == 1 )
			{
				patient.PerkBase[ PE_GAIN_PERCEPTION ] --;
			}
			else if( patient.PerkBase[ PE_LOOSE_PERCEPTION ] == 0 )
			{
				patient.PerkBase[ PE_LOOSE_PERCEPTION ] ++; 
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_END_UP ):
		{
			if( patient.PerkBase[ PE_LOOSE_ENDURANCE ] == 1 )
			{
				patient.PerkBase[ PE_LOOSE_ENDURANCE ] --; 
			}
			else if( patient.PerkBase[ PE_GAIN_ENDURANCE ] == 0 && ( Random( 1, 10 ) < ( 10 - patient.StatBase[ ST_ENDURANCE ] ) ) )
			{
				patient.PerkBase[ PE_GAIN_ENDURANCE ] ++;
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_END_DN ):
		{
			if( patient.PerkBase[ PE_GAIN_ENDURANCE ] == 1 )
			{
				patient.PerkBase[ PE_GAIN_ENDURANCE ] --;
			}
			else if( patient.PerkBase[ PE_LOOSE_ENDURANCE ] == 0 )
			{
				patient.PerkBase[ PE_LOOSE_ENDURANCE ] ++; 
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_CHA_UP ):
		{
			if( patient.PerkBase[ PE_LOOSE_CHARISMA ] == 1 )
			{
				patient.PerkBase[ PE_LOOSE_CHARISMA ] --; 
			}
			else if( patient.PerkBase[ PE_GAIN_CHARISMA ] == 0 && ( Random( 1, 10 ) < ( 10 - patient.StatBase[ ST_CHARISMA ] ) ) )
			{
				patient.PerkBase[ PE_GAIN_CHARISMA ] ++;
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_CHA_DN ):
		{
			if( patient.PerkBase[ PE_GAIN_CHARISMA ] == 1 )
			{
				patient.PerkBase[ PE_GAIN_CHARISMA ] --;
			}
			else if( patient.PerkBase[ PE_LOOSE_CHARISMA ] == 0 )
			{
				patient.PerkBase[ PE_LOOSE_CHARISMA ] ++; 
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_AGI_UP ):
		{
			if( patient.PerkBase[ PE_LOOSE_AGILITY ] == 1 )
			{
				patient.PerkBase[ PE_LOOSE_AGILITY ] --; 
			}
			else if( patient.PerkBase[ PE_GAIN_AGILITY ] == 0 && ( Random( 1, 10 ) < ( 10 - patient.StatBase[ ST_AGILITY ] ) ) )
			{
				patient.PerkBase[ PE_GAIN_AGILITY ] ++;
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_AGI_DN ):
		{
			if( patient.PerkBase[ PE_GAIN_AGILITY ] == 1 )
			{
				patient.PerkBase[ PE_GAIN_AGILITY ] --;
			}
			else if( patient.PerkBase[ PE_LOOSE_AGILITY ] == 0 )
			{
				patient.PerkBase[ PE_LOOSE_AGILITY ] ++; 
			}
			else
			{
				patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SURGERY_NO_EFFECT );
			}
			break;
		}
		case( AUTODOC_PROCEDURE_MODD_GENDER ):	
		{
			if( patient.Stat[ ST_GENDER ] == GENDER_MALE )
			{
				patient.StatBase[ ST_GENDER ] = GENDER_FEMALE;
				patient.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_F;
			}
			else
			{
				patient.StatBase[ ST_GENDER ] = GENDER_MALE;
				patient.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_M;
			}
			patient.ChangeCrType( patient.StatBase[ ST_BASE_CRTYPE ] );
			break;
		}
		case( AUTODOC_PROCEDURE_KILL ):
			patient.ToDead( ANIM2_DEAD_FUSED, null );
			patient.ParamBase[ CR_DEATH_STAGE ] = 100;
			break;
		default:
			break;
	}
	
	autodoc.AUTODOC_DOOR_BLOCK = 0;
	ToggleDocBlockers( map, autodoc );
	patient.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MANIPULATORS_RELEASE );
	
	PlayGenericSound( map, autodoc.HexX, autodoc.HexY, "STEAM.mp3", 10 );
	
	EraseTimeEvent( autodoc.AUTODOC_EVENT );
	autodoc.AUTODOC_EVENT = 0;
	toggleDocAnimState( autodoc );
	
	Item@ terminal = GetItem( autodoc.AUTODOC_TERMINAL );
	if( valid( map ) && valid( terminal ) )
	{
		AutodocScan( map, terminal, autodoc );
	}
	return 0;
}

//========== TECHNICAL_ANIMATION_STATE_CHANGER ===============//
void toggleDocAnimState( Item& autodoc )
{
	uint16 hexX = 0, hexY = 0;
	Map@ map = autodoc.GetMapPosition( hexX, hexY );
	if( !valid( map ) )
	{
		return;
	}
	
	uint16 hx = autodoc.HexX, hy = autodoc.HexY;
	map.MoveHexByDir( hx, hy, 2, 1 );
	map.MoveHexByDir( hx, hy, 3, 1 );
	Item@ autodocF = map.GetItem( hx, hy, PID_OBJECT_AUTODOC_F );
	if( valid( autodocF ) )
	{
		if( autodoc.AUTODOC_EVENT > 0 )
		{
			autodocF.PicMap = PIC_AUTODOC_ANIM_ON;
			UNSETFLAG( autodocF.Flags, ITEM_SHOW_ANIM_EXT );
		}
		else
		{
			autodocF.PicMap = autodocF.Proto.PicMap;
			SETFLAG( autodocF.Flags, ITEM_SHOW_ANIM_EXT );
		}
		autodocF.Update();
	}
}
//========== CONSTANT_WORK_SOUND ===============//
uint e_AutodocSFX( uint[]@ val )
{
	Item@ autodoc = GetItem( val[0] );
	if( !valid( autodoc ) )
	{
		return 0;
	}
	
	Map@ map = GetMap( val[1] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	if( autodoc.AUTODOC_TIMER > 0 )
	{
		PlayGenericSound( map, autodoc.HexX, autodoc.HexY, "SODOORSM.mp3", 10 );
		return REAL_SECOND( 1 );
	}
	
	return 0;
}
//========== TECHNICAL_BLOCKER ===============//
void ToggleDocBlockers( Map& map, Item& autodoc )
{
	if( !valid( map ) )
	{
		return;
	}
	
	if( !valid( autodoc) )
	{
		return;
	}

	uint16 tx = autodoc.HexX, ty = autodoc.HexY;
	
	map.MoveHexByDir( tx, ty, 2, 1 );
	Item@ blocker = map.GetItem( tx, ty, PID_INVISIBLE_BLOCK );
	
	if( !valid( blocker ) && autodoc.AUTODOC_DOOR_BLOCK == 1 )
	{
		map.AddItem( tx, ty, PID_INVISIBLE_BLOCK, 1 );
	}
	else if( autodoc.AUTODOC_TIMER <= 0 )
	{
		DeleteItem( blocker );
	}
	
	map.MoveHexByDir( tx, ty, 4, 1 );
	@blocker = map.GetItem( tx, ty, PID_INVISIBLE_BLOCK );
	
	if( !valid( blocker ) && autodoc.AUTODOC_DOOR_BLOCK == 1 )
	{
		map.AddItem( tx, ty, PID_INVISIBLE_BLOCK, 1 );
	}
	else if( autodoc.AUTODOC_TIMER <= 0 )
	{
		DeleteItem( blocker );
	}
}
#endif //AUTODOC