#ifndef PERKS
#define PERKS

#include "_utils.fos"
#include "perks_h.fos"

	#ifdef __CLIENT // Macro defined in client_main.fos
		# define Critter            CritterCl
	#endif

	#ifndef __CLIENT
		import int NextLevelNeedExp( Critter& cr )  from "parameters";
		import void RecalcAvailableProfPoints(Critter& cr) from "prof_books";
	#endif

	bool PerkCheck( Critter& cr, uint perk ) // Export
	{
		#define PROCESS_PERK0                   \
			# ( perk, range, level ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level )
		#define PROCESS_PERK1                            \
			# ( perk, range, level, demand0 ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 )
		#define PROCESS_PERK2                                     \
			# ( perk, range, level, demand0, demand1 ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 )
		#define PROCESS_PERK3                                              \
			# ( perk, range, level, demand0, demand1, demand2 ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 )
		#define PROCESS_PERK4                                                       \
			# ( perk, range, level, demand0, demand1, demand2, demand3 ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 )
		#define PROCESS_PERK5                                                                \
			# ( perk, range, level, demand0, demand1, demand2, demand3, demand4 ) case perk: \
			return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 && demand4 )
		switch( perk )
		{
			// Perks
			PROCESS_PERK1( PE_GAIN_STRENGTH,       1, 1, cr.ParamBase[ ST_STRENGTH ] < 10      );
			PROCESS_PERK1( PE_GAIN_PERCEPTION,     1, 1, cr.ParamBase[ ST_PERCEPTION ] < 10    );
			PROCESS_PERK1( PE_GAIN_ENDURANCE,      1, 1, cr.ParamBase[ ST_ENDURANCE ] < 10     );
			PROCESS_PERK1( PE_GAIN_CHARISMA,       1, 1, cr.ParamBase[ ST_CHARISMA ] < 10      );
			PROCESS_PERK1( PE_GAIN_INTELLIGENCE,   1, 1, cr.ParamBase[ ST_INTELLECT ] < 10     );
			PROCESS_PERK1( PE_GAIN_AGILITY,        1, 1, cr.ParamBase[ ST_AGILITY ] < 10       );
			PROCESS_PERK1( PE_GAIN_LUCK,           1, 1, cr.ParamBase[ ST_LUCK ] < 10          );
			PROCESS_PERK2( PE_SILENT_RUNNING,      1, 6, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ SK_SNEAK ] >= 50        );
			PROCESS_PERK2( PE_MASTER_TRADER,       0, 9, cr.ParamBase[ ST_CHARISMA ] >= 7,     cr.ParamBase[ SK_BARTER ] >= 60       );
			PROCESS_PERK0( PE_CRAFTSMAN,		   6, 1);
			PROCESS_PERK0( PE_MECHANIC,			   6, 1);
			PROCESS_PERK0( PE_CHEMIST,			   6, 1);
			PROCESS_PERK0( PE_ELECTRICIAN,		   6, 1);
			PROCESS_PERK1( PE_LOOSE_STRENGTH,      1, 1, cr.ParamBase[ ST_STRENGTH ] > 1      );
			PROCESS_PERK1( PE_LOOSE_PERCEPTION,    1, 1, cr.ParamBase[ ST_PERCEPTION ] > 1    );
			PROCESS_PERK1( PE_LOOSE_ENDURANCE,     1, 1, cr.ParamBase[ ST_ENDURANCE ] > 1     );
			PROCESS_PERK1( PE_LOOSE_CHARISMA,      1, 1, cr.ParamBase[ ST_CHARISMA ] > 1      );
			PROCESS_PERK1( PE_LOOSE_INTELLIGENCE,  1, 1, cr.ParamBase[ ST_INTELLECT ] > 1     );
			PROCESS_PERK1( PE_LOOSE_AGILITY,       1, 1, cr.ParamBase[ ST_AGILITY ] > 1       );
			PROCESS_PERK1( PE_LOOSE_LUCK,          1, 1, cr.ParamBase[ ST_LUCK ] > 1          );
			PROCESS_PERK1( PE_SOAP_CHARISMA,       1, 1, cr.ParamBase[ ST_CHARISMA_EXT ] > 1  );
			default:
				break;
		}
		return false;
	}

	#ifndef __CLIENT

	void PerkUp( Critter& cr, uint perk ) // Export
	{
		# define PERKUP_STAT    # ( param, val )cr.StatBase[ param ] val
		# define PERKUP_SKILL                                                                      \
			# ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] > MAX_SKILL_VAL ) \
				cr.SkillBase[ param ] = MAX_SKILL_VAL
		switch( perk )
		{
		// Perks
		case( PE_GAIN_STRENGTH ):
			PERKUP_STAT( ST_STRENGTH, ++ );
			break;
		case( PE_GAIN_PERCEPTION ):
			PERKUP_STAT( ST_PERCEPTION, ++ );
			break;
		case( PE_GAIN_ENDURANCE ):
			PERKUP_STAT( ST_ENDURANCE, ++ );
			break;
		case( PE_GAIN_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA, ++ );
			break;
		case( PE_GAIN_INTELLIGENCE ):
			PERKUP_STAT( ST_INTELLECT, ++ );
			break;
		case( PE_GAIN_AGILITY ):
			PERKUP_STAT( ST_AGILITY, ++ );
			break;
		case( PE_GAIN_LUCK ):
			PERKUP_STAT( ST_LUCK, ++ );
			break;
		case( PE_LOOSE_STRENGTH ):
			PERKUP_STAT( ST_STRENGTH, -- );
			break;
		case( PE_LOOSE_PERCEPTION ):
			PERKUP_STAT( ST_PERCEPTION, -- );
			break;
		case( PE_LOOSE_ENDURANCE ):
			PERKUP_STAT( ST_ENDURANCE, -- );
			break;
		case( PE_LOOSE_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA, -- );
			break;
		case( PE_LOOSE_INTELLIGENCE ):
			PERKUP_STAT( ST_INTELLECT, -- );
			break;
		case( PE_LOOSE_AGILITY ):
			PERKUP_STAT( ST_AGILITY, -- );
			break;
		case( PE_LOOSE_LUCK ):
			PERKUP_STAT( ST_LUCK, -- );
			break;	
		case( PE_SOAP_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA_EXT, ++ );
			break;
		case( PE_SILENT_RUNNING ):     /*No steal off while running*/
			break;
		case( PE_MASTER_TRADER ):     /*Barter k is zero on buy*/
			break;
		case( PE_CRAFTSMAN ):
		case( PE_MECHANIC ):
		case( PE_CHEMIST ):
		case( PE_ELECTRICIAN ):
			RecalcAvailableProfPoints(cr);
			break;
		case( PE_QUICK_POCKETS ):     /*Inventory items move ap cost div 2*/
			break;
		case( PE_SMOOTH_TALKER ):     /*+2 intellect on dialogs checks*/
			break;
		default:
			break;
		}
	}

	void PerkDown( Critter& cr, uint perk ) // Export
	{
		# define PERKDOWN_STAT    # ( param, val )cr.StatBase[ param ] val
		# define PERKDOWN_SKILL                                                                     \
			# ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] < -MAX_SKILL_VAL ) \
				cr.SkillBase[ param ] = -MAX_SKILL_VAL
		switch( perk )
		{
		// Perks
		case( PE_GAIN_STRENGTH ):
			PERKUP_STAT( ST_STRENGTH, -- );
			break;
		case( PE_GAIN_PERCEPTION ):
			PERKUP_STAT( ST_PERCEPTION, -- );
			break;
		case( PE_GAIN_ENDURANCE ):
			PERKUP_STAT( ST_ENDURANCE, -- );
			break;
		case( PE_GAIN_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA, -- );
			break;
		case( PE_GAIN_INTELLIGENCE ):
			PERKUP_STAT( ST_INTELLECT, -- );
			break;
		case( PE_GAIN_AGILITY ):
			PERKUP_STAT( ST_AGILITY, -- );
			break;
		case( PE_GAIN_LUCK ):
			PERKUP_STAT( ST_LUCK, -- );
			break;
		case( PE_LOOSE_STRENGTH ):
			PERKUP_STAT( ST_STRENGTH, ++ );
			break;
		case( PE_LOOSE_PERCEPTION ):
			PERKUP_STAT( ST_PERCEPTION, ++ );
			break;
		case( PE_LOOSE_ENDURANCE ):
			PERKUP_STAT( ST_ENDURANCE, ++ );
			break;
		case( PE_LOOSE_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA, ++ );
			break;
		case( PE_LOOSE_INTELLIGENCE ):
			PERKUP_STAT( ST_INTELLECT, ++ );
			break;
		case( PE_LOOSE_AGILITY ):
			PERKUP_STAT( ST_AGILITY, ++ );
			break;
		case( PE_LOOSE_LUCK ):
			PERKUP_STAT( ST_LUCK, ++ );
			break;
		case( PE_SOAP_CHARISMA ):
			PERKUP_STAT( ST_CHARISMA_EXT, -- );
			break;
		case( PE_CRAFTSMAN ):
		case( PE_MECHANIC ):
		case( PE_CHEMIST ):
		case( PE_ELECTRICIAN ):
			RecalcAvailableProfPoints(cr);
			break;
		default:
			break;
		}
	}
	#endif // CLIENT

#endif // PERKS
