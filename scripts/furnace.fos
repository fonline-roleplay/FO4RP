#ifndef FURNACE
#define FURNACE

#include "_utils.fos"
#include "furnace_h.fos"
#include "firestarter_h.fos"
#include "furniture_h.fos"

class MenuFurnace: CenteredMenuHandler
{
    uint furnace_id;
	uint furnace_type;
    uint map_id;
	string furnace_id_str;
	

    MenuFurnace( Item& furnace, Map& map, int furnace_type )
	{
		furnace_id = furnace.Id;
		map_id = map.Id;
		this.furnace_type = furnace_type;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        if( !valid( map ) )
		{
            return false;
        }
		
        Item@ furnace = GetItem( furnace_id );
		if( !valid( furnace ) )
		{
            return false;
        }
		
		if( MovementState( cr ) > MOVE_STATE_STILL )
		{
			return false;
		}

        if( menu.ButtonMsg( STR_FURNITURE_MENU_EXAMINE )  )
		{
			
			if( furnace.STATE == STATE_BURNING )
			{
				if( furnace_type == FURNACE_ENERGY_TYPE )
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FURNACE_OFF_REQUIRED );
					return true;
				}
				else if( hasItems( cr, FurnaceTools, SLOT_HAND1 ) )
				{
					ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
					return false;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOOLS_REQUIRED );
					return true;
				}
			}
			
			if( furnace_type == FURNACE_ENERGY_TYPE )
			{
				PlayGenericSound( map, furnace.HexX, furnace.HexY, "CLANK1.mp3", 15 );
			}
			
            ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
            return false; 
        }
		
		if( furnace_type == FURNACE_WOOD_TYPE && furnace.STATE == STATE_EXTINGUISHED && menu.ButtonMsg( STR_FIRE_MENU_IGNITE )  )
		{
			if( hasItems( cr, Igniters ) )
			{
				Item@[] igniters = getItems( cr, Igniters );
				Item@ igniter = igniters[0];
				Ignite( cr, igniter, furnace );
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
			}
		}
		
		if( furnace_type == FURNACE_ENERGY_TYPE && furnace.STATE == STATE_EXTINGUISHED && menu.ButtonMsg( STR_DEVICE_ACTIVATE ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			
			if( !enableFurnace( furnace ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POWER_IS_OFF );
			}
		}
		
		if( furnace_type == FURNACE_WOOD_TYPE && furnace.STATE == STATE_BURNING && menu.ButtonMsg( STR_FIRE_MENU_EXTINGUISH ) )
		{
			if( hasItems( cr, WaterSource ) )
			{
				Item@[] watersource = getItems( cr, WaterSource );
				Item@ water = watersource[0];
				Extinguish( cr, water, furnace );
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER_FOR_FIRE );
			}
		}
		
		if( furnace_type == FURNACE_ENERGY_TYPE && furnace.STATE == STATE_BURNING && menu.ButtonMsg( STR_DEVICE_DEACTIVATE ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			DisableFurnace( furnace);
		}
		
		if( furnace_type == FURNACE_WOOD_TYPE && menu.ButtonMsg( STR_FIRE_MENU_ADD_FUEL ) )
		{
			return AddFuel( cr, furnace );
		}

		if( furnace.STATE == STATE_EXTINGUISHED && menu.ButtonMsg( STR_FURNITURE_MENU_BUTTON ) )
		{
			_InitFurniture( furnace, true );
			furnace.Update();
			StartMenuFurniture( cr, furnace );
			return false;
		}
		
		if( menu.ButtonMsg( STR_CLOSE_MENU_BUTTON ) )
		{
			return false;
		}
		
		return true;
	}

    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }
	
	int getDescriptionLine()
	{
		if( furnace_type == FURNACE_ENERGY_TYPE )
		{
			return STR_FURNACE_MENU_ENERGY_MAIN;
		}
		else
		{
			return STR_FURNACE_MENU_MAIN;
		}
	}		
	
	string@ Description( Critter& cr )
	{
		string info;
		Item@ furnace = GetItem( furnace_id );
		Item@[] MaterialsCheck;
		uint items_count = furnace.GetItems( uint( -1 ), MaterialsCheck );
		Item@ material = null;
		int check_kg = 0;
		Map@ map = GetMap( map_id );
		
		if( furnace.MAX_FUEL == 0 )
		{
            furnace.MAX_FUEL = 24000;
        }
		
		if( furnace_type == FURNACE_ENERGY_TYPE )
		{
			if( MapHasPower( map ) )
			{
				info += STR_CHECK_DEVICE_FLAG( "powerStatus", true );
			}
			else
			{
				info += STR_CHECK_DEVICE_FLAG( "powerStatus", false );
			}
		}
		
		if( furnace_type == FURNACE_WOOD_TYPE )
		{
			info += "$fuel" + furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL;
		}
 		
		info += "$temp" + furnace.FIRE_STRENGTH;

		info += "$iron";
		if( furnace.FURN_IRON > 0 )
		{
			info += STR_INSERT_TEXT_LINE( STR_FURNACE_MENU_IRON_WEIGHT ) + "\n"
				 + "$ironW" + ( furnace.FURN_IRON / 1000.0f ); 
			check_kg++;
		}

		info += "$gold";
		if( furnace.FURN_GOLD > 0 )
		{
			info += STR_INSERT_TEXT_LINE( STR_FURNACE_MENU_GOLD_WEIGHT ) + "\n"
   			     + "$goldW" + ( furnace.FURN_GOLD / 1000.0f ); 
			check_kg++; 
		}

		info += "$nf_metal";
		if( furnace.FURN_NF_METAL > 0 )
		{
			info += STR_INSERT_TEXT_LINE( STR_FURNACE_MENU_NF_METAL_WEIGHT ) + "\n"
			     + "$nf_metalW" + ( furnace.FURN_NF_METAL / 1000.0f ); 
			check_kg++;
		}

		info += "$glass";
		if( furnace.FURN_GLASS > 0 )
		{
			info += STR_INSERT_TEXT_LINE( STR_FURNACE_MENU_GLASS_WEIGHT ) + "\n" 
			     + "$glassW" + ( furnace.FURN_GLASS / 1000.0f ); 
			check_kg++;
		}

		info += "$empty";
		if( check_kg < 1 && items_count < 1 )
		{
			info += STR_INSERT_TEXT_LINE( STR_EMPTY );
		}

		return info;
    }
	
	bool ShouldRedraw( Critter& cr )
	{
		Item@ furnace = GetItem( furnace_id );
		if( !valid( furnace ) || GetDistantion( cr.HexX, cr.HexY, furnace.HexX, furnace.HexY ) >= 2 )
		{
			return false;
		}
		
		return true;
    }
}

bool enableFurnace( Item& furnace )
{
	if( !valid( furnace ) ) 
	{
		return false;
	}
	
	Map@ map = GetMap( furnace.MapId );
	
	if( MapHasPower( map ) )
	{
		furnace.STATE = STATE_BURNING;
		uint[] values = { furnace.Id, map.Id };
		
		if( furnace.FIRE_EVENT != 0 )
		{
			EraseTimeEvent( furnace.FIRE_EVENT );
		}
		
		furnace.FIRE_EVENT = CreateTimeEvent( AFTER( REAL_MS( 1500 ) ),"furnace@e_FurnaceWork", values, true );
		setAnimState( furnace );
		
		return true;
	}
	
	return false;
}

void DisableFurnace( Item& furnace )
{
	Map@ map = GetMap ( furnace.MapId );
	
	if( valid( map ) )
	{
		PlayGenericSound( map, furnace.HexX, furnace.HexY, "STEAM.mp3", 30 );
	}
	
	furnace.STATE = STATE_EXTINGUISHED;
	setAnimState( furnace );
}

int CheckFurnaceType( Item& furnace )
{
	uint pid = furnace.GetProtoId();
	
	switch ( pid )
	{
		case ( PID_FURNACE_SMALL ):
		{
			return FURNACE_WOOD_TYPE;
		}
		case ( PID_ARC_FURNACE ):
		{
			return FURNACE_ENERGY_TYPE;
		}
	}
	return -1;
}

void setAnimState( Item& furnace )
{
	uint pid = furnace.GetProtoId();
	
	if( furnace.STATE == STATE_BURNING )
	{	
		if( pid == PID_ARC_FURNACE )
		{
			furnace.PicMap = PIC_ARC_FURNACE_ANIM_ON;
		}
		
		UNSETFLAG( furnace.Flags, ITEM_SHOW_ANIM_EXT );
		SETFLAG( furnace.Flags, ITEM_LIGHT );
		SETFLAG( furnace.Flags, ITEM_CAN_USE );
		UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );
	}
	else
	{
		furnace.PicMap = furnace.Proto.PicMap;
		SETFLAG( furnace.Flags, ITEM_SHOW_ANIM_EXT );
		UNSETFLAG( furnace.Flags, ITEM_LIGHT );
	}
	
	furnace.Update();
}

void StartMenuFurnace( Critter& cr, Item& furnace )
{
    Map@ map = cr.GetMap();
    if( !valid(map) )
	{
        return;
    }
	
	int furnace_type = CheckFurnaceType( furnace );
	
	if( furnace_type < 0 )
	{
		cr.Say( SAY_NETMSG, "Incorrect Furnace! PID = "+furnace.GetProtoId() );
		return;
	}
	
	iMenuHandler@ handler = MenuFurnace( furnace, map, furnace_type );
	iDialogBox@ menu = OpenMenu( cr, "Furnace", handler );
	return;
}

void FurnaceStage( Item& furnace )
{
	if( !valid( furnace ) )
	{
		return;
	}
	
	Map@ map = GetMap( furnace.MapId );
	if( !valid( map ) )
	{
		return;
	}
	
	int furnace_type = CheckFurnaceType( furnace );
	
	if( furnace.FIRE_STRENGTH < 0 )
	{
		furnace.FIRE_STRENGTH = 0;
		EraseTimeEvent( furnace.FIRE_EVENT );
		furnace.FIRE_EVENT = 0;
		return;
	}
	
	uint furnace_off = 0;

	if( furnace.STATE == STATE_EXTINGUISHED && furnace.FIRE_STRENGTH > 0 )
	{
		furnace_off += 1;
	}
	
	if( furnace.STATE == STATE_BURNING && furnace_type == FURNACE_ENERGY_TYPE  && !MapHasPower( map ) )
	{
		DisableFurnace( furnace );
		furnace_off += 1;
	}
	
	if( furnace_off > 0 )
	{
		uint[] values = { furnace.Id };
		CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "furnace@e_CoolDown", values, true );
	}

	
	if( furnace.STATE == STATE_BURNING && furnace.FIRE_STRENGTH < FURNACE_FIRE_STRENGTH_MAX )
	{
		if( furnace_type == FURNACE_ENERGY_TYPE )
		{
			furnace.FIRE_STRENGTH += int(ARC_FURNACE_HEATINGPOWER * ARC_FURNACE_HEATING_MODIFIER);
		}
		else
		{
			furnace.FIRE_STRENGTH += FUEL_BURN_AMOUNT / 2;
		}
	}

	Item@[] resources;
	int burn_check = 0;

	if( furnace.FURN_IRON > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_IRON_BAR );	
		burn_check = furnace.FURN_IRON - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_IRON = burn_check;
			furnace.AddItem( PID_IRON_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_GOLD > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GOLDEN_BAR );	
		burn_check = furnace.FURN_GOLD - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_GOLD = burn_check;
			furnace.AddItem( PID_GOLDEN_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_NF_METAL > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_NF_METAL_BAR );	
		burn_check = furnace.FURN_NF_METAL - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_NF_METAL = burn_check;
			furnace.AddItem( PID_NF_METAL_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_GLASS > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GLASS_BAR );	
		burn_check = furnace.FURN_GLASS - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_GLASS = burn_check;
			furnace.AddItem( PID_GLASS_BAR, 1, 0 );
		}
	}
	
	int count = furnace.GetItems( uint ( -1 ) , resources );
	
	if( count > 0 )
	{
		int n = Random( 0, count - 1 );
		uint type = BURN_TYPE_MISC;
		uint16 materialPid = resources[n].GetProtoId();
		ProtoItem@ MaterialProto = GetProtoItem( materialPid );

		if( MaterialProto.Type == ITEM_TYPE_MISC )
		{
			if( MaterialProto.Material == MATERIAL_STONE )
			{
				if( materialPid == PID_IRON_ORE || materialPid == PID_GOLD_NUGGET || materialPid == PID_GOLD_ORE || materialPid == PID_NF_METAL_ORE 
					|| materialPid == PID_NF_METAL_NUGGET )
				{
					type = BURN_TYPE_ORE;
				}
			}
			else
			{
				if( materialPid == PID_IRON_BAR || materialPid == PID_GOLDEN_BAR || materialPid == PID_NF_METAL_BAR || materialPid == PID_GLASS_BAR )
				{
					type = 101;
				}
				else
				{
					type = BURN_TYPE_MISC;
				}
			}
		}

		if( MaterialProto.Type == ITEM_TYPE_ARMOR )
		{
			type = BURN_TYPE_ARMOUR;
		}

		if( MaterialProto.Type == ITEM_TYPE_WEAPON )
		{
			type = BURN_TYPE_WEAPON;
		}

		if( type != 101 )
		{
			BurnItem ( furnace, resources[n], type );
			if( Explosives.find( materialPid ) != -1 )
			{
				uint[] values = { furnace.Id };
				CreateTimeEvent( AFTER( REAL_SECOND( Random( 0, 10 ) ) ),"firestarter@e_Explosives", values, true );
			}
		}
	}
}

uint e_FurnaceWork( uint[]@ values )
{
	Map@ map = GetMap( values[1] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	Item@ furnace = GetItem( values[0] );
	if( valid( furnace ) )  
	{
		if( furnace.STATE != STATE_BURNING || ( CheckFurnaceType( furnace ) == FURNACE_ENERGY_TYPE && MapHasPower( map ) != true )  )
		{
			FurnaceStage( furnace );
			return 0;
		}

		PlayGenericSound( map, furnace.HexX, furnace.HexY, "arc_furnace_work.mp3", 30 );
		FurnaceStage( furnace );
		return ARC_FURNACE_CYCLE_TIME;
	}
	
	return 0;
}

uint e_CoolDown( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( !valid( furnace ) )
	{
		return 0;
	}

	int furnace_type = CheckFurnaceType( furnace );
	
	if( furnace.STATE == STATE_BURNING )
	{
		return 0;
	}
	
	if( furnace_type == FURNACE_ENERGY_TYPE )
	{
		furnace.FIRE_STRENGTH -= int( ARC_FURNACE_HEATINGPOWER * ARC_FURNACE_HEATING_MODIFIER );
	}
	else
	{
		furnace.FIRE_STRENGTH -= int( FUEL_BURN_AMOUNT * FURNACE_HEATING_MOD );
	}
	
	if( furnace.FIRE_STRENGTH <= 0 )
	{
		furnace.FIRE_STRENGTH = 0;
		EraseTimeEvent( furnace.FIRE_EVENT );
		furnace.FIRE_EVENT = 0;
		return 0;
	}
	
	if( furnace_type == FURNACE_ENERGY_TYPE )
	{
		return ARC_FURNACE_CYCLE_TIME;
	}
	
	return FIRE_BURNING_TIME;
}

void BurnItem( Item& furnace, Item& resource, uint16 type )
{
    Map@ map = GetMap( furnace.MapId );

	if( furnace.FIRE_STRENGTH == 0 || furnace.STATE == STATE_EXTINGUISHED )
	{
		return;
	}

	if( CheckFurnaceType( furnace ) == FURNACE_WOOD_TYPE )
	{
		map.RunEffect( PID_EFFECT_SMOKE, furnace.HexX, furnace.HexY, 0 );
	}
	
	float burn_k = 0.0f;

    switch( type )
    {
        case( BURN_TYPE_ORE ):
            burn_k = ORE_K;
            break;
        case( BURN_TYPE_MISC ):
            burn_k = MISC_K;
            break;
        case( BURN_TYPE_ARMOUR ):
            burn_k = ARMOUR_K;
            break;
        case( BURN_TYPE_WEAPON ):
            burn_k = WEAPON_K;
            break;
        default:
            burn_k = 0.5f;
            break;
    }
	
	if( resource.Proto.Material == MATERIAL_GOLD )
	{
		burn_k = GOLD_K;
	}

	if( resource.Proto.Material == MATERIAL_GLASS )
	{
		burn_k = GLASS_K;
	}

	string resourceType;
    int SmeltingTemp;

    switch( resource.Proto.Material )
    {
        case( MATERIAL_IRON ):
            resourceType = "FURN_IRON";
            SmeltingTemp = BURN_IRON;
            break;
        case( MATERIAL_GOLD ):
            resourceType = "FURN_GOLD";
            SmeltingTemp = BURN_GOLD;
            break;
        case( MATERIAL_NF_METAL ):
            resourceType = "FURN_NF_METAL";
            SmeltingTemp = BURN_NF_METAL;
            break;
        case( MATERIAL_GLASS ):
            resourceType = "FURN_GLASS";
            SmeltingTemp = BURN_GLASS;
            break;
        case( MATERIAL_STONE ):
        {
            switch( resource.GetProtoId() )
            {
                case( PID_IRON_ORE ):
                    resourceType = "FURN_IRON";
                    SmeltingTemp = BURN_IRON;
                    break;
                case( PID_GOLD_NUGGET ):
                case( PID_GOLD_ORE ):
                    resourceType = "FURN_GOLD";
                    SmeltingTemp = BURN_GOLD;
                    break;
                case( PID_NF_METAL_ORE ):
                case( PID_NF_METAL_NUGGET ):
                    resourceType = "FURN_NF_METAL";
                    SmeltingTemp = BURN_NF_METAL;
                    break;
				default:
                    break;
            }
            break;
        }
        default:
            SmeltingTemp = 600;
            break;
    }

	if( furnace.FIRE_STRENGTH >= SmeltingTemp && SmeltingTemp != 0 )
	{
		if( resourceType == "FURN_IRON" )
		{
			furnace.FURN_IRON += int( resource.Proto.Weight * burn_k );
		}

		if( resourceType == "FURN_GOLD" )
		{
			furnace.FURN_GOLD += int( resource.Proto.Weight * burn_k );
		}

		if( resourceType == "FURN_NF_METAL" )
		{
			furnace.FURN_NF_METAL += int( resource.Proto.Weight * burn_k );
		}

		if( resourceType == "FURN_GLASS" )
		{
			furnace.FURN_GLASS += int( resource.Proto.Weight * burn_k );
		}
		_SubItem( resource, 1 );
	}
	return;
}

void BlockArcFurnace( Item& furnace )
{
	uint16 hx = 0, hy = 0;
	Map@ map = furnace.GetMapPosition( hx, hy );
	if( !valid( map ) )
	{
		return;
	}
	
	UNSETFLAG( furnace.Flags, ITEM_NO_BLOCK );
	UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );
	
	map.MoveHexByDir( hx, hy, 4, 1 );
	Item@ blocker0 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker0 ) )
	{
		blocker0.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 3, 1 );
	Item@ blocker1 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker1 ) )
	{
		blocker1.PARENT_ITM_ID = furnace.Id;
	}

	map.MoveHexByDir( hx, hy, 5, 1 );
	Item@ blocker2 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker2 ) )
	{
		blocker2.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 0, 1 );
	Item@ blocker3 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker3 ) )
	{
		blocker3.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 0, 1 );
	Item@ blocker4 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker4 ) )
	{
		blocker4.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 0, 1 );
	Item@ blocker5 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker5 ) )
	{
		blocker5.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 0, 1 );
	Item@ blocker6 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker6 ) )
	{
		blocker6.PARENT_ITM_ID = furnace.Id;
	}

	map.MoveHexByDir( hx, hy, 2, 1 );
	Item@ blocker7 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker7 ) )
	{
		blocker7.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 2, 1 );
	Item@ blocker8 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker8 ) )
	{
		blocker8.PARENT_ITM_ID = furnace.Id;
	}
	
	map.MoveHexByDir( hx, hy, 2, 1 );
	Item@ blocker9 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker9 ) )
	{
		blocker9.PARENT_ITM_ID = furnace.Id;
	}

	map.MoveHexByDir( hx, hy, 3, 1 );
	Item@ blocker10 = map.AddItem( hx, hy, PID_NO_SHOOT_METAL_BLOCKER, 1 );
	if( valid( blocker10 ) )
	{
		blocker10.PARENT_ITM_ID = furnace.Id;
	}
	
	furnace.SetEvent( ITEM_EVENT_FINISH, "furniture@_DeleteBlockers" );
}

void BlockFurnace( Item& furnace )
{
	uint16 hx = 0, hy = 0;
	Map@ map = furnace.GetMapPosition( hx, hy );
	if( !valid( map ) )
	{
		return;
	}
	
	UNSETFLAG( furnace.Flags, ITEM_NO_BLOCK );
	UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );
	
	map.MoveHexByDir( hx, hy, 0, 1 );
	Item@ blocker0 = map.AddItem( hx, hy, PID_STONE_BLOCKER, 1 );
	if( valid( blocker0 ) )
	{
		blocker0.PARENT_ITM_ID = furnace.Id;
	}	
	
	furnace.SetEvent( ITEM_EVENT_FINISH, "furniture@_DeleteBlockers" );
}



#endif //FURNACE
