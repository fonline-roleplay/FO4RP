#ifndef PARAMETERS
#define PARAMETERS

#include "_utils.fos"
#include "parameters_h.fos"
#include "_msgstr.fos"

#ifdef __CLIENT
	#include "_client_defines.fos"
	import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
	import int  GUI_GetActiveScreen() from "client_gui";
#endif // __CLIENT

#ifndef __CLIENT
	#include "perks_h.fos"
#endif // !__CLIENT

#ifdef __SERVER
	#include "speed_h.fos"
	import void LookDataRefresh( Critter& critter ) from "main";
#endif // __SERVER

#ifndef __CLIENT
	void changedParam_CR_HUNGER_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_HUNGER, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_HUNGER );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_WAMBLES );
		
		cr.AddTimeEvent( "gameplay@cte_Hunger", REAL_SECOND( cr.Param[ CR_HUNGER_SPEED ] ), CTE_HUNGER, 0 );
	}

	void changedParam_CR_THIRST_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_THIRST, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_THIRST );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_LICKS_LIPS );
		
		cr.AddTimeEvent( "gameplay@cte_Thirst", REAL_SECOND( cr.Param[ CR_THIRST_SPEED ] ), CTE_THIRST, 0 );
	}

	void changedParam_CR_DRUNK_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_DRUNK, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_DRUNK );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_STAGGERS );
		
		cr.AddTimeEvent( "gameplay@cte_Drunk", REAL_SECOND( cr.Param[ CR_DRUNK_SPEED ] ), CTE_DRUNK, 0 );
	}

	void changedParam_CR_GLOBAL_OVERDOSE_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_GLOBAL_OVERDOSE, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_GLOBAL_OVERDOSE );
		}
		cr.AddTimeEvent( "gameplay@cte_Global_Overdose", REAL_SECOND( cr.Param[ CR_GLOBAL_OVERDOSE_SPEED ] ), CTE_GLOBAL_OVERDOSE, 0 );
	}

	void changedParam_CR_WETNESS_SPEED( Critter& cr, uint, int oldValue)
	{
		if( cr.GetTimeEvents( CTE_WETNESS, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_WETNESS );
		}
		cr.AddTimeEvent( "gameplay@cte_Wetness", AFTER ( REAL_SECOND( cr.Param[ CR_WETNESS_SPEED ] ) ), CTE_WETNESS, 0 );
	}

	void changedParam_Hp( Critter& cr, uint, int oldValue )
	{
		int MissingHP = CLAMP( cr.Stat[ ST_MAX_LIFE ] - cr.Stat[ ST_CURRENT_HP ], 0, cr.Stat[ ST_MAX_LIFE ] );
		if( cr.Param[ CR_BANDAGE_HEAL ] > MissingHP )
		{
			cr.ParamBase[ CR_BANDAGE_HEAL ] = MissingHP;
		}
		
		int DeathHitPoints = DeathBehaviour(cr).get();
		if( cr.Stat[ ST_CURRENT_HP ] < 1 && cr.Stat[ ST_CURRENT_HP ] > DeathHitPoints )
		{
			bool attackFront = true;
			if( !cr.IsKnockout() && !cr.IsDead() )
			{
				cr.Stat[ST_VAR7] == 1 ? attackFront = false : attackFront == true;
				cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( attackFront ), 0, cr.HexX, cr.HexY );
			}
		}
		
		if( cr.Stat[ ST_CURRENT_HP ] <= DeathHitPoints && !cr.IsDead() ) 
		{
			if( cr.IsPlayer() )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ABOUT_TO_DIE );
			}
			
			uint anim2Dead = ANIM2_DEAD_FRONT;
			if( cr.IsKnockout() )
			{
				anim2Dead = cr.Anim2Knockout == ANIM2_IDLE_PRONE_FRONT ? ANIM2_DEAD_PRONE_FRONT : ANIM2_DEAD_PRONE_BACK;
			}
			cr.ToDead( anim2Dead, null );
			
			if( cr.Stat[ ST_KILLER_PERSON ] > 0 )
			{
				Critter@ killer = GetCritter( cr.Stat[ ST_KILLER_PERSON ] );
				if( valid(killer) )
				{
					killer.KillBase[ KILL_BEGIN + cr.Stat[ ST_BODY_TYPE ] ]++;
				}
			}
		}
		
		if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
		{
			cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
		}
	}

	void changedParam_Experience( Critter& cr, uint, int oldValue )
	{   
		int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
		if( exp > 0 )
		{
			uint level = cr.Stat[ ST_LEVEL ];
			if( level >= __LevelCap && !__LevelCapAddExperience )
			{
				return;
			}
			
			int trait_nerf = cr.Trait[ TRAIT_SKILLED ] == 0 ? 1 : 2;
			
			if( cr.Param[ CR_EXP_LOCK ] == 0 )
			{
				exp /= trait_nerf;
				testInfo( cr, "Gained exp: " + exp + " ( trait_nerf: " + trait_nerf + " )" );
			}
			else
			{
				cr.ParamBase[ CR_EXP_LOCK ] = 0;
			}
			
			cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

			if( level >= __LevelCap )
			{
				return;
			}
			
			int perkUp = 3;
			while( true )
			{
				if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) && level < __LevelCap )
				{
					level++;
					
					cr.StatBase[ ST_LEVEL ]++;

					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_LEVEL ] * cr.StatBase[ ST_INTELLECT ] + ( cr.Trait[ TRAIT_SKILLED ] > 0 ? cr.StatBase[ ST_LEVEL ] * cr.StatBase[ ST_INTELLECT ] / 2 : 0 ); // Skill points
				}
				else
				{
					break;
				}
			}
		}
	}

	void changedParam_Perks( Critter& cr, uint perk, int oldValue )
	{
		int curValue = cr.Param[ perk ];
		if( curValue > oldValue )
		{
			for( uint i = 0, j = curValue - oldValue; i < j; i++ )
			{
				PerkUp( cr, perk );
			}
		}
		else if( curValue < oldValue )
		{
			for( uint i = 0, j = oldValue - curValue; i < j; i++ )
			{
				PerkDown( cr, perk );
			}
		}
	}

	void changedParam_Hide( Critter& cr, uint, int oldValue )
	{
		cr.RefreshVisible();
	}

	void not_implemented_exception_bummer( Critter& cr, int old_value, string name, uint stat_id )
	{
		cr.Say( SAY_NETMSG, name + " was " + old_value + ", now " + cr.Trait[ stat_id ] + "." );
	}

	void changedParam_FastShot( Critter& cr, uint, int oldValue )
	{
		//not_implemented_exception_bummer( cr, oldValue, "Fastshot trait", TRAIT_FAST_SHOT );
	}

	void changedParam_GoodNatured( Critter& cr, uint, int oldValue )
	{
		int newValue = cr.Trait[TRAIT_SURE_FOOTED];
		if( oldValue == newValue || newValue < 0 || newValue > 1 )
		{
			return;
		}
		
		int sign = newValue == 0 ? -1 : 1;

		cr.SkillBase[ SK_FIRST_AID ] 		+= 25 * sign;
		cr.SkillBase[ SK_DOCTOR ] 			+= 25 * sign;
		cr.SkillBase[ SK_BARTER ] 			+= 25 * sign;
		
		cr.SkillBase[ SK_SMALL_GUNS ]		-= 20 * sign;
		cr.SkillBase[ SK_MEDIUM_GUNS ] 		-= 20 * sign;
		cr.SkillBase[ SK_BIG_GUNS ]	-= 20 * sign;
		cr.SkillBase[ SK_UNARMED ] 			-= 20 * sign;
		cr.SkillBase[ SK_MELEE_WEAPONS ] 	-= 20 * sign;
		cr.SkillBase[ SK_THROWING ] 		-= 20 * sign;
	}

	void changedParam_FastMetabolism( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		
		cr.StatBase[ ST_HEALING_RATE ] += int( cr.StatBase[ ST_ENDURANCE ] * HEALINGRATE_PER_END ) * sign;
		cr.StatBase[ ST_POISON_RESISTANCE ] -= int( cr.StatBase[ ST_ENDURANCE ] * POISON_RESIST_PER_END ) * sign;
		cr.StatBase[ ST_RADIATION_RESISTANCE ] -= int( cr.StatBase[ ST_ENDURANCE ] * RADIATION_RESIST_PER_END ) * sign;
	}

	void changedParam_Bruiser( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		cr.StatBase[ ST_STRENGTH ] += int( BRUISER_STRENGTH_BONUS ) * sign;
		cr.StatBase[ ST_ACTION_POINTS ] -= int( BRUISER_MAX_AP_MALUS )   * sign;
	}

	void changedParam_SexAppeal( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		cr.StatBase[ ST_CHARISMA ] += int( SEX_APPEAL_CH_BONUS ) * sign;
		cr.StatBase[ ST_MAX_LIFE ] -= int( SEX_APPEAL_HP_MALUS ) * sign;
		cr.StatBase[ ST_CURRENT_HP ] -= int( SEX_APPEAL_HP_MALUS ) * sign;
	}

	void changedParam_SmallFrame( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		
		cr.StatBase[ ST_AGILITY ] += int( SMALL_FRAME_AGI_BONUS ) * sign;
		cr.StatBase[ ST_CARRY_WEIGHT ] += int( SMALL_FRAME_CW_BONUS ) * sign;
	}

	void changedParam_Finesse( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		cr.StatBase[ ST_CRITICAL_CHANCE ] += int( FINESSE_CRITCHANCE_BONUS ) * sign;
	}

	void changedParam_Jinxed( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		
		cr.StatBase[ ST_INTELLECT ] += int( JINXED_INT_BONUS ) * sign;
	}

	void changedParam_Kamikaze( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
	}

	void changedParam_HeavyHanded( Critter& cr, uint, int oldValue )
	{
		int sign = 1;
		if( oldValue > 0 )
		{
			sign = -1;
		}
		cr.StatBase[ ST_MELEE_DAMAGE ] += int( cr.StatBase[ ST_STRENGTH ] * HEAVY_HANDED_MELEE_DAMAGE_BONUS ) * sign;
		cr.StatBase[ ST_APREGEN ] -= int( cr.StatBase[ ST_STRENGTH ] * HEAVY_HANDED_AP_REGEN_MALUS ) * sign;
		cr.StatBase[ ST_MAX_CRITICAL ] -= int( HEAVY_HANDED_CRIT_MALUS ) * sign;
	}

	void changedParam_CR_TYPING_TIME(Critter& cr, uint, int oldValue)
	{
		if( oldValue > 0 && cr.ParamBase[ CR_TYPING_TIME ] > 0 ) 
		{
			return; 
		}

		if( oldValue == 0 && cr.ParamBase[ CR_TYPING_TIME ] > 0 )
		{
			return;
		}

		if( oldValue > 0 && cr.ParamBase[ CR_TYPING_TIME ] == 0 )
		{
			return;
		}
	}

	int NextLevelNeedExp( Critter& cr )
	{
		int level = cr.Stat[ ST_LEVEL ];
		return NUMERICAL_NUMBER( level ) * 1000;
	}

	int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
	{
		if( valid( master ) )
		{
			return master.Stat[ ST_INTELLECT ] + 2 * master.Perk[ PE_SMOOTH_TALKER ];
		}
		return 0;
	}

	int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
	{
		if( valid( master ) )
		{
			if( master.ReputationBase[ index ] == int(0x80000000) )
			{
				master.ReputationBase[ index ] = 0;
			}
			return master.ReputationBase[ index ];
		}
		return 0;
	}
#endif // !__CLIENT

#ifdef __CLIENT
	void changedParam_Level( CritterCl& cr, uint, int oldValue )
	{
		if( cr.ParamBase[ ST_LEVEL ] > oldValue )
		{
			PlaySound( "LEVELUP.mp3" );
			Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
			SetChosenTabLevelUp( true );
		}
	}

	void changedParam_Experience( CritterCl& cr, uint, int oldValue )
	{
		int curValue = cr.ParamBase[ ST_EXPERIENCE ];
		if( curValue > oldValue )
		{
			Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
		}
	}

	void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
	{
		if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
		{
			ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
		}
	}

	void changedParam_ScaleFactor( CritterCl& cr, uint param, int oldValue )
	{
		int value = cr.Param[ param ];
		if( value <= 0 )
			value = 100;
			
		cr.SpriteZoom = value * 0.01f;
	}

#endif // __CLIENT

#ifdef __SERVER

	void changedParam_Hunger( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_HUNGER ] = 1000;
			return;
		}

		cr.StatBase[ ST_HUNGER ] = CLAMP( cr.StatBase[ ST_HUNGER ], 0, 1000 );

		if( cr.StatBase[ ST_HUNGER ] <= 0 && !cr.IsDead() && !cr.IsKnockout() && ( cr.Param[ CR_IS_RELAXING ] == 0 || cr.Param[ CR_IS_RELAXING ] > 2 ) )
		{
			cr.StatBase[ ST_CURRENT_HP ] -= int( ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 0.5 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUFFER_HUNGER );
		}
	}

	void changedParam_Thrist( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_THIRST ] = 1000;
			return;
		}

		cr.StatBase[ ST_THIRST ] = CLAMP( cr.StatBase[ ST_THIRST ], 0, 1000 );

		if( cr.StatBase[ ST_THIRST ] <= 0 && !cr.IsDead() && !cr.IsKnockout() && ( cr.Param[ CR_IS_RELAXING ] == 0 || cr.Param[ CR_IS_RELAXING ] > 2 ) )
		{
			cr.StatBase[ ST_CURRENT_HP ] -= int( ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 0.5 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUFFER_THIRST );
		}
	}

	void changedParam_Dyspnea( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_DYSPNEA ] = 1000;
			return;
		}
		
		cr.StatBase[ ST_DYSPNEA ] = CLAMP( cr.StatBase[ ST_DYSPNEA ], 0, 1000 );

		if( cr.StatBase[ ST_DYSPNEA ] <= 250 && !cr.IsDead() )
		{
			cr.StatBase[ ST_DYS ] += 1;
			if( cr.StatBase[ ST_DYS ] >= 30 && cr.StatBase[ ST_DYSPNEA ] <= 0 )
			{
				cr.StatBase[ ST_CURRENT_HP ] -= 10;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_FAINT );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NEED_OXIGEN );
			}
			else
			{
				cr.StatBase[ ST_CURRENT_HP ] -= 5;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_LOUD_COUGHT );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NEED_BREATH );
			}
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ? true : false ) ), 200, cr.HexX, cr.HexY );
		}
		else if( cr.StatBase[ ST_DYSPNEA ] >= 251 && cr.StatBase[ ST_DYSPNEA ] <= 700 )
		{
			cr.StatBase[ ST_DYS ] = 0;
			uint Msg = Random( 0, 4 ) == 0 ? STR_EMOTE_HOARSE_BREATHING : STR_EMOTE_HARD_BREATHING;
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, Msg );
			cr.StatBase[ ST_CURRENT_HP ] -= 1;
		}
		else if( cr.StatBase[ ST_DYSPNEA ] >= 701 && cr.StatBase[ ST_DYSPNEA ] <= 999 )
		{
			cr.StatBase[ ST_DYS ] = 0;
		}
	}

	void changedParam_Drunk( Critter& cr, uint, int oldValue )
	{
		cr.StatBase[ ST_DRUNK ] = CLAMP( cr.StatBase[ ST_DRUNK ], 0, 100 );

		if( cr.StatBase[ ST_DRUNK ] == 100 && !cr.IsDead() )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_DRUNK );
		}
	}

	void changedParam_Overdose( Critter& cr, uint, int oldValue )
	{
		cr.StatBase[ ST_GLOBAL_OVERDOSE] = CLAMP( cr.StatBase[ ST_GLOBAL_OVERDOSE ], 0, 1000 );
	}

	void changedParam_Wetness( Critter& cr, uint, int oldValue )
	{
		cr.StatBase[ ST_WETNESS ] = CLAMP( cr.StatBase[ ST_WETNESS ], 0, 1000 );
	}

	void changedParam_SpeedMod( Critter& cr, uint, int oldValue )
	{
		ChangeCritterSpeed( cr );
	}
	
	void changedParam_Windup( Critter& cr, uint param, int oldValue )
	{
		LookDataRefresh( cr );
	}
	
	void changedParam_Perception( Critter& cr, uint param, int oldValue )
	{
		LookDataRefresh( cr );
	}

	void changedParam_PerceptionExt( Critter& cr, uint param, int oldValue )
	{
		LookDataRefresh( cr );
	}

	void changedParam_Vision( Critter& cr, uint param, int oldValue )
	{
		LookDataRefresh( cr );
	}

	void changedParam_Invis( Critter& cr, uint param, int oldValue )
	{
		LookDataRefresh( cr );
	}
	
#endif // __SERVER

#ifndef __CLIENT
# define _param_    cr.ParamBase
	void CritterGenerate( Critter& cr )
#endif // !__CLIENT

#ifdef __CLIENT
# define _param_    data
	void CritterGenerate( int[]& data )
#endif // __CLIENT
	{
		if( _param_[ ST_LEVEL ] <= 0 )
		{
			_param_[ ST_LEVEL ] = 1;
		}
		
		if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
		{
			_param_[ ST_AGILITY ] += SMALL_FRAME_AGI_BONUS;
			_param_[ ST_CARRY_WEIGHT ] += SMALL_FRAME_CW_BONUS;
		}
		
		if( _param_[ TRAIT_BRUISER ] != 0 )
		{
			_param_[ ST_STRENGTH ] += BRUISER_STRENGTH_BONUS;
			_param_[ ST_ACTION_POINTS ] -= BRUISER_MAX_AP_MALUS;
		}
		
		if( _param_[ TRAIT_NERD ] != 0 )
		{
			_param_[ ST_INTELLECT ] += JINXED_INT_BONUS;
			_param_[ ST_MELEE_DAMAGE ] = 0;
		}
		
		if( _param_[ TRAIT_SEX_APPEAL ] != 0 )
		{
			_param_[ ST_CHARISMA ] += SEX_APPEAL_CH_BONUS;
			_param_[ ST_MAX_LIFE ] -= SEX_APPEAL_HP_MALUS;
		} 
		
		_param_[ SK_SMALL_GUNS ]	+= 5 * _param_[ ST_PERCEPTION ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_STRENGTH ]	;
		_param_[ SK_MEDIUM_GUNS ]		+= 5 * _param_[ ST_STRENGTH ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_AGILITY ]		;
		_param_[ SK_BIG_GUNS ]+= 5 * _param_[ ST_PERCEPTION ] + 3 * _param_[ ST_INTELLECT ]	+ 2 * _param_[ ST_AGILITY ]		;
		_param_[ SK_UNARMED ]		+= 5 * _param_[ ST_STRENGTH ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_ENDURANCE ]	;
		_param_[ SK_MELEE_WEAPONS ]	+= 5 * _param_[ ST_AGILITY ]	+ 3 * _param_[ ST_STRENGTH ]	+ 2 * _param_[ ST_ENDURANCE ]	;
		_param_[ SK_THROWING ]		+= 5 * _param_[ ST_AGILITY ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_STRENGTH ]	;
		_param_[ SK_FIRST_AID ]		+= 5 * _param_[ ST_AGILITY ]	+ 3 * _param_[ ST_INTELLECT ]	+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_DOCTOR ]		+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_AGILITY ]		;
		_param_[ SK_SNEAK ]			+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_LOCKPICK ]		+= 5 * _param_[ ST_AGILITY ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_INTELLECT ]	;
		_param_[ SK_STEAL ]			+= 5 * _param_[ ST_PERCEPTION ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_INTELLECT ]	;
		_param_[ SK_TRAPS ]			+= 5 * _param_[ ST_PERCEPTION ] + 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_INTELLECT ]	;
		_param_[ SK_SCIENCE ]		+= 5 * _param_[ ST_INTELLECT ]  + 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_LUCK ]		;
		_param_[ SK_REPAIR ]		+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_STRENGTH ]	;
		_param_[ SK_SPEECH ]		=  0																							;
		_param_[ SK_BARTER ]		+= 5 * _param_[ ST_CHARISMA ]	+ 3 * _param_[ ST_INTELLECT ]	+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_GAMBLING ]		=  0																							;
		_param_[ SK_OUTDOORSMAN ]	+= 5 * _param_[ ST_STRENGTH ]	+ 3 * _param_[ ST_INTELLECT ]	+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_MINING ]		+= 5 * _param_[ ST_STRENGTH ] 	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_CHOPPING ]		+= 5 * _param_[ ST_STRENGTH ]	+ 3 * _param_[ ST_AGILITY ]		+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_SCAVENGING ]	+= 5 * _param_[ ST_LUCK ]		+ 3 * _param_[ ST_INTELLECT ]	+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_HUNTING ]		+= 5 * _param_[ ST_AGILITY ]	+ 3 * _param_[ ST_INTELLECT ] 	+ 2 * _param_[ ST_PERCEPTION ]	;
		_param_[ SK_FISHING ]		+= 5 * _param_[ ST_LUCK ]		+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_AGILITY ] 	;
		_param_[ SK_FARMING ]		+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_STRENGTH ] 	;
		_param_[ SK_COOKING ]		+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_AGILITY ]		;
		_param_[ SK_HERBALISM ]		+= 5 * _param_[ ST_INTELLECT ]	+ 3 * _param_[ ST_PERCEPTION ]	+ 2 * _param_[ ST_AGILITY ]		;
		
		if( _param_[ TAG_SKILL1 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL1 ] ) && !isFarmingSkill( _param_[ TAG_SKILL1 ] ) ) )
		{
			_param_[ _param_[ TAG_SKILL1 ] ] += 50;
		}
		
		if( _param_[ TAG_SKILL2 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL2 ] ) && !isFarmingSkill( _param_[ TAG_SKILL2 ] ) ) )
		{
			_param_[ _param_[ TAG_SKILL2 ] ] += 40;
		}
		
		if( _param_[ TAG_SKILL3 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL3 ] ) && !isFarmingSkill( _param_[ TAG_SKILL3 ] ) ) )
		{
			_param_[ _param_[ TAG_SKILL3 ] ] += 30;
		}
		
		if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
		{
			_param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * RADIATION_RESIST_PER_END;
			_param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * POISON_RESIST_PER_END;
			_param_[ ST_HEALING_RATE ] += _param_[ ST_ENDURANCE ];
		}
		
		if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
		{
			_param_[ ST_MELEE_DAMAGE ] += (_param_[ ST_STRENGTH ] * HEAVY_HANDED_MELEE_DAMAGE_BONUS );
			_param_[ ST_APREGEN ] -= ( _param_[ ST_STRENGTH] * HEAVY_HANDED_AP_REGEN_MALUS );
			_param_[ ST_MAX_CRITICAL ] -= HEAVY_HANDED_CRIT_MALUS;
		}
			
		if( _param_[ TRAIT_FINESSE ] != 0 )
		{
			_param_[ ST_CRITICAL_CHANCE ] += FINESSE_CRITCHANCE_BONUS;
		}

		#ifdef __CLIENT
			// Runtime calculations, only for client registration
			// Check _defines.fos for stat defines, ctrl+f "Critter Stats Constants"
			_param_[ ST_ARMOR_CLASS ] += ARMOR_CLASS_BASE + _param_[ ST_AGILITY ] * ARMORCLASS_PER_AGI;
			_param_[ ST_MAX_LIFE ] = HITPOINTS_BASE + ( _param_[ ST_ENDURANCE ] * HITPOINTS_PER_END ) + ( _param_[ ST_STRENGTH ] * HITPOINTS_PER_STR ) - ( _param_[ TRAIT_SEX_APPEAL ] * SEX_APPEAL_HP_MALUS );
			_param_[ ST_ACTION_POINTS ] += APPOINTS_BASE;
			_param_[ ST_CARRY_WEIGHT ] += 1000 * ( CW_BASE + (_param_[ ST_STRENGTH ] * ( CW_PER_STR - _param_[ TRAIT_SMALL_FRAME ] * SMALL_FRAME_CW_MALUS_DIV ) ) );
			_param_[ ST_MELEE_DAMAGE ] += _param_[ TRAIT_NERD ] == 0 ? ( MELEE_DAMAGE_BASE + ( _param_[ ST_STRENGTH ] * MELEE_DAMAGE_PER_STR ) ) : 0;
			_param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] 	* POISON_RESIST_PER_END;
			_param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] 	* RADIATION_RESIST_PER_END;
			_param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * SEQUENCE_PER_PE;
			_param_[ ST_APREGEN ] = APREGEN_BASE;
			_param_[ ST_HEALING_RATE ] += HEALINGRATE_BASE + _param_[ ST_ENDURANCE ] * HEALINGRATE_PER_END;
			_param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ] * CRITCHANCE_PER_LUCK;
		#endif

		_param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
		_param_[ ST_EXPERIENCE_MULTIPLIER ] = 1;

		_param_[ ST_HUNGER ] = 1000;
		_param_[ ST_THIRST ] = 1000;
		_param_[ ST_DYSPNEA ] = 1000;
		_param_[ ST_SPEED_MOD ] = 100;
	}

#ifdef __CLIENT
	// Check valid of input data
	bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
	{
		// Check special
		int special = 0;
		for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
		{
			if( data[ i ] < 1 || data[ i ] > 10 )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
				return false;
			}
			special += data[ i ];
		}
		
		if( special != __StartSpecialPoints )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
			return false;
		}
		
		if( data[ TRAIT_BRUISER ] != 0 && data[ ST_STRENGTH ] < 5 )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_REG_BRUISER_SUM ) );
			return false;
		}
		
		if( data[ TRAIT_SMALL_FRAME ] != 0 && data[ ST_AGILITY ] < 3 )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_REG_SMALL_FRAME_SUM ) );
			return false;
		}
		
		if( data[ TRAIT_NERD ] != 0 && data[ ST_INTELLECT ] < 7 )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_REG_NERD_SUM ) );
			return false;
		}
		
		if( data[ TRAIT_SEX_APPEAL ] != 0 && data[ ST_CHARISMA ] < 4 )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_REG_SEX_APPEAL_SUM ) );
			return false;
		}
		
		// Check choosed tag skills
		if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
			( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
			( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) ||
			isDisabledSkill( data[ TAG_SKILL1 ] ) || isDisabledSkill( data[ TAG_SKILL2 ] ) || isDisabledSkill( data[ TAG_SKILL3 ] ) ||
			isFarmingSkill( data[ TAG_SKILL1 ] ) || isFarmingSkill( data[ TAG_SKILL2 ] ) || isFarmingSkill( data[ TAG_SKILL3 ] ) )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
			return false;
		}

		// Check trait combination
		if( ( data[ TRAIT_CHEM_RELIANT ] != 0 && data[ TRAIT_CHEM_RESISTANT ] != 0 ) 
			|| ( data[ TRAIT_SMALL_FRAME ] != 0 && data[ TRAIT_BRUISER ] != 0 )
			|| ( data[ TRAIT_HEAVY_HANDED ] != 0 && data[ TRAIT_NERD ] != 0 ) )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_TRAIT_COMBO ) );
			return false;
		}

		if( data[ ST_GENDER ] == 0 )
		{
			if( ( ( data[ ST_BODY_TYPE ] >= 33 && data[ ST_BODY_TYPE ] <= 38 ) || data[ ST_BODY_TYPE ] == 61 || data[ ST_BODY_TYPE ] == 63 || data[ ST_BODY_TYPE ] == 73 || data[ ST_BODY_TYPE ] == 74 || data[ ST_BODY_TYPE ] == 83 || data[ ST_BODY_TYPE ] == 94 ) )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
				return false;
			}
		}
		else
		{
			if( data[ ST_BODY_TYPE ] == 31 || ( data[ ST_BODY_TYPE ] >= 39 && data[ ST_BODY_TYPE ] <= 45 ) || data[ ST_BODY_TYPE ] == 48 || data[ ST_BODY_TYPE ] == 56 || data[ ST_BODY_TYPE ] == 57 || data[ ST_BODY_TYPE ] == 62 || data[ ST_BODY_TYPE ] == 64 || data[ ST_BODY_TYPE ] == 72  || data[ ST_BODY_TYPE ] == 77 ||
				data[ ST_BODY_TYPE ] == 78 || data[ ST_BODY_TYPE ] == 82 || data[ ST_BODY_TYPE ] == 84 || data[ ST_BODY_TYPE ] == 87 || data[ ST_BODY_TYPE ] == 88 || data[ ST_BODY_TYPE ] == 89 || data[ ST_BODY_TYPE ] == 91 || data[ ST_BODY_TYPE ] == 92 || data[ ST_BODY_TYPE ] == 93 || data[ ST_BODY_TYPE ] == 96 || data[ ST_BODY_TYPE ] == 98 )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
				return false;
			}
		}

		if( data[ ST_BODY_TYPE ] == 0 )
		{
			data[ ST_BODY_TYPE ] = ( data[ ST_GENDER ] == 0 ? 62 : 61 );
		}

		return true;
	}
#endif

#ifdef __CLIENT
	# define Critter    CritterCl
#endif

// Check _defines.fos for stat defines, Critter Stats Constants
int getParam_MaxLife( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_MAX_LIFE ] + cr.StatBase[ ST_MAX_LIFE_EXT ] + HITPOINTS_BASE + (cr.Stat[ ST_STRENGTH ] * HITPOINTS_PER_STR) + (cr.Stat[ ST_ENDURANCE ] * HITPOINTS_PER_END); // Roleplay */
    return CLAMP( val, 1, 9999 );
}

int getParam_MaxAp( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_ACTION_POINTS ] + cr.StatBase[ ST_ACTION_POINTS_EXT ] + APPOINTS_BASE;
    return CLAMP( val, 1, 9999 );
}

int getParam_CR_HUNGER_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_HUNGER_SPEED ];
	if( val == 0 )
	{
		return 60 * CLAMP( int( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ) ), 1, 25 );
	}
	if( val == -1 )
	{
		return 0;
	}
	return val;
}

int getParam_CR_THIRST_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_THIRST_SPEED ];
	if( val == 0 )
	{
		return 60 * CLAMP( int( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ) ), 1, 25 );
	}
	if( val == -1 )
	{
		return 0;
	}
	return val;
}

int getParam_CR_DRUNK_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_DRUNK_SPEED ];
	if( val == 0 )
	{	
		return 60 * CLAMP( int( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ) ), 1, 25 );
	}
	return val;
}

int getParam_CR_GLOBAL_OVERDOSE_SPEED( Critter& cr, uint)
{
    int val = cr.ParamBase [ CR_GLOBAL_OVERDOSE_SPEED ];
    if( val == 0 )
	{
		return CLAMP( int( ( 4000 - ( cr.Stat[ ST_ENDURANCE ] * 100 ) - ( cr.Stat[ ST_STRENGTH ] * 100 ) ) * ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) ), 1000, 10000 );
	}
    return 1000;
}

int getParam_CR_WETNESS_SPEED( Critter& cr, uint)
{
    return 120000;
}


int getParam_Sequence( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_SEQUENCE ] + cr.StatBase[ ST_SEQUENCE_EXT ] + cr.Stat[ ST_PERCEPTION ] * SEQUENCE_PER_PE;
    return CLAMP( val, 0, 9999 );
}

int getParam_MeleeDmg( Critter& cr, uint )
{
    int val = cr.Trait[ TRAIT_NERD ] == 0 ? ( cr.StatBase[ ST_MELEE_DAMAGE ] + cr.StatBase[ ST_MELEE_DAMAGE_EXT ] + MELEE_DAMAGE_BASE ) : 0; 
    return CLAMP( val, 1, 9999 );
}

int getParam_MaxWeight( Critter& cr, uint )
{
    int val = MAX( cr.StatBase[ ST_CARRY_WEIGHT ] + cr.ParamBase[ ST_CARRY_WEIGHT_EXT ], 0 );
    val += 1000 * ( CW_BASE + ( cr.Stat[ ST_STRENGTH ] * ( CW_PER_STR - cr.Trait[ TRAIT_SMALL_FRAME ] * SMALL_FRAME_CW_MALUS_DIV ) ) ); //40% carryweight loss from each Strength point if you have SMALL_FRAME
    return CLAMP( val, 0, 2000000000 );
}

int getParam_HealingRate( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_HEALING_RATE ] + cr.StatBase[ ST_HEALING_RATE_EXT ] + HEALINGRATE_BASE + cr.Stat[ ST_ENDURANCE ] * HEALINGRATE_PER_END;
    return CLAMP( val, 0, 9999 );
}

int getParam_CriticalChance( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_CRITICAL_CHANCE ] + cr.StatBase[ ST_CRITICAL_CHANCE_EXT ] + cr.Stat[ ST_LUCK ] * CRITCHANCE_PER_LUCK;
    return CLAMP( val, 0, 100 );
}

#endif //PARAMETERS