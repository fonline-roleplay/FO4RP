#ifndef DIALOG
#define DIALOG

#include "_utils.fos"
#include "stdlib_h.fos"
#include "gateway_h.fos"
#include "_npc_pids.fos"
#include "effects_h.fos"
#include "critter_status_h.fos"
#include "drugs_h.fos"

#define MAX_UINT	65535

bool d_closerThan( Critter& player, Critter@ npc, int distance )
{
	return GetDistantion( player.HexX, player.HexY, npc.HexX, npc.HexY ) < uint(distance);
}

bool d_furtherThan( Critter& player, Critter@ npc, int distance )
{
	return GetDistantion( player.HexX, player.HexY, npc.HexX, npc.HexY ) > uint(distance);
}

//~run dialog giveMoney amount targetID 0
void giveMoney( Critter& cr, int amount, int targetID, int )
{
	cr.Say( SAY_NETMSG, "Trying to take out " + amount + "$ worth of cash." );

	if( targetID == 0 ) targetID = cr.Id;
	Critter@ target = GetCritter( targetID );
	
	bool result = giveMoney( cr, target, amount );
}

void r_giveMoney( Critter& player, Critter@ npc, int amount )
{
	bool result = giveMoney( player, npc, amount );
}

bool d_gotMoney( Critter& player, Critter@ npc, int amount )
{
	return gotMoney( player, amount, npc.ModeBase[ MODE_BARTER_ONLY_CASH ] );
}

bool d_notEnoughMoney( Critter& player, Critter@ npc, int amount )
{
	return !gotMoney( player, amount, npc.ModeBase[ MODE_BARTER_ONLY_CASH ] );
}

bool d_StatLowerThan( Critter& player, Critter @npc, int stat, int value )
{
    return player.StatBase[ stat ] < value;
}

bool d_StatHigherThan( Critter& player, Critter @npc, int stat, int value )
{
    return player.StatBase[ stat ] > value;
}

bool d_StatEqualsTo( Critter& player, Critter @npc, int stat, int value )
{
    return player.StatBase[ stat ] == value;
}

bool d_StatIsNot( Critter& player, Critter @npc, int stat, int value )
{
    return player.StatBase[ stat ] != value;
}

bool d_CheckMonth( Critter& player, Critter @npc, int monthFrom, int monthTo )
{
    return ( int( __Month ) <= monthTo && int( __Month ) >= monthFrom );
}

void r_setSkin( Critter& player, Critter@ npc, int skin )
{
	npc.StatBase[ ST_BODY_TYPE ] = skin;
	npc.ChangeCrType( skin );
}

bool d_isGM( Critter& player, Critter@ npc )
{
	return isGM( player );
}

bool d_isOwner( Critter& player, Critter@ npc )
{
    return uint( npc.Stat[ ST_FOLLOW_CRIT ] ) == player.Id;
}

bool d_isNotOwner( Critter& player, Critter@ npc )
{
    return !d_isOwner( player, npc );
}

void r_isOwner( Critter& player, Critter@ npc )
{
	ShowContainer( player, npc, TRANSFER_FAR_CRIT );
}

void r_setOwner( Critter& player, Critter@ npc )
{
    npc.StatBase[ ST_FOLLOW_CRIT ] = player.Id;
}

void r_clearOwner( Critter& player, Critter@ npc )
{
    npc.StatBase[ ST_FOLLOW_CRIT ] = 0;
}

void r_setOwner( Critter& player, Critter@ npc, int owner_id )
{
	if( !setOwner( player, npc, owner_id ) )
		player.Say( SAY_NETMSG, "Что-то пошло не так." );
}

bool setOwner( Critter& player, Critter@ npc, int owner_id )
{
    if( owner_id == 0 ) 
		return testInfo( player, "owner.ID == 0" );

	Critter@ owner = GetCritter( owner_id );
	if( !valid( owner ) )
		return testInfo( player, "!valid(owner)" );

	Map@ ownerMap = owner.GetMap();
	Map@ npcMap = npc.GetMap();
	if( !valid( ownerMap ) || !valid( npcMap ) || ownerMap.Id != npcMap.Id )
		return testInfo( player, "!valid(maps) or differend maps" );

	if( GetDistantion( owner.HexX, owner.HexY, npc.HexX, npc.HexY ) > 15 )
		return testInfo( player, "Too far away." );
		
	npc.StatBase[ ST_FOLLOW_CRIT ] = owner.Id;
	return true;
}


bool d_hasItems( Critter& player, Critter@ npc, int pid, int amount )
{
    return player.Param[ QST_GAMEMODE ] == GAME_TEST || player.CountItem( pid ) >= uint( CLAMP( amount, 0, MAX_UINT ) );
}


//import bool d_freeRide( Critter& player, Critter@ npc ) from "dialog";
bool d_freeRide( Critter& player, Critter@ npc ) //exported
{
    return( player.KarmaBase[ KARMA_CHAMPION ] != 0 || player.KarmaBase[ KARMA_VC_GUARDSMAN ] != 0 );
}

void r_SwapCashOnly( Critter& player, Critter@ npc )
{
	npc.ModeBase[ MODE_BARTER_ONLY_CASH ] = ( npc.ModeBase[ MODE_BARTER_ONLY_CASH ] + 1 ) % 3;
	string text = "к сведению";
	switch( npc.ModeBase[ MODE_BARTER_ONLY_CASH ] )
	{
		case(0): text = "бартер"; break;
		case(1): text = "только золото и доллары"; break;
		case(2): text = "любую валюту"; break;
	}
	npc.Say( SAY_NORM, "О-кей, принимаю " + text + "." );
}

bool d_canBarter( Critter& player, Critter@ npc )
{
	return( npc.ModeBase[ MODE_NO_BARTER ] == 0 );
}

bool d_noBarter( Critter& player, Critter@ npc )
{
	return( npc.ModeBase[ MODE_NO_BARTER ] != 0 );
}

void r_SwapBarter( Critter& player, Critter@ npc )
{
	npc.ModeBase[ MODE_NO_BARTER ] = CLAMP( 1 - npc.ModeBase[ MODE_NO_BARTER ], 0, 1 );
	npc.Say( SAY_NORM, "О-кей, " + ( npc.ModeBase[ MODE_NO_BARTER ] != 0 ? "прекращаю" : "начинаю" ) + " торговлю." );
}

void r_SetNPCBarterSkill( Critter& player, Critter@ npc )
{
	player.ParamBase[ CR_VAL0 ] = npc.Id;
	player.ShowScreen( SCREEN_SAY, 0, "dialog@ask_SetNPCBarterSkill" );
	player.Say( SAY_SAY_TITLE, "Навык [0-300]:" );
}

bool d_isFollowing( Critter& player, Critter@ npc )
{
	return( npc.ModeBase[ MODE_NO_HOME ] != 0 );
}

bool d_isStanding( Critter& player, Critter@ npc )
{
	return( npc.ModeBase[ MODE_NO_HOME ] == 0 );
}

void r_DropMoving( Critter& player, Critter@ mob )
{
}

void r_SetFollow( Critter& player, Critter@ mob )
{
}

void ask_SetNPCBarterSkill( Critter& player, uint answerI, string& answerS )
{
	Critter@ npc = GetCritter( player.ParamBase[ CR_VAL0 ] );
	
	int skill = 0;
	
	if( !StrToInt( answerS, skill ) || skill < 0 || skill > 300 )
	{
		player.Say( SAY_NETMSG, "Навык должен быть в диапазоне от 0 до 300." );
		r_SetNPCBarterSkill( player, npc );
		return;
	}
	if( skill > player.SkillBase[ SK_BARTER ] )
	{
		player.Say( SAY_NETMSG, "Вы не можете выставить навык выше своего. Ищите умелого торговца." );
		r_SetNPCBarterSkill( player, npc );
		return;
	}
	npc.SkillBase[ SK_BARTER ] = skill;
	npc.Say( SAY_NORM, "О-кей, я изменю расценки." );
	RunDialog( player, npc, true );
}

void r_CashBack( Critter& player, Critter@ npc )
{	
    Item@[] items;
	npc.GetItems( SLOT_INV, items );
	npc.GetItems( SLOT_HAND1, items );
	npc.GetItems( SLOT_HAND2, items );
	MoveItems( items, player );
	player.Say( SAY_EMOTE, "Забирает выручку" );
}

void r_ChangeBarter( Critter& player, Critter@ npc )
{	
	npc.ModeBase[ MODE_NO_BARTER ] = npc.ModeBase[ MODE_NO_BARTER ] == 0 ? 1 : 0;
	player.Say( SAY_NETMSG, "Меняла теперь " + ( npc.ModeBase[ MODE_NO_BARTER ] == 1 ? "не " : "") + "торгует. " );
}

int DFGroupCount( Critter& player, Critter@ npc )
{
    Critter @ leader;
    if( not valid( player.GetFollowLeader() ) ) // если у игрока нет лидера
        @leader = player;                       // тогда считаем что он и есть лидер
    else
        @leader = player.GetFollowLeader();     // иначе берем лидера

    Critter@[] groups;
    groups.insertLast( @leader );
    leader.GetFollowGroup( FIND_LIFE, groups );
    return groups.length();
}

// !/ Размер группы больше >=VAL
bool d_GroupCountMore( Critter& player, Critter@ npc, int val )
{
    return DFGroupCount( player, npc ) >= val;
}

bool d_GroupCountLess( Critter& player, Critter@ npc, int val )
{
    return DFGroupCount( player, npc ) < val;
}

// !/ У всех уровень больше >=VAL
// Проверка что все игроки в группе больше или равны указанному уровню.
bool d_GroupLevelMore( Critter& player, Critter@ npc, int val )
{
    Critter@[] groups;
    groups.insertLast( @player );
    player.GetFollowGroup( FIND_LIFE, groups );
    for( uint i = 0; i < groups.length(); i++ )
        if( groups[ i ].Stat[ ST_LEVEL ] < val ) // если хотябы один из них меньше требуемого уровня
            return false;
    return true;
}

bool d_GroupLevelLess( Critter& player, Critter@ npc, int val )
{
    Critter@[] groups;
    groups.insertLast( @player );
    player.GetFollowGroup( FIND_LIFE, groups );
    for( uint i = 0; i < groups.length(); i++ )
        if( groups[ i ].Stat[ ST_LEVEL ] > val ) // если хотябы один из них меньше требуемого уровня
            return false;
    return true;
}

// Игроку известна эта локация?
bool d_IsLocationVisible( Critter& player, Critter@ npc, int LocNum )
{
    return player.IsKnownLoc( false, uint16( LocNum ) );
}

// Игроку НЕ известна эта локация?
bool d_IsLocationNotVisible( Critter& player, Critter@ npc, int LocNum )
{
    return not player.IsKnownLoc( false, uint16( LocNum ) );
}

// Есть зависимости от наркотиков?
bool d_IsAddict( Critter& player, Critter@ npc )
{
    for( uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ )
        if( player.Addiction[ i ] != 0 )
            return true;
    return false;
}

void r_ClearAddictions( Critter& player, Critter@ npc )
{
	clearDrugs( player );
}

// У игрока нет зависимостей от наркотиков?
bool d_IsNotAddict( Critter& player, Critter@ npc )
{
    return not d_IsAddict( player, npc );
}

// Игрок в группе? (лидер тоже считаеться)
bool d_GroupPresent( Critter& player, Critter@ npc )
{
    return DFGroupCount( player, npc ) > 1;
}

// Игрок НЕ в группе? (лидер тоже считаеться)
bool d_NotGroupPresent( Critter& player, Critter@ npc )
{
    return not d_GroupPresent( player, npc );
}

// Отложенная всплывающая строка над нпц
void r_SayMessageDelayed( Critter& player, Critter @ npc, int strNum, int delaySeconds, int sayType )
{
    if( !valid( npc ) )
        return;
    uint[] values = { npc.Id, uint( sayType ), uint( strNum ) };
    CreateTimeEvent( __FullSecond + delaySeconds, "e_SayMessage", values, true );
}

uint e_SayMessage( uint[] @ values )
{
    if( values.length() < 3 )
        return 0;
    Critter @ cr = GetCritter( values[ 0 ] );
    if( !valid( cr ) )
        return 0;
    int did = cr.Stat[ ST_DIALOG_ID ];
    if( did == 0 )
        return 0;
    cr.SayMsg( values[ 1 ], TEXTMSG_DLG, DLGSTR( did, values[ 2 ] ) );
    return 0;
}

void dlg_ForSearching( Critter& player, Critter@ barman, string@ playerName )
{
    if( !valid( barman ) )
        return;
    if( !IS_DIALOG_SAY_MODE( playerName ) || IS_DIALOG_END( playerName ) )
        return;
    if( playerName.length() <= 1 )
        return;
    uint   BankerDialog = barman.Stat[ ST_DIALOG_ID ];
    uint   DlgStr = 200;
    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;
    // Пол бармена.
    if( barman.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 10 ) + "@";
    }
    else
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 9 ) + "@";
    }
    // Игрок не найден.
    Critter@ cr = GetPlayer( playerName );
    if( !valid( cr ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 0 ), lexems );
        return;
    }
    // Пол запрашиваемого криттера.
    if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 8 ) + "@";
    }
    else
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 7 ) + "@";
    }
    player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 11 ), lexems );
    return;
}

void dlg_TrySearching( Critter& player, Critter@ barman, string@ playerName )
{

    #define LOC_NAME    # (mapId)                       ( ( mapId + 100 ) * 1000 ) // поиск названия локации в файле FOGM.msg
    if( !valid( barman ) )
        return;
    if( !IS_DIALOG_SAY_MODE( playerName ) || IS_DIALOG_END( playerName ) )
        return;
    if( playerName.length() <= 1 )
        return;
    uint   BankerDialog = barman.Stat[ ST_DIALOG_ID ];
    uint   DlgStr = 200;
    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;
    // Пол бармена.
    if( barman.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 10 ) + "@";
    }
    else
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 9 ) + "@";
    }
    // Игрок не найден.
    Critter@ cr = GetPlayer( playerName );
    if( !valid( cr ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 0 ), lexems );
        return;
    }
    // Пол запрашиваемого криттера.
    if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 8 ) + "@";
    }
    else
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 7 ) + "@";
    }
    // Игрок спрашивает о самом себе.
    if( player.Id == cr.Id )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 1 ) );
        return;
    }
    // Криттер на глобале.
    Map@ map = cr.GetMap();
    if( !valid( map ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 2 ), lexems );
        return;
    }
    // Локация, где находится криттер. Диапазоны PID: до 150 и 210-235. Города и репликации.
    if( cr.GetMap().GetLocation().GetProtoId() < 50 || cr.GetMap().GetLocation().GetProtoId() >= 200 )
    {
        lexems += "$Place @msg GM " + LOC_NAME( cr.GetMap().GetLocation().GetProtoId() ) + "@";
        // Криттер находится в той же локации, что и игрок.
        if( barman.GetMap().GetLocation().Id == cr.GetMap().GetLocation().Id )
        {
            player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 3 ), lexems );
            return;
        }
        // Криттер найден, лексемы сформированы - даем информацию.
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 4 + Random( 0, 2 ) ), lexems );
    }
    else
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 2 ), lexems );
        return;
    }
}

bool d_ToHeal_Bullet( Critter& player, Critter@ npc )
{
	return FLAG( player.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER );
}

void r_ToHeal_Bullet( Critter& player, Critter@ npc )
{
	ChangeStatus( player, CR_STATUS_BULLET_OVER, 0, false );
}

bool d_ToHeal_Bleed( Critter& player, Critter@ npc )
{
	return player.StatBase[ ST_BLEED ] > 0;
}

void r_ToHeal_Bleed( Critter& player, Critter@ npc )
{
	player.StatBase[ ST_BLEED ] = 0;
}

bool d_ToHeal_Heavy( Critter& player, Critter@ npc )
{
	return FLAG( player.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG );
}

void r_ToHeal_Heavy( Critter& player, Critter@ npc )
{
	ChangeStatus( player, CR_STATUS_HEAVY_DMG, 0, false );
}

bool d_IsToHeal( Critter& player, Critter@ npc )
{
    return player.Stat[ ST_CURRENT_HP ] < ( player.Stat[ ST_MAX_LIFE ] + player.Stat[ ST_MAX_LIFE_EXT ] ) ;
}

void r_ToHeal_HP( Critter& player, Critter@ npc )
{
    player.StatBase[ ST_CURRENT_HP ] = ( player.Stat[ ST_MAX_LIFE ] + player.Stat[ ST_MAX_LIFE_EXT ] );
}

void r_ToHeal( Critter& player, Critter@ npc )
{
    player.StatBase[ ST_CURRENT_HP ] = ( player.Stat[ ST_MAX_LIFE ] + player.Stat[ ST_MAX_LIFE_EXT ] );
}

void r_ShowLocation( Critter& player, Critter@ npc, int locNum )
{
    player.SetKnownLoc( false, uint16( locNum ) );
}

void r_FadeOut( Critter& player, Critter@ npc, int time )
{
    if( time == 0 )
        time = 2000;
    FlushScreen( player, false, time );
}

void r_TransitToGlobal( Critter& player, Critter@ npc )
{
    player.TransitToGlobal( false );
}

void r_TransitToLocation( Critter& player, Critter@ npc, int locPid, int mapIndex )
{
    TransitToLoc( player, locPid, mapIndex, 0 );
}

void r_InfoMessage( Critter& player, Critter@ npc, int strNum )
{
    InfoMessage( player, npc, strNum );
}

void r_DoorOpen( Critter& player, Critter@ npc, int entireNum )
{
    DoorControl( player, entireNum, true );
}

void r_DoorClose( Critter& player, Critter@ npc, int entireNum )
{
    DoorControl( player, entireNum, false );
}

//Диалоговые скрипты на сессию Ривердейла
//Условия для терминала с пропусками, для кассира и для роботов стражей

bool d_hasKey( Critter& player, Critter@ npc )
{	
    return player.CountItem( npc.SECURITY_ACCESS_CARD ) > 0;
}

bool d_noKey( Critter& player, Critter@ npc )
{
    return player.CountItem( npc.SECURITY_ACCESS_CARD ) == 0;	
}

bool d_chance( Critter& player, Critter@ npc, int val )
{
    return player.ParamBase[ CR_CHANCE ] <= val;
}

void r_chance( Critter& player, Critter@ npc, int val )
{	
	player.ParamBase[ CR_CHANCE ] = Random( 0, val );
}

void r_alarm( Critter& player, Critter@ npc )
{	
}

uint cte_forget (Critter& cr, int identifier, uint& rate) {
	return 0;
}

bool d_has_100_NCR_Dollars( Critter& player, Critter@ npc ) 
{
	if( player.CountItem( PID_DOLLAR_100 ) > 0 ) 
	{
		return true;
	}
	
	return false;
}

bool d_has_NOT_100_NCR_Dollars( Critter& player, Critter@ npc ) 
{
	if( player.CountItem( PID_DOLLAR_100 ) == 0 ) 
	{
		return true;
	}
	
	return false;
}

bool d_has_Tickets_In_Cass( Critter& player, Critter@ npc ) 
{
	if( npc.CountItem( PID_KOKOWEEF_MINE_SCRIP ) > 0 ) 
	{
		return true;
	}
	
	return false;
}

bool d_has_NOT_Tickets_In_Cass( Critter& player, Critter@ npc ) 
{
	if( npc.CountItem( PID_KOKOWEEF_MINE_SCRIP ) == 0 ) 
	{
		return true;
	}
	
	return false;
}

bool d_p_has_Ticket( Critter& player, Critter@ npc ) 
{
	if( player.CountItem( PID_KOKOWEEF_MINE_SCRIP ) > 0 ) 
	{
		return true;
	}
	
	return false;
}

bool d_p_has_NOT_Ticket( Critter& player, Critter@ npc ) 
{
	if( player.CountItem( PID_KOKOWEEF_MINE_SCRIP ) == 0 ) 
	{
		return true;
	}
	
	return false;
}

void r_Get_Terminal_Num( Critter& player, Critter@ npc ) 			
{
	player.ParamBase[ ST_VAR7 ] = npc.Id;							
	player.ParamBase[ ST_VAR8 ] = 1;								
	
	//Log( "Айди аппарата"+player.ParamBase[ ST_VAR7 ] );				
}

void r_Clear_Terminal_Num( Critter& player, Critter@ npc ) 
{
	player.ParamBase[ ST_VAR7 ] = 0;							
	player.ParamBase[ ST_VAR8 ] = 0;								
	
	//Log( "Айди аппарата"+player.ParamBase[ ST_VAR7 ] );				
}

bool d_p_has_Ticket_Tape( Critter& player, Critter@ npc ) 
{
	if( player.CountItem( PID_CASH_TAPE ) >= 1 ) 
	{
		return true;
	}
	
	return false;
}

bool d_Get_Ticket_Tape( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[ ST_VAR7 ] != 0 && player.ParamBase[ ST_VAR8 ] == 1 ) 
	{
		return true;
	}
	
	return false;
}

//Условия для диалога "Дверь драг-пушера"
//-------------------------------------------------------------------------

//Проверка "свой-чужой"
bool d_Is_Trust_Level( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[CR_TRUST_LEVEL] != 1 ) 
	{
		return true;
	}
	
	return false;
}

//Логика двери
void r_Trust_Level_Is_Ok( Critter& player, Critter@ npc ) 
{	
	if( player.ParamBase[CR_TRUST_LEVEL] == 1 ) 
	{
		SecurityDoorOpenClose( player );
	}
}

//НПЦ проверяет похож ли собеседник на копа
bool d_is_Look_like_Cop( Critter& player, Critter@ npc ) 
{//Надо переделать по хорошему на проверку параметра "коп", который вешаается звездой шерифа
	if( player.CountItem( PID_GUARD_BADGE ) > 0 || player.CountItem( PID_SHER_BADGE ) > 0 || player.CountItem( PID_SHERIFF_BADGE ) > 0 || player.CountItem( PID_COMBAT_ARMOR_MK1 ) > 0 || player.CountItem( PID_POLICE_ARMOR ) > 0 || player.CountItem( PID_RIOT_ARMOR ) > 0 || player.CountItem( PID_POLICE_JACKET ) > 0 ) 
	{
		return true;
	}
	
	return false;
}

//-------------------------------------------------------------------------


//Гули-вендоры
//Проверка харизмы для возможности торговать с гулями вендорами
//-------------------------------------------------------------------------
bool d_you_are_pretty( Critter& player, Critter@ npc ) 
{
	int charisma_summ = player.ParamBase[ST_CHARISMA] + player.ParamBase[ST_CHARISMA_EXT];
	
	if( player.ParamBase[ST_CHARISMA] < 3 ) 
	{
		if( player.ParamBase[ST_BODY_TYPE] == 3 || player.ParamBase[ST_BODY_TYPE] == 4 )
		{
			return true;
		}
		
		if( charisma_summ >= 3 ) 
		{
			return true;
		}
		
		return false;
	}
	
	return true;
}

bool d_you_not_pretty( Critter& player, Critter@ npc )
{
	if( !d_you_are_pretty( player, npc )) 
	{
		return true;
	}
	
	return false;
}
//-------------------------------------------------------------------------

//Проверка интеллекта для возможности торговать с гулями вендорами
//-------------------------------------------------------------------------
bool d_are_you_dumb( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[ST_INTELLECT] > 3 ) 
	{
		return false;
	}
	
	return true;
}

bool d_you_not_dumb( Critter& player, Critter@ npc )
{
	if( !d_are_you_dumb( player, npc )) 
	{
		return true;
	}
	
	return false;
}
//-------------------------------------------------------------------------

//Вывод фраз над головой вендора при закрытии диалога
//-------------------------------------------------------------------------
void r_reaction_attack( Critter& player, Critter@ npc ) 			
{
	string[] attack_phrases_ghoul = { 	"Я тебя щас свинцом нашпигую!",
										"Таких уродов как ты - надо отстреливать!",
										"Щааааа, разберемся..., Джентельмены, этого позвольте пристрелить мне.",
										"Ну и развелось же уродов, мать вашу!**Шмаляет от бедра**",
										"В мое время старших уважали, щас я тебя проучу!", };
										
	string[] attack_phrases_mutant = { 	"**Набросился на вас с кувалдой без слов**",
										"Ненавижу уродов...",
										"Ты пожалеешь...**Махнул кувалдой в Вашу сторону**",
										"Как же вы меня достали...",
										"Это будет быстро..**Накинулся на вас с кувалдой**", };
	
	if( npc.ParamBase[ST_BODY_TYPE] == 3 ) 
	{
		npc.Say( SAY_NORM, attack_phrases_mutant[ Random( 0, attack_phrases_mutant.length() )] );
	}
	else if ( npc.ParamBase[ST_BODY_TYPE] == 4 ) 
	{
		npc.Say( SAY_NORM, attack_phrases_ghoul[ Random( 0, attack_phrases_ghoul.length() )] );
	}
	
}

void r_reaction_leave_me_alone( Critter& player, Critter@ npc ) 			
{
	string[] leave_me_alone_phrases_ghoul = { 	"Слушай, мне некогда страдать этим дерьмом, проваливай, если не хочешь нормально бизнес вести.",
												"Чертовы дикарины...",
												"Я говорю только на двух языках, на обычном и на неприличном. Ваше «моя-твоя» - не понимаю.",
												"**Не обращает на вас внимания, вернувщись к своим делам**", };
												
	string[] leave_me_alone_phrases_mutant = { 	"С ходячим говном не говорю!",
												"Проваливай!**Взмахивает кувалдой**",
												"**Делает вид, будто бы вас не существует**",
												"Урод - прочь!",
												"Ушел отсюда...**Схватился крепче за кувалду**",
												"Глаза не мозоль. Ушёл!",
												"**При виде Вас перехватил кувалду двумя руками, хмуро глядит**",
												"А я думал, что я - уродлив...**Смотрит угрюмо, словно готов убить**",
												"Выход - там.**Махнул кувалдой в сторону**",
												"«Твоя-моя»... Научишься разговаривать - приходи.",
												"Тупорогие образины...**Продолжил ковать**", 
												"Дикари... Хмыкнув, вернулся к ковке", 
												"**Не обращает на вас внимания, вернувщись к своей работе**",
												"Развелось придурков...",
												"Я. Тебя. Не. Понимаю.", 
												"Проваливай, мне некогда с тупыми разговаривать.", };											
	
	if( npc.ParamBase[ST_BODY_TYPE] == 3 ) 
	{
		npc.Say( SAY_NORM, leave_me_alone_phrases_mutant[ Random( 0, leave_me_alone_phrases_mutant.length() )] );
	}
	else if ( npc.ParamBase[ST_BODY_TYPE] == 4 ) 
	{
		npc.Say( SAY_NORM, leave_me_alone_phrases_ghoul[ Random( 0, leave_me_alone_phrases_ghoul.length() )] );
	}
}
//-------------------------------------------------------------------------

//Проверка расы игрока перед началом диалога с вендором
//-------------------------------------------------------------------------
bool you_are_ghoul( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[ST_BODY_TYPE] == 4 ) 
	{
		return true;
	}
	
	return false;
}

bool you_are_supermutant( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[ST_BODY_TYPE] == 3 ) 
	{
		return true;
	}
	
	return false;
}

bool you_are_human( Critter& player, Critter@ npc ) 
{
	if( player.ParamBase[ST_BODY_TYPE] != 3 && player.ParamBase[ST_BODY_TYPE] != 4 ) 
	{
		return true;
	}
	
	return false;
}
//-------------------------------------------------------------------------

//Продажа товаров вендорам через диалог
//-------------------------------------------------------------------------
void r_sellItems( Critter& player, Critter@ npc, int pid, int amount, int price, int experience )
{
	//Проверка на то, что у персонажа есть достаточно товара на продажу.
	if( player.CountItem( pid ) < uint( CLAMP( amount, 0, MAX_UINT ) ) )
	{
		if( player.Param[ QST_GAMEMODE ] == GAME_TEST )
			player.AddItem( pid, amount ); //Если он тестер - то просто выдаём ему необходимое количество товара.
		else
		{
			player.Say( SAY_NETMSG, "У вас недостаточно товара для сдачи." );
			return; //Иначе - отменяем обмен.
		}
	}		
	
	Item@ goods = player.GetItem( pid, -1 );
	if( !valid( goods ) ) 
	{
		player.Say( SAY_NETMSG, "У вас нет этого товара." );
		return;
	}
	
	//Мы буквально ПЕРЕДАЕМ указанное количество предметов от игрока неписю.
	if( goods.IsStackable() )
		MoveItem( goods, amount, npc );
	else 
	{ //Даже если объекты не стакаются, мы всё равно их корректно обрабатываем.
		for( int countdown = 0; countdown < amount; countdown++ )
		{
			@goods = player.GetItem( pid, -1 );
			if( !valid( goods ) )
			{
				player.Say( SAY_NETMSG, "Вы не смогли передать товар №" + countdown + "." );
				return;
			}
			
			MoveItem( goods, 1, npc );
		}
	}
	
	player.StatBase[ ST_EXPERIENCE ] += experience;
	
	//И затем так же буквально ПЕРЕДАЕМ указанное количество монет (награды) от игрока неписю. Если у того их не хватает - "довыдаём" сверх того.
	Item@ cash = npc.GetItem( PID_BOTTLE_CAPS, -1 );
	int available = 0;

	if( valid( cash ) )
	{
		available = cash.GetCount();
		
		if( available < price )
		{
			player.AddItem( PID_BOTTLE_CAPS, price - available );
			MoveItem( cash, available, player );
		}
		else
			MoveItem( cash, price, player );
	}
	else
		player.AddItem( PID_BOTTLE_CAPS, price );

	//Для отладки и тестов:
	if( player.Param[ QST_GAMEMODE ] == GAME_TEST )
		player.Say( SAY_NETMSG, "Sold #" + pid + " x" + amount + " for " + price + "$ & " + experience + ", available cash " + available + "$" );
}

//~run dialog checkvar varID 0 0
void checkvar( Critter& cr, int varID, int, int )
{
    GameVar@ v = GetLocalVar( varID, cr.Id );
    if( !valid( v ) )
	{
        cr.Say( SAY_NETMSG, "Not found." );
        return;
    }
    
    cr.Say( SAY_NORM, "#" + varID + " = " + v.GetValue() );
}

void r_cd_quest( Critter& player, Critter@ npc, int time, int varID )
{
    GameVar@ var = GetLocalVar( varID, player.Id );
    uint[] values = { player.Id, npc.Id, varID };
    CreateTimeEvent( AFTER( REAL_MINUTE( time ) ), "e_reset_quest_var", values, true);
}

uint e_reset_quest_var( array<uint>@ values )
{    
    GameVar@ var = GetLocalVar( values[2], values[0] );
    var = 0;        
    return 0;
}

void r_cd_quest_global( Critter& player, Critter@ npc, int time, int varID )
{
    GameVar@ var = GetGlobalVar( varID );
    uint[] values = { player.Id, npc.Id, varID };
    CreateTimeEvent(AFTER(REAL_MINUTE(time)), "e_reset_quest_var_global", values, true);
}

uint e_reset_quest_var_global( array<uint>@ values )
{    
    GameVar@ var = GetGlobalVar( values[2] );
    var = 0;        
    return 0;
}

#endif //DIALOG