#ifndef ARMOR_EQUIP
#define ARMOR_EQUIP

#include "_utils.fos"
#include "_ltp.fos"

bool ltp_inited = false;

int armorDelay( Item& armor )
{
	uint16 pid = armor.GetProtoId();
	int delay = 1000;
	
	uint8 armor_material = _GetItemMaterial( armor );
	switch( armor_material )
	{
		case( MATERIAL_FABRIC ):
			delay = 500;
			break;
		case( MATERIAL_LEATHER ):
			delay = 1000;
			break;
		case( MATERIAL_ARMORED_LEATHER ):
			delay = 1500;
			break;
		case( MATERIAL_IRON ):
			delay = 2000;
			break;
		case( MATERIAL_POLYMER ):
			delay = 3000;
			break;
		case( MATERIAL_COMPOSITE ):
			delay = 5000;
			break;
		default:
			delay = 1000;
			break;
	}
	
	return delay;
}

void ltp_init()
{
    LTPREG( LTP_ARMOR_EQUIP, process_armor_equip )
    ltp_inited = true;
}

void TryEquipArmor( Critter& cr, Item& armor, uint8 toSlot )
{
	if(!valid(armor) || armor.CritId != cr.Id)
	{
		return;
	}

    if(!ltp_inited) 
	{
		ltp_init();
	}
	
	int armorMod = armorDelay( armor );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = armorMod - ((armorMod / 20) * cr.Stat[ST_AGILITY]);
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 0;
	StartProcess( cr, LTP_ARMOR_EQUIP, 0, armor.Id, toSlot, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
}

uint process_armor_equip( Critter@ cr, int& param0, int& armorId, int& toSlot )
{
	LTPROCESS( cr, param0, LTP_ARMOR_EQUIP )

	Item@ armor = GetItem( armorId );
	if(!valid(armor) || armor.CritId != cr.Id)
	{
		return 0;
	}

	cr.ParamBase[ST_CAN_EQUIP_ARMOR] = 1;
	cr.MoveItem(armorId, armor.GetCount(), toSlot);

	return 0;
}

#endif // ARMOR_EQUIP