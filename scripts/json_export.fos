/******************************************************************************
 *                                                                            *
 *  Functions imported via json_h.fos.                                        *
 *                                                                            *
 ******************************************************************************/

/**
  * Support for older SDK versions.
  */

#ifndef __VERSION
 #define _JSON_READSTRING_OLD
#endif

#ifdef __VERSION
 #if __VERSION < 475
  #define _JSON_READSTRING_OLD
 #endif
 #if __VERSION >= 475
  #define _JSON_READSTRING_475
 #endif
#endif

/**
 *  Parses a JSON text.
 *
 *  Takes a JSON text and produces a structure of JSON values.
 *  @param text JSON text.
 *  @return If parsing was successful returns a structure of JSON values,
 *  if there was an error returns Undefined value.
 */
JSON@ JSONParse(const string& text)
{
    if (@undefined == null)
    {
        @undefined = @Undefined();
    }
    array<Token@> tokens;
    if (tokenize(text, tokens))
    {
        return parse(@tokens);
    }
    return @undefined;
}

/**
 *  Loads a JSON file.
 *
 *  Loads a JSON text from a file and produces a structure of JSON values.
 *  @param  path Path to the JSON file.
 *  @return If parsing was successful returns a structure of JSON values,
 *  if there was an error returns Undefined value.
 */
JSON@ JSONLoad(const string& path)
{
    if (@undefined == null)
    {
        @undefined = @Undefined();
    }
    file f;
    if (f.open(path, "r") == 0)
    {
        int size = f.getSize();
        #ifdef _JSON_READSTRING_OLD
        string text = "";
        if (f.readString(size, text) == size && f.close() <= 0)
        #endif
        #ifdef _JSON_READSTRING_475
        // Skip sanity check due to differences in string::length() and file::getSize()
        string text = f.readString(size);
        f.close();
        #endif
        {
            return JSONParse(text);
        }
    }
    return @undefined;
}
