#ifndef SEX_MODULE
#define SEX_MODULE

#include "_utils.fos"
#include "sex_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"
#include "effects_h.fos"
#include "npc_planes_h.fos"
#include "drugs_h.fos"

void StartMenuSexPanel( Critter& cr, Critter& targetCr )
{
	resetVals( cr );
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }
	
	if( !valid( targetCr ) )
	{
		return;
	}
	
	if( !targetCr.IsPlayer() )
	{
		return;
	}
	
	if( targetCr.IsDead() )
	{
		return;
	}
	
	if( cr.Stat[ ST_BODY_TYPE ] == BT_CHILDREN || targetCr.Stat[ ST_BODY_TYPE ] == BT_CHILDREN )
	{
		return;
	}
	
	if( cr.Stat[ ST_AGE ] < SEX_ACCEPTANCE_AGE || targetCr.Stat[ ST_AGE ] < SEX_ACCEPTANCE_AGE )
	{
		return;
	}
	
    iMenuHandler@ handler = MenuSexPanel( map, targetCr );
    iDialogBox@ menu = OpenMenu( cr, "SexPanel", handler );
}

class MenuSexPanel: CenteredMenuHandler
{
    uint map_id;
	uint targetCr_id;
	int selectorPos;
	uint arrayPos;
	
    MenuSexPanel( Map& map, Critter& targetCr )
	{
        map_id = map.Id;
		targetCr_id = targetCr.Id;
		selectorPos = 0;
		arrayPos = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		Critter@ targetCr = GetCritter( targetCr_id );

		if( cr.Param[ SEX_PARTNER_STATE ] == SEX_PARTNER_DECLINE )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SEX_REJECT );
			resetVals( cr );
			return false;
		}
		else if( cr.Param[ SEX_PARTNER_STATE ] == SEX_PARTNER_AGREE )
		{
			return false;
		}
		
		if( MovementState( cr ) > MOVE_STATE_STILL || MovementState( targetCr ) > MOVE_STATE_STILL )
		{
			resetVals( cr );
			return false;
		}
		
		if( cr.Param[ SEX_OFFER_STATE ] != 1 )
		{
			if( hasItems( cr, Condoms, -1 ) )
			{
				uint protectionSex = cr.Param[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_NONE ? STR_NONE : STR_SEX_MENU_PROTECTION_CONDOM;
				string condom = "$protectionSex" + STR_INSERT_TEXT_LINE( protectionSex );
				
				if( menu.ButtonMsg( STR_SEX_MENU_PROTECTION, condom ) )
				{
					cr.ParamBase[ SEX_PROTECTION_STATE ] = cr.Param[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_NONE ? SEX_PROTECTION_CONDOM : SEX_PROTECTION_NONE;
					return true;
				}
			}
			
			uint mode = cr.Param[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK ? STR_SEX_MENU_BLACK_SCREEN : STR_SEX_MENU_ANIMATE;
			string sexMode = "$modeSex" + STR_INSERT_TEXT_LINE( mode );
			
			if( menu.ButtonMsg( STR_SEX_MENU_MODE, sexMode ) )
			{
				cr.ParamBase[ SEX_ANIMATE_STATE ] = cr.Param[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK ? SEX_STATE_ANIM : SEX_STATE_BLACK;
				if( cr.Param[ SEX_ANIMATE_STATE ] == SEX_STATE_ANIM )
				{
					cr.ParamBase[ SEX_POSITION ] = SEX_POSITION_CLASSIC;
				}
				return true;
			}
			
			if( cr.ParamBase[ SEX_ANIMATE_STATE ] == SEX_STATE_ANIM )
			{
				uint sexPosition = SexPositions[ cr.Param[ SEX_POSITION ] ];
				string position = "$positionSex " + STR_INSERT_TEXT_LINE( sexPosition );
				if( menu.ButtonMsg( STR_SEX_MENU_POSITION, position ) )
				{
					selectorPos++;
					if( arrayPos == SexPositions.length() -1 )
					{
						arrayPos = 0;
						selectorPos = arrayPos;
					}
					else
					{
						arrayPos = selectorPos;
					}
					cr.ParamBase[ SEX_POSITION ] = arrayPos;
					return true;
				}
			}

			if( menu.ButtonMsg( STR_SEX_MENU_MAKE_OFFER ) )
			{
				if( targetCr.IsPlayer() )
				{
					cr.ParamBase[ SEX_OFFER_STATE ] = SEX_OFFER_MADE;
					StartMenuAnswerSexPanel( targetCr, cr );
				}
				
				return true;
			}
		}
		
		if( menu.ButtonMsg( STR_CANCEL ) )
		{
			cr.ParamBase[ SEX_OFFER_STATE ] = SEX_OFFER_REVERT;
			resetVals( cr );
			return false;
		}
 		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_SEX_MENU_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
		
		uint offer = cr.Param[ SEX_OFFER_STATE ] != SEX_OFFER_MADE ? STR_SEX_MENU_MAKE_OFFER_DESC : STR_SEX_MENU_WAITING_RESPONSE;
		
		uint mode = cr.ParamBase[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK ? STR_SEX_MENU_BLACK_SCREEN : STR_SEX_MENU_ANIMATE;
		
		uint protection = cr.ParamBase[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_NONE ? STR_NONE : STR_SEX_MENU_PROTECTION_CONDOM;
		
		string info = 	"$descriptionSex" + STR_INSERT_TEXT_LINE( STR_SEX_MENU_DESCRIPTION ) + 
						"$offeredSexDesc" + STR_INSERT_TEXT_LINE( offer ) +
						"$modeSexDesc" 	  + STR_INSERT_TEXT_LINE( mode ) +
						"$protectionSexDesc" + STR_INSERT_TEXT_LINE( protection ) +
						"$positionSexDesc" + STR_INSERT_TEXT_LINE( SexPositions[ cr.ParamBase[ SEX_POSITION ] ] );
		return info;
    }

	bool ShouldRedraw( Critter& cr )
	{
		return true;
    }
}

void StartMenuAnswerSexPanel( Critter& targetCr, Critter& cr )
{
    Map@ map = targetCr.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = MenuAnswerSexPanel( map, cr );
    iDialogBox@ menu = OpenMenu( targetCr, "SexAnswerPanel", handler );
}

class MenuAnswerSexPanel: CenteredMenuHandler
{
    uint map_id;
	uint cr_id;
	int selectorPos;
	uint arrayPos;
	
    MenuAnswerSexPanel( Map& map, Critter& cr )
	{
        map_id = map.Id;
		cr_id = cr.Id;
		selectorPos = 0;
		arrayPos = 0;
    }

    bool MenuUpdate( Critter& targetCr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		Critter@ cr = GetCritter( cr_id );

		if( MovementState( cr ) > 0 || MovementState( targetCr ) > 0 )
		{
			return false;
		}
		
		if( cr.Param[ SEX_OFFER_STATE ] != SEX_OFFER_MADE )
		{
			targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SEX_REJECT );
			return false;
		}
		
		if( cr.Param[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_NONE )
		{
			if( hasItems( cr, Condoms, -1 ) || hasItems( targetCr, Condoms, -1 ) )
			{
				uint protectionSex = cr.Param[ SEX_PROTECTION_STATE ] == 0 ? STR_NONE : STR_SEX_MENU_PROTECTION_CONDOM;
				string condom = "$protectionSex" + STR_INSERT_TEXT_LINE ( protectionSex );
				if( menu.ButtonMsg(STR_SEX_MENU_PROTECTION, condom ) )
				{
					cr.ParamBase[ SEX_PROTECTION_STATE ] = cr.Param[ SEX_PROTECTION_STATE ] == 0 ? 1 : 0;
					return true;
				}
			}
		}
		
		if( cr.ParamBase[ SEX_ANIMATE_STATE ] != SEX_STATE_BLACK )
		{
			uint mode = cr.Param[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK ? STR_SEX_MENU_BLACK_SCREEN : STR_SEX_MENU_ANIMATE;
			string sexMode = "$modeSex" + STR_INSERT_TEXT_LINE( mode );
			
			if( menu.ButtonMsg( STR_SEX_MENU_MODE, sexMode ) )
			{
				cr.ParamBase[ SEX_ANIMATE_STATE ] = cr.Param[ SEX_ANIMATE_STATE ] == 0 ? 1 : 0;
				if( cr.Param[ SEX_ANIMATE_STATE ] == 1 )
				{
					cr.ParamBase[ SEX_POSITION ] = 1;
				}
				
				return true;
			}
			
			if( cr.ParamBase[ SEX_ANIMATE_STATE ] == SEX_STATE_ANIM )
			{
				uint sexPosition = SexPositions[ cr.Param[ SEX_POSITION ] ];
				string position = "$positionSex " + STR_INSERT_TEXT_LINE( sexPosition );
				if( menu.ButtonMsg( STR_SEX_MENU_POSITION, position ) )
				{
					selectorPos++;
					if( arrayPos == SexPositions.length() -1 )
					{
						arrayPos = 0;
						selectorPos = arrayPos;
					}
					else
					{
						arrayPos = selectorPos;
					}
					
					cr.ParamBase[ SEX_POSITION ] = arrayPos;
					return true;
				}
			}
		}
	
		if( menu.ButtonMsg( STR_CONFIRM ) )
		{
			cr.ParamBase[ SEX_PARTNER_STATE ] = SEX_PARTNER_AGREE;
			HaveSex( cr, targetCr );
			return false;
		}
		
		if( menu.ButtonMsg( STR_DECLINE ) )
		{
			cr.ParamBase[ SEX_PARTNER_STATE ] = SEX_PARTNER_DECLINE;
			return false;
		}

 		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_SEX_MENU_MAIN;
	}
	
    string@ Description( Critter& targetCr )
	{
		Critter@ cr = GetCritter( cr_id );
		
		uint mode = cr.ParamBase[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK ? STR_SEX_MENU_BLACK_SCREEN : STR_SEX_MENU_ANIMATE;

		uint protection = cr.ParamBase[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_NONE ? STR_NONE : STR_SEX_MENU_PROTECTION_CONDOM;
		
		string info = 	"$descriptionSex" + STR_INSERT_TEXT_LINE( STR_SEX_MENU_DESCRIPTION) 
					+	"$offeredSexDesc" + STR_INSERT_TEXT_LINE( STR_SEX_MENU_TO_DECIDE)  
					+	"$modeSexDesc" 	  + STR_INSERT_TEXT_LINE( mode) 
					+	"$protectionSexDesc" + STR_INSERT_TEXT_LINE( protection )
					+	"$positionSexDesc" + STR_INSERT_TEXT_LINE( SexPositions[ cr.ParamBase[ SEX_POSITION ] ] );
		return info;
    }

	bool ShouldRedraw( Critter& targetCr )
	{
		return true;
    }
}

void HaveSex( Critter& cr, Critter& targetCr )
{
	if( cr.IsInjured() )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_FOR_SEX );
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PARTNER_INJURED_FOR_SEX );
		return; 
	}
	
	if( targetCr.IsInjured() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PARTNER_INJURED_FOR_SEX );
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_FOR_SEX );
		return; 
	}
	
	if( IsTired( cr ) )
	{
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PARTNER_TIRED_FOR_SEX );
		return;
    }
		
	if( IsTired( targetCr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PARTNER_TIRED_FOR_SEX );
        return;
    }
	
	//This will be added later, when animal taming is in place
	/*if( targetCr.StatBase[ ST_BODY_TYPE ] == 5 )
	{
		cr.ParamBase[ SEX_ANIMATE_STATE ] = targetCr.Id;
		start_bramin_sex( cr );
		return;
	}*/
	
	string protection = cr.Param[ SEX_PROTECTION_STATE ] == 0 ? "n unprotected" : " safe";
    CrimeLog( cr, crInfo( cr ) + " and " + crInfo( targetCr ) + " are having a" + protection + " sex." );
	
	Item@ crHand = _CritGetItemHand( cr );
	if( valid( crHand ) )
	{
		cr.MoveItem( crHand.Id, crHand.GetCount(), SLOT_INV );
	}

	Item@ targetCrHand = _CritGetItemHand( targetCr );
	if( valid( targetCrHand ) )
	{
		targetCr.MoveItem( targetCrHand.Id, targetCrHand.GetCount(), SLOT_INV );
	}
	
	start_cr_sex( cr, targetCr );
	start_targetCr_sex( targetCr, cr );
	
	if( cr.Param[ SEX_ANIMATE_STATE ] == SEX_STATE_BLACK )
	{
	    FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, 7500 );
		FlushScreen( targetCr, COLOR_BLACK, COLOR_BLACK, 7500 );
	}
	
	if( cr.Param[ SEX_PROTECTION_STATE ] == SEX_PROTECTION_CONDOM )
	{
		Item@[] condoms = getItems( cr, Condoms, -1 );
		Item@ condom = null;
		if( condoms.length() > 0 )
		{
			@condom = condoms[0];
			useCondom( condom );
		}
		else
		{
			condoms = getItems( targetCr, Condoms, -1 );
			if( condoms.length() > 0 )
			{
				@condom = condoms[0];
				useCondom( condom );
			}
		}
		if( !valid( condom ) )
		{
			//desease chance go here
		}
	}
	return;
}

void useCondom( Item@ condom )
{
	if( valid( condom ) )
	{
		_SubItem( condom, 1 );
	}
}

bool cr_ltp_inited = false;
void cr_ltp_init()
{
	LTPREG( LTP_SEX, process_cr_sex )
	cr_ltp_inited = true;
}

bool start_cr_sex( Critter& cr, Critter& targetCr )
{
	if( !valid( targetCr ) )
	{
		return false;
	}
	
	if( !cr_ltp_inited )
	{
		cr_ltp_init();
	}
	
	uint8  revDir;
	revDir = cr.Dir + 3;
	if( revDir > 5 )
	{
		revDir = revDir - 6;
	}
	
	switch( cr.Param[ SEX_POSITION ] )
	{
		case( SEX_POSITION_DOGGIE ):
		{
			if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE && targetCr.Stat[ ST_GENDER ] == GENDER_MALE )
			{
				cr.SetDir( revDir );
			}
			else
			{
				targetCr.SetDir( cr.Dir );
			}

			targetCr.Animate( 0, ANIM2_DAMAGE_BACK, null, true, true );
			break;
		}
		case( SEX_POSITION_ORAL ):
			cr.SetAnims( COND_LIFE, 0, ANIM2_ORAL );
			break;
		case( SEX_POSITION_MISSIONARY ):
			cr.SetAnims( COND_LIFE, 0, ANIM2_PRONE_SEX );
			break;
		case( SEX_POSITION_CLASSIC ):
			cr.Animate( 0, ANIM2_DAMAGE_FRONT, null, true, true );
			break;
		default:			
			break;
	}
	
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 700;
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 10;
	
	StartProcess( cr, LTP_SEX, 0, targetCr.Id, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	return true;
}

uint process_cr_sex( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_SEX )
	Critter@ targetCr = GetCritter( param1 );
	param0++;
	
	switch( cr.Param[ SEX_POSITION ] )
	{
		case( SEX_POSITION_DOGGIE ):
			cr.Animate( 0, ANIM2_DAMAGE_BACK, null, true, true );
			break;
		case( SEX_POSITION_CLASSIC ):
			cr.Animate( 0, ANIM2_DAMAGE_FRONT, null, true, true );
			break;
		case( SEX_POSITION_ORAL ):
		case( SEX_POSITION_MISSIONARY ):
			break;
		default:
			break;
	}

	if( cr.ParamBase[ ST_LTP_TIME ] == -1 )
	{
		if( cr.Param[ SEX_POSITION ] == SEX_POSITION_ORAL || cr.Param[ SEX_POSITION ] == SEX_POSITION_MISSIONARY )
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		}

		return 0;
	}
	
	if( targetCr.ParamBase[ ST_LTP_TIME ] == -1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CUM_TOO_FAST );
		targetCr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_TREMBLES );
		
		if( cr.Param[ SEX_POSITION ] == SEX_POSITION_ORAL || cr.Param[ SEX_POSITION ] == SEX_POSITION_MISSIONARY )
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		}
		
		resetVals( cr );
		return 0;
	}

	if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
	{
		targetCr.ParamBase[ ST_LTP_TIME ] = -1;
		
		if( cr.Param[ SEX_POSITION ] == SEX_POSITION_ORAL || cr.Param[ SEX_POSITION ] == SEX_POSITION_MISSIONARY )
		{
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		}
		
		finish_sex( cr, targetCr );		
		return 0;
	}
	
	return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
}

bool targetCr_ltp_inited = false;
void targetCr_ltp_init()
{
	LTPREG( LTP_SEX_RECIEVE, targetCr_process_sex )
	targetCr_ltp_inited = true;
}

bool start_targetCr_sex( Critter& targetCr, Critter& cr )
{
	if( !valid( cr ) )
	{
		return false;
	}
	
	if( !targetCr_ltp_inited )
	{
		targetCr_ltp_init();
	}

	uint8  revDir;
	revDir = cr.Dir + 3;
	if( revDir > 5 )
	{
		revDir = revDir - 6;
	}

	if( !targetCr.IsKnockout() )
	{
		switch( cr.Param[ SEX_POSITION ] )
		{
			case( SEX_POSITION_CLASSIC ):
				targetCr.SetDir( revDir );
				targetCr.Animate( 0, ANIM2_DAMAGE_FRONT, null, true, true );
				break;
			case( SEX_POSITION_DOGGIE ):
				targetCr.SetDir( cr.Dir );
				targetCr.Animate( 0, ANIM2_DAMAGE_BACK, null, true, true );
				break;
			case( SEX_POSITION_MISSIONARY ):
				targetCr.SetDir( revDir );
				targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 300, targetCr.HexX, targetCr.HexY );
				break;
			case( SEX_POSITION_ORAL ):
				targetCr.SetDir( revDir );
				targetCr.SetAnims( COND_LIFE, 0, ANIM2_ORAL_RECIEVE );
				break;
		}
	}
	
	targetCr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 700;
	targetCr.ParamBase[ ST_LTP_SEQUENCE ] = 10;
	
	StartProcess( targetCr, LTP_SEX_RECIEVE, 0, cr.Id, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	return true;
}

uint targetCr_process_sex( Critter@ targetCr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( targetCr, param0, LTP_SEX_RECIEVE )
	Critter@ cr = GetCritter( param1 );
	param0++;
	
	if( !targetCr.IsKnockout() )
	{
		switch( cr.Param[ SEX_POSITION ] )
		{
			case( SEX_POSITION_CLASSIC ):
				targetCr.Animate( 0, ANIM2_DAMAGE_FRONT, null, true, true );
				break;
			case( SEX_POSITION_DOGGIE ):
				targetCr.Animate( 0, ANIM2_DAMAGE_BACK, null, true, true );
				break;
			case( SEX_POSITION_ORAL ):
			case( SEX_POSITION_MISSIONARY ):
				break;				
		}
	}
	
	if( targetCr.Param[ ST_LTP_TIME ] == -1 )
	{
		targetCr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		return 0;
	}
	
	if( cr.ParamBase[ ST_LTP_TIME ] == -1 )
	{
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CUM_TOO_FAST );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_TREMBLES );
		targetCr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		return 0;
	}
	
	if( param0 > cr.Param[ ST_LTP_SEQUENCE ] )
	{
		targetCr.ParamBase[ ST_LTP_TIME ] = -1;
		finish_sex( cr, targetCr );
		targetCr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		return 0;
	}
	
	return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
}

void finish_sex( Critter& cr, Critter& targetCr )
{
	if( cr.IsNpc() && cr.ParamBase[CR_VAL5] != 0 )
	{
		cr.SetHomePos( cr.HexX, cr.HexY, cr.ParamBase[CR_VAL5] );
		cr.SetDir( cr.ParamBase[CR_VAL5] );
	}
	
	if( targetCr.IsNpc() && targetCr.ParamBase[CR_VAL5] != 0 )
	{
		targetCr.SetHomePos( targetCr.HexX, targetCr.HexY, targetCr.ParamBase[CR_VAL5] );
		targetCr.SetDir( targetCr.ParamBase[CR_VAL5] );
	}
	
	cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + cr.Timeout[ TO_TIREDNESS ] + REAL_SECOND( 300 );
	targetCr.TimeoutBase[ TO_TIREDNESS ]= __FullSecond + targetCr.Timeout[ TO_TIREDNESS ] + REAL_SECOND( 300 );
	
	cr.StatBase[ ST_HUNGER ] += Random( 150, 200 );
	targetCr.StatBase[ ST_HUNGER ] += Random( 150, 200 );
	
	cr.StatBase[ ST_THIRST ] += Random( 200, 300 );
	targetCr.StatBase[ ST_THIRST ] += Random( 200, 300 );
	
	cr.ParamBase[ CR_DIRTINESS ] += MIN( Random( 20, 30 ), 100 - cr.Param[ CR_DIRTINESS ] );
	targetCr.ParamBase[ CR_DIRTINESS ] += MIN( Random( 20, 30 ), 100 - targetCr.Param[ CR_DIRTINESS ] );

	targetCr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_GETS_LAID );
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_GETS_LAID );
	resetVals( cr );
	
	StopProcess( cr, true );
	StopProcess( targetCr, true );
	
	if( cr.GetTimeEvents( CTE_HAD_SEX, null, null, null ) == 0 )
	{
		int rate = 100;

		if( cr.Karma[ KARMA_SEXPERT ] >= 1 || targetCr.Karma[ KARMA_SEXPERT ] >= 1 )
		{
			rate += 100;
		}
		
		if( cr.Trait[ TRAIT_SEX_APPEAL ] >= 1 || targetCr.Trait[ TRAIT_SEX_APPEAL ] >= 1 )
		{
			rate += 100;
		}
		
		cr.StatBase[ ST_APREGEN_EXT ] += rate;
		targetCr.StatBase[ ST_APREGEN_EXT ] += rate;
		
		cr.AddTimeEvent( "cte_had_sex", REAL_HOUR( 4 ), CTE_HAD_SEX, rate );
		targetCr.AddTimeEvent( "cte_had_sex", REAL_HOUR( 4 ), CTE_HAD_SEX, rate );
	}
}

void resetVals( Critter& cr )
{
	cr.ParamBase[ SEX_ANIMATE_STATE ] = 0;
	cr.ParamBase[ SEX_PROTECTION_STATE ] = 0;
	cr.ParamBase[ SEX_POSITION ] = 0;
	cr.ParamBase[ SEX_OFFER_STATE ] = 0;
	cr.ParamBase[ SEX_PARTNER_STATE ] = 0;
}

uint cte_had_sex( Critter& cr, int identifier, uint& rate )
{
	cr.StatBase[ ST_APREGEN_EXT ] -= rate;
	return 0;
}

bool ltp_doll_sex_inited = false;
void ltp_doll_sex_init()
{
	LTPREG( LTP_DOLL_SEX, process_doll_sex )
	ltp_doll_sex_inited = true;
}

bool start_doll_sex( Critter& cr, Item& doll )
{
	if( cr.Stat[ ST_GENDER ] != GENDER_MALE )
	{
		return false;
	}
	
	if( !valid( doll ) )
	{
		return false;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	if( IsTired( cr ) )
	{
		return false;
    }
	
	if( !ltp_doll_sex_inited ) 
	{
		ltp_doll_sex_init();
	}
		
	uint16 hx = cr.HexX, hy = cr.HexY;
	map.MoveHexByDir( hx, hy, 3, 1 );
	MoveItem( doll, 1, map, hx, hy );
	cr.SetDir( 3 );
	cr.SetAnims( COND_LIFE, 0, ANIM2_PRONE_SEX );
	
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 700;
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 10;
	
	StartProcess( cr, LTP_DOLL_SEX, 0, doll.Id, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	return true;
}

uint process_doll_sex( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_DOLL_SEX )
	
	param0++;
	
	if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
	{
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_GETS_LAID );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + cr.Timeout[ TO_TIREDNESS ] + REAL_SECOND( 300 );
		cr.StatBase[ ST_HUNGER ] += Random( 150, 200 );
		cr.StatBase[ ST_THIRST ] += Random( 200, 300 );
		cr.ParamBase[ CR_DIRTINESS ] += MIN( Random( 20, 30 ), 100 - cr.Param[ CR_DIRTINESS ] );
		if( cr.GetTimeEvents( CTE_HAD_SEX, null, null, null ) == 0 )
		{
			int rate = 50;
			cr.StatBase[ ST_APREGEN_EXT ] += rate;
			cr.AddTimeEvent( "cte_had_sex", REAL_HOUR( 4 ), CTE_HAD_SEX, rate );
		}
	
		resetVals( cr );
		
		CrimeLog( cr, crInfo( cr ) + " is having sex with a rag doll." );
		
		if( Random( 0, 100 ) == 100 )
		{
			Item@ doll = GetItem( param1 );
			if( valid( doll ) )
			{
				Map@ map = cr.GetMap();
				map.SetText( cr.HexX, cr.HexY, COLOR_LGRAY, ":pop!:" );
				doll.ChangeProto( PID_POPPED_BLOW_UP_DOLL );
				CrimeLog( cr, crInfo( cr ) + " has popped his doll." );
			}
		}
		
		StopProcess( cr, true );
		return 0;
	}
	
	return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
}

bool d_canFuck( Critter& player, Critter @npc, int monthFrom, int monthTo )
{
    return true;
}

void r_startSex( Critter& player, Critter@ npc, int pose )
{
	npc.TimeoutBase[ TO_TIREDNESS ] = __FullSecond;
	npc.StatBase[ ST_HUNGER ] = 0;
	npc.StatBase[ ST_THIRST ] = 0;
	npc.ParamBase[ CR_DIRTINESS ] = 0;	
	
	uint mapID;
	uint16 hexX, hexY;
	uint8 lastDir = npc.Dir;
	npc.GetHomePos( mapID, hexX, hexY, lastDir );
	npc.ParamBase[CR_VAL5] = lastDir;
	
	int revDir = player.Dir + 3;
	if( revDir > 5 )
	{
		revDir = revDir - 6;
	}
	int dir = pose == 1 ? player.Dir : revDir;
	npc.SetHomePos( npc.HexX, npc.HexY, dir );
	npc.SetDir( dir );
	
	if( pose == 2 )
	{
		npc.ParamBase[SEX_ANIMATE_STATE] = SEX_STATE_ANIM;
		npc.ParamBase[SEX_POSITION] = pose;
		HaveSex( npc, player );
	}
	else
	{
		player.ParamBase[SEX_ANIMATE_STATE] = SEX_STATE_ANIM;
		player.ParamBase[SEX_POSITION] = pose;
		HaveSex( player, npc );
	}
}

#endif // SEX_MODULE
