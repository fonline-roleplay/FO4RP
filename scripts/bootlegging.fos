#ifndef BOOTLEGGING
#define BOOTLEGGING

#include "_utils.fos"
#include "bootlegging_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "firestarter_h.fos"
#include "explode_h.fos"
#include "speed_h.fos"

bool IsStill( Item& still )
{
	return Stills.find( still.GetProtoId() ) != -1;
}

bool UseItemOnStill( Critter& cr, Item@ item, Item@ still )
{
	if( !valid( still ) || !IsStill( still ) )
	{
		return false;
	}
	
    Map@ map = cr.GetMap();
 	if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( item ) )
	{
		return false;
	}
	
	uint16 pid = item.GetProtoId();
	if( pid == PID_HOMEBREW || pid == PID_HOMEBREW_PRT )
	{
		TransferToStill( cr, item, still );
	}
	else if( FireFuel.find( pid ) != -1 )
	{
		FeedTheFire( cr, item, still );
	} 
	else if( pid == PID_BOTTLE_GLASS || pid == PID_SPIRIT_PRT )
	{
		start_spirit_out( cr, still );
	}
	else if( Igniters.find( pid ) != -1 )
	{
		Ignite( cr, item, still );
	}
	else if( WaterSource.find( pid ) != -1 || item.Proto.Type == ITEM_TYPE_FLASK )
	{
		Extinguish( cr, item, still );
		return true;
	}
	
	return false;
}

bool HasFuel( Item& still )
{
	return still.CURRENT_FUEL > 0;
}

void StillStage( Item& still )
{
	if( !valid( still ) )
	{
		return;
	}
	
	Map@ map = GetMap( still.MapId );
	if( !valid( map ) )
	{
		return;
	}
	
	if( still.STILL_TEMPRATURE < BASE_TEMPRATURE )
	{
		still.STILL_TEMPRATURE = BASE_TEMPRATURE;
		EraseTimeEvent( still.FIRE_EVENT );
		still.FIRE_EVENT = 0;
		still.STATE = STATE_OFF;
		return;
	}

	if( still.STATE != STATE_WORKING && still.STILL_TEMPRATURE > BASE_TEMPRATURE )
	{
		still.STATE = STATE_OFF;
		uint[] values = { still.Id };
		CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "bootlegging@e_StillCoolDown", values, true );
		return;
	}
	
	if( still.STATE == STATE_WORKING )
	{
		if( still.STILL_RAW_MATERIAL > 0 )
		{
			if( still.STILL_TEMPRATURE < 100 )
			{
				still.STILL_TEMPRATURE += FUEL_BURN_AMOUNT / MassHeatModifier( still );
			}
			else
			{
				int spirit_percent = 1;
				if( still.STILL_RAW_MATERIAL > 0 )
				{
					spirit_percent = still.STILL_SPIRIT_LEVEL * 100 / still.STILL_RAW_MATERIAL;
				}
				
				int vapor_rate = 1;
				if( still.STILL_SPIRIT_LEVEL > 0 )
				{
					vapor_rate = still.STILL_RAW_MATERIAL * 100 / still.STILL_SPIRIT_LEVEL;
				}
				
				int gain = ALCOHOL_GAIN;
				if( still.STILL_SPIRIT_LEVEL < gain )
				{
					gain = still.STILL_SPIRIT_LEVEL;
				}
				
				still.STILL_SPIRIT_LEVEL -= gain;
				if( still.STILL_SPIRIT_LEVEL < 0 )
				{
					still.STILL_SPIRIT_LEVEL = 0;
				}
				
				still.STILL_PRODUCT += gain;
				still.STILL_RAW_MATERIAL -= int( vapor_rate * spirit_percent / 100 );
				if( still.STILL_RAW_MATERIAL < 0 )
				{
					still.STILL_RAW_MATERIAL = 0;
				}
				
				still.STILL_PRESSURE += still.STILL_DIRT;
				if( still.STILL_PRESSURE >= MAX_PRESSURE )
				{
					uint[] values = { still.Id };
					CreateTimeEvent( AFTER( REAL_SECOND( Random( 5, 20 ) ) ), "bootlegging@e_Explode", values, true );
				}
				
				map.RunEffect( PID_EFFECT_STILL_STEAM, still.HexX, still.HexY, 0 );
				PlayGenericSound( map, still.HexX, still.HexY, "still_steam.ogg", 10 );
			}
		}
		else
		{
			still.STILL_TEMPRATURE += FUEL_BURN_AMOUNT / MassHeatModifier( still );
		}
		
		if( still.STILL_TEMPRATURE >= MAX_TEMPRATURE / 2 )
		{
			still.STILL_DIRT++;
		}
		
		if( still.STILL_TEMPRATURE >= MAX_TEMPRATURE && still.GetProtoId() != PID_STILL_S_BROKEN )
		{
			for( uint i = 0; i < 6; i++ )
			{
				uint16 tx = still.HexX, ty = still.HexY;
				map.MoveHexByDir( tx, ty, i, 1 );
				Critter@ victim = map.GetCritter( tx, ty );
				if( !map.IsHexPassed( tx, ty ) && !valid( victim ) )
				{
					continue;
				}
				
				GenerateFire( map, tx, ty, 0, 2, 0 );
				still.ChangeProto( PID_STILL_S_BROKEN );
				still.PicMap = still.Proto.PicMap;
				setAnimState( still );

				still.STATE = STATE_BROKEN;
				still.STILL_RAW_MATERIAL = 0;
				still.STILL_PRODUCT = 0;
				still.STILL_DIRT = 100;
				still.STILL_SPIRIT_LEVEL = 0;
				still.STILL_PRESSURE = BASE_PRESSURE;
				still.STILL_TEMPRATURE = BASE_TEMPRATURE;
			}
		}
	}
}

int MassHeatModifier( Item& still )
{
	int mod;
	int mass = still.STILL_RAW_MATERIAL;
	if( mass == 0 )
	{
		mod = 2;
	}
	else if( mass <= 5000 )
	{
		mod = 3;
	}
	else if( mass <= 10000 )
	{
		mod = 4;
	}
	else
	{
		mod = 5;
	}
	
	return mod;
}

uint e_StillCoolDown( uint[]@ values )
{
	Item@ still = GetItem( values[0] );
	if( !valid( still ) )
	{
		return 0;
	}
	
	if( still.STATE == STATE_WORKING )
	{
		return 0;
	}
	
	still.STILL_TEMPRATURE -= FUEL_BURN_AMOUNT / 2;
	if( still.STILL_TEMPRATURE <= 0 )
	{
		still.STILL_TEMPRATURE = 0;
		EraseTimeEvent( still.FIRE_EVENT );
		still.FIRE_EVENT = 0;
		return 0;
	}
	
	return FIRE_BURNING_TIME;
}

bool TransferToStill( Critter& cr, Item& homebrew, Item& still )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( still ) )
	{
		return false; 
	}
	
	if( still.STATE > STATE_OFF )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_NOT_READY );
		return false; 
	}
	
	if( homebrew.GetProtoId() != PID_HOMEBREW && homebrew.GetProtoId() != PID_HOMEBREW_PRT	)
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_STILL_ITEM );
		return false; 
	}

	PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
	
	if( homebrew.GetProtoId() == PID_HOMEBREW )
	{
		still.STILL_RAW_MATERIAL += 500;
		still.STILL_SPIRIT_LEVEL += 500 * homebrew.HB_SPIRIT_LEVEL / 100;
		still.STILL_DIRT += homebrew.HB_POLUTION_LEVEL;
	}
	else if( homebrew.GetProtoId() == PID_HOMEBREW_PRT )
	{
		still.STILL_RAW_MATERIAL += homebrew.REMAINING_USES * 100;
		still.STILL_SPIRIT_LEVEL += homebrew.REMAINING_USES * 100 * homebrew.HB_SPIRIT_LEVEL / 100;
		still.STILL_DIRT += homebrew.REMAINING_USES * 100 * homebrew.HB_POLUTION_LEVEL / 100;
	}
		
	_SubItem( homebrew, 1 );
	cr.AddItem( PID_BOTTLE_GLASS, 1 );

	if( still.STILL_RAW_MATERIAL > MAX_RAW_MATERIAL )
	{
		still.STILL_RAW_MATERIAL = MAX_RAW_MATERIAL;
		map.SetTextMsg( still.HexX, still.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_TOO_MUCH_HOMEBREW );
	}
	
	ShowContainer( cr, still, TRANSFER_HEX_CONT_UP );
	return true;
}

uint e_Explode( uint[]@ values )
{
	uint itemId = values[0];
	Item@ still = GetItem( itemId );
	if( valid( still ) )    
	{
		uint16 hexX = 0, hexY = 0;
		Map@ map = still.GetMapPosition( hexX, hexY );
		ExplodeEx( map, hexX, hexY, PID_EXPLODE_MISSILE2, 0, Random( 70, 150 ), DAMAGE_EXPLODE, 3, 0 );
		map.AddItem( hexX, hexY, Ashes[ Random( 0, Ashes.length() - 1 ) ], 1 );
		
		map.RunEffect( PID_EFFECT_SMOKE, still.HexX, still.HexY, 0 );
		
		uint randomDebree = Random( 2, 5 );
		for( uint i = 0; i < randomDebree; i++ )
		{
			uint16 hx = still.HexX, hy = still.HexY;
			map.MoveHexByDir( hx, hy, Random( 0, 5 ), Random( 1, 3) );
			if( map.IsHexPassed( hx, hy ) )
			{
				map.AddItem( hx, hy, Wreckage[ Random( 0, Wreckage.length() -1 ) ] , 1 );
			}
		}
		
		still.EVENT = 0.0f;
		EraseTimeEvent( still.EVENT );
		uint16 tx=still.HexX, ty=still.HexY;
		DeleteItem( still );
		GenerateFire( map, tx, ty, 0, 2, 0 );
	}
	return 0;
}

//========== TECHNICAL_ANIMATION_STATE_CHANGER ===============//
void setAnimState( Item& still )
{
	if( still.STATE > STATE_OFF )
	{	
		UNSETFLAG( still.Flags, ITEM_SHOW_ANIM_EXT );
		SETFLAG( still.Flags, ITEM_LIGHT );
		SETFLAG( still.Flags, ITEM_CAN_USE );
		UNSETFLAG( still.Flags, ITEM_CAN_PICKUP );
	}
	else
	{
		SETFLAG( still.Flags, ITEM_SHOW_ANIM_EXT );
		UNSETFLAG( still.Flags, ITEM_LIGHT );
	}
	
	still.Update();
}

//=============== STILL STATE DISCRIPTION ====================//
string@ GenerateDescription( Item& still )
{
	string info = "$state";

	if( still.STATE == STATE_OFF )
	{
		info += STR_INSERT_TEXT_LINE( STR_STILL_MENU_NOT_BURNING );
	}
	else if( still.STATE == STATE_WORKING )
	{
		info += STR_INSERT_TEXT_LINE( STR_STILL_MENU_BURNING );
		int temprature = still.STILL_TEMPRATURE;
		if( temprature <= 0 )
		{
			temprature = 22;
		}
		
		info += "$temp" + temprature;

		float pressure = still.STILL_PRESSURE / 1000.0f;
		info += "$press" + pressure;
	}
	else
	{
		info += STR_INSERT_TEXT_LINE( STR_STILL_BROKEN );
	}

	float raw_material = still.STILL_RAW_MATERIAL / 1000.0f;
	float max_raw_material = MAX_RAW_MATERIAL / 1000.0f;
	info += "$raw" + raw_material + " / " + max_raw_material;

	
	float occupancy_level = still.CURRENT_FUEL * 100.0f / still.MAX_FUEL;
	info += "$fuel" + occupancy_level;

	float product = still.STILL_PRODUCT / 1000.0f;
	info += "$product" + product;

	return info;
}

//=============== MAIN MENU ====================//
void StartMenuStill( Critter& cr, Item& still )
{
	if( !valid( still ) )
	{
        return;
    }
	
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = MenuStill(still, map);
    iDialogBox@ menu = OpenMenu( cr, "Still", handler );
}

class MenuStill: CenteredMenuHandler
{
	uint m_still_id;
	uint m_map_id;
	int m_last_state;
	int difficulty;
	
	MenuStill( Item& still, Map& map )
	{
		m_still_id = still.Id;
		m_map_id = map.Id;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		Map@ map = GetMap( m_map_id );
		if( !valid( map ) )
		{
			return false;
		}

		Item@ still = GetItem( m_still_id );
		if( !valid( still ) )
		{
			return false;
		}

		if( MovementState( cr ) > MOVE_STATE_STILL )
		{
			return false;
		}
		
		if( locked_in_place( still ) )
		{
			if( still.STATE != STATE_WORKING )
			{
				if( menu.ButtonMsg( STR_FURNITURE_MENU_DETACH ) )
				{
					LockInPlace( cr, still );
					return true;
				}
				
				if( still.GetProtoId() != PID_STILL_S_BROKEN )
				{
					if( menu.ButtonMsg( STR_STILL_MENU_ADD_HOMEBREW ) )
					{
						ShowContainer( cr, still, TRANSFER_HEX_CONT_UP );
						return false; 
					}
					
					if ( still.STATE < STATE_BROKEN )
					{
						if( menu.ButtonMsg( STR_FIRE_MENU_ADD_FUEL ) )
						{
							Item@ fuel = FindStillFuel( cr );
							if( valid( fuel ) )
							{
								FeedTheFire( cr, fuel, still ); 
							}
							else
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
							}
							
							return true;
						}
					}

					if( HasFuel( still ) && menu.ButtonMsg( STR_FIRE_MENU_IGNITE ) )
					{
						Item@ lighter = cr.GetItem( PID_LIGHTER, -1 );
						if( !valid( lighter ) )
						{
							@lighter = cr.GetItem( PID_FLINT, -1 );
						}
						
						if( !valid( lighter ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
						}
						else
						{
							Ignite( cr, lighter, still );
						}
						return true;
					}
				
					if( menu.ButtonMsg( STR_STILL_MENU_CLEAN ) )
					{
						if( !checkConsumables( cr ) )
						{ 
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_CONSUMABLES );
							for( uint i = 0; i < StillConsumables.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_CONSUMABLES_PID, "$proto@msg item " + ( StillConsumables[i] * 100 ) + "@" );
							}	
							return true;
						}
						
						difficulty = still.STILL_DIRT * 50;
						start_stillRepair( cr, still, difficulty );
						return false;
					}
					
					if( still.STILL_PRODUCT > 0 && menu.ButtonMsg( STR_STILL_MENU_POUR_SPIRIT ) )
					{
						start_spirit_out( cr, still );
						return false;
					}
				}
				else
				{
					if( menu.ButtonMsg( STR_STILL_MENU_REPAIR ) )
					{
						if( !checkSkill( cr ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_SKILL );
							return true;
						}
						
						if( !checkTools( cr ) )
						{ 
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_TOOLS );
							for( uint i = 0; i < StillTools.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_TOOLS_PID, "$proto@msg item " + ( StillTools[i] * 100 ) + "@" );
							}
							
							return true;
						}
						
						if( !checkComponents( cr ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_PARTS );
							for( uint i = 0; i < StillComponents.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_PARTS_PID, "$proto@msg item " + ( StillComponents[i] * 100 ) + "@$amount" + StillComponentsAmount[i] );
							}
							
							return true;
						}
						
						difficulty = 10000;
						start_stillRepair( cr, still, difficulty );
						return false;
					}
					
				}
			}
			else if( still.STATE < STATE_BROKEN )
			{
				if( menu.ButtonMsg( STR_FIRE_MENU_EXTINGUISH ) )
				{
					if( hasItems( cr, WaterSource ) )
					{
						Item@[] watersource = getItems( cr, WaterSource );
						Item@ water = watersource[0];
						Extinguish( cr, water, still );
						still.STILL_PRESSURE = BASE_PRESSURE;
						return false;
					}
					else
					{
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER_FOR_FIRE );
						return true;
					}
				}
			}
		}
		else
		{
			if( menu.ButtonMsg( STR_FURNITURE_MENU_ANCHOR ) )
			{
				LockInPlace( cr, still );
				return true;
			}
			
			if( menu.ButtonMsg( STR_FURNITURE_MENU_PICKUP ) )
			{
				PickItem( cr, still );
				ChangeCritterSpeed( cr );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CLOSE_MENU_BUTTON ) )
		{
			return false;
		}
		
		return true;
	}
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_STILL_MENU_MAIN;
	}	
	
	string@ Description( Critter& cr )
	{
		Item@ still = GetItem( m_still_id );
		m_last_state = still.STATE;
		return GenerateDescription( still );
	}

	bool ShouldRedraw( Critter& cr )
	{
		Item@ still = GetItem( m_still_id );
		
		if( !valid( still ) || GetDistantion( cr.HexX, cr.HexY, still.HexX, still.HexY ) >= 2 )
		{
			return false;
		}
		
		return valid( still ) && IsStillWorking( still ) && still.STATE == m_last_state;
    }
}

bool IsStillWorking( Item& still )
{
	return still.STATE > STATE_OFF && still.STATE < STATE_BROKEN;
}

Item@ FindStillFuel( Critter& cr )
{
	if( hasItems( cr, FireFuel, SLOT_HAND1 ) )
	{
		return _CritGetItemHand( cr );
	}
	
	Item@ fuel = null;
	for( uint i = 0, j = 9; i < j; i++ )
	{
		@fuel = @cr.GetItem( FireFuel[i], -1 );
		if( valid(fuel) )
		{
			break;
		}
	}
	
	return fuel;
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_SPIRIT_OUT, process_spirit_out )
	ltp_inited = true;
}

bool start_spirit_out( Critter& cr, Item& still )
{
	if( !ltp_inited )
	{ 
		ltp_init();
	}
	Map@ map = cr.GetMap();		

	if( valid( still ) )
	{
		if( ( still.STILL_PRODUCT / 100 ) < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POURED_ALL_OUT );
			return false;
		}
		
		if( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_SPIRIT_PRT ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_TARE );
			return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		cr.ParamBase[ ST_LTP_SEQUENCE ] = CalcSequence( cr, still );
		
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		
		StartProcess( cr, LTP_SPIRIT_OUT, 0, 0, still.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	
	return false;
}

int CalcSequence( Critter& cr, Item& still )
{
	int sequence = 0;

	int bottlesCount = cr.CountItem( PID_BOTTLE_GLASS );
	ProtoItem@ bottleProto = GetProtoItem( PID_BOTTLE_GLASS );
	sequence += bottlesCount * 5; // constant val for glass bottles, need rewamp with entire bottle code
	
	if( hasItem( cr, PID_SPIRIT_PRT ) )
	{
		Item@[] inventory;
		cr.GetItems( -1, inventory );
		for( uint j = 0; j < inventory.length(); j++ )
		{
			if( valid( inventory[j] ) && int( inventory[j].GetProtoId() ) == PID_SPIRIT_PRT )
			{
				sequence += inventory[j].Proto.Partial_Item - inventory[j].REMAINING_USES;
			}
		}
	}
	
	if( sequence > ( still.STILL_PRODUCT / 100 ) )
	{
		sequence = still.STILL_PRODUCT / 100;
	}
	
	return sequence;
}

uint process_spirit_out( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SPIRIT_OUT )

  	Item@ still = GetItem( param2 );
	
  	if( valid( still ) )
	{
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_SPIRIT_PRT ) ) || ( still.STILL_PRODUCT / 100 ) < 1 )
		{
			uint TXT = ( still.STILL_PRODUCT / 100 ) < 1 ? STR_POURED_ALL_SPIRIT : STR_RUN_OUT_OF_BOTTLES;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, TXT );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FILLS_BOTTLE );
		}
		
		if( hasItem( cr, PID_SPIRIT_PRT ) )
		{
			Item@ spiritPrt = getItem( cr, PID_SPIRIT_PRT );
			if( spiritPrt.REMAINING_USES < int( spiritPrt.Proto.Partial_Item ) )
			{
				still.STILL_PRODUCT -= 100;
				spiritPrt.REMAINING_USES ++;
				spiritPrt.EXTRA_WEIGHT = spiritPrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				
				PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
				spiritPrt.Update();
				
				if( spiritPrt.REMAINING_USES == int( spiritPrt.Proto.Partial_Item ) )
				{
					Item@ spirit = cr.AddItem( PID_SPIRIT, 1 );
					_SubItem( spiritPrt , 1 );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_BOTTLE_SPIRIT );
					spirit.Update();
				}
			}
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
		else
		{
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ spiritPrt = cr.AddItem( PID_SPIRIT_PRT, 1 );
		
			still.STILL_PRODUCT -= 100;
			spiritPrt.REMAINING_USES ++;
			spiritPrt.EXTRA_WEIGHT = spiritPrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );

			spiritPrt.Update();
		}

		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
    }
	
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	return 0;
}

bool ltp_stillRepair_inited = false;
void ltp_stillRepair_init()
{
	LTPREG( LTP_STILL_REPAIR, process_stillRepair )
	ltp_stillRepair_inited = true;
}

bool start_stillRepair( Critter& cr, Item& still, uint difficulty )
{
	if( !ltp_stillRepair_inited )
	{
		ltp_stillRepair_init();
	}
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	int install_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
	cr.ParamBase[ ST_LTP_SEQUENCE ] = int( ceil( float( difficulty / ( CLAMP( install_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) ) );
	
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "repair@e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);	

	_CritAnimateUse( cr );
	
	StartProcess( cr, LTP_STILL_REPAIR, 0, still.Id, difficulty, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	return true;
}

uint process_stillRepair( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_STILL_REPAIR )

  	Item@ still = GetItem( param1 );
	int difficulty = param2 ;
	if( valid( still ) )
    {
		param0++;
		
		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			if( difficulty >= 10000 )
			{
				for( uint i = 0; i < StillComponents.length; i++ )
				{
					Item@ component = cr.GetItem( StillComponents[i], -1 );
					uint required_amount = StillComponentsAmount[i];
					if( !valid( component ) || cr.CountItem( StillComponents[i] ) < required_amount )
					{
						return 0;
					}
					_SubItem( component, required_amount);
				}
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_STILL_REPAIRED );
				still.ChangeProto( PID_STILL_S );
				still.PicMap = still.Proto.PicMap;
				still.Update();
			}
			else
			{
				for( uint i = 0; i < StillConsumables.length; i++ )
				{
					Item@ consumable = cr.GetItem( StillConsumables[i], -1 );
					if( !valid( consumable ) )
					{
						return 0;
					}
					_SubItem( consumable, 1 );
				}
				cr.AddItem( PID_PHIAL, 1 );
				cr.AddItem( PID_BOTTLE_GLASS, 1 );
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_STILL_MAINTAINED );
				still.STILL_DIRT = 0;
				still.STILL_RAW_MATERIAL = 0;
				still.STILL_SPIRIT_LEVEL = 0;
				still.STILL_PRODUCT = 0;
				still.Update();
			}
			return 0;
		}
		
		uint[] values = { cr.Id };
		
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "repair@e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);

		_CritAnimateUse( cr );
		
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	
	return 0;
}

bool checkSkill( Critter& cr )
{
	if( cr.ParamBase[  SK_REPAIR ] < 200 || cr.ParamBase[ SK_SCIENCE ] < 150 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
		return false; 
	}
	
	return true;
}

bool checkTools( Critter& cr )
{
	for( uint i = 0; i < StillTools.length; i++ )
	{
		Item@ tool = cr.GetItem( StillTools[i], -1 );
		if( !valid( tool ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	
	return true;
}

bool checkComponents( Critter& cr )
{
	for( uint i = 0; i < StillComponents.length; i++ )
	{
		Item@ component = cr.GetItem( StillComponents[i], -1 );
		uint required_amount = StillComponentsAmount[i];
		if( !valid( component ) || cr.CountItem( StillComponents[i] ) < required_amount )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	
	return true;
}

bool checkConsumables( Critter& cr )
{
	for( uint i = 0; i < StillConsumables.length; i++ )
	{
		Item@ tool = cr.GetItem( StillConsumables[i], -1 );
		if( !valid( tool ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	
	return true;
}

#endif //BOOTLEGGING