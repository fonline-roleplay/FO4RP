#ifndef HANDCUFFS_MODULE
#define HANDCUFFS_MODULE

#include "_utils.fos"
#include "handcuffs_h.fos"
#include "speed_h.fos"
#include "effects_h.fos"
#include "critter_status_h.fos"

class BondageItem
{
	uint16 pid;
	uint8 slot;
	uint8 blocker_type;
	uint16 key_pid;
	string sound_on;
	string sound_off;
	uint msg;
	
	BondageItem( uint16 pid, uint8 slot, uint8 blocker_type, uint16 key_pid, string sound_on, string sound_off, uint msg )
	{
        this.pid = pid;
		this.slot = slot;
		this.blocker_type = blocker_type;
		this.key_pid = key_pid;
		this.sound_on = sound_on;
		this.sound_off = sound_off;
		this.msg = msg;
	}
}

class BondageItemCollection
{
	BondageItem@[] bondageItems;
	BondageItemCollection()
	{
	}
	
	BondageItemCollection@ bondageItem( uint16 pid, uint8 slot, uint8 blocker_type, uint16 key_pid, string sound_on, string sound_off, uint msg )
	{
		this.bondageItems.insertLast( BondageItem( pid, slot, blocker_type, key_pid, sound_on, sound_off, msg ) );
		return this;
	}
	
	BondageItem@ get_by_pid( uint16 pid ) 
	{
		for( uint i = 0, len = this.bondageItems.length(); i < len; i++ )
		{
			if( this.bondageItems[i].pid == pid )
			{
				return this.bondageItems[i];
			}
		}
		return null;
	}
	
	BondageItem@ get_by_key_pid( uint16 key_pid ) 
	{
		for( uint i = 0, len = this.bondageItems.length(); i < len; i++ )
		{
			if( this.bondageItems[i].key_pid == key_pid )
			{
				return this.bondageItems[i];
			}
		}
		return null;
	}
}

BondageItemCollection@ bondageItems = BondageItemCollection()
//					pid						slot			blocker_type				  key_pid						sound_on 			sound_off				msg
	.bondageItem( PID_ROPE			,	SLOT_HAND1	,	BONDAGE_TYPE_ROPE		,			0				,	"rope_on.mp3"		,	"rope_off.mp3"		,	STR_ROPE		)
	.bondageItem( PID_HANDCUFFS		,	SLOT_HAND1	,	BONDAGE_TYPE_LOCK		,	PID_HANDCUFFS_KEY		,	"cuffs_on.mp3"		,	"cuffs_off.mp3"		,	STR_HANDCUFFS	)
	.bondageItem( PID_SHACKLES		,   SLOT_MISC	,	BONDAGE_TYPE_LOCK		,	PID_SHACKLES_KEY		,	"shackles_on.mp3"	,	"shackles_off.mp3"	,	STR_SHACKLES	)
	.bondageItem( PID_SLAVE_COLLAR	, 	SLOT_HEAD	,	BONDAGE_TYPE_ELECTRONIC	,			0				,	"collar_on.mp3"		,	"collar_off.mp3"	,	STR_COLLAR		)
	.bondageItem( PID_BALL_GAG		,	SLOT_HEAD	,	BONDAGE_TYPE_SKILL		,			0				,	"ballgag_on.mp3"	,	"ballgag_off.mp3"	,	STR_GAGED		)
	.bondageItem( PID_PART_OF_ROPE	,	SLOT_HEAD	,	BONDAGE_TYPE_SKILL		,			0				,	"rope_on.mp3"		,	"rope_off.mp3"		,	STR_ROPE_GAG	)
	.bondageItem( PID_SANDBAG_EMPTY	,	SLOT_HEAD	,	BONDAGE_TYPE_SKILL		,			0				,	"rope_on.mp3"		,	"rope_off.mp3"		,	STR_HEADBAG	);

BondageItem@ GetBondageItem( Item@ item ) 
{
    uint16 pid = item.GetProtoId();
    return bondageItems.get_by_pid( pid );
}

BondageItem@ GetKeyBondageItem( Item@ item ) 
{
    uint16 key_pid = item.GetProtoId();
    return bondageItems.get_by_key_pid( key_pid );
}

bool TryBondageTarget( Critter& cr, Critter& targetCr, Item& item )
{
	bool IsSelf = targetCr.Id == cr.Id;
	if( !valid( targetCr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
		return false;
	}
	
	if( targetCr.IsDead() )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TARGET_DEAD );
		return false;
	}
	
	if( !valid( item ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
		return false;
	}
	
	if( item.BONDAGE_STATE == BONDAGE_STATE_BROKEN )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BONDAGE_BROKEN );
		return false;
	}
	
	if( !IsSelf )
	{
		targetCr.ParamBase[ CR_VAL0 ] = cr.Id;
		targetCr.ParamBase[ CR_VAL1 ] = item.Id;

		if( !targetCr.IsKnockout() )
		{
			AskBondage( item, cr, targetCr );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WAIT_VICTIM_ACTION );
			return false;
		}
		else
		{
			targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_SUBMIT );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_VICTIM_SUBMITS );
			BondageTarget( cr, targetCr, GetItem( targetCr.ParamBase[ CR_VAL1 ] ) );
			return false;
		}
	}
	AskBondageSelf( item, cr );
	return true;
}

void AskBondage( Item& item, Critter& cr, Critter@ targetCr )
{ 
    targetCr.ParamBase[ CR_VAL0 ] = cr.Id;
	targetCr.ParamBase[ CR_VAL1 ] = item.Id;
	targetCr.ShowScreen( SCREEN_DIALOGBOX, 1, "AnswerBondage" );
	targetCr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_DLG_BOUNDAGE_PROMPT, "$proto@msg item " + ( item.GetProtoId() * 100 ) + "@" );
	targetCr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_DLG_AGREE );
}

void AnswerBondage( Critter& targetCr, uint answerI, string& answerS )
{
	Critter@ cr = GetCritter( targetCr.ParamBase[ CR_VAL0 ] );
    if( answerI == 0 )
    {
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_SUBMIT );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_VICTIM_SUBMITS );
		BondageTarget( cr, targetCr, GetItem( targetCr.ParamBase[ CR_VAL1 ] ) );
    }
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_VICTIM_RESISTS );
	}
}

void AskBondageSelf( Item& item, Critter& cr )
{ 
	cr.ParamBase[ CR_VAL1 ] = item.Id;
	cr.ShowScreen( SCREEN_DIALOGBOX, 1, "AnswerBondageSelf" );
	cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_DLG_BOUNDAGE_PROMPT_SELF, "$proto@msg item " + ( item.GetProtoId() * 100 ) + "@" );
	cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_DLG_AGREE );
}

void AnswerBondageSelf( Critter& cr, uint answerI, string& answerS )
{
    if( answerI == 0 )
    {
		BondageTarget( cr, cr, GetItem( cr.ParamBase[ CR_VAL1 ] ) );
    }
}

void BondageTarget( Critter& cr, Critter& targetCr, Item& item )
{
	bool IsSelf = targetCr.Id == cr.Id;
	BondageItem@ bondage = GetBondageItem( item );
	if( !valid( bondage ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
		return;
	}
	
	Item@ moved = targetCr.GetItem( 0, bondage.slot );
	if( valid( moved ) )
	{
		BondageItem@ bondage2 = GetBondageItem( item );
		if( valid( bondage2 ) && moved.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BOUND_BY_SIMILAR );
			return;
		}
		targetCr.MoveItem( moved.Id, moved.GetCount(), SLOT_INV );
	}
	
	if( !IsSelf )
	{
		MoveItem( item, 1, targetCr );
	}
		
	targetCr.MoveItem( item.Id, item.GetCount(), bondage.slot );
	item.BONDAGE_STATE = BONDAGE_STATE_ON;
	
	if( bondage.key_pid != 0 )
	{
		Item@ key = cr.AddItem( bondage.key_pid, 1 );
		if( valid( key ) )
		{
			key.KEY_BONDAGE_ID = item.Id;
			key.BOND_SLAVE_ID = targetCr.Id;
			key.Update();
		}
	}

	if( bondage.pid == PID_SLAVE_COLLAR )
	{
		item.PicInv = GetStrHash( "art\\inven\\misc\\shockcollar_inv.png" );
		item.BOND_SLAVE_ID = targetCr.Id;
	}
	
	Map@ map = targetCr.GetMap();
	if( valid( map ) )
	{
		PlayGenericSound( map, targetCr.HexX, targetCr.HexY, bondage.sound_on, 10 );
	}
	
	uint msgMod = IsSelf ? 0 : 1;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, bondage.msg + msgMod );
	if( targetCr.IsPlayer() )
	{
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, bondage.msg + msgMod + 2 );
	}
	item.Update();
	cr.Action( ACTION_USE_ITEM, 2, item );
	ChangeCritterSpeed( cr );
	
	item.SetEvent( ITEM_EVENT_MOVE, "_MoveHandcuffs" );
	item.SetEvent( ITEM_EVENT_DROP, "_DropHandcuffs" );
}

void _MoveHandcuffs( Item& item, Critter& cr, uint8 fromSlot )
{
	if(  item.GetProtoId() == PID_SLAVE_COLLAR )
	{
		item.PicInv = GetStrHash( "art\\inven\\misc\\shockcollar_off_inv.png" );
	}
	item.BONDAGE_STATE = BONDAGE_STATE_OFF;
	item.Update();
}

void _DropHandcuffs( Item& item, Critter& cr )
{
	if( item.GetProtoId() == PID_SLAVE_COLLAR )
	{
		item.PicInv = GetStrHash( "art\\inven\\misc\\shockcollar_off_inv.png" );
	}
	item.BONDAGE_STATE = BONDAGE_STATE_OFF;
	item.Update();
}

bool ReleaseTarget( Critter& cr, Critter& targetCr, Item& item )
{
	if( !valid( targetCr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
		return false;
	}
	
	if( !valid( item ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
		return false;
	}
	
	Item@ moved = null;
	BondageItem@ bondage = null;
	
	if( item.GetProtoId() == PID_SLAVE_COLLAR )
	{
		@ bondage = GetBondageItem( item );
		if( !valid( bondage ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			return false;
		}
		@ moved = item;
	}
	else
	{
		@ bondage = GetKeyBondageItem( item );
		if( !valid( bondage ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			return false;
		}
		
		if( !hasItem( targetCr, bondage.pid, bondage.slot ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_WONT_HELP );
			return false;
		}
		
		@ moved = targetCr.GetItem( 0, bondage.slot );
		if( !valid( moved ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			return false;
		}
		
		if( moved.BONDAGE_STATE != BONDAGE_STATE_ON )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			return false;
		}
		
		if( item.KEY_BONDAGE_ID == 0 || uint( item.KEY_BONDAGE_ID ) != moved.Id )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KEY_NOT_FIT );
			return false;
		}
	}
	
	moved.BONDAGE_STATE = BONDAGE_STATE_OFF;
	targetCr.MoveItem( moved.Id, moved.GetCount(), SLOT_INV );
	
	if( bondage.pid == PID_SLAVE_COLLAR )
	{
		moved.PicInv = GetStrHash( "art\\inven\\misc\\shockcollar_off_inv.png" );
	}
	
	if( targetCr.Id != cr.Id )
	{
		MoveItem( moved, 1, cr );
	}
	
	if( item.GetProtoId() == bondage.key_pid )
	{
		_SubItem( item, 1 );
	}
	Map@ map = targetCr.GetMap();
	PlayGenericSound( map, targetCr.HexX, targetCr.HexY, bondage.sound_off, 10 );
	
	uint msgMod = cr.Id == targetCr.Id ? 5 : 6;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, bondage.msg + msgMod );
	if( targetCr.IsPlayer() )
	{
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, bondage.msg + 4 );
	}
	moved.Update();
	ChangeCritterSpeed( cr );
	return true;
}

bool TryRemoveGag( Critter& cr, Critter& targetCr, Item& gagItm )
{
	if( !valid( gagItm ) )
	{
		return false;
	}
	
	BondageItem@ bondage = GetBondageItem( gagItm );
	if( !valid( bondage ) )
	{
		return false;
	}
	
	if( HandsTied( cr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FREE_HANDS );
		return false;
	}
	
	if( bondage.blocker_type != BONDAGE_TYPE_SKILL )
	{
		return false;
	}
	
	gagItm.BONDAGE_STATE = BONDAGE_STATE_OFF;
	targetCr.MoveItem( gagItm.Id, gagItm.GetCount(), SLOT_INV );
	
	if( targetCr.Id != cr.Id )
	{
		MoveItem( gagItm, 1, cr );
	}
	
	Map@ map = targetCr.GetMap();
	PlayGenericSound( map, targetCr.HexX, targetCr.HexY, bondage.sound_off, 10 );
	
	uint msgMod = cr.Id == targetCr.Id ? 5 : 6;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, bondage.msg + msgMod );
	if( targetCr.IsPlayer() )
	{
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, bondage.msg + 4 );
	}
	gagItm.Update();
	return true;
}

bool HandsTied( Critter& cr )
{
	Item@ hands = _CritGetItemHand( cr );
	if( valid( hands ) )
	{
		BondageItem@ bondage = GetBondageItem( hands );
		if( valid( bondage ) && hands.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			return true;
		}
	}
	return false;
}

//Old use Knife to escape code
bool CutCheck( Critter& cr, Item@ item, Critter@ target )
{ 
	if( !valid( target ) )
	{
		return false;
	}
		
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}

	Item@ hand = _CritGetItemHand( target );
	if( valid( hand ) )
	{
		BondageItem@ handBound = GetBondageItem( hand );
		if( valid( handBound) && handBound.blocker_type == BONDAGE_TYPE_ROPE && hand.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			if( !isBlade( item ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_WONT_HELP );
				return false;
			}
			
			CutRopes( cr, target );
			return true;
		}
	}

	Item@ hook = map.GetItem( target.HexX, target.HexY, PID_HOLD_HOOK );
	if( !valid( hook ) )
	{
		return false; 
	}
	
	testInfo( cr, "Entangle strength: " + hook.Val5 );
	
	if( hook.Val5 <= 10 )
	{
		if( !isBlade( item ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_WONT_HELP );
			return false;
		}
		
		Item@ net = map.GetItem( target.HexX, target.HexY, PID_FETTERS );
		if( !valid( net ) )
		{
			@net = map.GetItem( target.HexX, target.HexY, PID_IRON_FETTERS );
		}
		
		if( valid( net ) )
		{
			_SubItem( net, 1 );
			uint strNum = target.Id == cr.Id ? STR_EMOTE_GETS_FREE : STR_EMOTE_FREES_TARGET;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, strNum );
		}
	}
	else
	{
		Item@ trap = map.GetItem( target.HexX, target.HexY, PID_TRAP_ACTIVE );
		if( !valid( trap ) )
		{
			@trap = map.GetItem( target.HexX, target.HexY, PID_TRAP_DEACTIVATED );
		}
		
		if( valid( trap ) )
		{
			if( item.GetProtoId() != PID_CROWBAR )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_CROWBAR );
				return false;
			}
			uint strNum2 = target.Id == cr.Id ? STR_EMOTE_GETS_FREE_SNARE : STR_EMOTE_FREES_TARGET_SNARE;
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, strNum2 );
		}
	}
	
	DeleteItem( hook );
	cr.Animate( 0, ANIM2_SWING_1H, null, false, true );
	target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_FREE_FROM_SNARE );
	return true;
}

bool CutRopes( Critter& cr, Critter@ targetCr )
{
	Item@ moved = _CritGetItemHand( targetCr );
	moved.BONDAGE_STATE = BONDAGE_STATE_OFF;
	
	targetCr.MoveItem( moved.Id, moved.GetCount(), SLOT_INV );

	if( targetCr.Id != cr.Id )
	{
		MoveItem( moved, 1, cr );
	}

	uint msgStr = cr.Id == targetCr.Id ? STR_EMOTE_TIES_RELEASED_SELF : STR_EMOTE_TIES_RELEASED;
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, msgStr );
	if( targetCr.IsPlayer() )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_RELEASED_FROM_TIES );
	}
    CrimeLog( cr, crInfo( cr ) + " cuts ropes on " + crInfo( targetCr ) );
	return true;
}

bool StartMenuSCollar( Critter& cr, Item& remote )
{
    iMenuHandler@ handler = MenuSCollar( remote );
    iDialogBox@ menu = OpenMenu( cr, "Slave collar", handler );
    return true;
}

class MenuSCollar: CenteredMenuHandler
{
    uint m_remote_id;
    uint m_collar_id;
    uint level;
	
    MenuSCollar( Item& remote )
	{
        m_remote_id = remote.Id;
        m_collar_id = remote.KEY_BONDAGE_ID;
		level = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Item@ remote = GetItem( m_remote_id );
		if( !valid( remote ) )
		{
            return false;
        }

		Map@ map = cr.GetMap();
		if( !valid( map ) )
		{
			return false;
		}
		
		if( menu.ButtonMsg( STR_HANDCUFFS_MENU_COLLARS_CONTROL ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			MenuCollarsCtrl@ menu_collars_ctrl = MenuCollarsCtrl( remote, map );
			menu_collars_ctrl.level = level + 1;
			return menu.OpenChild( "Level " + menu_collars_ctrl.level, menu_collars_ctrl );
		}
		
		if( menu.ButtonMsg( STR_HANDCUFFS_MENU_MASS_COLLARS ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			MenuMassCollarCtrl@ mass_collars = MenuMassCollarCtrl( remote, map );
			mass_collars.level = level + 1;
			return menu.OpenChild( "Level " + mass_collars.level, mass_collars );
		}
		
		if( menu.ButtonMsg( STR_HANDCUFFS_MENU_SET_FREQUENCY ) ) 
        {
            PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			int[] data = {0};
			cr.RunClientScript( "client_screen_numberpad@ShowScreen", remote.Id, 0, 0, "Input radio frequency" , data );
            return false;
        }
		
        return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_HANDCUFFS_MENU_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
        return null;
    }
	
}

class MenuCollarsCtrl: CenteredMenuHandler
{
    uint remote_id;
    uint map_id;
	uint level;

    MenuCollarsCtrl( Item& remote, Map& map )
	{
        remote_id = remote.Id;
        map_id = map.Id;
		level = 1;
	}

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        if( !valid( map ) )
		{
            return false;
        }
		
        Item@ remote = GetItem( remote_id );
        if( !valid( remote ) )
		{
            return false;
        }

		if( FindCollars( remote ) )
		{
			Item@[] collars;
			Item@ collar = null;
			GetAllItems( PID_SLAVE_COLLAR, collars );
			for( uint i = 0, len = collars.length(); i < len; i ++ ) 
			{
				@ collar = collars[i];
				if( valid( collar ) )
				{
					if( collar.GetProtoId() == PID_SLAVE_COLLAR && collar.BOND_FREQUENCY == remote.BOND_FREQUENCY && collar.BONDAGE_STATE == BONDAGE_STATE_ON )
					{
						if( menu.ButtonMsg( STR_HANDCUFFS_MENU_COLLAR_ID,  "$idCollar" + collar.Id ) )
						{
							PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
							MenuSingleCollarCtrl@ menu_single_collar_ctrl = MenuSingleCollarCtrl( remote, map, collar );
							menu_single_collar_ctrl.level = level + 1;
							return menu.OpenChild( "Level " + menu_single_collar_ctrl.level, menu_single_collar_ctrl );
						}
					}
				}
			}
			
			collars.resize(0);
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			return false;
		}
		return true;
    }

	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_HANDCUFFS_MENU_COLLAR_CONTROL_DESC;
	}
	
	string@ Description( Critter& cr )
	{
		Map@ map = GetMap( map_id );
		Item@ remote = GetItem( remote_id );
		
		uint num = 0;
		if( FindCollars( remote ) )
		{
			Item@[] collars;
			Item@ collar = null;
			GetAllItems( PID_SLAVE_COLLAR, collars );
			for( uint i = 0, len = collars.length(); i < len; i ++ )
			{
				@ collar = collars[i];
				if( valid( collar ) )
				{
					if( collar.BOND_FREQUENCY == remote.BOND_FREQUENCY && collar.BONDAGE_STATE == BONDAGE_STATE_ON )
					{
						num ++;
					}
				}
			}
			
			collars.resize(0);
		}
		return "$idRemote" + remote.Id  
			 + "$stateCollar" + STR_INSERT_TEXT_LINE( STR_HANDCUFFS_MENU_ACTIVE_DESC )
			 + "$num" + num;;
	}

}

// Menu single collar control
class MenuSingleCollarCtrl: CenteredMenuHandler
{
    uint remote_id;
    uint map_id;
	uint collar_id;
	uint level;
	
    MenuSingleCollarCtrl( Item& remote, Map& map, Item& collar )
	{
        remote_id = remote.Id;
        map_id = map.Id;
		collar_id = collar.Id;
		level = 2;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		if( !valid( map ) )
		{
            return false;
        }
		
		Item@ remote = GetItem( remote_id );
		if( !valid( remote ) )
		{
            return false;
        }
		
		Item@ collar = GetItem( collar_id );
		if( valid( collar ) )
		{
			Critter@ slave = GetCritter( uint( collar.BOND_SLAVE_ID ) );
			if( valid( slave ) )
			{
				if( menu.ButtonMsg( STR_HANDCUFFS_MENU_PUNISH ) ) 
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
					slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_PAIN );
					slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
					slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] * 10 / 100 );
					FlushScreen( slave, COLOR_RED, 0, 5000 );
					PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
					slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 115, slave.HexX, slave.HexY );
					return true;
				}
				
				if( menu.ButtonMsg( STR_HANDCUFFS_MENU_WOUND ) ) 
				{
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
					slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_HARM );
					slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
					slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] * 50 / 100 );
					ChangeStatus( slave, CR_STATUS_HEAVY_DMG, 0, true );
					FlushScreen( slave, COLOR_RED, 0, 5000 );
					PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
					slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 130, slave.HexX, slave.HexY );
					return true;
				}
				
				if( menu.ButtonMsg( STR_HANDCUFFS_MENU_MAIM ) ) 
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
					slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_INJURE );
					slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
					slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] ) + 1;
					ChangeStatus( slave, CR_STATUS_HEAVY_DMG, 0, true );
					FlushScreen( slave, COLOR_RED, 0, 5000 );
					PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
					slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 160, slave.HexX, slave.HexY );
					return true;
				}
				
				if( menu.ButtonMsg( STR_HANDCUFFS_MENU_KILL ) ) 
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EXECUTE_SLAVE );
					slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_DEATH );
					PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
					FlushScreen( slave, COLOR_RED, 0, 5000 );
					slave.ToDead( ANIM2_DEAD_PULSE, cr );
					slave.StatBase[ ST_CURRENT_HP ] = -666;
					slave.ParamBase[ CR_DEATH_STAGE ] = 50;
					DeleteItem( collar );
					return false;
				}
				
				if( menu.ButtonMsg( STR_HANDCUFFS_MENU_RELEASE ) ) 
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SLAVE_FREED );
					slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_RELEASED_FROM_COLLAR );
					ReleaseTarget( cr, slave, collar );
					return false;
				}
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			return false;
		}
		return true;
    }

	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_HANDCUFFS_MENU_COLLAR_ID_DESC;
	}

    string@ Description( Critter& cr )
	{
		return "$idCollar" + collar_id;
	}

}

// Menu Mass collar control
class MenuMassCollarCtrl: CenteredMenuHandler
{
    uint remote_id;
    uint map_id;
	uint level;
	
    MenuMassCollarCtrl( Item& remote, Map& map )
	{
        remote_id = remote.Id;
        map_id = map.Id;
		level = 1;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
		if( !valid( map ) )
		{
            return false;
        }
		
		Item@ remote = GetItem( remote_id );
		if( !valid( remote ) )
		{
            return false;
        }
		
		Item@[] collars;
		Item@ collar = null;
		Critter@ slave = null;
		GetAllItems( PID_SLAVE_COLLAR, collars );
		for( uint j = 0, len = collars.length(); j < len; j ++ ) 
		{
			@ collar = collars[j];
			if( valid( collar ) && collar.BOND_FREQUENCY == remote.BOND_FREQUENCY && collar.BONDAGE_STATE == BONDAGE_STATE_ON )
			{
				@ slave = GetCritter( uint( collar.BOND_SLAVE_ID ) );
				if( valid( slave ) )
				{
					if( menu.ButtonMsg( STR_HANDCUFFS_MENU_PUNISH ) ) 
					{
						PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
						cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
						slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_PAIN );
						slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
						slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] * 10 / 100 );
						FlushScreen( slave, COLOR_RED, 0, 5000 );
						PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
						slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 115, slave.HexX, slave.HexY );
						return true;
					}
					
					if( menu.ButtonMsg( STR_HANDCUFFS_MENU_WOUND ) ) 
					{
						cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
						slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_HARM );
						slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
						slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] * 50 / 100 );
						ChangeStatus( slave, CR_STATUS_HEAVY_DMG, 0, true );
						FlushScreen( slave, COLOR_RED, 0, 5000 );
						PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
						slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 130, slave.HexX, slave.HexY );
						return true;
					}
					
					if( menu.ButtonMsg( STR_HANDCUFFS_MENU_MAIM ) ) 
					{
						PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
						cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUNUSH_SLAVE );
						slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_INJURE );
						slave.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_AGONY );
						slave.StatBase[ ST_CURRENT_HP ] -= ( slave.Stat[ ST_CURRENT_HP ] ) + 1;
						ChangeStatus( slave, CR_STATUS_HEAVY_DMG, 0, true );
						FlushScreen( slave, COLOR_RED, 0, 5000 );
						PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
						slave.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 160, slave.HexX, slave.HexY );
						return true;
					}
					
					if( menu.ButtonMsg( STR_HANDCUFFS_MENU_KILL ) ) 
					{
						PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
						cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EXECUTE_SLAVE );
						slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLAR_DEATH );
						PlayGenericSound( map, slave.HexX, slave.HexY, "MASRATBH.mp3", 10 );
						FlushScreen( slave, COLOR_RED, 0, 5000 );
						slave.ToDead( ANIM2_DEAD_PULSE, cr );
						slave.StatBase[ ST_CURRENT_HP ] = -666;
						slave.ParamBase[ CR_DEATH_STAGE ] = 50;
						DeleteItem( collar );
						return false;
					}
					
					if( menu.ButtonMsg( STR_HANDCUFFS_MENU_RELEASE ) ) 
					{
						PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
						cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_PRESS_BUTTON );
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SLAVE_FREED );
						slave.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_RELEASED_FROM_COLLAR );
						ReleaseTarget( cr, slave, collar );
						return false;
					}
				}
				collars.resize(0);
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			return false;
		}
		return true;
    }

	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_HANDCUFFS_MENU_COLLAR_CONTROL_DESC;
	}
	
	string@ Description( Critter& cr )
	{
		Map@ map = GetMap( map_id );
		Item@ remote = GetItem( remote_id );
		
		uint num = 0;
		if( FindCollars( remote ) )
		{
			Item@[] collars;
			Item@ collar = null;
			GetAllItems( PID_SLAVE_COLLAR, collars );
			for( uint i = 0, len = collars.length(); i < len; i ++ )
			{
				@ collar = collars[i];
				if( valid( collar ) )
				{
					if( collar.BOND_FREQUENCY == remote.BOND_FREQUENCY && collar.BONDAGE_STATE == BONDAGE_STATE_ON )
					{
						num ++;
					}
				}
			}
			
			collars.resize(0);
		}
		return "$idRemote" + remote.Id  
			 + "$stateCollar" + STR_INSERT_TEXT_LINE( STR_HANDCUFFS_MENU_ACTIVE_DESC )
			 + "$num" + num;
	}
}



/*
class MenuSelectCollars: CenteredMenuHandler
{
    uint remote_id;
    uint map_id;
	uint level;
	
    MenuSelectCollars( Item& remote, Map& map )
	{
        remote_id = remote.Id;
        map_id = map.Id;
		level = 1;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ remote = GetItem( remote_id );
		
        if( !valid( map ) )
		{
            return false;
        }
		
		if( !valid( remote )  )
		{
			return false;
		}
		
		if( FindCollars( remote ) )
		{
			Item@[] collars;
			Item@ collar = null;
			GetAllItems( PID_SLAVE_COLLAR, collars );
			for( uint j = 0, len = collars.length(); j < len; j ++ ) 
			{
				@ collar = collars[j];
				if( valid( collar ) )
				{
					if( collar.GetProtoId() == PID_SLAVE_COLLAR && ( collar.KEY_BONDAGE_ID == int( remote.Id ) || collar.KEY_BONDAGE_ID == 0 ) )
					{
						string state = 
							STR_INSERT_TEXT_LINE( collar.KEY_BONDAGE_ID == 0 ? 
								STR_HANDCUFFS_MENU_DISABLED : STR_HANDCUFFS_MENU_ACTIVE );
						string collarId = collar.Id;					
						if( menu.ButtonMsg( STR_HANDCUFFS_MENU_COLLAR_ID, "$idCollar" + collarId + " " + state ) )
						{
							PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
							collar.KEY_BONDAGE_ID == 0 ? collar.KEY_BONDAGE_ID = int( remote.Id ) : collar.KEY_BONDAGE_ID = 0;
							return true;
						}
					}
				}
			}
			
			collars.resize(0);
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			return false;
		}
		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_HANDCUFFS_MENU_COLLAR_CONTROL_DESC;
	}

    string@ Description( Critter& cr )
	{
		Map@ map = GetMap( map_id );
		Item@ remote = GetItem( remote_id );
		
		uint num = 0;
		if( FindCollars( remote ) )
		{
			Item@[] collars;
			Item@ collar = null;
			GetAllItems( PID_SLAVE_COLLAR, collars );
			for( uint i = 0, len = collars.length(); i < len; i ++ )
			{
				@ collar = collars[i];
				if( valid( collar ) )
				{
					if( collar.BOND_FREQUENCY == remote.BOND_FREQUENCY && ( collar.KEY_BONDAGE_ID == int( remote.Id ) || collar.KEY_BONDAGE_ID == 0 ) )
					{
						num ++;
					}
				}
			}
			
			collars.resize(0);
		}
		
		string info = "$idRemote" + remote.Id 
		+ "$stateCollar" + STR_INSERT_TEXT_LINE( STR_HANDCUFFS_MENU_AVAILABLE_DESC )
		+ "$num" + num;
		return info;
	}
		
}
*/

bool FindCollars( Item& remote )
{
	Item@[] collars;
	Item@ collar = null;
	GetAllItems( PID_SLAVE_COLLAR, collars );
	for( uint i = 0, len = collars.length(); i < len; i ++ ) 
	{
		@ collar = collars[i];
		if( valid( collar ) )
		{
			if( collar.BOND_FREQUENCY == remote.BOND_FREQUENCY )
			{
				return true;
			}
		}
	}
	
	collars.resize(0);
	
	return false;
}

bool TryBreakBonds( Critter& cr, Critter& targetCr )
{
	if( HandsTied( cr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HANDS_TIED );
		return false;
	}
	
	Item@ hands = _CritGetItemHand( targetCr );
	Item@ misc = _CritGetItemMisc( targetCr );
	if( valid( hands ) )
	{
		BondageItem@ handBound = GetBondageItem( hands );
		if( valid( handBound ) && handBound.blocker_type == BONDAGE_TYPE_LOCK && hands.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			hands.PicInv = GetStrHash( "art\\inven\\brokencuffs.png" );
			hands.Update();
			
			hands.BONDAGE_STATE = BONDAGE_STATE_BROKEN;
			targetCr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
			
			if( targetCr.Id != cr.Id )
			{
				MoveItem( hands, 1, cr );
			}
			
			Map@ map = targetCr.GetMap();
			if( valid( map ) )
			{
				PlayGenericSound( map, targetCr.HexX, targetCr.HexY, handBound.sound_off, 10 );
			}
		}
	}
	else if( valid( misc ) )
	{
		BondageItem@ miscBound = GetBondageItem( misc );
		if( valid( miscBound ) && miscBound.blocker_type == BONDAGE_TYPE_LOCK && misc.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			misc.BONDAGE_STATE = BONDAGE_STATE_BROKEN;
			targetCr.MoveItem( misc.Id, misc.GetCount(), SLOT_INV );
			
			if( targetCr.Id != cr.Id )
			{
				MoveItem( misc, 1, cr );
			}
			
			Map@ map = targetCr.GetMap();
			if( valid( map ) )
			{
				PlayGenericSound( map, targetCr.HexX, targetCr.HexY, miscBound.sound_off, 10 );
			}
		}
	}
	else
	{
		return false;
	}
	return true;
}

bool TryLockpickBondage( Critter& cr, Critter& targetCr )
{
	Item@ hands = _CritGetItemHand( targetCr );
	Item@ misc = _CritGetItemMisc( targetCr );
	if( valid( hands ) )
	{
		BondageItem@ handBound = GetBondageItem( hands );
		if( valid( handBound ) && handBound.blocker_type == BONDAGE_TYPE_LOCK && hands.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			hands.BONDAGE_STATE = BONDAGE_STATE_OFF;
			targetCr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
			
			if( targetCr.Id != cr.Id )
			{
				MoveItem( hands, 1, cr );
			}
			
			Map@ map = targetCr.GetMap();
			if( valid( map ) )
			{
				PlayGenericSound( map, targetCr.HexX, targetCr.HexY, handBound.sound_off, 10 );
			}
		}
	}
	else if( valid( misc ) )
	{
		BondageItem@ miscBound = GetBondageItem( misc );
		if( valid( miscBound ) && miscBound.blocker_type == BONDAGE_TYPE_LOCK && misc.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			misc.BONDAGE_STATE = BONDAGE_STATE_OFF;
			targetCr.MoveItem( misc.Id, misc.GetCount(), SLOT_INV );
			
			if( targetCr.Id != cr.Id )
			{
				MoveItem( misc, 1, cr );
			}
			
			Map@ map = targetCr.GetMap();
			if( valid( map ) )
			{
				PlayGenericSound( map, targetCr.HexX, targetCr.HexY, miscBound.sound_off, 10 );
			}
		}
	}
	else
	{
		return false;
	}
	return true;
}
#endif // HANDCUFFS_MODULE