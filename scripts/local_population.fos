#ifndef LOCAL_POPULATION
#define LOCAL_POPULATION

#include "_ai.fos"
#include "_utils.fos"
#include "entire_h.fos"
#include "local_population_h.fos"
#include "repair_h.fos"
#include "furniture_h.fos"

//Force spawn mobs
void _ForceMobsSpawnInit(Critter& player, int param0, int param1, int param2)
{
	MobsSpawnInit();
}

void MobsSpawnInit()
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
    uint nend = MAP_MOB_SPAWNER + MOB_SPAWNER_COUNT;
	for( uint n = MAP_MOB_SPAWNER; n < nend ; n++ )
	{
		if( map.CountEntire( n ) != 0 ) 
		{
			int[] values = { map.Id };
			map.SetData( MAP_MOB_SPAWN_TE, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_SpawnMobs", values, true ) );
			return true;
		}
	}
    return false;
}

uint e_SpawnMobs( int[]@ values )
{
	Map@ map = GetMap( values[ 0 ] );
	if( !valid( map ) )
	{	
		return 0;
	}
	
	AddCritter( map );

	EraseTimeEvent( map.GetData( MAP_MOB_SPAWN_TE ) );
	map.SetData( MAP_MOB_SPAWN_TE, CreateTimeEvent( AFTER( DELAY_FOR_MOBS_RESPAWN ), "e_SpawnMobs", values, true ) );
	return 0;
}

void AddCritter( Map& map )
{
	uint[] max_count = {
		LVAR( LMVAR_CRITTER_RATS ),
		LVAR( LMVAR_CRITTER_MANTISS ),
		LVAR( LMVAR_CRITTER_ANTS ),
		LVAR( LMVAR_CRITTER_ANT_LION ),
		LVAR( LMVAR_CRITTER_PIGRATS ),
		LVAR( LMVAR_CRITTER_GRIZRATS ),
		LVAR( LMVAR_CRITTER_GRISRAT_MUTANT ),
		LVAR( LMVAR_CRITTER_GECKO_SILVER ),
		LVAR( LMVAR_CRITTER_GECKO_GOLD ),
		LVAR( LMVAR_CRITTER_GECKO_CAVE ),
		LVAR( LMVAR_CRITTER_DOGS ),
		LVAR( LMVAR_CRITTER_WOLVES ),
		LVAR( LMVAR_CRITTER_RADSCORPIONS ),
		LVAR( LMVAR_CRITTER_RADSCORPIONS_BLACK ),
		LVAR( LMVAR_CRITTER_YAO ),
		LVAR( LMVAR_CRITTER_CAVESCORPIONS ),
		LVAR( LMVAR_CRITTER_BRAMIN ),
		LVAR( LMVAR_CRITTER_EVILPLANTS ),
		LVAR( LMVAR_CRITTER_ALIENS ),
		LVAR( LMVAR_CRITTER_DEATHCLAWS ),
		LVAR( LMVAR_CRITTER_CROC ),
		LVAR( LMVAR_CRITTER_SHADOW_CROC ),
		LVAR( LMVAR_CRITTER_FIREGECKO ),
		LVAR( LMVAR_CRITTER_BRUTES ),
		LVAR( LMVAR_CRITTER_CENTAURS ),
		LVAR( LMVAR_CRITTER_FLOATERS ),
		LVAR( LMVAR_CRITTER_MURLOCKS ),
		LVAR( LMVAR_CRITTER_GIANT_WASPS ),
		LVAR( LMVAR_CRITTER_GIANT_BEETLES ),
		LVAR( LMVAR_CRITTER_WILD_GHOULS ),
		LVAR( LMVAR_CRITTER_MILLEPEDE ),
		LVAR( LMVAR_CRITTER_LAVASH ),
		LVAR( LMVAR_CRITTER_SPIDER ),
		LVAR( LMVAR_CRITTER_COYOTE )
	};

	for( uint i = 0; i < max_count.length(); i++ )
	{
		uint[] mob_array = Critter_list[i];
		uint16 mobPid = 0;
		Critter@[] mobs;
		
		for( uint j = 0; j < mob_array.length; j ++ )
		{
			mobPid = mob_array[j];
			map.GetCritters( mobPid, FIND_LIFE_AND_KO | FIND_ONLY_NPC, mobs );
		}
		
		uint mobs_length = mobs.length();
		for( int n = 0, l = mobs_length; n < l; n++ )
		{
			if( isUnusual( mobs[n] ) )
			{
				mobs_length--;
			}
		}
		
		int delta = max_count[i] - mobs_length;

		if( delta == 0 ) // next Cycle
		{ 							
			continue;
		}
		else if( delta < 0 ) // delete excess pops
		{ 					
			int overPop = delta * -1;
			for( int n = 0, l = mobs_length; n < l && overPop > 0; n++ )
			{
				if( valid( mobs[n] ) && mobs[n].IsDead() )
				{
					DeleteNpc( mobs[n] );
					overPop --;
				}
			}
			
			for( int n = 0, l = mobs_length; n < l && overPop > 0; n++ )
			{
				if( valid( mobs[n] ) && !isUnusual(mobs[n]) )
				{
					DeleteNpc( mobs[n] );
					overPop --;
				}
			}
		}
		else	//add mobs
		{
			uint8 entireId = MAP_MOB_SPAWNER + i;
			
			int entires = map.CountEntire( entireId );
			int range = 2;
			
			if( entires == 0 )
			{ 
				continue; 
			}
			else
			{
				range += max_count[i] / ( entires * 6 );
				
				uint8  teamId = 100 + i;
				for( int k = 0; k < delta; k++ )
				{
					uint16 hexX = 0, hexY = 0, tempX = 0, tempY = 0;
					
					map.GetEntireCoords( entireId, Random( 0, entires - 1 ), hexX, hexY );
					
					tempX = hexX;
					tempY = hexY;

					int iterations_left = 10;
					while( !map.IsHexPassed( tempX, tempY ) && iterations_left > 0 )
					{
						tempX = hexX + Random( -range, range );
						tempY = hexY + Random( -range, range );
						iterations_left--;
					}
					
					uint16 pid = mob_array[ Random ( 0, mob_array.length() - 1 ) ];
					uint[] values = { map.Id, pid, tempX, tempY, teamId, 0 };
					CreateTimeEvent( AFTER( REAL_SECOND( Random( 1, 60 ) ) ), "e_delayed_spawn", values, true );
				}
			}
		}
	}
}

uint e_delayed_spawn( uint[]@ values )
{
	Map@ map = GetMap( values[ 0 ] );
	if( values[5] == 0 || !map.IsHexPassed( values[2], values[3] ) )
	{
		values[5]++;
		map.SetText( values[2], values[3], COLOR_LGRAY, ":rustling:" );
		return REAL_SECOND( Random( 3, 6 ) );
	}
	
	Critter@ npc = map.AddNpc( values[1], values[2], values[3], Random( 0, 5 ), null, null, "mob@_MobInit" );
	if( !valid( npc ) )
	{
		return 0;
	}
	
	npc.SetHomePos( npc.HexX, npc.HexY, npc.Dir );
	npc.StatBase[ ST_TEAM_ID ] = values[ 4 ];
	
	for( uint i = __SkillBegin; i < __SkillEnd; i++ )
	{
		if( npc.SkillBase[ i ] > __SkillMaxValue )
		{
			npc.SkillBase[ i ] = __SkillMaxValue;
		}
	}

	return 0;
}

bool isUnusual( Critter@ npc )
{
	return ( npc.Param[MERC_TYPE] != 0 )
		|| ( npc.Param[CR_CONTROLLED_GROUP] != 0 )
		|| ( npc.Param[MERC_MASTER_ID] != 0 )
		|| ( npc.Stat[ST_DIALOG_ID] != 0 )
		|| ( npc.Param[CR_AFK_MODE] != 0 )
		|| ( npc.Param[CR_IN_COVER] != 0 )
		|| ( npc.Param[ST_FACTION] != 0 )
		|| ( npc.Param[QST_MEDIUM] != 0 )
		|| ( npc.Stat[ST_TEAM_ID] < 100 )
		|| ( npc.Stat[ST_TEAM_ID] > 135 )
		;		
}

#endif // LOCAL_POPULATION