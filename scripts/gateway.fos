#ifndef GATEWAY
#define GATEWAY

#include "_utils.fos"
#include "gateway_h.fos"
#include "terminal_h.fos"
#include "_npc_pids.fos"
#include "_animation.fos"
#include "npc_planes_h.fos"
#include "entire_h.fos"
#include "lockers_h.fos"

//~run gateway _DoorsInit 0 0 0
void _DoorsInit( Critter& player, int param0, int param1, int param2 )
{
	Map@[] maps;
	Item@[] doors;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
	{   
		CheckMapDoors( maps[i] );
	}
}

void CheckMapDoors( Map& map )
{
	Item@[] doors;
	map.GetItemsByType( ITEM_TYPE_DOOR, doors );
	
	for( int i = 0, len = doors.length(); i < len; i++ )
	{
		Item@ door = doors[i];
		if( valid( door ) )
		{
			if( !FLAG( door.LockerCondition, LOCKER_ISOPEN ) )
			{
				ToggleDoorBlocker( map, door, true );
			}
		}
	}
	doors.resize(0);
} 

void ToggleDoorBlocker( Map& map, Item& door, bool create )
{
    if( !valid( map ) )
	{
		return;
	}
	
	if( !valid( door ) )
	{
		return;
	}
	
	uint16 dir = 0;
	uint16 blocker_count = 0;
	Item@ door_blocker = null;
	uint16 tx = door.HexX;
	uint16 ty = door.HexY;

	uint16 doorPid = door.GetProtoId();

	switch( doorPid ) 
	{
		case( PID_FARM_GATE_EW ):
		case( PID_GARAGE_GATE_EW ):
		case( PID_VC_GATE_MR_LARGE_EW ):
		case( PID_VC_GATE_LARGE_EW ):
			dir = 1;
			blocker_count = 3;
			break;
		case( PID_FARM_GATE_NS ):
		case( PID_GARAGE_GATE_NS ):
			dir = 0;
			blocker_count = 3;
			break;
		case( PID_TEMPLE_DOOR_NS ):	
			dir = 0;
			blocker_count = 2;
			break;
		case( PID_GAS_GATE_EW ):
		case( PID_VAULTTEC_GATE_EW ):
		case( PID_VAULTTEC_GATE2_EW ):
		case( PID_TEMPLE_DOOR_EW ):
			dir = 1;
			blocker_count = 2;
			break;
		case( PID_CATHEDRAL_DOOR_EW ):
		case( PID_VC_GATE_SMALL_EW ):
		case( PID_GARAGE_GATE_SMALL_EW ):
		case( PID_FARM_GATE_SMALL_EW ):
		case( PID_ELEVATOR_DOOR_EW ):
		case( PID_ELEVATOR_DOOR_OLD_EW ):
		case( PID_VAULT_DOOR0_EW ):
		case( PID_VAULT_DOOR1_EW ):
		case( PID_VAULT_DOOR2_EW ):
		case( PID_VAULT_DOOR3_EW ):
		case( PID_VAULT_DOOR4_EW ):
		case( PID_WAREHOUSE_DOOR_1_EW ):
		case( PID_WAREHOUSE_DOOR_2_EW ):
		case( PID_WAREHOUSE_DOOR_3_EW ):
		case( PID_WAREHOUSE_DOOR_4_EW ):
		case( PID_WAREHOUSE_DOOR_5_EW ):
		case( PID_WAREHOUSE_DOOR_6_EW ):
		case( PID_SLIDE_DOOR_1_EW ):
		case( PID_SLIDE_DOOR_2_EW ):
		case( PID_SLIDE_DOOR_3_EW ):
		case( PID_SLIDE_DOOR_4_EW ):
		case( PID_LIFT_DOOR_1_EW ):
		case( PID_LIFT_DOOR_2_EW ):
		case( PID_LIFT_DOOR_3_EW ):
		case( PID_LIFT_DOOR_4_EW ):
		case( PID_LIFT_DOOR_5_EW ):
		case( PID_LIFT_DOOR_6_EW ):
		case( PID_LIFT_DOOR_7_EW ):
		case( PID_ROUND_DOOR1_EW ):
		case( PID_ROUND_DOOR2_EW ):
		case( PID_ROUND_DOOR3_EW ):
		case( PID_ROUND_DOOR4_EW ):
		case( PID_SECRET_METAL_DOOR_EW ):
		case( PID_VAULT_GATE_EW ):
		case( PID_VAULT_GATE_NEW_EW ):
			dir = 1;
			blocker_count = 1;
			break;
		case( PID_GARAGE_GATE_SMALL_NS ):
		case( PID_HIDDEN_DOOR_NS ):
		case( PID_ROUND_DOOR1_NS ):
		case( PID_ROUND_DOOR2_NS ):
		case( PID_VAULT_MAIN_GATE ):
		case( PID_VAULT_GATE_NS ):
		case( PID_VAULT_GATE_NEW_NS ):
		case( PID_CATHDOOR_NS ):
			dir = 0;
			blocker_count = 1;
			break;
		default:
			return;
	}	

	if( create )
	{
		for ( uint16 i = 0; i < blocker_count; i++ )
		{
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 0, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 1, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 5, 1 );
			}
			
			Item@ busy = map.GetItem( tx,ty, PID_DOOR_BLOCKER );
			if( !valid( busy ) )
			{
				@ door_blocker = map.AddItem( tx, ty, PID_DOOR_BLOCKER, 1 );
				push_out( map, tx, ty );
				if( valid( door_blocker ) )
				{
					door_blocker.PARENT_ITM_ID = door.Id;
				}
			}
		}

		tx = door.HexX;
		ty = door.HexY;

		for ( uint16 i = 0; i < blocker_count; i++ )
		{
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 4, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 3, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 2, 1 );
			}
			
			Item@ busy = map.GetItem( tx,ty, PID_DOOR_BLOCKER );
			if( !valid( busy ) )
			{
				@ door_blocker = map.AddItem( tx, ty, PID_DOOR_BLOCKER, 1 );
				push_out( map, tx, ty );
				if( valid( door_blocker ) )
				{
					door_blocker.PARENT_ITM_ID = door.Id;
				}
			}
		}
		door.SetEvent( ITEM_EVENT_FINISH, "gateway@_DeleteDoorBlockers" );
	}
	else
	{
		_DeleteDoorBlockers( door, true );
	}
}

//~run gateway push_out x y 0
void push_out( Critter& cr, int x, int y, int )
{
	cr.Say( SAY_NETMSG, flagValue( push_out( cr.GetMap(), x, y ), WHITE, RED ) + "push_out(" + x + ", " + y + ")" );
}

bool push_out( Map& map, int x, int y )
{
	Critter@ cr = map.GetCritter( x, y );
	if( valid( cr ) && cr.IsLife() )
	{
		for( int i = 2; i < 8; i++ )
		{
			if( push( cr, i % 6 ) )
			{
				return true;
			}
		}
	}
	return false;
}

bool push( Critter& cr, uint dir )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) ) return false;
	
	uint16 x = cr.HexX, y = cr.HexY;
	map.MoveHexByDir( x, y, dir, 1 );

	if( !cr.TransitToHex( x, y, dir ) )
	{
		return false;
	}

	KnockoutOnce( cr, 100 );
	
	return true;
}

void ToggleLaserFence( Map& map, Item& emitter, bool create )
{
	if( !valid( map ) )
	{
		return;
	}
	
	if( !valid( emitter ) )
	{
		return;
	}
	
	uint16 emitterPid = emitter.GetProtoId();
	uint16 hx = emitter.HexX, hy = emitter.HexY;
	
	uint steps = 0;
	if( create && emitter.FIELD_STATE == EMITTER_DISABLED )
	{
		emitter.FIELD_STATE = EMITTER_ENABLED;
		Item@ deathHex;
		@ deathHex = map.AddItem( hx, hy, PID_DEATH_HEX, 1 );
		if( valid( deathHex ) )
		{
			deathHex.PARENT_ITM_ID = emitter.Id;
		}
		
		uint16 tx = hx, ty = hy;
		for( uint i = 0, len = 100; i < len; i++ )
		{
			steps ++;
			if( emitterPid == PID_LAZER_EMITTER_NS )
			{
				map.MoveHexByDir( tx, ty, 2, 1 );
				@ deathHex = map.AddItem( tx, ty, PID_DEATH_HEX, 1 );
				if( valid( deathHex ) )
				{
					deathHex.PARENT_ITM_ID = emitter.Id;
					CheckVictims( map, tx, ty );
					deathHex.DEATH_HEX_TYPE = ANIM2_DEAD_LASER;
				}
				
				Item@ reciever = map.GetItem( tx, ty, PID_LAZER_EMITTER_SN );
				if( valid( reciever ) )
				{
					break;
				}
				
				if( steps == 2 )
				{
					Item@ fieldVfx = map.AddItem( tx, ty, PID_LAZER_FENCE_NS, 1 );
					if( valid( fieldVfx ) )
					{
						fieldVfx.PARENT_ITM_ID = emitter.Id;
						PlayGenericSound( map, tx, ty, "saber_on.ogg", 6 ); 
					}
					
					steps = 0;
				}
			}
			else if( emitterPid == PID_LAZER_EMITTER_WE )
			{
				//TECH DEBT
				break;
			}
		}
		
	}
	else if( !create && emitter.FIELD_STATE == EMITTER_ENABLED )
	{
		emitter.FIELD_STATE = EMITTER_DISABLED;
		Item@[] toClean;
		map.GetItems( PID_DEATH_HEX, toClean );
		map.GetItems( PID_LAZER_FENCE_NS, toClean );
		for( uint i = 0, len = toClean.length(); i < len; i ++ )
		{
			steps ++;
			Item@ delete = toClean[i];
			if( valid( delete ) && delete.PARENT_ITM_ID == int( emitter.Id ) )
			{
				if( steps == 2 )
				{
					PlayGenericSound( map, delete.HexX, delete.HexY, "saber_off.ogg", 6 );
					steps == 0;
				}
				
				DelGatewayItm( delete );
			}
		}
		
		toClean.resize(0);
	}
}

void CheckVictims( Map& map, uint16 hx, uint16 hy )
{
	Critter@[] victims; 
	map.GetCrittersHex( hx, hy, 0, FIND_LIFE_AND_KO, victims );
	if( victims.length() > 0 )
	{
		for( uint j = 0; j < victims.length(); j++ )
		{
			Critter@ victim = victims[ j ];
			victim.ToDead( ANIM2_DEAD_LASER, null );
			PlayGenericSound( map, victim.HexX, victim.HexY, "saber_kill.ogg", 6 ); 
		}
	}
}

void ToggleForceField( Map& map, Item& emitter, bool create )
{
	if( !valid( map ) )
	{
		return;
	}
	if( !valid( emitter ) )
	{
		return;
	}
	
	emitter.FIELD_STATE = create? EMITTER_ENABLED : EMITTER_DISABLED;
	
	uint16 emitterPid = emitter.GetProtoId();
	uint16 fieldPid = 0;
	uint16 hx = emitter.HexX, hy = emitter.HexY;
	uint8 dir = 0;

	switch( emitterPid )
	{
		case( PID_EB_EMITTER_HOR0 ):
		case( PID_EB_EMITTER_HOR1 ):
		case( PID_EB_EMITTER_HOR2 ):
		case( PID_EB_EMITTER_HOR3 ):
			fieldPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_EB_SHORT_HOR1 : PID_EB_SHORT_HOR1_RED;
			dir = 4;
			break;
		case( PID_EB_EMITTER_VERT0 ):
		case( PID_EB_EMITTER_VERT1 ):
		case( PID_EB_EMITTER_VERT2 ):
		case( PID_EB_EMITTER_VERT3 ):
			fieldPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_EB_SHORT_VERT1 : PID_EB_SHORT_VERT1_RED;
			dir = 2;
			break;
	}
	
	Item@ field = null;
	Item@ blocker0 = null;
	Item@ blocker1 = null;
	uint16 hexPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_DOOR_BLOCKER : PID_FIELD_BLOCKER;
	if( dir == 2 )
	{
		map.MoveHexByDir( hx, hy, dir, 2 );
		@field = create ? map.AddItem( hx, hy, fieldPid, 1 ) : map.GetItem( hx, hy, fieldPid );
		if( valid( field ) )
		{
			map.MoveHexByDir( hx, hy, 5, 1 );
			@ blocker0 = create? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			map.MoveHexByDir( hx, hy, 2, 2 );
			@ blocker1 = create? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			if( !create )
			{
				DelGatewayItm( field );
				DelGatewayItm( blocker0 );
				DelGatewayItm( blocker1 );
			}
		}
	}
	else
	{
		map.MoveHexByDir( hx, hy, 4, 1 );
		map.MoveHexByDir( hx, hy, 3, 1 );
		@field = create ? map.AddItem( hx, hy, fieldPid, 1 ) : map.GetItem( hx, hy, fieldPid );
		if( valid( field ) )
		{
			map.MoveHexByDir( hx, hy, 4, 1 );
			@ blocker0 = create ? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			map.MoveHexByDir( hx, hy, 1, 1 );
			map.MoveHexByDir( hx, hy, 0, 1 );
			@ blocker1 = create ? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			if( !create )
			{
				DelGatewayItm( field );
				DelGatewayItm( blocker0 );
				DelGatewayItm( blocker1 );
			}
		}
	}
	string sound = create? "ELECTRI1.mp3" : "ELECTRIC.mp3";
	PlayGenericSound( map, emitter.HexX, emitter.HexY, sound, 10 );
}

void DelGatewayItm( Item@ item )
{
	if( valid( item ) )
	{
		DeleteItem( item );
	}
}

//DOOR WITH DIALOG
void SecurityDoorOpenClose( Critter& player ) 
{
	Item @door = GetItem( player.ParamBase[ ST_LAST_DOOR_ID ] );
	uint event_id = door.DOOR_EVENT;
	uint duration = 0;
	uint[] values;

	if( event_id == 0 )
	{
		event_id = CreateDoorEvent( door, duration, values );
	}

	if( !GetTimeEvent( event_id, duration, values ) )
	{ 
		event_id = CreateDoorEvent( door, duration, values );
	}

	values[EVENT_ON_OFF] = 1;
	duration = REAL_SECOND( 3 );
	door.LockerOpen();
	Map@ map = player.GetMap();
	ToggleDoorBlocker( map, door, false );
	SetTimeEvent( event_id, duration, values );
}

uint CreateDoorEvent( Item @item, uint &duration, uint[] &values ) 
{
	uint[] values_array = { item.Id, 1, 0 };
	duration = REAL_SECOND( 1 );
	item.DOOR_EVENT = CreateTimeEvent( AFTER( duration ), "gateway@e_CloseSecurityDoor", values_array, false );
	values = values_array;
	values[EVENT_ID] = item.DOOR_EVENT;

	return item.DOOR_EVENT;
}

uint e_CloseSecurityDoor( uint[]@ values )
{
	if( values[EVENT_ON_OFF] == 0 )
	{
		return REAL_SECOND( 1 );
	}

	Item @door = GetItem( values[DOOR_ID] );

	door.LockerClose();

	uint16 hexX = 0, hexY = 0;
	Map@ map = door.GetMapPosition( hexX, hexY );
	ToggleDoorBlocker( map, door, true );

	values[EVENT_ON_OFF] = 0;

	return REAL_SECOND( 1 );
}

//#run gateway start itemId
void unsafe_start( Critter& cr, int p0, int p1, int p2, string@, int[]@ ) 
{
	if( isGM( cr ) )
	{
		start( cr, p0, p1, p2 ); 
	}
}

//~run gateway start 0 0 0
void start( Critter& cr, int p0, int p1, int p2 ) 
{
	Item @item = GetItem( p0 );
	int event_id = item.DOOR_EVENT;

	if( item.DOOR_EVENT == 0 )
	{
		cr.Say( SAY_NORM, "event: " + event_id + " not found." );
		return;
	}

	cr.Say( SAY_NORM, "event " + event_id + " deleted." );

	item.DOOR_EVENT = 0;
}

bool BlockerCheck( Critter& cr, Map& map, Scenery& scen )
{
	Item@[] items;
	map.GetItems( scen.HexX, scen.HexY, items );
	if( items.length() > 0 )
	{
		for( uint i = 0; i < items.length(); i ++ )
		{
			Item@ item = items[i];
			if( !FLAG( item.Flags, ITEM_NO_BLOCK ) )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 The way is blocked" );
				return true;
			}
		}
	}
	return false;
}

bool BlockerCheck( Critter& cr, Map& map, int& entireId )
{
	uint count = map.CountEntire( entireId );

	if( count == 0 )
	{
		Log( "Map entire Id error, check mapper for absent entires!" );
	}
	else if( count > 1 )
	{
		Log( "Map entire Id error, check mapper for duplicates entires!" );
	}
	else
	{
		uint16 hx = 0, hy = 0;
		map.GetEntireCoords( entireId, 0, hx, hy );
		Item@ hatch = map.GetItem( hx, hy, PID_SEWERS_HATCH );
		if( valid( hatch ) )
		{
			if( !FLAG( hatch.LockerCondition, LOCKER_ISOPEN ) && hatch.LockerId != 0 &&
                !FLAG( hatch.LockerCondition, LOCKER_BROKEN ) && FLAG( hatch.LockerCondition, LOCKER_LOCKED ) )
			{
				if( IsKeyAviable( cr, hatch.LockerId ) )
				{
					UNSETFLAG( hatch.LockerCondition, LOCKER_LOCKED );
					hatch.LockerOpen();
				}
				else
				{
					cr.Say( SAY_NETMSG, "|0xFFFF00 The way is blocked" );
					return true;
				}
			}
			else
			{
				hatch.LockerOpen();
			}
		}
	}
	return false;
}

void _DeleteDoorBlockers( Item& item, bool deleted )
{
	if( deleted )
	{
		int item_id = item.Id;
		Item@[] blockers;
		Item@[] delete;
		Item@ blocker = null;
		GetAllItems( PID_DOOR_BLOCKER, blockers );
		for( uint i = 0, len =  blockers.length(); i < len; i ++ )
		{
			@ blocker = blockers[i];
			if( valid( blocker ) )
			{
				if( blocker.PARENT_ITM_ID == item_id )
				{
					delete.insertLast( blocker );
				}
			}
		}
		
		if( delete.length() > 0 )
		{
			DeleteItems( delete );
		}
		
		blockers.resize(0);
	}
}

#endif //GATEWAY