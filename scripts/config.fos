// Game configuration, for server/client/mapper, call in start functions

#include "_macros.fos"
#include "_animation.fos"
#include "config_cache_h.fos"

#ifndef __COMPILER

// /
// / Server and client initialization
// /

# ifndef __MAPPER

#include "_time.fos"

void InitializeGame()							// Export
{
    // / Init global vars
    __ScriptRunSuspendTimeout   = 25000;		// In milliseconds
    __ScriptRunMessageTimeout   = 5000;			// In milliseconds
    __LoggingVars               = false;
    __DisableTcpNagle           = true;
    __DisableZlibCompression    = false;
    __FloodSize                 = 16384;         // In bytes
    __NoAnswerShuffle           = false;
    __FixBoyDefaultExperience   = 0;
    __SneakDivider              = 4;
    __LevelCap                  = 12;
    __LevelCapAddExperience     = true;
    __LookNormal                = 30;
    __LookMinimum               = 0;
    __CritterIdleTick           = 5000;
    __TurnBasedTick             = 30000;
    __Breaktime                 = 0;			//Removed 1200ms default by overriding cases in client & main;
    __TimeoutTransfer           = 0;
    __TimeoutBattle             = REAL_SECOND( 60 );
    __ApRegeneration            = 10000;
    __RtApCostCritterWalk       = 0;			// 1 AP == 100, maximim 255
    __RtApCostCritterRun        = 0;			// 1 AP == 100, maximim 255
    __RtApCostMoveItemContainer = 10;
    __RtApCostMoveItemInventory = 10;
    __RtApCostPickItem          = 10;
    __RtApCostDropItem          = 10;
    __RtApCostReloadWeapon      = 20;
    __RtApCostPickCritter       = 10;
    __RtApCostUseItem           = 30;
    __RtApCostUseSkill          = 30;
    __RtAlwaysRun               = false;
    __TbApCostCritterMove       = 1;
    __TbApCostMoveItemContainer = 0;
    __TbApCostMoveItemInventory = 2;
    __TbApCostPickItem          = 3;
    __TbApCostDropItem          = 2;
    __TbApCostReloadWeapon      = 2;
    __TbApCostPickCritter       = 3;
    __TbApCostUseItem           = 3;
    __TbApCostUseSkill          = 3;
    __TbAlwaysRun               = true;
	// below are % based AP costs that alter the base
    __ApCostAimEyes             = 20;
    __ApCostAimHead             = 20;
    __ApCostAimGroin            = 20;
    __ApCostAimTorso            = 20;
    __ApCostAimArms             = 20;
    __ApCostAimLegs             = 20;
	// Skill modifier
    __HitAimEyes                = 60;
    __HitAimHead                = 50;
    __HitAimGroin               = 40;
    __HitAimTorso               = 0;
    __HitAimArms                = 30;
    __HitAimLegs                = 20;
    __RunOnCombat               = true;
    __RunOnTransfer             = true;
    __GlobalMapWidth            = 19;           // max 100
    __GlobalMapHeight           = 19;           // max 100
    __GlobalMapZoneLength       = 50;           // max 500
    __GlobalMapMaxGroupCount    = 10;
    __GlobalMapMoveTime         = 250;
    __EncounterTime             = 5000;
    __DeadHitPoints             = -50;
    __BagRefreshTime            = 60;           // Real minutes
    __WisperDist                = 2;
    __ShoutDist                 = 1;
    __CustomItemCost            = true;
    __RegistrationTimeout       = 0;			// In real seconds, 0 to disable
    __AccountPlayTime           = 0;			// In real seconds, 0 to disable
    __TalkDistance              = 5;
    __NpcMaxTalkers             = 12;
    __MinNameLength             = 3;			// Minimum 1
    __MaxNameLength             = 18;			// Maximum 30
    __DlgTalkMinTime            = 100000;
    __DlgBarterMinTime          = 50000;
    __MinimumOfflineTime        = 300000;		// 5 minutes
    // Look modifiers
    __LookChecks = 0;							// See Look checks in _defines.fos - managed by rust.dll
    __LookChecks |= LOOK_CHECK_DIR;				// Nerfe look by directions of look - managed by rust.dll
    __LookDir0 = 0;								// Nerf 0% of look radius with direct look - managed by rust.dll
    __LookDir1 = 0;								// Nerf 20% of look radius with front side look - managed by rust.dll
    __LookDir2 = 0;                         	// Nerf 40% of look radius with back side look - managed by rust.dll
    __LookDir3 = 0;                         	// Nerf 60% of look radius with back look - managed by rust.dll
    __LookDir4 = 0;                         	// Nerf 60% of look radius with back look (Square geometry) - managed by rust.dll
    // __LookChecks |= LOOK_CHECK_SNEAK_DIR; 	// Nerf opponent sneak by directions of look - managed by rust.dll
    __LookSneakDir0 = 90;						// Nerf 90% of opponent sneak with direct look
    __LookSneakDir1 = 60;						// Nerf 60% of opponent sneak with front side look
    __LookSneakDir2 = 30;                    	// Nerf 30% of opponent sneak with back side look
    __LookSneakDir3 = 0;                     	// Nerf 0% of opponent sneak with back look
    __LookSneakDir4 = 0;                     	// Nerf 0% of opponent sneak with back look (Square geometry)
    __LookChecks |= LOOK_CHECK_SNEAK_WEIGHT;	// Nerf sneak by current weight
    __LookWeight = 10;							// Lost 1 sneak point per 10 gramm
    __LookChecks |= LOOK_CHECK_TRACE;			// Tracing for wall aviablility
    __LookChecks |= LOOK_CHECK_SCRIPT;      	// Allow bool check_look(...) in main.fos, all other defines ignored
    __LookChecks |= LOOK_CHECK_ITEM_SCRIPT;		// Allow bool check_trap_look(...) in main.fos, for items with ITEM_TRAP flag

	bool LookDataActivation = true;
	if( LookDataActivation )
	{
		__LookChecks |= LOOK_CHECK_LOOK_DATA;
		
		WallMaterialHearMultiplier[MATERIAL_GLASS] = 80;
		WallMaterialHearMultiplier[MATERIAL_METAL] = 50;
		WallMaterialHearMultiplier[MATERIAL_PLASTIC] = 100;
		WallMaterialHearMultiplier[MATERIAL_WOOD] = 75;
		WallMaterialHearMultiplier[MATERIAL_DIRT] = 100;
		WallMaterialHearMultiplier[MATERIAL_STONE] = 25;
		WallMaterialHearMultiplier[MATERIAL_CEMENT] = 25;
		WallMaterialHearMultiplier[MATERIAL_LEATHER] = 100;
		WallMaterialHearMultiplier[MATERIAL_ARMORED_LEATHER] = 100;
		WallMaterialHearMultiplier[MATERIAL_POLYMER] = 100;
		WallMaterialHearMultiplier[MATERIAL_COMPOSITE] = 100;
		WallMaterialHearMultiplier[MATERIAL_FABRIC] = 100;
		WallMaterialHearMultiplier[MATERIAL_COPPER] = 100;
		WallMaterialHearMultiplier[MATERIAL_LEAD] = 100;
		WallMaterialHearMultiplier[MATERIAL_GOLD] = 100;
		WallMaterialHearMultiplier[MATERIAL_ORGANIC] = 100;
		WallMaterialHearMultiplier[MATERIAL_PAPER] = 100;
	}
    // Range of values for client engine
    __AbsoluteOffsets = true;
    __SkillBegin = 200;
    __SkillEnd = 225;
    __TimeoutBegin = 230;
    __TimeoutEnd = 252;
    __KillBegin = 260;
    __KillEnd = 299;
    __PerkBegin = 300;
    __PerkEnd = 449;
    __AddictionBegin = 470;
    __AddictionEnd = 476;
    __KarmaBegin = 480;
    __KarmaEnd = 497;
    __DamageBegin = 500;
    __DamageEnd = 506;
    __TraitBegin = 550;
    __TraitEnd = 565;
    __ReputationBegin = 570;
    __ReputationEnd = 599;

    // Compare with >=
    __ReputationLoved = 30;
    __ReputationLiked = 15;
    __ReputationAccepted = 1;
    __ReputationNeutral = 0;
    __ReputationAntipathy = -14;
    __ReputationHated = -29;
    // Other is Vilified

    // Registation values
    __StartSpecialPoints  = 40;
    __StartTagSkillPoints = 3;

    // Roleplay
    __SkillMaxValue = 300;
    __SkillModAdd2  = 125;
    __SkillModAdd3  = 150;
    __SkillModAdd4  = 175;
    __SkillModAdd5  = 200;
    __SkillModAdd6  = 225;

    // / Client specific definitions
    #  ifdef __CLIENT
    __RoofAlpha = 255;
    __HideCursor = false;
    __DisableLMenu = false;
    __DisableMouseEvents = false;
    __DisableKeyboardEvents = false;
    __HidePassword          = true;
    __PlayerOffAppendix = "|0x44ffffff  (off)";
    __SpritesZoomMax = 5.0f;
    __SpritesZoomMin = 0.2f;
    // __AlwaysRun Specifed in config
    __AlwaysRunMoveDist = 1;
    __AlwaysRunUseDist = 5;
    __CritterFidgetTime     = Random( 100000, 200000 );
    __Anim2CombatBegin      = ANIM2_BEGIN_COMBAT;
    __Anim2CombatIdle       = ANIM2_IDLE_COMBAT;
    __Anim2CombatEnd        = ANIM2_END_COMBAT;

    // Next vars defined in client config file, if you want override it, than uncomment need vars
    // __Animation3dSmoothTime=250; // In milliseconds
    // __Animation3dFPS=0; // Zero to disable and use Smoothing

    __RunModDiv = 8;							// makes player to switch from running to walking at 10/100 AP, original value of 3 makes it to switch at 30/100

    #  endif

    // / Parameters behavoiours
    #  ifndef __CLIENT
    string dllName = "fonline_tnf.dll@";
    #  endif
    #  ifdef __CLIENT
    string dllName = "fonline_tnf_client.dll@";
    #  endif
    SetParameterGetBehaviour( ST_STRENGTH, dllName + "getParam_Strength" );
    SetParameterGetBehaviour( ST_PERCEPTION, dllName + "getParam_Perception" );
    SetParameterGetBehaviour( ST_ENDURANCE, dllName + "getParam_Endurance" );
    SetParameterGetBehaviour( ST_CHARISMA, dllName + "getParam_Charisma" );
    SetParameterGetBehaviour( ST_INTELLECT, dllName + "getParam_Intellegence" );
    SetParameterGetBehaviour( ST_AGILITY, dllName + "getParam_Agility" );
    SetParameterGetBehaviour( ST_LUCK, dllName + "getParam_Luck" );
    SetParameterGetBehaviour( ST_CURRENT_HP, dllName + "getParam_Hp" );
    SetParameterGetBehaviour( ST_MAX_LIFE, "parameters@getParam_MaxLife" );
    SetParameterGetBehaviour( ST_ACTION_POINTS, dllName + "getParam_MaxAp");
    SetParameterGetBehaviour( ST_CURRENT_AP, dllName + "getParam_Ap" );
    SetParameterGetBehaviour( ST_APREGEN, dllName + "getParam_RegenAp" );
    SetParameterGetBehaviour( ST_MAX_MOVE_AP, dllName + "getParam_MaxMoveAp" );
    SetParameterGetBehaviour( ST_MOVE_AP, dllName + "getParam_MoveAp" );
    SetParameterGetBehaviour( ST_CARRY_WEIGHT, "parameters@getParam_MaxWeight" );
    SetParameterGetBehaviour( ST_MELEE_DAMAGE, dllName + "getParam_MeleeDmg" );
    SetParameterGetBehaviour( ST_SEQUENCE, "parameters@getParam_Sequence" );
    SetParameterGetBehaviour( ST_HEALING_RATE, "parameters@getParam_HealingRate" );
    SetParameterGetBehaviour( ST_CRITICAL_CHANCE, "parameters@getParam_CriticalChance" );
    SetParameterGetBehaviour( ST_MAX_CRITICAL, dllName + "getParam_MaxCritical" );
    SetParameterGetBehaviour( ST_ARMOR_CLASS, dllName + "getParam_Ac" );
    SetParameterGetBehaviour( ST_RADIATION_RESISTANCE, dllName + "getParam_RadiationResist" );
    SetParameterGetBehaviour( ST_POISON_RESISTANCE, dllName + "getParam_PoisonResist"   );
	// SetParameterGetBehaviour( ST_BONUS_LOOK,		dllName + "getParam_BonusLook" 		);
	
    for( uint i = ST_NORMAL_RESIST; i <= ST_EXPLODE_RESIST; i++ )
        SetParameterGetBehaviour( i, dllName + "getParam_DamageResistance" );
    for( uint i = ST_NORMAL_ABSORB; i <= ST_EXPLODE_ABSORB; i++ )
        SetParameterGetBehaviour( i, dllName + "getParam_DamageThreshold" );
    for( uint i = TIMEOUT_BEGIN; i <= TIMEOUT_END; i++ )
        SetParameterGetBehaviour( i, dllName + "getParam_Timeout" );
    // for(uint i = REPUTATION_BEGIN; i <= REPUTATION_END   ; i++) SetParameterGetBehaviour(i, dllName + "getParam_Reputation"      );
    // for(uint i = REPUTATION_BEGIN; i <= REPUTATION_END   ; i++) SetParameterChangeBehaviour(i, dllName + "changedParam_Reputation");

    SetParameterGetBehaviour( CR_HUNGER_SPEED, "parameters@getParam_CR_HUNGER_SPEED" );
    SetParameterGetBehaviour( CR_THIRST_SPEED, "parameters@getParam_CR_THIRST_SPEED" );
	SetParameterGetBehaviour( CR_DRUNK_SPEED, "parameters@getParam_CR_DRUNK_SPEED"   );
    SetParameterGetBehaviour( CR_GLOBAL_OVERDOSE_SPEED, "parameters@getParam_CR_GLOBAL_OVERDOSE_SPEED" );
    SetParameterGetBehaviour( CR_WETNESS_SPEED, "parameters@getParam_CR_WETNESS_SPEED" );
    #  ifndef __CLIENT
    SetParameterChangeBehaviour( CR_HUNGER_SPEED, "parameters@changedParam_CR_HUNGER_SPEED" );
	SetParameterChangeBehaviour( CR_THIRST_SPEED, "parameters@changedParam_CR_THIRST_SPEED" );
	SetParameterChangeBehaviour( CR_DRUNK_SPEED, "parameters@changedParam_CR_DRUNK_SPEED" );
    SetParameterChangeBehaviour( CR_GLOBAL_OVERDOSE_SPEED, "parameters@changedParam_CR_GLOBAL_OVERDOSE_SPEED" );
    SetParameterChangeBehaviour( CR_WETNESS_SPEED, "parameters@changedParam_CR_WETNESS_SPEED" );
	SetParameterChangeBehaviour( ST_CURRENT_HP, "parameters@changedParam_Hp" );
    SetParameterChangeBehaviour( ST_EXPERIENCE, "parameters@changedParam_Experience" );
    SetParameterChangeBehaviour( MODE_HIDE, "parameters@changedParam_Hide" );
    SetParameterChangeBehaviour( TRAIT_FAST_SHOT, "parameters@changedParam_FastShot" );
	
	SetParameterChangeBehaviour( ST_AVATAR_INDEX, "avatars@changedParam_AvatarIndex" );
	
	SetParameterChangeBehaviour( AVA_HASH_0, "avatars@changedParam_AvatarHash" );
	SetParameterChangeBehaviour( AVA_HASH_1, "avatars@changedParam_AvatarHash" );
	SetParameterChangeBehaviour( AVA_HASH_2, "avatars@changedParam_AvatarHash" );
	
	
    for( uint i = PERK_BEGIN; i <= PERK_END; i++ )
        SetParameterChangeBehaviour( i, "parameters@changedParam_Perks" );
    SetParameterDialogGetBehaviour( ST_INTELLECT, "parameters@getParamDialog_Intellect" );
    for( uint i = REPUTATION_BEGIN; i <= REPUTATION_END; i++ )
        SetParameterDialogGetBehaviour( i, "parameters@getParamDialog_Reputation" );
	SetParameterChangeBehaviour( TRAIT_FAST_METABOLISM, "parameters@changedParam_FastMetabolism" );
	SetParameterChangeBehaviour( TRAIT_BRUISER, "parameters@changedParam_Bruiser" );
	SetParameterChangeBehaviour( TRAIT_SEX_APPEAL, "parameters@changedParam_SexAppeal" );
	SetParameterChangeBehaviour( TRAIT_SMALL_FRAME, "parameters@changedParam_SmallFrame" );
	SetParameterChangeBehaviour( TRAIT_FINESSE, "parameters@changedParam_Finesse" );
	SetParameterChangeBehaviour( TRAIT_KAMIKAZE, "parameters@changedParam_Kamikaze" );
	SetParameterChangeBehaviour( TRAIT_SURE_FOOTED, "parameters@changedParam_GoodNatured" );
	SetParameterChangeBehaviour( TRAIT_HEAVY_HANDED, "parameters@changedParam_HeavyHanded" );
	SetParameterChangeBehaviour( TRAIT_NERD, "parameters@changedParam_Jinxed" );
	SetParameterChangeBehaviour( CR_TYPING_TIME, "parameters@changedParam_CR_TYPING_TIME" );
	// SetParameterChangeBehaviour(ST_BASE_CRTYPE, "parameters@changedParam_BaseCrType");
    #  endif
    #  ifdef __CLIENT
    // for(uint i=GOOD_EVIL_LIST_BEGIN;i<=GOOD_EVIL_LIST_END;i++) SetParameterChangeBehaviour(i,"parameters@changedParam_GoodEvilList"); (not used)
    SetParameterChangeBehaviour( ST_LEVEL, "parameters@changedParam_Level" );
    SetParameterChangeBehaviour( ST_EXPERIENCE, "parameters@changedParam_Experience" );
    SetParameterChangeBehaviour( ST_UNSPENT_PERKS, "parameters@changedParam_UnspentPerks" );
    SetParameterChangeBehaviour( ST_SCALE_FACTOR, "parameters@changedParam_ScaleFactor" );
    #  endif

    #  ifdef __SERVER
    SetParameterChangeBehaviour( ST_HUNGER, "parameters@changedParam_Hunger" );
    SetParameterChangeBehaviour( ST_THIRST, "parameters@changedParam_Thrist" );
    SetParameterChangeBehaviour( ST_DYSPNEA, "parameters@changedParam_Dyspnea" );
	SetParameterChangeBehaviour( ST_DRUNK, "parameters@changedParam_Drunk" );
    SetParameterChangeBehaviour( ST_GLOBAL_OVERDOSE, "parameters@changedParam_Overdose");
    SetParameterChangeBehaviour( ST_WETNESS, "parameters@changedParam_Wetness" );
	SetParameterChangeBehaviour( CR_IS_WINDUPED, "parameters@changedParam_Windup" );
    SetParameterChangeBehaviour( ST_PERCEPTION, "parameters@changedParam_Perception" );
    SetParameterChangeBehaviour( ST_PERCEPTION_EXT, "parameters@changedParam_PerceptionExt" );
    SetParameterChangeBehaviour( QST_VISION, "parameters@changedParam_Vision" );
    SetParameterChangeBehaviour( QST_INVIS, "parameters@changedParam_Invis" );

    #  endif // __SERVER
             // / Registration parameters
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
        SetRegistrationParameter( i, true );
    for( uint i = TAG_SKILL1; i <= TAG_SKILL3; i++ )
        SetRegistrationParameter( i, true );
    for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
        SetRegistrationParameter( i, true );
    SetRegistrationParameter( ST_AGE, true );
    SetRegistrationParameter( ST_GENDER, true );
    SetRegistrationParameter( ST_BODY_TYPE, true );
    SetRegistrationParameter( ST_BASE_CRTYPE, true );
    #  ifdef PLAYERS_3D
    SetRegistrationParameter( ST_BASE_CRTYPE, true );
    SetRegistrationParameter( ST_ANIM3D_LAYERS + ANIM3D_LAYER_SKIN, true );
    SetRegistrationParameter( ST_ANIM3D_LAYERS + ANIM3D_LAYER_HAIR, true );
    SetRegistrationParameter( ST_ANIM3D_LAYERS + ANIM3D_LAYER_MUSTACHE, true );
    SetRegistrationParameter( ST_ANIM3D_LAYERS + ANIM3D_LAYER_PONYTAIL, true );
    SetRegistrationParameter( ST_ANIM3D_LAYERS + ANIM3D_LAYER_BEARD, true );
    #  endif

    // / New slots allow here
    #  ifdef PLAYERS_3D
    #   ifndef PLAYERS_3D_NO_HEAD
    //AllowSlot( SLOT_HEAD, "InvHead" );
    #   endif
    #  endif
	AllowSlot( SLOT_MISC, "InvMisc" );
    AllowSlot( SLOT_HEAD, "InvHead" );
	AllowSlot( SLOT_BACK, "InvBack");
	
   // / Geometry
    InitializeGeometry();
   // Config files 
    InitializeFromConfigs();
}

# endif // !__MAPPER

// /
// / Mapper initialization
// /

# ifdef __MAPPER

void InitializeGame() // Export
{
    __RoofAlpha             = 200;
    __SpritesZoomMax        = 10.0f;
    __SpritesZoomMin        = 0.2f;
    __Anim2CombatBegin      = ANIM2_BEGIN_COMBAT;
    __Anim2CombatIdle       = ANIM2_IDLE_COMBAT;
    __Anim2CombatEnd        = ANIM2_END_COMBAT;
    __SplitTilesCollection  = true;

    // / New slots allow here
	
	AllowSlot( SLOT_MISC, "InvMisc" );
	AllowSlot( SLOT_HEAD, "InvHead");
	AllowSlot( SLOT_BACK, "InvBack");

    InitializeGeometry();

    // Config files 
    InitializeFromConfigs();
}

# endif // __MAPPER

// /
// / Geometry
// /

void InitializeGeometry()
{
    // Geometry customization
    // GEOMETRY_FALLOUT
    // GEOMETRY_TACTICS
    // GEOMETRY_ARCANUM
    __GeometryType = GEOMETRY_FALLOUT;

    // __MapHexagonal     true - hexagonal, false - square;
    // __MapHexWidth      hex/square width;
    // __MapHexHeight     hex/square height;
    // __MapHexLineHeight hex/square line height;
    // __MapTileOffsX/Y   tile default offsets;
    // __MapRoofOffsX/Y   roof default offsets;
    // __MapRoofSkipSize  default length (in hexes/squares) of roof tiles;
    // __MapCameraAngle   angle for 3d critters rendering;
    // __MapSmoothPath    enable pathfinding path smoothing;
    // __MapDataPrefix    path and prefix for names used for geometry sprites.

    switch( __GeometryType )
    {
    case GEOMETRY_FALLOUT:
        __MapHexagonal     = true;
        __MapHexWidth      = 32;
        __MapHexHeight     = 16;
        __MapHexLineHeight = 12;
        __MapTileOffsX     = -8;
        __MapTileOffsY     = 34;
        __MapRoofOffsX     = -8;
        __MapRoofOffsY     = -64;
        __MapRoofSkipSize  = 2;
        __MapCameraAngle   = 25.7f;
        __MapSmoothPath    = true;
        __MapDataPrefix    = "art/geometry/fallout_";
        break;

    case GEOMETRY_TACTICS:
        __MapHexagonal     = false;
        __MapHexWidth      = 36;
        __MapHexHeight     = 18;
        __MapHexLineHeight = 9;
        __MapTileOffsX     = 18;
        __MapTileOffsY     = 18;
        __MapRoofOffsX     = 18;
        __MapRoofOffsY     = -72;
        __MapRoofSkipSize  = 2;
        __MapCameraAngle   = 30.0f;
        __MapSmoothPath    = false;
        __MapDataPrefix    = "art/geometry/tactics_";
        break;

    case GEOMETRY_ARCANUM:
        __MapHexagonal     = false;
        __MapHexWidth      = 78;
        __MapHexHeight     = 40;
        __MapHexLineHeight = 20;
        __MapTileOffsX     = 39;
        __MapTileOffsY     = 40;
        __MapRoofOffsX     = 39;
        __MapRoofOffsY     = -44;
        __MapRoofSkipSize  = 1;
        __MapCameraAngle   = 30.0f;
        __MapSmoothPath    = true;
        __MapDataPrefix    = "art/geometry/arcanum_";
        break;

    default:
        Log( "Wrong geometry type value." );
        break;
    }
}


void InitializeFromConfigs()
{
    #ifdef __CLIENT

		string valStr = GetConfigValue( CFG_FILENAME, "Game Options", "RoofAlpha", "0" );
		int val = 0;
		if( StrToInt( valStr, val ) )
		{
			if( val > -1 )
			{
				val = MIN( val, 255 );
				__RoofAlpha = val;
			}
		}
		

		
    #endif // __CLIENT


    #ifdef __SERVER


    #endif //__SERVER


    #ifdef __MAPPER


    #endif //__MAPPER
}
