#ifndef MINING
#define MINING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"
#include "entire_h.fos"
#include "repair_h.fos"
#include "combat_h.fos"
#include "speed_h.fos"

import uint8 checkCave(Map& map, uint16 tx, uint16 ty) from "qmap_cave";

// Ores array search
uint16 FindOre( Item@ targetItem )
{
    return FindOre( targetItem.GetProtoId() );
}

uint16 FindOre( uint16 pid )
{    
    int index = 0;
    
    for( uint i = 0, l = OreList.length(); i < l; i++ )
    {
        index = OreList[i].find( pid );
        if( index != -1 )
		{
            return ++ i;
		}
	}
    return 0;
}

// LTP (long time process)
bool ltp_mining_inited = false;
void ltp_mining_init()
{
	LTPREG( LTP_MINING, process_mining )
	ltp_mining_inited = true;
}
//exported to main.fos - checks before start
bool PrepareMining( Critter& cr, Item@ tool, Item@ target ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    {
    	return false;
    }
	
	if( !valid( tool ) || !valid(target) )
	{
		return false;
	}
	
   	uint toolPid = tool.GetProtoId();
	if( MiningTools.find( toolPid ) == -1 )
	{
		return false;
	}
	
	uint8 Ore = FindOre( target );
	if( Ore == 0 )
	{
		return false;
	}
	
	if( tool.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}

	if( _ItemIsBroken( tool ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOOL_BROKEN );
		return true;
	}

	if( IsTired( cr ) ) 
	{ 
		return false;
	}
	
	if( cr.IsDmgTwoArm() || cr.IsDmgTwoLeg() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	if( tool.IsDeteriorable() )
	{
		uint det = GetDeteriorationProcent( tool );
		SetDeterioration( tool, det + 1 );
		if( toolPid == PID_DRILL )
		{
			if( tool.AmmoCount < 1 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_DRILL_CHARGE );
				return false;
			}
			
			if( tool.Deterioration >= MAX_DETERIORATION )
			{
				BreakTool( cr, tool );
				return false;
			}
		}
	}
	
	start_mining( cr, tool, target );
	return true;
}

bool start_mining( Critter& cr, Item& tool, Item& target )
{
	if(!ltp_mining_inited)
	{
		ltp_mining_init();
	}
	
	if( valid( tool ) && valid( target ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint object_dpa = cr.Skill[ SK_MINING ] + ( cr.Stat[ST_STRENGTH] * 10 ) + OBJECT_DPA_BASE; 
		cr.ParamBase[ ST_LTP_SEQUENCE ] = int( ceil( OBJECT_HP_BASE / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( tool.GetProtoId() == PID_DRILL )
		{
			cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 700;
			cr.ParamBase[ ST_LTP_SEQUENCE ] = 10;
			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "drill_mine.ogg", 100 );
		}
		else
		{
			uint[] values = { cr.Id, tool.Id };
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_MiningSound", values, false);
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		}
		
		StartProcess( cr, LTP_MINING, 0, tool.Id, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_mining( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_MINING )

    Item@ tool = GetItem( param1 );
  	Item@ target = GetItem( param2 );
  	if( valid( tool ) && valid( target ) )
    {
      	param0++;
		
		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			Profit( cr, tool, target );
			int skillNum = SK_MINING;
			Accident( cr, skillNum );
			SayLog( cr, crInfo( cr ) + " has mined an ore node." );
		}
		else
		{
			if( tool.GetProtoId() == PID_DRILL )
			{
				_CritAnimateBrust( cr );
			}
			else
			{
				_CritAnimateSwing(cr);
				uint[] values = { cr.Id, tool.Id };
				CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_MiningSound", values, false );
			}

			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
			
			if( cr.IsInjured() )
			{
				uint damage = INJURED_HP_DAMAGE - cr.Stat[ ST_ENDURANCE ];
				hurt( cr, damage );
			}
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
    }
	return 0;
}

uint e_MiningSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	Item@ tool = GetItem(values[1]);
	uint toolPid = tool.GetProtoId();
	string sound = "";
	switch( toolPid )
	{
		case( PID_SLEDGEHAMMER ):
		case( PID_SUPER_SLEDGE ):
		case( PID_SLEDGEHAMMER2 ):
		case( PID_SM_HAMMER ):
		case( PID_SM_CLUB ):
			sound = _GetOneRandom( HammerSounds );
			break;
		case( PID_SPADE ):	
		case( PID_SHOVEL ):	
		case( PID_PICKAXE ):
			sound = _GetOneRandom( PickaxeSounds );
			break;
		default:
			break;
	}
	PlayGenericSound( map, cr.HexX, cr.HexY, sound, 30 );
	return 0;
}

bool Profit(  Critter& cr, Item@ tool, Item@ target )
{
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_DRILL ):
			amount += 2;
			break;
		case( PID_SUPER_SLEDGE ):
		case( PID_PICKAXE ):
			amount += 1;
			break;
		case( PID_SHOVEL ):
		case( PID_SPADE ):
		case( PID_SM_CLUB ):
			amount -= 1;
			break;
		case( PID_PRIMITIVE_SLEDGE ):
			amount -= 2;
			break;
	}
	
	uint OreMod = target.GetProtoId();
	switch( OreMod )
	{	
		case( PID_NF_METAL_ORE_S ):
		case( PID_LED_ORE_S ):
		case( PID_MINERALS_S ):
		case( PID_IRON_ORE_S ):
			amount -= 1;
			break;
		case( PID_GOLD_ORE_S ):
		case( PID_URANIUM_ORE_S ):
			amount -= 2;
			break;
		case( PID_GOLD_ORE_M ):
		case( PID_URANIUM_ORE_M ):
			amount -= 1;
			break;
	}
			
	uint lootRoll = ( Random( 0, 1 ) + ( cr.ParamBase[ SK_MINING ] / 50 ) );
	
	if( toolMod == PID_DRILL )
	{
		amount = ( amount + lootRoll ) * CLAMP( 3, 1, ( target.RESOURCE_CAPACITY / OBJECT_HP_BASE ) );
		
	}
	else
	{
		amount += lootRoll;
	}
	
	if( amount < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
	}
	else
	{
		int skillNum = SK_MINING;
		raiseSkill( cr, skillNum );
		
		uint16 lootPid = 0;
		switch( target.ORE_TYPE )
		{
			case( ORE_TYPE_STONE ):
			{	
				if( Random( 1, 3 ) != 3 )
				{
					lootPid = PID_ROCK;
					amount = Random( 1, 3 );
				}
				else
				{
					lootPid = PID_FLINT;
					amount = 1;
				}
				break;
			}
			case( ORE_TYPE_NF_METAL ):
				lootPid = PID_NF_METAL_ORE;
				break;
			case( ORE_TYPE_MINERAL ):
				lootPid = PID_MINERAL;
				break;
			case( ORE_TYPE_COAL ):
				lootPid = PID_COAL;
				break;
			case( ORE_TYPE_GOLD ):
				lootPid = PID_GOLD_NUGGET;
				break;
			case( ORE_TYPE_IRON ):
				lootPid = PID_IRON_ORE;
				break;
			case( ORE_TYPE_URANIUM ):
				lootPid = PID_URANIUM_ORE;
				break;
			default:
				break;
		}
		
		taking_sweat(cr);
		SpawnBeneath( cr, lootPid, amount );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( lootPid * 100 ) + "@$amount" + amount );
		cr.StatBase[ST_EXPERIENCE] += 25;
		
		if( toolMod == PID_DRILL )
		{	
			target.RESOURCE_CAPACITY = target.RESOURCE_CAPACITY - ( OBJECT_HP_BASE * 3 );	
			tool.AmmoCount--;
			tool.Update();
		}
		else
		{	
			target.RESOURCE_CAPACITY = target.RESOURCE_CAPACITY - OBJECT_HP_BASE;
		}
		
		if( target.RESOURCE_CAPACITY <= 0 && ( target.ORE_TYPE == ORE_TYPE_STONE && target.RESOURCE_DNA != 0 ) )
		{
			Map@ map = GetMap( target.MapId );
			uint16 hx = target.HexX, hy = target.HexY;
			Item@ newOre = null; 
			
			switch( OreMod )
			{
				case( PID_ORE_DEPOSIT_S ):
				case( PID_ORE_DEPOSIT_S2 ):
					@newOre = map.AddItem( hx, hy, OreList[target.RESOURCE_DNA][ OreList[target.RESOURCE_DNA].length() - 3 ], 1 );
					break;
				case( PID_ORE_DEPOSIT_M ):
					@newOre = map.AddItem( hx, hy, OreList[target.RESOURCE_DNA][ Random( 0, OreList[target.RESOURCE_DNA].length() - 2 ) ], 1 );
					break;
				case( PID_ORE_DEPOSIT_L ):
					@newOre = map.AddItem( hx, hy, OreList[target.RESOURCE_DNA][ Random( 1, OreList[target.RESOURCE_DNA].length() - 1 ) ], 1 );
					break;
				default:
					break;
			}
			
			if( valid( newOre ) )
			{
				newOre.ORE_NODE_ID = target.ORE_NODE_ID;
			}
			
			DeleteItem( target );
			return true;
		}
		
		if( target.RESOURCE_CAPACITY <= 0 )
		{
			DeleteItem( target );
			return true;
		}
		
		ChangeCritterSpeed( cr );
	}
	
	return true;
}

//===============ORE SPAWNER MECHANIC===============//
void SpawnOreZone( Map& map, uint16 HexX, uint16 HexY, uint timeout, uint range, uint dna, uint capacity )
{
	if( !valid( map ) )
	{
		return;
	}

	Item@ oreMarker = map.AddItem( HexX, HexY, PID_ORE_MARKER, 1 );
	if( !valid( oreMarker ) )
	{
		return;
	}

	oreMarker.MAP_ID = map.Id;
	oreMarker.ZONE_TIMEOUT = timeout;
	oreMarker.ZONE_RANGE = ( range < 1 ? 1 : range );
	oreMarker.RESOURCE_DNA = dna;
	oreMarker.RESOURCE_CAPACITY = ( capacity < 1 ? 1 : capacity );

	int[] values = { oreMarker.Id };
	oreMarker.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_processOreZone", values, true );
}

//~run mining _RefreshOreSpawners 0 0 0
void _RefreshOreSpawners( Critter& player, int param0, int param1, int param2 )
{
	if(!isGM(player)) return;

	Item@[] spawners;
	GetAllItems(PID_ORE_MARKER, spawners);

	for(uint i = 0, len = spawners.length(); i < len; i++)
	{
		Item@ currSpawner = spawners[i];
		if( !valid( currSpawner ) )
		{
			continue;
		}

		Map@ currMap = GetMap( currSpawner.MAP_ID );
		if( !valid( currMap ) )
		{
			continue;
		}

		uint duration = 0;
		uint[] values;
		if( !GetTimeEvent( currSpawner.EVENT, duration, values ) )
		{ 
			Log("WARNING: Ore Spawner with broken TE, at map" + currMap.GetProtoId() + ", at hex " + currSpawner.HexX + " " + currSpawner.HexY + "\n");
			continue;
		}
		duration = REAL_MINUTE( currSpawner.ZONE_TIMEOUT );
		SetTimeEvent( currSpawner.EVENT, duration, values );

		DespawnOre(currMap, currSpawner);
		ProcessRespawnOre(currMap, currSpawner);
	}
}

void DespawnOre(Map@ map, Item@ oreSpawner)
{
	Item@[] OreFound;
	uint len0 = OreList[0].length();
	uint len1 = OreList[ oreSpawner.RESOURCE_DNA ].length();

	for( uint i = 0; i < len0; i++ )
	{
		map.GetItems( OreList[ 0 ][i], OreFound );
	}
	
	for( uint j = 0; j < len1; j++ )
	{
		map.GetItems( OreList[ oreSpawner.RESOURCE_DNA ][j], OreFound );
	}

	for( uint k = 0, len = OreFound.length(); k < len; k++ )
	{
		Item@ ore = OreFound[k];
		if( valid( ore ) && ore.ORE_NODE_ID == int( oreSpawner.Id ) )
		{
			ore.ORE_NODE_ID = 0;
			DeleteItem(ore);
		}
	}
	
	OreFound.resize(0);
}

void ProcessRespawnOre(Map@ map, Item@ oreSpawner)
{
	int oreCount = 0;
	Item@[] OreFound;
	uint len0 = OreList[0].length();
	uint len1 = OreList[ oreSpawner.RESOURCE_DNA ].length();

	for( uint i = 0; i < len0; i++ )
	{
		map.GetItems( OreList[ 0 ][i], OreFound );
	}
	
	for( uint j = 0; j < len1; j++ )
	{
		map.GetItems( OreList[ oreSpawner.RESOURCE_DNA ][j], OreFound );
	}

	for( uint k = 0, len = OreFound.length(); k < len; k++ )
	{
		Item@ ore = OreFound[k];
		if( valid( ore ) && ore.ORE_NODE_ID == int( oreSpawner.Id ) )
		{	
			oreCount++;
		}
	}
	
	int missing = oreSpawner.RESOURCE_CAPACITY - oreCount;

	if( missing > 0 )
	{
		uint attempt = 0;
		for( int i = 0; i < missing; i++ )
		{
			if( attempt >= MAX_RESOURCE_SPAWN_ATTEMPTS )
			{
				break;
			}
			
			int radius = oreSpawner.ZONE_RANGE / 2;
			uint16 hx = oreSpawner.HexX + Random( -radius, radius );
			uint16 hy = oreSpawner.HexY + Random( -radius, radius );
			if( checkCave( map, H2T( hx ), H2T( hy ) ) != 0 )
			{
				if( map.IsHexPassed( hx, hy ) )
				{
					OreSpawn( map, hx, hy, oreSpawner.RESOURCE_DNA, oreSpawner.Id );
				}
				else
				{
					missing++;
					attempt++;
				}
			}
		}
	}
	
	OreFound.resize(0);
}

uint e_processOreZone( int[] @ values )
{
	Item@ zoneMarker = GetItem( values[0] );
	if( !valid( zoneMarker ) )
	{
		return 0;
	}

	Map@ map = GetMap( zoneMarker.MAP_ID );
	if( !valid( map ) )
	{
		return 0;
	}

	ProcessRespawnOre(map, zoneMarker);
	
	return REAL_MINUTE( zoneMarker.ZONE_TIMEOUT );
}

Item@ OreSpawn( Map& map, uint16 hx, uint16 hy, uint dna, uint spawner_id = 0 )
{
	Item@ ore = null;
	if( map.IsHexPassed( hx, hy ) )
	{	
		@ore = map.AddItem( hx, hy, OreList[0][ Random( 0, OreList[dna].length() - 2 ) ], 1 );
		if( valid( ore ) )
		{
			ore.RESOURCE_DNA = dna;
			ore.ORE_NODE_ID = spawner_id == 0 ? 0 : spawner_id;
		}
	}

	return ore;
}

#endif //MINING