
#define CLIENT_EVENT_MODULE
#include "client_event_h.fos"

class CEvent : IEvent
{
	uint timeCreate, timeDiff, timeStamp, id;
	array<uint>@ values;
	EventCallback@ callbackPtr;
	
	CEvent(uint time)
	{
		@this.values = null;
		@this.callbackPtr = null;
		this.timeCreate = GetTick();
		this.timeDiff = time;
		this.timeStamp = this.timeCreate + this.timeDiff;
	}
	
	CEvent(uint time, EventCallback& callback)
	{
		@this.values = null;
		@this.callbackPtr = callback;
		this.timeCreate = GetTick();
		this.timeDiff = time;
		this.timeStamp = this.timeCreate + this.timeDiff;
	}
	
	CEvent(uint time, EventCallback& callback, array<uint>& values)
	{
		@this.values = values;
		@this.callbackPtr = callback;
		this.timeCreate = GetTick();
		this.timeDiff = time;
		this.timeStamp = this.timeCreate + this.timeDiff;
	}
	
	void SetFunc(EventCallback& callback)
	{
		@this.callbackPtr = callback;
	}
	
	uint GetId()
	{
		return this.id;
	}
	
	bool IsTime()
	{
		return this.timeStamp <= GetTick();
	}
	
	void Destroy()
	{
		RemoveEvent(this);
	}
	
	void TryRun()
	{
		if(IsTime())
		{
			Execute();
		}
	}
	
	void Execute()
	{
		if(valid(this.callbackPtr))
		{
			uint eventTimeout = this.callbackPtr.function(this.values);
			
			if(eventTimeout > 0)
			{
				this.timeDiff  = eventTimeout;
				this.timeStamp = GetTick() + this.timeDiff;
			}
			else
			{
				RemoveEvent(this);
			}
		}
		else
		{
			RemoveEvent(this);
		}
	}
	
	void SetId(uint id)
	{
		this.id = id;
	}
}

array<CEvent@> Events;
uint eventsCount;

uint GetFreeCell()
{
	for(uint i = 0, j = Events.length(); i<j; i++)
	{
		if(@Events[i] == null)
			return i;
	}
	Events.insertLast(null);
	return Events.length()-1;
}

// API
IEvent@ CreateTimeEvent(uint time, EventCallback& function, array<uint>@ values)
{
	CEvent@ newEvent = null;
	if(valid(values))
	{
		@newEvent = CEvent(time, function, values);
	}
	else
	{
		@newEvent = CEvent(time, function);
	}
	if(valid(newEvent))
	{
		newEvent.SetId(GetFreeCell());
		@Events[newEvent.GetId()] = newEvent;
		eventsCount++;
		return newEvent;
	}
	else
		return null;
}

void ProcessEvents()
{
	if(eventsCount>0)
	{
		for(uint i = 0, j = Events.length(); i<j; i++)
		{
			if(@Events[i] != null)
			{
				Events[i].TryRun();
			}
		}
	}
}

void RemoveEvent(IEvent& eventRef)
{
	@Events[eventRef.GetId()] = null;
	eventsCount--;
}

IEvent@ GetEvent(uint id)
{
	for(uint i = 0; i<eventsCount; i++)
	{
		if(Events[i].id == id)
			return Events[i];
	}
	return null;
}