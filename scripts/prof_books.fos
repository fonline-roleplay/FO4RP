#ifndef PROF_BOOKS
#define PROF_BOOKS

#include "_utils.fos"

//TODO: Move this to professions utils, not books! - APAMk2
void RecalcAvailableProfPoints(Critter& cr)
{
	if(!valid(cr)) return;

	int currProfsCount = cr.Perk[PE_CRAFTSMAN] + cr.Perk[PE_MECHANIC] + cr.Perk[PE_CHEMIST] + cr.Perk[PE_ELECTRICIAN];
	cr.ParamBase[CR_PROF_PERKS_AVAILABLE] = MAX_PROFESSION_LEVELS - currProfsCount;
}

class BookProperties
{
	uint16 PID = 0;
	uint PerkId = 0;
	uint Tier = 0;

	BookProperties(uint16 pid, uint perkId, uint tier)
	{
		this.PID = pid;
		this.PerkId = perkId;
		this.Tier = tier;
	}
}

class BookPropertiesArray
{
	BookPropertiesArray@ Add(BookProperties@ newEntry)
	{
		Books.insertLast(newEntry);
		Size = Books.length();
		return this;
	}

	BookPropertiesArray@ Add(uint16 pid, uint perkId, uint tier)
	{
		return Add(BookProperties(pid, perkId, tier));
	}

	BookProperties@ Find(uint16 pid)
	{
		for(uint i = 0; i < Size; i++)
		{
			BookProperties@ entry = Books[i];
			if(entry.PID == pid) return entry;
		}

		return null;
	}

	BookProperties@[] Books;
	uint Size = 0;
}

bool arrayInited = false;
BookPropertiesArray BookArray;

void InitBookArray()
{
	if(arrayInited) return;

	BookArray.Add(PID_SCOUT_HANDBOOK, PE_CRAFTSMAN, 1)
	.Add(PID_FIRST_AID_BOOK, PE_CRAFTSMAN, 2)
	.Add(PID_DEANS_ELECTRONICS, PE_CRAFTSMAN, 3);

	arrayInited = true;
}

bool TryUseProfBook(Critter& cr, Item& book)
{
	if(!valid(cr) || !cr.IsLife() || cr.IsKnockout()) return false;
	if(cr.Param[CR_PROF_PERKS_AVAILABLE] <= 0)
	{
		cr.Say(SAY_NETMSG, "Reading book fail");
		return false;
	}

	if(!arrayInited) InitBookArray();
	BookProperties@ properties = BookArray.Find(book.GetProtoId());

	if(cr.Perk[properties.PerkId] >= properties.Tier || cr.Perk[properties.PerkId] < properties.Tier - 1)
	{
		cr.Say(SAY_NETMSG, "Reading book fail");
		return false;
	}

	cr.PerkBase[properties.PerkId]++;
	cr.Say(SAY_NETMSG, "Reading book success");

	return true;
}

bool IsProfBook(Item& item)
{
	if(!arrayInited) InitBookArray();
	if(!valid(item)) return false;
	
	BookProperties@ properties = BookArray.Find(item.GetProtoId());
	
	return valid(properties);
}

#endif //PROF_BOOKS