#ifndef __LTP__
#define __LTP__

#define BINDCHECK         ( 0xF035BCF3 )

funcdef uint PROCESS( Critter@, int&, int&, int& );

#ifndef __LTP_MAIN__

# define LTP_TEST         	( 0 )
# define LTP_SNEAK		  	( 1 )
# define LTP_LOCKPICK     	( 2 )
# define LTP_STEAL		  	( 3 )
# define LTP_TRAPS        	( 4 )
# define LTP_FIRST_AID 		( 5 )
# define LTP_DOCTOR		  	( 6 )
# define LTP_SCIENCE      	( 7 )
# define LTP_REPAIR       	( 8 )

# define LTP_POURING      	( 9 )
# define LTP_FISHING      	( 10 )
# define LTP_FARMING      	( 11 ) // DISABLED (qmap_farm - old tech for digging tiles)
# define LTP_MINING	      	( 12 )
# define LTP_WASHING     	( 13 )
# define LTP_CHOPPING     	( 14 )
# define LTP_SLICING	  	( 15 )
# define LTP_SCAVENGING	  	( 16 )
# define LTP_SEX 	  	  	( 17 )
# define LTP_SEX_RECIEVE  	( 18 )
# define LTP_DOLL_SEX 	  	( 19 )
# define LTP_ROBOT_REPAIR 	( 20 ) // MODULE REQUIRES REWAMP
# define LTP_WATERWELL	  	( 21 )
# define LTP_INSPECT	  	( 22 )
# define LTP_POURING_OUT  	( 23 )
# define LTP_GATHER_WATER 	( 24 )
# define LTP_REMOVE_ARMOR 	( 25 )
# define LTP_HB_POURING   	( 26 )
# define LTP_INSTALL_RADIO	( 27 )
# define LTP_DECRAFT		( 28 )
# define LTP_SUICIDE      	( 29 )
# define LTP_RUSSROUL     	( 30 )
# define LTP_DEFIB        	( 31 )
# define LTP_SPIRIT_OUT    	( 32 )
# define LTP_STILL_REPAIR  	( 33 )
# define LTP_SMITHING	  	( 34 )
# define LTP_DIGGING	  	( 35 )
# define LTP_SKINNING	  	( 36 )
# define LTP_ARMOR_PAINT  	( 37 )
# define LTP_CHOP_ITEM  	( 38 )
# define LTP_DEVOUR		  	( 39 )
# define LTP_VOMIT		  	( 40 )
# define LTP_LOCK_REMOVE	( 41 )
# define LTP_LOCK_INSTALL	( 42 )
# define LTP_DIG_STASH		( 43 )
# define LTP_MONEY_TYPE		( 44 )

import bool RegisterProcess( uint8 type, any func ) from "ltp";

import bool StartProcess( Critter& cr, uint8 type, int param0, int param1, int param2, uint time ) from "ltp";
import bool StartProcess( Critter& cr, uint8 type, int param0, uint time ) from "ltp";            // param1 and param2 get 0
import bool StartProcess( Critter& cr, uint8 type, uint time ) from "ltp";                        // param0 and param1 and param2 get 0 only if type is same as type of other call of some proscedure

import bool StopProcess( Critter& cr, bool forced ) from "ltp";

import bool checkTDH( Critter& cr ) from "ltp";
import bool checkTDH( Critter& cr, uint8 type ) from "ltp";

# define LTPREG           # ( ty, fu )        PROCESS @___pfunc = @fu; any ___pany; ___pany.store( @___pfunc ); RegisterProcess( ty, ___pany );
# define LTPROCESS        # ( c, p, t )                if( p == -1 && (c is null) ) { p = int(t); return BINDCHECK; }
# define LTPROCESSD       # ( t )            if( param0 == -1 && (cr is null) ) { param0 = int(t); return BINDCHECK; }

#endif // __LTP_MAIN__

#endif // __LTP__
