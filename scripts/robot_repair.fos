#ifndef ROBOT_REPAIR
#define ROBOT_REPAIR

#include "_utils.fos"
#include "_ltp.fos"
#include "robot_repair_h.fos"
#include "critter_status_h.fos"

bool ltp_inited = false;
void ltp_init () 
{
	LTPREG ( LTP_ROBOT_REPAIR, process_robot_repair)
	ltp_inited = true;
}

void robotRepairSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) 
{
	targetCr.StatBase[ST_VAR0] = cr.Id;
	cr.StatBase[ST_VAR0] = targetCr.Id;
	
	if( targetCr.Id != cr.Id && targetCr.Stat[ST_CURRENT_HP] > -30 && !alreadyAllowed )
	{
		targetCr.ShowScreen (SCREEN_DIALOGBOX, 2, "answerRobotRepairSkill");
		targetCr.Say (SAY_DIALOGBOX_TEXT, "You are being examined, proceed?");
		targetCr.Say (SAY_DIALOGBOX_BUTTON( 0 ), "Yes");
		targetCr.Say (SAY_NETMSG, "You are being examined.");
	}
	else
	{
		answerRobotRepairSkill (targetCr, 0, "");
	}
}

string state_generator( bool flag, bool tool )
{
	if( flag ) 
	{
		if( tool )
		{
			return "FIX";
		}

		return "NO WELDING";
	}
	return "OK";
}

void answerRobotRepairSkill( Critter& targetCr, uint answerI, string& answerS ) 
{
	Critter@ cr = GetCritter (targetCr.StatBase [ST_VAR0]);
	if ( !valid( cr ) )
	{
		return;
	}
	
	bool useOnSelf = (cr.Id == targetCr.Id);
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	
	bool welder = (_CritCountItem (cr, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (cr, PID_CRAFT_M_BARS) > 0);
	
	
	bool isDamaged = false;
	string state = "Status report: ";
	
	int maxHP = targetCr.Stat[ ST_MAX_LIFE ] + targetCr.Stat[ ST_MAX_LIFE_EXT ];
	
	if (!isDamaged)
	{
		state += "no serious damage";
	}
	
	cr.StatBase [ST_VAR0] = targetCr.Id;
	
	bool heavy = FLAG(statusFlag, CR_STATUS_HEAVY_DMG);
	bool bullets = FLAG(statusFlag, CR_STATUS_BULLET_OVER);
	if( heavy )
	{
		state += ", hull damage signs";
	}
	
	if( bullets )
	{
		state += ", bullet holes";
	}
	
	cr.ShowScreen( SCREEN_DIALOGBOX, 4, "answerRobotRepair1" );
	cr.Say( SAY_DIALOGBOX_TEXT, state);
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), state_generator(heavy,welder) + " - hull" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), state_generator(bullets,welder) + " - bullet holes" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), ( spareParts ? "use" : "no" ) + " spare parts" );
	cr.Say (SAY_DIALOGBOX_BUTTON( 3 ), "inspect limbs");
}

void answerRobotRepair1 (Critter& player, uint answerI, string& answerS) 
{
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	bool useOnSelf = (player.Id == targetCr.Id);
	
	int sk = player.Skill [SK_REPAIR];
	
	bool welder = (_CritCountItem (player, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (player, PID_CRAFT_M_BARS) > 0);
	
	if (answerI == 0 && welder && FLAG(statusFlag, CR_STATUS_HEAVY_DMG))
	{
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0)
		{
			player.Say (SAY_NETMSG, "Your manipulators won't able to use welding");
			robotRepairSkill (player, targetCr, true);
		}
		else
		{
			player.Say (SAY_EMOTE, "welding hull");
			if (sk > Random (0, 140))
			{
				ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
				player.Say (SAY_NETMSG, "Hull damage fixed successfully.");
			}
			else
			{
				targetCr.StatBase[ ST_CURRENT_HP ] -= Random (1, 16);
				player.Say (SAY_NETMSG, "You just made things worse.");
			}
			robotRepairSkill (player, targetCr, true);
		}
	}
	else if (answerI == 0)
	{
		robotRepairSkill (player, targetCr, true);
	}
	
	if (answerI == 1 && welder && FLAG(statusFlag, CR_STATUS_BULLET_OVER))
	{
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0)
		{
			player.Say (SAY_NETMSG, "Your manipulators won't able to use welding");
			robotRepairSkill (player, targetCr, true);
		}
		else
		{
			player.Say (SAY_EMOTE, "welding holes");
			if (sk > Random (0, 140))
			{
				ChangeStatus( targetCr, CR_STATUS_BULLET_OVER, 0, false );
				player.Say (SAY_NETMSG, "Bullet holes fixed successfully.");
			}
			else
			{
				targetCr.StatBase[ ST_CURRENT_HP ] -= Random (1, 16);
				player.Say (SAY_NETMSG, "You just made things worse.");
			}
			robotRepairSkill (player, targetCr, true);
		}
	}
	else if (answerI == 1)
	{
		robotRepairSkill (player, targetCr, true);
	}
	
	if (answerI == 2 && spareParts)
	{
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0)
		{
			player.Say (SAY_NETMSG, "Your manipulators won't able to self repair");
			robotRepairSkill (player, targetCr, true);
		}
		else
		{
			int i = 0;
			while (i < 7)
			{
				player.Animate (ANIM1_UNARMED, ANIM2_USE, null, false, true);
				i ++;
			}
			player.Say (SAY_EMOTE, "fixing");
			if (!ltp_inited) ltp_init ();
			StartProcess (player, LTP_ROBOT_REPAIR, 10*1000);
			return;
		}
		robotRepairSkill (player, targetCr, true);
	}
	
	if (answerI == 3)
	{
		bool damages = false;
		string state = "Status report: ";

		if (targetCr.Damage [DAMAGE_EYE] > 0) {state+="damaged sensors, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {state += "right manipulator, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {state += "left manipulator, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {state += "right servo, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {state += "left servo"; damages = true;}
		
		if (!damages) state += " all good.";
		
		player.ShowScreen (SCREEN_DIALOGBOX, 6, "answerRobotRepairCripple");
		if (targetCr.Damage [DAMAGE_EYE] > 0) player.Say (SAY_DIALOGBOX_BUTTON (0), "fix - sensors");
		else player.Say (SAY_DIALOGBOX_BUTTON (0), "OK - sensors");
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (1), "fix - right manipulator");
		else player.Say (SAY_DIALOGBOX_BUTTON (1), "OK - r. manipulator");
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (2), "fix - left manipulator");
		else player.Say (SAY_DIALOGBOX_BUTTON (2), "OK - l. manipulator");
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (3), "fix - right servo");
		else player.Say (SAY_DIALOGBOX_BUTTON (3), "OK - r. servo");
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (4), "fix - left servo");
		else player.Say (SAY_DIALOGBOX_BUTTON (4), "OK - l. servo");
		player.Say (SAY_DIALOGBOX_BUTTON (5), "main menu");
	}
}

void answerRobotRepairCripple (Critter& player, uint answerI, string& answerS) 
{
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	bool useOnSelf = (player.Id == targetCr.Id);
	
	bool mechDetail = (_CritCountItem (player, PID_CRAFT_M_STEL) > 0);
	bool motionSensor = (_CritCountItem (player, PID_MOTION_SENSOR) > 0);
	
	int sk = player.Skill [SK_REPAIR];
	
	if( answerI == 5 )
	{
		robotRepairSkill (player, targetCr, true);
		return;
	}
	
	if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0)
	{
		player.Say (SAY_NETMSG, "Your manipulators won't able to self repair");
		answerRobotRepair1 (player, 2, "");
	}
	else
	{
	
		if (answerI == 0 && targetCr.Damage [DAMAGE_EYE] > 0)
		{
			if (!motionSensor)
			{
				player.Say (SAY_NETMSG, "You need motion sensor.");
				robotRepairSkill (player, targetCr, true);
			}
			else
			{
				if (sk > Random (0, 120))
				{
					targetCr.DamageBase [DAMAGE_EYE] = 0;
					player.Say (SAY_NETMSG, "You've fixed motion sensors.");
				}
				else
				{
					player.Say (SAY_NETMSG, "You failed.");
				}
			}
		}
		
		if (answerI == 1 && targetCr.Damage [DAMAGE_RIGHT_ARM] > 0)
		{
			if (!mechDetail)
			{
				player.Say (SAY_NETMSG, "You need composite mechanism for that.");
				robotRepairSkill (player, targetCr, true);
			}
			else
			{
				if (sk > Random (0, 120))
				{
					targetCr.DamageBase [DAMAGE_RIGHT_ARM] = 0;
					player.Say (SAY_NETMSG, "Successful repair.");
				}
				else
				{
					player.Say (SAY_NETMSG, "You did nothing usefull, try again.");
				}
			}
		}
		
		if (answerI == 2 && targetCr.Damage [DAMAGE_LEFT_ARM] > 0)
		{
			if (!mechDetail)
			{
				player.Say (SAY_NETMSG, "You need composite mechanism for that.");
				robotRepairSkill (player, targetCr, true);
			}
			else
			{
				if (sk > Random (0, 120))
				{
					targetCr.DamageBase [DAMAGE_LEFT_ARM] = 0;
					player.Say (SAY_NETMSG, "Successful repair.");
				}
				else
				{
					player.Say (SAY_NETMSG, "You did nothing usefull, try again.");
				}
			}
		}
		
		if (answerI == 3 && targetCr.Damage [DAMAGE_RIGHT_LEG] > 0)
		{
			if (!mechDetail)
			{
				player.Say (SAY_NETMSG, "You need composite mechanism for that.");
				robotRepairSkill (player, targetCr, true);
			}
			else
			{
				if (sk > Random (0, 120))
				{
					targetCr.DamageBase [DAMAGE_RIGHT_LEG] = 0;
					player.Say (SAY_NETMSG, "Successful repair.");
				}
				else
				{
					player.Say (SAY_NETMSG, "You did nothing usefull, try again.");
				}
			}
		}
		
		if (answerI == 4 && targetCr.Damage [DAMAGE_LEFT_LEG] > 0)
		{
			if (!mechDetail)
			{
				player.Say (SAY_NETMSG, "You need composite mechanism for that.");
				robotRepairSkill (player, targetCr, true);
			}
			else
			{
				if (sk > Random (0, 120))
				{
					targetCr.DamageBase [DAMAGE_LEFT_LEG] = 0;
					player.Say (SAY_NETMSG, "Successful repair.");
				}
				else
				{
					player.Say (SAY_NETMSG, "You did nothing usefull, try again.");
				}
			}
		}
		robotRepairSkill (player, targetCr, true);
	}
}

uint process_robot_repair ( Critter@ cr, int& param0, int& param1, int& param2 ) 
{
	LTPROCESSD (LTP_ROBOT_REPAIR)
	Critter@ targetCr = GetCritter (cr.Stat [ST_VAR0]);
	
	int sk = cr.Skill [SK_REPAIR];
	
	if (sk > Random (0, 80))
	{
		targetCr.ToLife();
		targetCr.ParamBase[ ST_CURRENT_HP ] = ( targetCr.Stat[ ST_MAX_LIFE ] + targetCr.Stat[ ST_MAX_LIFE ] );
		cr.DeleteItem(PID_CRAFT_M_BARS, 1);
		cr.Say (SAY_NETMSG, "Maintenance complete.");
	}
	else
	{
		cr.Say (SAY_NETMSG, "You did nothing usefull, try again.");
	}
	return 0;
}

#endif //ROBOT_REPAIR