#ifndef PLAYER_MENU
#define PLAYER_MENU

#include "_utils.fos"
#include "critter_item_movement_h.fos"
#include "consumables_h.fos"

import void unsafe_VoiceVolumeAdjust( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_selfLex( Critter& player, int param0, int param1, int param2, string@ text, int[]@ param4 ) from "general_unsafe";
import void unsafe_addLexem( Critter& player, int param0, int param1, int param2, string@ text, int[]@ param4 ) from "general_unsafe";
import void unsafe_rolling( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "general_unsafe";
import void unsafe_relax ( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_ToggleVoiceRadius( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";

import void unsafe_killself( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "suicide";

import void unsafe_vomit( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "vomit";

void unsafe_StartPlayerMenu( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	StartPlayerMenu( player );
}

void unsafe_StartAnimMenu( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	StartPlayerMenuAnimations( player );
}

void StartPlayerMenu( Critter& player )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenu();
    iDialogBox@ menu = OpenMenu( player, "Player menu", handler );
}

void unsafe_SwapItemVisor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	SwapItemVisor(player);
}

void SwapItemVisor( Critter& player )
{
	FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS );
}

class PlayerMenu: DefaultMenuHandler
{
	uint level;
	
    PlayerMenu()
	{
		level = this.level;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
		Item@ armor = _CritGetItemArmor( player );
		Item@ headgear = _CritGetItemHead( player );
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_FACE ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE );
			ArmorEffects( player, armor );
			return true;
		}
			
		string avatar_mode = "$AvatarMode" + STR_INSERT_TEXT_LINE( player.Param[ CR_AVATAR_RENDER_MODE ] + STR_AVATAR_MODE_SHOW );
		if( menu.ButtonMsg( STR_AVATAR_MODE, avatar_mode ) )
		{
			unsafe_toggle_avatar( player, 0, 0, 0, null, null );
			return true;
		}
		
		if( ( valid( armor ) && FLAG( armor.Proto.Armor_Perk, ARMOR_PERK_STA ) ) || ( valid( headgear ) && FLAG( headgear.Proto.HeadItem_Perk, HEAD_PERK_STA) ) )
		{
			if( menu.ButtonMsg( STR_PLAYER_MENU_STA ) )
			{
				FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_STA ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_STA ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_STA );
				return true;
			}
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_DESC ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_TYPING ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_SAFETY ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY );
			return true;
		}

		if( menu.ButtonMsg( STR_PLAYER_MENU_WSAD ) )
		{
			unsafe_toggle_WSAD( player, 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_RTS ) )
		{
			unsafe_toggle_RTS( player, 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_VISOR ) )
		{
			SwapItemVisor( player );
			return true;
		}

		string wallAlpha = player.Param[ WALL_ALPHA ];
		if( menu.ButtonExtSay( "alpha", TEXTMSG_TEXT, STR_PLAYER_MENU_ALPHA, "$alpha" + wallAlpha, "$vals 0 .. 200", STR_PLAYER_MENU_ALPHA_SAYTEXT ) )
		{
			string rainStr = menu.GetSayValue();
			int val = 0;
			StrToInt( rainStr, val );
			val = CLAMP( val, 0, 200 );
			player.ParamBase[ WALL_ALPHA ] = val;
			return true;
		}

		if( menu.ButtonMsg( STR_PLAYER_MENU_TOGGLE_NPC ) )
		{
			unsafe_toggle_NPC( player, 0, 0, 0, null, null );
			return true;
		}

		if( menu.ButtonMsg( STR_PLAYER_MENU_VOICE_RADIUS ) )
		{
			unsafe_ToggleVoiceRadius( player, 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_SPEECH_UP ) )
		{
			unsafe_VoiceVolumeAdjust( player, -5, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_SPEECH_DOWN ) )
		{
			unsafe_VoiceVolumeAdjust( player, 5, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_ROLLS ) )
		{
			PlayerMenuRolls@ player_menu_rolls = PlayerMenuRolls();
			player_menu_rolls.level = level + 1;
			return menu.OpenChild( "Level " + player_menu_rolls.level, player_menu_rolls );	
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_ANIMATIONS ) )
		{
			PlayerMenuAnimations@ player_menu_animations = PlayerMenuAnimations();
			player_menu_animations.level = level + 1;
			return menu.OpenChild( "Level " + player_menu_animations.level, player_menu_animations );	
		}
		
		if( menu.ButtonMsg( STR_PLAYER_MENU_ACTIONS ) )
		{
			StartPlayerMenuActions( player );
			return false;
		}

		return true;
	}
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_PLAYER_MENU_MAIN;
	}
	
	string@ Description( Critter& player )
	{
		string sta_status = "$STA";
		Item@ armor = _CritGetItemArmor( player );
		Item@ headgear = _CritGetItemHead( player );

		if( ( valid( armor ) && FLAG( armor.Proto.Armor_Perk, ARMOR_PERK_STA ) ) || ( valid( headgear ) && FLAG( headgear.Proto.HeadItem_Perk, HEAD_PERK_STA) ) )
		{
			sta_status += STR_INSERT_TEXT_LINE( STR_PLAYER_MENU_STA_TEXT )
						+ STR_CHECK_CR_FLAG( "STA_status", player, PLAYER_FLAG_STA );
		}		
		
		string avatar_mode = "$AvatarMode" + STR_INSERT_TEXT_LINE( player.Param[ CR_AVATAR_RENDER_MODE ] + STR_AVATAR_MODE_SHOW );
		
		string info = ""
			+ STR_CHECK_CR_FLAG( "face", player, PLAYER_FLAG_HIDE_FACE )
			+ avatar_mode
			+ STR_CHECK_CR_FLAG( "desc", player, PLAYER_FLAG_HIDE_DESC )
			+ STR_CHECK_CR_FLAG( "WSAD", player, PLAYER_FLAG_WSAD )
			+ STR_CHECK_CR_FLAG( "typing", player, PLAYER_FLAG_HIDE_TYPING )
			+ STR_CHECK_CR_FLAG( "RTS", player, PLAYER_FLAG_RTS )
			+ STR_CHECK_CR_FLAG( "radio", player, PLAYER_FLAG_RADIO_SAFETY )
			+ sta_status
			+ STR_CHECK_CR_FLAG( "visor", player, PLAYER_FLAG_SHOW_ITEMS )
			+ STR_CHECK_CR_FLAG( "icon", player, PLAYER_FLAG_NPC_ICONS )
			+ "$volume" + CLAMP( 50 - player.Stat[ ST_SPEECH_VOLUME ], 1, 50 )
			;

		return info;
    }
	
}

class PlayerMenuRolls: CenteredMenuHandler
{
	uint level;
	
    PlayerMenuRolls()
	{
		level = this.level;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Strength" )  )
		{
			unsafe_rolling( player, 1, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Perception" )  )
		{
			unsafe_rolling( player, 2, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Endurance" )  )
		{
			unsafe_rolling( player, 3, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Charisma" )  )
		{
			unsafe_rolling( player, 4, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Intellect" )  )
		{
			unsafe_rolling( player, 5, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Agility" )  )
		{
			unsafe_rolling( player, 6, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ROLL_STAT, "$stat Luck" )  )
		{
			unsafe_rolling( player, 7, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonMsg( STR_GMBTN_SKILL_ROLL )  )
		{
			PlayerMenuSkillRolls@ player_menu_skill_rolls = PlayerMenuSkillRolls();
			player_menu_skill_rolls.level = level + 1;
			return menu.OpenChild( "Level " + player_menu_skill_rolls.level, player_menu_skill_rolls );	
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ROLL_DICE, "$dice d6", STR_AMOUNT ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 6, null, null );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DICE_AMOUNT_MUST_BE_A_NUMBER );
			}
			return false;
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ROLL_DICE, "$dice d10", STR_AMOUNT ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 10, null, null );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DICE_AMOUNT_MUST_BE_A_NUMBER );
			}
			return false;
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ROLL_DICE, "$dice d20", STR_AMOUNT ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 20, null, null );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DICE_AMOUNT_MUST_BE_A_NUMBER );
			}
			return false;
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ROLL_DICE, "$dice d100", STR_AMOUNT ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 100, null, null );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DICE_AMOUNT_MUST_BE_A_NUMBER );
			}
			return false;
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ROLL_DICE, "$dice d300", STR_AMOUNT ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 300, null, null );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DICE_AMOUNT_MUST_BE_A_NUMBER );
			}
			return false;
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
	}
	
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_PLAYER_ROLL_MENU_MAIN;
	}
	
    string@ Description( Critter& player )
	{
		return null;
    }
	
}

void StartPlayerMenuSkillRolls( Critter& player, Critter@ targetCr )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
	{
        return;
    }

	if( !valid( targetCr ) )
	{
		@targetCr = player;
	}

    iMenuHandler@ handler = PlayerMenuSkillRolls( targetCr );
    iDialogBox@ menu = OpenMenu( player, "Player menu skill rolls", handler );
}

class PlayerMenuSkillRolls: CenteredMenuHandler
{
	uint level;
	Critter@ target;
	
    PlayerMenuSkillRolls( Critter@ targetCr )
	{
		level = this.level;
		@target = targetCr;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
		
		if( !valid( target ) )
		{
			@target = player;
		}
		
		for( uint i = SKILL_BEGIN; i < SKILL_END; i++ )
		{
			if( i == 214 || i == 216 )
			{
				continue;
			}
			
			if( menu.ButtonMsg( STR_SKILL_NAME( i ) ) )
			{
				uint skill = target.Skill[ i ];
				string result = GetMsgStr( 0, TEXTMSG_TEXT, STR_ROLL_SUCCESS );
				string name = GetMsgStr( 0, TEXTMSG_TEXT, STR_SKILL_NAME( i ) );
				uint roll = Random( 1, 316 );
				if( skill <= roll )
				{
					result = GetMsgStr( 0, TEXTMSG_TEXT, STR_ROLL_FAIL );
				}
				
				target.Say( SAY_NETMSG, "Skill: " + name + "|0xFFFF00  " + skill + " |0x3CF800 Roll:|0xFFFF00  " + roll );
				target.Say( SAY_NORM, "|0xA6EEF900 " + name + ": " + result );
				if( target.Id != player.Id )
				{
					player.Say( SAY_NETMSG, "Skill: " + name + "|0xFFFF00  " + skill + " |0x3CF800 Roll:|0xFFFF00  " + roll );
				}
				
				return false;
			}			
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		
		return true;
	}
	
	
    int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_PLAYER_ROLL_MENU_MAIN;
	}
	
    string@ Description( Critter& player )
	{
		return null;
    }
	
}

void StartPlayerMenuActions( Critter& player )
{
    iMenuHandler@ handler = PlayerMenuActions();
    iDialogBox@ menu = OpenMenu( player, "Player Action menu", handler );
}

class PlayerMenuActions: CenteredMenuHandler
{
    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
		if( player.Param[ CR_SLEEPING_STATE ] == 0 )
		{
			if( menu.ButtonMsg( STR_PLAYER_ACTION_LIE_ON_BELLY ) )
			{
				unsafe_sleep( player, 1, 0, 0, null, null );
				return true;
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ACTION_LIE_ON_BACK ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
			
			if( !IsHuman( player ) )
			{
				if( menu.ButtonMsg( STR_PLAYER_ACTION_DEVOUR ) )
				{
					player.RunClientScript( "client_main@__InitDevour", 0, 0, 0, null, null );
					CrimeLog( player, crInfo( player ) + " attempts to devour target." );
					return false;
				}
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ACTION_SUICIDE ) )
			{
				unsafe_killself( player, 0, 0, 0, null, null );
				return false;
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ACTION_SEX ) )
			{
				player.RunClientScript( "client_main@__InitSex", 0, 0, 0, null, null );
				CrimeLog( player, crInfo( player ) + " attempts to initiate sex." );
				return false;
			}
		}
		else
		{
			if( menu.ButtonMsg( STR_PLAYER_ACTION_GETUP ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
		}

		if( player.Param[ CR_AFK_MODE ] != 1 )
		{
			if( menu.ButtonSayMsg( STR_PLAYER_ACTION_AFK, STR_TEXT ) )
			{
				string lex = menu.GetSayValue();
				string@ lexem = player.GetLexems() + "_" + lex;
				if( lexem.length() >= 127 )
				{
					player.Say( SAY_NETMSG, "lexem is too long." );
					return false;
				}
				player.SetLexems( lexem );
				player.ParamBase[ CR_AFK_MODE ] = 1;
				player.AddTimeEvent( "cte_AFK_mode", 0, CTE_AFK, 0 );
				return false;
			}
		}
		else
		{
			if( menu.ButtonMsg( STR_PLAYER_ACTION_AFK_DISABLE ) )
			{
				player.ParamBase[ CR_AFK_MODE ] = 0;
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ACTION_VOMIT ) )
		{
			unsafe_vomit( player, 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.ButtonSayMsg( STR_PLAYER_ACTION_DESCRIBE_SELF, STR_TEXT ) )
		{
            string lex = menu.GetSayValue();
			unsafe_selfLex( player, 0, 0, 0, lex, null );
			return false;
		}
		
		Item@ hand = _CritGetItemHand( player );
		if( valid( hand ) )
		{			
			if( menu.ButtonSayMsg( STR_PLAYER_ACTION_DESCRIBE_ITEM, STR_TEXT ) )
			{
				string lex = menu.GetSayValue();
				unsafe_addLexem( player, 0, 0, 0, lex, null );
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_PLAYER_ACTION_NAME ) )
		{
			player.ParamBase[ CR_REMEMBERING_NAME ] = 1;
			player.RunClientScript( "client_main@__InitUseSkillCursor", 0, 0, 0, null, null );
			return false;
		}
		
		/*
		if( menu.ButtonMsg( STR_PLAYER_ACTION_AVATAR ) )
		{
			player.RunClientScript( "link@__PlayerAuth", 0, 0, 0, null, null );
			return true;
		}
		*/
		if( menu.ButtonMsg( STR_PLAYER_ACTION_CHECK_ID ) )
		{
            player.Say( SAY_NETMSG, "Your Id: |0xFFFF00 " + player.Id );
			return true;
		}
		
		if( menu.ButtonMsg( STR_ACTIVE_DRUGS_MENU_BTN ) )
		{
			if( isGM( player ) )
			{
				StartConsumablesMenu( player, player );
			}
			else
			{
				SendPlayerDrugsInfo( player );
			}
			return false;
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			StartPlayerMenu( player );
			return false;
		}
		return true;
	}
	
   int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_CHOOSE_YOUR_ACTION;
	}	
	
    string@ Description( Critter& player )
	{
		return null;
    }
	
}

uint cte_AFK_mode( Critter& cr, int identifier, uint& rate )
{
	if( cr.Param[ CR_AFK_MODE ] != 1 )
	{
		StopAFK( cr );
		return 0;
	}
	
	if( MovementState( cr ) > MOVE_STATE_STILL )
	{
		StopAFK( cr );
		return 0;
	}
	return REAL_MS( 500 );	
}

void StopAFK( Critter& cr )
{
	string@ lexem = cr.GetLexems();
	uint index = findFirstOf( lexem, "_", 0 );
	string oldLex = substring( lexem, 0, index );
	cr.SetLexems( oldLex );
	cr.ParamBase[ CR_AFK_MODE ] = 0;
}

void StartPlayerMenuAnimations( Critter& player )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenuAnimations();
    iDialogBox@ menu = OpenMenu( player, "Player Animations menu", handler );
}

class PlayerMenuAnimations: CenteredMenuHandler
{
	uint level;
	
    PlayerMenuAnimations()
	{
		level = 1;
    }
	
    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
		if( player.Param[ CR_SLEEPING_STATE ] == 0 && player.Param[ CR_IS_RELAXING ] > 0 )
		{
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_GETUP ) )
			{
				unsafe_relax( player, 0, 0, 0, null, null );
				return false;
			}
		}
		
		if( player.Param[ CR_SLEEPING_STATE ] == 0 && player.Param[ CR_IS_RELAXING ] == 0 )
		{
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_PRONE1 ) )
			{
				unsafe_relax( player, 1, 0, 0, null, null );
				return true;
			}

			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_PRONE2 ) )
			{
				unsafe_relax( player, 2, 0, 0, null, null );
				return true;
			}
			if( !IsRobot( player ) )
			{
				if( menu.ButtonMsg( STR_PLAYER_ANIMATION_LEAN1 ) )
				{
					unsafe_relax( player, 3, 0, 0, null, null );
					return true;
				}
				
				if( menu.ButtonMsg( STR_PLAYER_ANIMATION_LEAN2 ) )
				{
					unsafe_relax( player, 4, 0, 0, null, null );
					return true;
				}
			}
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_CROUCH ) )
			{
				unsafe_relax( player, 5, 0, 0, null, null );
				return true;
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_KNEEL1 ) )
			{
				unsafe_relax( player, 6, 0, 0, null, null );
				return true;
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_KNEEL2 ) )
			{
				unsafe_relax( player, 7, 0, 0, null, null );
				return true;
			}
			
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_PUSHUP ) )
			{
				unsafe_relax( player, 9, 0, 0, null, null );
				return true;
			}
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_SQUAT ) )
			{
				unsafe_relax( player, 10, 0, 0, null, null );
				return true;
			}
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_FLEX ) )
			{
				unsafe_relax( player, 11, 0, 0, null, null );
				return true;
			}
			if( menu.ButtonMsg( STR_PLAYER_ANIMATION_CRUNCHES ) )
			{
				unsafe_relax( player, 12, 0, 0, null, null );
				return true;
			}
		}
		
		if( menu.ButtonMsg( STR_RETURN ) )
		{
			return false;
		}
		return true;
	}

	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_PLAYER_ANIMATION_MENU_MAIN;
	}	
	
    string@ Description( Critter& player )
	{
		return null;
    }
	
}

void unsafe_toggle_WSAD( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_WSAD ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_WSAD ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_WSAD );
	player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_WSAD ) ? STR_WSAD_ON : STR_WSAD_OFF );
}

void unsafe_toggle_RTS( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RTS ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RTS ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RTS );
	player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RTS ) ? STR_RTS_ON : STR_RTS_OFF );
}

void unsafe_toggle_avatar( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	player.Param[ CR_AVATAR_RENDER_MODE ] == 2 ? player.ParamBase[ CR_AVATAR_RENDER_MODE ] = 0 : player.ParamBase[ CR_AVATAR_RENDER_MODE ] ++;
	string avatar_mode = "Avatar mode: [|0xFFFF00 ";
	string mode = "Show";
	if( player.Param[ CR_AVATAR_RENDER_MODE ] == 1 )
	{
		mode = "Cursor";
	}
	else if( player.Param[ CR_AVATAR_RENDER_MODE ] == 2 )
	{
		mode = "Hide";
	}
	
	avatar_mode += mode + "|0x3CF800 ]";
	player.Say( SAY_NETMSG, avatar_mode );
}

void unsafe_toggle_NPC( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_NPC_ICONS ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_NPC_ICONS ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_NPC_ICONS );
	player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_NPC_ICONS ) ? STR_NPC_ICON_ON : STR_NPC_ICON_OFF );
}

#endif // PLAYER_MENU