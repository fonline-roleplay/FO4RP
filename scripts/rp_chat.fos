#ifndef RP_CHAT
#define RP_CHAT

#include "_utils.fos"

#define NARATIVE_MSG_RANGE		( 10 )

import void LookDataRefresh( Critter& critter ) from "main";

bool sinfFLAG( Critter& player, uint flag )
{
	return FLAG( player.Param[ CR_SINF_MODE ], flag );
}

///core module logic

void unsafe_SetChatTarget( Critter& cr, int id, int, int, string@, int[]@ )
{
	if( !SetChatTarget( cr, uint( id ) ) )
	{
		testInfo( cr, "Failed to set chat target: " + cr.Id + " " + id );
	}
}

// Engine client chat is capped at 100 symbols, this proscedure is needed to overide it
void unsafe_SayRemote( Critter& cr, int sayType, int, int, string@ message, int[]@ ) 
{
	cr.Say( sayType, message );
}

//Enables talk through owned NPC or any critter if you are GM
bool SetChatTarget( Critter& cr, int id )
{	
	if( !isGM( cr ) || int( cr.Id ) == id || id == 0 )
	{
		return false;
	}

	Critter@ target = GetCritter( id );
	if( !valid( target ) )
	{
		return testInfo( cr, "Invalid target id: " + id );
	}
	
	int ownerId = int( cr.Id );
	if( target.StatBase[ ST_TALKING_PUPPET ] != ownerId || target.ParamBase[ CR_TALKING_TARGET_ID ] != ownerId )
	{
		target.StatBase[ ST_TALKING_PUPPET ] = ownerId;
		target.ParamBase[ CR_TALKING_TARGET_ID ] = ownerId;
	}
	else
	{
		target.StatBase[ ST_TALKING_PUPPET ] = 0;
		target.ParamBase[ CR_TALKING_TARGET_ID ] = 0;
	}
	
	return true;
}

void unsafe_CrSpoken( Critter& cr, int p0, int p1, int p2, string@ p3, int[]@ p4 )
{
	if( cr.ParamBase[ CR_SPOKEN ] != 0 )
	{
		EraseTimeEvent( cr.Param[ CR_SPOKEN ] );
	}
	
	uint[] values = { cr.Id };
	cr.ParamBase[ CR_SPOKEN ] = CreateTimeEvent( AFTER( REAL_SECOND( 5 ) ), "rp_chat@e_StopSpoken", values, true );
	LookDataRefresh( cr );
}

uint e_StopSpoken( uint[]@ values )
{
	Critter@ cr = GetCritter( values[0]);
	cr.ParamBase[ CR_SPOKEN ] = 0;
	LookDataRefresh( cr );
	return 0;
}

void unsafe_SayChatMessage( Critter& cr, int sayType, int x, int y, string@ message, int[]@ IDs )
{
	if( cr.IsDead() && sayType != SAY_NARATIVE )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DEAD_CANT_TALK );
		return;
	}

	int[] _default = { 0 };
	if( !valid( IDs ) )
	{
		@IDs = _default;
	}
	
	bool even_once = false;
	int last_target_id = cr.ParamBase[ CR_TALKING_TARGET_ID ];
	
	if( sayType != SAY_NARATIVE )
	{
		for( uint i = 0, l = IDs.length(); i < l; i++ )
		{
			cr.ParamBase[ CR_TALKING_TARGET_ID ] = IDs[i];
			if( !SayChatMessage( cr, sayType, x, y, message ) )
			{
				testInfo( cr, "Failed to say chat message: " + cr.Id + " " + cr.ParamBase[ CR_TALKING_TARGET_ID ] + " " + sayType + " " + x + " " + y + " '" + message + "'" );
			}
			else
			{
				even_once = true;
			}
		}
	}
	
	if( !even_once )
	{
		cr.ParamBase[ CR_TALKING_TARGET_ID ] = 0;
		SayChatMessage( cr, sayType, x, y, message );
	}
	
	cr.ParamBase[ CR_TALKING_TARGET_ID ] = last_target_id;
}

bool SayChatMessage( Critter& cr, int sayType, int x, int y, string@ message )
{
	if( cr.IsDead() && sayType != SAY_NARATIVE )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DEAD_CANT_TALK );
		return true;
	}

	if( sayType != SAY_NARATIVE && ( cr.ParamBase[ CR_TALKING_TARGET_ID ] == 0 ) )
	{	//in case of error speak normal
		cr.Say( sayType, message );
		SayLog( cr, sayType, message );
		return false;
	}
	
	if( sayType == SAY_NARATIVE ) //gray text
	{
		if( !isGM( cr ) )
		{
			bool isNear = GetDistantion( x, y, cr.HexX, cr.HexY ) < NARATIVE_MSG_RANGE;
			if( !isNear )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SOCIAL_TEXT_TOO_FAR );
				return false;
			}
		}
		
		Map@ map = cr.GetMap();
		if( !valid( map ) ) 
		{
			return false;
		}

		int msgRange = isGM( cr ) ? 999 : NARATIVE_MSG_RANGE;
		string finalMsg = "";

		uint strLen = message.length();
		bool volumeTag = false;
		bool finished = false;
		string volStr = "";
			
		for(uint i = 0; i < strLen; i++)
		{
			if( finished )
			{
				finalMsg += substring( message, i, strLen - i );
				break;
			}
			
			if(message[i] == '/' && message[i + 1] == '/')
			{
				volumeTag = true;
				i++;
				continue;
			}

			if(volumeTag && message[i] == ' ')
			{
				volumeTag = false;
				finished = true;
				continue;
			}

			if(!volumeTag)
			{
				finalMsg += substring(message, i, 1);
			}
			else
			{
				volStr += substring(message, i, 1);
			}
		}

		if( isGM( cr ) )
		{
			StrToInt( volStr, msgRange );
		}
		
		Critter@[] players;
		map.GetCritters( 0, FIND_ALL|FIND_ONLY_PLAYERS, players );

		for( uint i = 0, len = players.length(); i < len; i++ )
		{
			Critter@ currPlayer = players[i];
			
			if( !valid( currPlayer ) )
			{
				continue;
			}

			uint16 pX = currPlayer.HexX;
			uint16 pY = currPlayer.HexY;
			int dist = GetDistantion( x, y, pX, pY );
			if( !isGM( currPlayer ) && dist > msgRange )
			{
				continue;
			}			

			currPlayer.RunClientScript( "client_main@ShowNarrativeMessage", x, y, ( isGM( cr ) ? 1 : 0 ) , finalMsg, null );
		}

		SayLog( map, crInfo( cr, !isGM( cr ) ) + " :" + finalMsg + ":", x, y );
		players.resize(0);
	}
	else
	{
		Critter@ target;
		if( !Find( target, cr.ParamBase[ CR_TALKING_TARGET_ID ] ) || target.IsDead() || target.ParamBase[ CR_TALKING_TARGET_ID ] != int( cr.Id ) || ( !isGM( cr ) && target.IsPlayer() ) ) 
		{ 
			if( !isGM( cr ) )
			{
				cr.Say( sayType, message );
				SayLog( cr, sayType, message );
			}
			
			return false;
		}		
		
		Map@ crMap = cr.GetMap();
		Map@ map = target.GetMap();
		if( !valid( map ) || !valid( crMap ) || map.Id != crMap.Id )
		{
			return false;
		}

		if( target.Stat[ ST_CURRENT_HP ] < 0 || target.IsKnockout() )
		{
			map.SetText( target.HexX, target.HexY, COLOR_TEXT, "|0xf9fa94 " + message );
		}
		else
		{
			// NPC cant use SHOUT for some unknown reason
			if( sayType == SAY_SHOUT || sayType == SAY_SHOUT_ON_HEAD )
			{
				if( sayType == SAY_SHOUT )
				{
					sayType = SAY_NORM;
				}
				else if( sayType == SAY_SHOUT_ON_HEAD )
				{
					sayType = SAY_NORM_ON_HEAD;
				}
			}
			
			target.Say( sayType, message );
		}

		if( isGM( cr ) )
		{
			SayLog( target, sayType, message, "{ " + crInfo( cr ) + " } " );
		}
		else
		{
			SayLog( target, sayType, message, "[ " + crInfo( cr ) + " ] " );
		}
	}
	
	return true;
}

uint8 backtick = "`"[0];
uint8 apostrophe = "'"[0];

void heard_radio_log_ch0( Critter& cr, string@ message )
{
	if( !valid( message ) )
	{
		return;
	}
	
	if( cr.IsKnockout() )
	{
		return;
	}
	
	uint len = message.length();
	if( len == 0 || len > 100 )
	{
		return;
	}

	file f;
	if( f.open( "logs\\radio_0.txt", "a" ) < 0 )
	{
		return;
	}
		
	f.writeString( message + "\n" );
	f.close();
	
	testInfo( cr, ">> " + message );

	char_replace( message, backtick, apostrophe );
	
	string@ text = "`Radio 0> .." + message + "..`";

	DiscordSendMessage( "нулевой_радиоканал", text );
	DiscordSendMessage( "radio_0", text );
}

void char_replace( string& text, uint8 from, uint8 to )
{
	for( uint i = 0, len = text.length(); i < len; i++ )
	{
		if (text[i] == from)
		{
			text[i] = to;
		}
	}
}

void unsafe_GM_Hear_Radio( Critter& cr, int, int, int, string@ message, int[]@ )
{
	int[] channels;
	bool ch0 = false;
	bool ch1 = false;
	Item@[] items;
	if( cr.GetItems( -1, items ) > 0 )
	{
		for( uint i = 0, l = items.length; i < l; i++ )
		{
			if( FLAG( items[i].Flags, ITEM_RADIO ) && !FLAG( items[i].RadioFlags, RADIO_DISABLE_SEND ) )
			{
				if( items[i].RadioChannel == 0 )
				{
					ch0 = true;
				}
				else if( items[i].RadioChannel == 1 )
				{
					ch1 = true;
				}
				channels.insertLast( int( items[i].RadioChannel ) );
			}
		}
	}

	if( ch0 )
	{
		heard_radio_log_ch0( cr, message );
	}
	
    Critter@[] crs;
    GetAllPlayers( crs );

    string str = enlistINT( channels ) + " " + GetPlayerName( cr.Id ) + ": |0xFFFFFFFF ..." + message +  "...";

    for( uint i = 0, j = crs.length(); i < j; i++ )
	{
        if( !valid( crs[i] ) || !isGM( crs[i] ) || !sinfFLAG( crs[i], SINF_RADIO ) )
		{
            continue;
		}
		if( crs[i].Id == cr.Id )
		{
			continue;
		}
        crs[ i ].Say( SAY_NETMSG, str );
    }
}

void unsafe_GM_Hear_Whisper( Critter& cr, int, int, int, string@ message, int[]@ )
{
    Critter@[] crs;
    GetAllPlayers( crs );
	
	Map @map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        if( !valid( crs[i] ) || !isGM( crs[i] ) || !sinfFLAG( crs[i], SINF_WHISPER ) )
		{
            continue;
		}
		
		if( crs[i].Id == cr.Id )
		{
			continue;
		}
		
		Map@ map1 = crs[i].GetMap();
		if( !valid(map1) || map1.Id != map.Id )
		{
			continue;
		}
		
		if( GetDistantion( cr.HexX, cr.HexY, crs[i].HexX, crs[i].HexY ) <= __WisperDist )
		{
			continue;
		}
		crs[ i ].RunClientScript( "client_main@__HearWhisper", cr.HexX, cr.HexY, 0, GetPlayerName(cr.Id) + "@" + message, null );
    }
}

void unsafe_shout_all( Critter& cr, int, int, int, string@ message, int[]@ )
{
	uint dist = 250;

	if( !isGM( cr ) )
	{
		dist = 100;
		uint[] values = { cr.Id };
		cr.ParamBase[ CR_SPOKEN ] = CreateTimeEvent( AFTER( REAL_SECOND( 5 ) ), "rp_chat@e_StopSpoken", values, true );
		LookDataRefresh( cr );
	}

	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	Critter@[] crs;
	uint count = map.GetCrittersHex(cr.HexX, cr.HexY, dist, FIND_ALL, crs);

    Critter@[] seeing;
	uint count2 = map.GetCrittersSeeing( array<Critter@> = { cr }, true, FIND_ALL | FIND_ONLY_PLAYERS, seeing );

	Critter@ currCritter = null;
	Critter@ currSeeing = null;
	for( uint i = 0; i < count; i++ )
	{
		@ currCritter = crs[i];
		if(!valid(currCritter)) continue;

		bool isSkipping = false;
		for( uint j = 0; j < count2; j++ )
		{
			@ currSeeing = seeing[j];
			if(!valid(currSeeing))
			{
				continue;
			}
			
			if( currCritter.Id == currSeeing.Id )
			{
				isSkipping = true;
				break;
			}
		}
		
		if( isSkipping )
		{
			continue;
		}
		
		uint idist = GetDistantion( cr.HexX, cr.HexY, currCritter.HexX, currCritter.HexY );
		if( int( idist ) <= currCritter.Stat[ ST_PERCEPTION ] * 10 )
		{
			currCritter.Say( SAY_NETMSG, "???: |0x00FF0000 !!! " + strupr( message ) + " !!!" );
		}
	}

	crs.resize(0);
	seeing.resize(0);
}

void unsafe_SayLog( Critter& cr, int sayType, int, int, string@ message, int[]@ )
{
	if( SayLog( cr, sayType, message ) == "" )
	{
		testInfo( cr, "Failed to log text: #" + cr.Id + " " + sayType + " '" + message + "'" );
	}
}

void unsafe_stopTyping( Critter& cr, int, int, int, string@, int[]@ )
{
	StopTyping( cr );
}

void unsafe_ShowTyping( Critter& cr, int, int, int, string@, int[]@ )
{
	ShowTyping( cr );	
}

void ShowTyping( Critter& cr )
{
	if( isGM( cr ) && cr.ParamBase[ QST_INVIS ] != 0 )
	{
		return;
	}
	
	if( FLAG( cr.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) )
	{
		return;
	}

	Critter@ target = @cr;
	if( cr.StatBase[ ST_TALKING_PUPPET ] != 0 && cr.ParamBase[ CR_TALKING_TARGET_ID ] == cr.StatBase[ ST_TALKING_PUPPET ] )
	{
		@target = GetCritter( cr.StatBase[ ST_TALKING_PUPPET ] );
	}
	
	if( !valid(target) || target.StatBase[ ST_TALKING_PUPPET ] != int( cr.Id ) )
	{
		@target = @cr;
	}
	
	target.ParamBase[ CR_TYPING_TIME ] = __FullSecond + __TypingDelay * __TimeMultiplier;
}

void StopTyping( Critter& cr )
{
	if( isGM( cr ) && cr.ParamBase[ QST_INVIS ] != 0 )
	{
		return;
	}
	
	Critter@ target = @cr;
	if( cr.StatBase[ ST_TALKING_PUPPET ] != 0 && cr.ParamBase[ CR_TALKING_TARGET_ID ] == cr.StatBase[ ST_TALKING_PUPPET ] )
	{
		@target = GetCritter( cr.StatBase[ ST_TALKING_PUPPET ] );
	}
	
	if( !valid(target) || target.StatBase[ ST_TALKING_PUPPET ] != int( cr.Id ) )
	{
		@target = @cr;
	}
	
	target.ParamBase[ CR_TYPING_TIME ] = 0;
}

#endif // RP_CHAT