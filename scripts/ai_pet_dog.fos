#ifndef AI_PET_DOG
#define AI_PET_DOG

#include "_utils.fos"
#include "npc_planes_h.fos"
#include "heal_h.fos"
#include "speed_h.fos"
#include "drugs_h.fos"
#include "food_h.fos"

import void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import int NextLevelNeedExp( Critter& cr ) from "parameters";

#define FOOD_SEARCH_RANGE ( 16 )

void GM_PetDog( Critter& npc ) // Export
{
    npc.SetScript( "_PetDogInit" );
	npc.SayMsg( SAY_EMOTE, TEXTMSG_COMBAT, STR_DOG_BARK );
	if( npc.GetTimeEvents( CTE_THIRST, null, null, null ) < 1 )
	{
		npc.AddTimeEvent( "gameplay@cte_Thirst", REAL_SECOND( npc.Param[ CR_THIRST_SPEED ] ), CTE_THIRST, 0 );
	}
	
	if( npc.GetTimeEvents( CTE_HUNGER, null, null, null ) < 1 )
	{
		npc.AddTimeEvent( "gameplay@cte_Hunger", REAL_SECOND( npc.Param[ CR_HUNGER_SPEED ] ), CTE_HUNGER, 0 );
	}
}

void _PetDogInit( Critter& npc, bool firstTime )
{
	npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER,	"_CritterLookAt" );
	npc.ShowCritterDist1 = 3;
	npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER_1,		"_CritterEnterGuardRadius" );
	npc.SetEvent( CRITTER_EVENT_HIDE_CRITTER,		"_CritterOutOfSight" );
    npc.SetEvent( CRITTER_EVENT_IDLE,				"_Idle" );
	npc.SetEvent( CRITTER_EVENT_MESSAGE,     		"_OnMessage" );
    npc.SetEvent( CRITTER_EVENT_PLANE_BEGIN,		"_PlaneBegin" );
	npc.SetEvent( CRITTER_EVENT_PLANE_END,			"_PlaneEnd" );
    npc.SetEvent( CRITTER_EVENT_DEAD,				"_MyDeath" );
    npc.SetEvent( CRITTER_EVENT_ATTACKED,			"_Attacked" );
	npc.SetEvent( CRITTER_EVENT_SMTH_DEAD,			"_FindKiller" );
	npc.SetEvent( CRITTER_EVENT_SMTH_ATTACK,		"_AssistAttack" );
	npc.SetEvent( CRITTER_EVENT_SMTH_ATTACKED,		"_AssistAttacked" );
	npc.SetEvent( CRITTER_EVENT_SMTH_MOVE_ITEM,		"_WeaponSnow" );
	npc.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL,		"_TouchItem" );
	npc.SetEvent( CRITTER_EVENT_USE_SKILL_ON_ME,	"_ReactToSkill" );
	npc.SetEvent( CRITTER_EVENT_CHANGE_ITEM_ON_MAP, "_CheckDoor" );   
	npc.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, 		"_UseOnPet" );   
}

void _UseOnPet( Critter& npc, Critter& fromCrit, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	if( !valid( fromCrit ) )
	{
		return;
	}

	if( fromCrit.IsDead() )
	{
		return;
	}

	if( !valid( item ) )
	{
		return;
	}

	if( !valid( onCritter ) )
	{
		return;
	}

	if( onCritter.Id != npc.Id )
	{
		return;
	}

	if( valid( onItem ) )
	{
		return;
	}

	if( valid( onScenery ) )
	{
		return;
	}

	uint16 pid = item.GetProtoId();
	if( heal_items.find( pid ) != -1 )
	{
		UseHealingItem( fromCrit, npc, item );
	}
	else if( bandage_items.find( pid ) != -1 )
	{
		UseBandageItem( fromCrit, npc, item );
	}

	if( npc.Param[ PET_OWNER_ID ] == int( fromCrit.Id ) )
	{
		switch( pid )
		{
			case( PID_DOG_COLLAR ):
			case( PID_DOG_COLLAR2 ):
				EquipPetItem( npc, fromCrit, item, SLOT_HEAD );
				break;
			case( PID_DOG_ARMOR ):
			{
				if( npc.Stat[ ST_BASE_CRTYPE ] == CRTYPE_DOG )
				{
					npc.SetFavoriteItem( SLOT_ARMOR, pid );
					EquipPetItem( npc, fromCrit, item, SLOT_ARMOR );
				}
				else
				{
					fromCrit.Say( SAY_NETMSG, "|0xFFFF00 The animal is unable to equip K9 armor." );
				}
				
				break;
			}
			case( PID_BACKPACK ):
				EquipPetItem( npc, fromCrit, item, SLOT_BACK );
				break;
		}
	}
}

void EquipPetItem( Critter& npc, Critter& fromCrit, Item& item, uint8 slot )
{
	Item@ equipped = npc.GetItem( 0, slot );
	if( valid( equipped ) )
	{
		MoveItem( equipped, equipped.GetCount(), fromCrit );
	}

	MoveItem( item, item.GetCount(), npc );
	npc.MoveItem( item.Id, item.GetCount(), slot );
}

void _CritterLookAt( Critter& npc, Critter& target )
{
	if( npc.IsDead() )
	{
		return;
	}
	
	if( npc.CheckEnemyInStack( target.Id ) )
	{
		if( target.IsDead() )
		{ 
			npc.EraseEnemyFromStack( target.Id );
			return;
		}
		
		npc.ErasePlane( AI_PLANE_WALK, true );
		AddAttackPlane( npc, 0, target );
		return;
	}
	
	if( Random( 0, 100 ) == 100 )
	{
		uint16 hx = npc.HexX, hy = npc.HexY;
		uint16 tx = target.HexX, ty = target.HexY;
		uint dir = GetDirection( hx, hy, tx, ty );
		npc.SetDir( dir );
	}
}

void _CritterOutOfSight( Critter& npc, Critter& target )
{
	if( npc.IsDead() )
	{
		return;
	}
	
	if( npc.CheckEnemyInStack( target.Id ) )
	{
		npc.DropPlanes();
		if( npc.IsSee( target ) )
		{
			if( target.IsDead() )
			{ 
				npc.EraseEnemyFromStack( target.Id );
				return;
			}
			
			if( !npc.CheckEnemyInStack( target.Id ) )
			{
				npc.AddEnemyInStack( target.Id );
			}
			
			AddAttackPlane( npc, 0, target );
			
		}
		else
		{
			uint16 hx = npc.HexX, hy = npc.HexY;
			uint16 tx = target.HexX, ty = target.HexY;
			int dir = GetDirection( hx, hy, tx, ty );
			AddWalkPlane( npc, AI_PLANE_ATTACK_PRIORITY - 1, target.HexX, target.HexY, dir, true, 1 );
		}
	}
}

void _CritterEnterGuardRadius( Critter& npc, Critter& target )
{
	if( !valid( npc ) )
	{
		return;
	}
	
	if( npc.IsDead() || npc.IsKnockout() ) 
	{
		return;
	}
	
	if( !valid( target ) )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		return;
	}
	
	if( isGM( target ) ) 
	{ 
		return; 
	}
	
	if( npc.Param[ PET_GUARD_ID ] == 0 || npc.Param[ PET_GUARD_ID ] == int( target.Id ) )
	{
		return;
	}
	
	Map@ map = npc.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_GROWL );
	PlayGenericSound( map, npc.HexX, npc.HexY, "MADDOGGR.mp3", 10 );
}

void _Idle( Critter& npc )
{
	if( npc.IsPlayer() )
	{
		npc.SetEvent( CRITTER_EVENT_IDLE, null );
		return;
	}

	if( npc.IsDead() || npc.IsKnockout() )
	{
		return;
	}

	if( npc.IsBusy() || !npc.IsNoPlanes() )
	{
		return;
	}
	
	if( npc.Stat[ ST_FOLLOW_CRIT ] != 0 )
	{
		Critter@ follow = GetCritter( npc.Stat[ ST_FOLLOW_CRIT ] );
		if( valid( follow ) )
		{
			Map@ nMap = npc.GetMap();
			Map@ fMap = follow.GetMap();
	
			if( nMap.Id == fMap.Id )
			{
				if( npc.IsSee( follow ) )
				{
					npc.EraseTimeEvents( CTE_NPC_FOLLOW );
					npc.ModeBase[ MODE_NO_HOME ] = 1;
					npc.AddTimeEvent( "mobcontrol@follow", REAL_SECOND( 1 ), CTE_NPC_FOLLOW );
				}
			}
		}
	}
	
	if( npc.Param[ PET_HUNGER ] >= 24 && npc.Stat[ ST_LEVEL ] < 12 )
	{
		NpcRefresh( npc, 1 );
	}
	
	uint[] index;
	if( npc.Mode[ MODE_NO_HOME ] == 1 && npc.GetTimeEvents( CTE_NPC_FOLLOW, index, null, null ) == 0 )
	{
		if( npc.Stat[ ST_LEVEL ] < 12 && npc.Param[ PET_HUNGER ] >= 6 )
		{
			if( npc.Param[ PET_FOOD_CHARGE ] < 2 )
			{
				Item@[] foodstuff;
				npc.GetItemsByType( ITEM_TYPE_FOOD, foodstuff );
				
				Item@ meat;
				for( uint i = 0, len = foodstuff.length(); i < len ; i ++ )
				{
					@ meat = foodstuff[i];
					if( valid( meat ) )
					{
						if( meat.Proto.Item_Subtype >= ITEM_SUBTYPE_DRUG_FOOD_MEAT && meat.Proto.Item_Subtype <= ITEM_SUBTYPE_DRUG_FOOD_MEAT_SPOILED )
						{
							npc.Wait( 2000 );
							npc.Action( ACTION_DODGE, 1, meat );
							npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_CONSUMED, "$proto@msg item " + ( meat.GetProtoId() * 100 ) + "@" );
							ProccessFood( npc, npc, meat );
							useDrug( npc, meat, npc );
							npc.ParamBase[ PET_FOOD_CHARGE ] ++;
							Log( "Pet Ate meat " + npc.Param[ PET_FOOD_CHARGE ] );
							npc.AddTimeEvent( "ai_pet_dog@cte_shit", REAL_MINUTE( Random( 5, 15 ) ), CTE_SHIT, 0 );
							break;
						}
					}
				}
			}
			
			if( npc.Param[ PET_FOOD_CHARGE ] > 0 && npc.Param[ PET_HUNGER ] >= 12 )
			{
				npc.ParamBase[ PET_FOOD_CHARGE ] --;
				npc.ParamBase[ PET_HUNGER ] -= 12;
				if( npc.Param[ PET_HUNGER ] <= 0 )
				{
					npc.Param[ PET_HUNGER ] == 0;
				}
				
				npc.ParamBase[ PET_GROW_LEVEL ] ++;
				PetLevelUp( npc );
				Log( "Pet used fat PET_FOOD_CHARGE " + npc.Param[ PET_FOOD_CHARGE ] + " npc.Param[ PET_HUNGER ] " + npc.Param[ PET_HUNGER ] );
				if( npc.Param[ PET_LOYALTY ] < 100 )
				{
					npc.ParamBase[ PET_LOYALTY ] ++;
				}
			}
			else if( npc.Param[ PET_FOOD_CHARGE ] < 2 )
			{
				if( !FindFood( npc ) )
				{
					npc.MoveRandom();
				}
			}
		}
		else if( Random( 1, 2 ) == 2 )
		{
			npc.MoveRandom();
		}
	}
}

void _OnMessage( Critter& npc, Critter& fromCrit, int message, int value )
{
	if( !valid( npc ) )
	{
		return;
	}

	if( !valid( fromCrit ) )
	{
		return;
	}

	if( message == 0 )
	{
		return;
	}

    if( npc.IsPlayer() )
	{
		return;
	}
	
    if( npc.IsDead() )
	{
		return;
	}
	
    if( npc.Param[ PET_OWNER_ID ] == 0 )
	{
		return;
	}

    if( npc.Param[ PET_OWNER_ID ] != int( fromCrit.Id ) )
	{
		return;
	}

	Map@ map = npc.GetMap();
	if( !valid( map ) )
	{
		return;
	}

	if( int( GetDistantion( npc.HexX, npc.HexY, fromCrit.HexX, fromCrit.HexY ) ) > ( 50 - fromCrit.Stat[ ST_SPEECH_VOLUME ] ) )
	{
		return;
	}
	
	switch( message )
	{
		case( MSG_PET_SIT_MESSAGE ):
		{
			NpcRefresh( npc, 0 );
			
			npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_OBEY );
			npc.StatBase[ ST_FOLLOW_CRIT ] = 0;
			npc.SetHomePos( npc.HexX, npc.HexY, npc.Dir );
			
			if( !npc.IsKnockout() )
			{
				unsafe_sleep( npc, 1, 0, 0, null, null );
			}

			break;
		}
		case( MSG_PET_STAND_MESSAGE ):
		{
			NpcRefresh( npc, 1 );
			
			npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_OBEY );
			npc.StatBase[ ST_FOLLOW_CRIT ] = 0;
			
			if( npc.IsKnockout() )
			{
				unsafe_sleep( npc, 1, 0, 0, null, null );
			}
			
			break;
		}
		case( MSG_PET_STAY_MESSAGE ):
		{
			NpcRefresh( npc, 0 );
			npc.StatBase[ ST_FOLLOW_CRIT ] = 0;
			npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_OBEY );
			npc.SetHomePos( npc.HexX, npc.HexY, npc.Dir );
			
			if( npc.IsKnockout() )
			{
				unsafe_sleep( npc, 0, 0, 0, null, null );
			}
			
			break;
		}
		case( MSG_PET_FOLLOW_MESSAGE ):
		{
			NpcRefresh( npc, 1 );
			
			if( npc.IsKnockout() )
			{
				unsafe_sleep( npc, 1, 0, 0, null, null );
				npc.Wait( 1000 );
			}

			npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_FOLLOW );
			npc.ModeBase[ MODE_NO_HOME ] = 1;
			npc.StatBase[ ST_FOLLOW_CRIT ] = fromCrit.Id;
			npc.AddTimeEvent( "mobcontrol@follow", REAL_SECOND( 1 ), CTE_NPC_FOLLOW );
			break;
		}
		case( MSG_PET_ATTACK_MESSAGE ):
		{
			Critter@ target = GetCritter( value );
			if( valid( target ) )
			{
				NpcRefresh( npc, 1 );

				if( npc.IsKnockout() )
				{
					unsafe_sleep( npc, 1, 0, 0, null, null );
					npc.Wait( 1000 );
				}
				
				npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_GROWL );
				PlayGenericSound( map, npc.HexX, npc.HexY, "MADDOGGR.mp3", 10 );
				
				if( !npc.CheckEnemyInStack( target.Id ) )
				{
					npc.AddEnemyInStack( target.Id );
				}
				
				AttackOrFind( npc, target, false );
			}

			break;
		}
		case( MSG_PET_KILL_MESSAGE ):
		{
			Critter@ target = GetCritter( value );
			if( valid( target ) )
			{
				NpcRefresh( npc, 1 );
				
				npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_GROWL );
				PlayGenericSound( map, npc.HexX, npc.HexY, "MADDOGGR.mp3", 10 );
				
				if( npc.IsKnockout() )
				{
					unsafe_sleep( npc, 1, 0, 0, null, null );
					npc.Wait( 1000 );
				}

				if( !npc.CheckEnemyInStack( target.Id ) )
				{
					npc.AddEnemyInStack( target.Id );
				}
				
				AttackOrFind( npc, target, true );
			}
			
			break;
		}
		case( MSG_PET_PROTECT_MESSAGE ):
		{
			if( value > 0 )
			{
				npc.ParamBase[ PET_PROTECT_ID ] = value;
				npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_PROTECT );
				npc.ClearEnemyStack();
				npc.DropPlanes();

				if( npc.IsKnockout() )
				{
					unsafe_sleep( npc, 1, 0, 0, null, null );
					npc.Wait( 1000 );
				}
				
				npc.EraseTimeEvents( CTE_NPC_FOLLOW );
				npc.ModeBase[ MODE_NO_HOME ] = 1;
				npc.StatBase[ ST_FOLLOW_CRIT ] = npc.Param[ PET_PROTECT_ID ];
				npc.AddTimeEvent( "mobcontrol@follow", REAL_SECOND( 1 ), CTE_NPC_FOLLOW );
			}
			
			break;
		}
		case( MSG_PET_GUARD_MESSAGE ):
		{
			if( value > 0 )
			{
				NpcRefresh( npc, 1 );

				npc.StatBase[ ST_FOLLOW_CRIT ] = 0;
				npc.ParamBase[ PET_GUARD_ID ] = value;

				if( npc.IsKnockout() )
				{
					unsafe_sleep( npc, 1, 0, 0, null, null );
					npc.Wait( 1000 );
				}
				
				Critter@ guarded = GetCritter( npc.Param[ PET_GUARD_ID ] );
				if( valid( guarded ) )
				{
					AddWalkPlane( npc, 0, guarded.HexX, guarded.HexY, GetDirection( npc.HexX, npc.HexY, guarded.HexX, guarded.HexY ), true, 2 );
					npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_GUARD );
					uint[] values = { npc.Id, guarded.Id };
					CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_checkMovement", values, true );
					CreateTimeEvent( AFTER( REAL_SECOND( 5 ) ), "e_delayedHomePos", values, true );
					break;
				}
				
				Item@ guard_itm = map.GetItem( npc.Param[ PET_GUARD_ID ] );
				if( valid( guard_itm ) )
				{
					npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_DOG_GROWL );
					AddWalkPlane( npc, 0, guard_itm.HexX, guard_itm.HexY, GetDirection( npc.HexX, npc.HexY, guard_itm.HexX, guard_itm.HexY ), true, 2 );
					uint[] values = { npc.Id, guard_itm.Id };
					CreateTimeEvent( AFTER( REAL_SECOND( 5 ) ), "e_delayedHomePos", values, true );
					break;
				}
			}
			
			break;
		}
		default:
			break;
	}
}

int _PlaneBegin( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	if( npc.IsDead() )
	{
		return PLANE_DISCARD;
	}
	
    if( plane.Type == AI_PLANE_ATTACK )
	{
        Critter@ target = GetCritter( plane.Attack_TargId );
        if( !valid( target ) )
		{
			return PLANE_RUN_GLOBAL;
		}

        if( ( target.Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] ) && target.Stat[ ST_TEAM_ID ] != 0 )
		{
			return PLANE_DISCARD; 
		}
	}
	else if( reason == REASON_FROM_SCRIPT )
	{
		return PLANE_KEEP;
	}
	
    return PLANE_RUN_GLOBAL;
}

int _PlaneEnd( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem ) 
{
	if( npc.IsDead() )
	{
		return PLANE_DISCARD;
	}
	
	if( reason == REASON_GAG_CRITTER && someCr.IsNpc() )
	{
        if( someCr.ParamBase[ ST_TEAM_ID ] != npc.ParamBase[ ST_TEAM_ID ] )
		{
            return PLANE_RUN_GLOBAL;
		}
		
        if( TryLetPassage( someCr, npc ) ) 
		{
            npc.Wait( AI_DELAY );
            return PLANE_KEEP;
        }
    }
	
	return PLANE_RUN_GLOBAL;
}

void _MyDeath( Critter& npc, Critter@ killer ) 
{
	npc.DropPlanes();
    npc.ClearEnemyStack();
	npc.AddTimeEvent ( "rotting@cte_rotten", 0, CTE_ROTTEN, 0 );
}

bool _Attacked( Critter& npc, Critter& target )
{
	if( !valid( npc ) )
	{
		return false;
	}
	
	if( npc.IsDead() )
	{
		return false;
	}
	
	if( !valid( target ) )
	{
		return false;
	}
	
	if( target.IsDead() )
	{
		return false;
	}
	
	npc.EraseTimeEvents( CTE_NPC_FOLLOW );
	npc.ModeBase[ MODE_NO_HOME ] = 1;
	
	if( int( target.Id ) == npc.Param[ PET_OWNER_ID ] || int( target.Id ) == npc.Param[ PET_PROTECT_ID ] ) 
	{
        npc.EraseEnemyFromStack( target.Id );
        EraseAttackPlane( npc, target );
	}
	else
	{
		AttackOrFind( npc, target, true );
	}
	
    return true;
}

void _FindKiller( Critter& npc, Critter& fromCrit, Critter@ killer )
{
	if( !valid( killer ) )
	{
		return;
	}

	if( killer.IsDead() )
	{
		npc.EraseEnemyFromStack( killer.Id );
		EraseAttackPlane( npc, killer );
		return;
	}
	
	if( int( killer.Id ) == npc.Param[ PET_OWNER_ID ] || int( killer.Id ) == npc.Param[ PET_PROTECT_ID ] || killer.Id == npc.Id )
	{
		npc.EraseEnemyFromStack( killer.Id );
		EraseAttackPlane( npc, killer );
		return;
	}
	
    if( npc.IsPlayer() )
	{
		return;
	}
	
    if( npc.IsDead() )
	{
		return;
	}
	
	if( killer.Id == npc.Id )
	{
		return;
	}
	
	if( npc.Param[ PET_PROTECT_ID ] == int( fromCrit.Id ) || npc.Param[ PET_OWNER_ID ] == int( fromCrit.Id ) )
	{
		if( !npc.CheckEnemyInStack( killer.Id ) )
		{
			npc.AddEnemyInStack( killer.Id );
		}
		
		AttackOrFind( npc, killer, true );
	}
}

void _AssistAttack( Critter& npc, Critter& fromCr, Critter& target )
{
	if( !valid( target ) )
	{
		return;
	}
	
	if( npc.IsDead() )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		return;
	}

	if( npc.Param[ PET_OWNER_ID ] == int( target.Id ) )
	{
		NpcRefresh( npc, 1 );
		npc.AddEnemyInStack( fromCr.Id );
		AttackOrFind( npc, fromCr, false );
		return;
	}

	if( npc.Param[ PET_PROTECT_ID ] == int( fromCr.Id ) || npc.Param[ PET_OWNER_ID ] == int( fromCr.Id ) )
	{
		npc.ModeBase[ MODE_NO_HOME ] = 1;
		npc.EraseTimeEvents( CTE_NPC_FOLLOW );

		npc.AddEnemyInStack( target.Id );
		AttackOrFind( npc, target, false );
	}
}

void _AssistAttacked( Critter& npc, Critter& fromCr, Critter& attacker )
{
	if( npc.IsDead() || npc.IsKnockout() )
	{
		return;
	}
	
	if( attacker.IsDead() )
	{
		return;
	}
	
	if( int( attacker.Id ) == npc.Param[ PET_OWNER_ID ] || npc.Param[ PET_PROTECT_ID ] == int( attacker.Id ) )
	{
		npc.EraseEnemyFromStack( attacker.Id );
		EraseAttackPlane( npc, attacker );
		return;
	}
	
	if( npc.Param[ PET_PROTECT_ID ] == int( fromCr.Id ) || npc.Param[ PET_OWNER_ID ] == int( fromCr.Id ) )
	{
		npc.ModeBase[ MODE_NO_HOME ] = 1;
		npc.EraseTimeEvents( CTE_NPC_FOLLOW );
		
		npc.AddEnemyInStack( attacker.Id );
		AttackOrFind( npc, attacker, false );
	}
}

void _WeaponSnow( Critter& npc, Critter& guarded, Item& item, uint8 fromSlot )
{
	if( npc.Param[ PET_GUARD_ID ] > 0 && npc.Param[ PET_GUARD_ID ] == int( guarded.Id ) )
	{
		if( ( item.GetType() == ITEM_TYPE_WEAPON || item.GetType() == ITEM_TYPE_AMMO ) && fromSlot != SLOT_HAND1 )
		{
			npc.AddEnemyInStack( guarded.Id );
			AttackOrFind( npc, guarded, true );
		}
	}
}

void _TouchItem( Critter& npc, Critter& fromCrit, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	
	if( valid( onItem ) && npc.Param[ PET_GUARD_ID ] > 0 && npc.Param[ PET_GUARD_ID ] == int( onItem.Id ) )
	{
		npc.AddEnemyInStack( fromCrit.Id );
		AttackOrFind( npc, fromCrit, true );
	}
}	

bool _ReactToSkill( Critter& npc, Critter& whoUse, int skill )
{
	if( isGM( whoUse ) )
	{
		return false;
	}
	
	if( sameFaction( npc, whoUse ) )
	{
		return false;
	}
	
	if( npc.Param[ PET_PROTECT_ID ] == int( whoUse.Id ) || npc.Param[ PET_OWNER_ID ] == int( whoUse.Id ) )
	{
		return false;
	}
	
	
	if( skill == SKILL_PUSH_CRITTER || skill == SK_STEAL )
	{
		npc.AddEnemyInStack( whoUse.Id );
		AddAttackPlane( npc, 0, whoUse );
	}
	
	return true;
}


void _CheckDoor( Critter& npc, Item& door )
{
	if( valid( door ) && npc.Param[ PET_GUARD_ID ] > 0 && npc.Param[ PET_GUARD_ID ] == int( door.Id ) )
	{
		Map@ map = npc.GetMap();
		if( valid( map ) )
		{
			Critter@[] critters;
			map.GetCrittersHex(	door.HexX, door.HexY, 3, FIND_LIFE, critters );
			
			for( uint i = 0, len = critters.length(); i < len; i ++ )
			{
				Critter@ cr = critters[i];
				if( valid( cr ) )
				{
					if( cr.Stat[ ST_LAST_DOOR_ID ] == int( door.Id ) )
					{
						npc.AddEnemyInStack( cr.Id );
						AttackOrFind( npc, cr, true );
						break;
					}
				}
			}
		}		
	}
}

// Support functions
bool FindFood( Critter& npc )
{
	Map@ map = npc.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	uint16 tx = npc.HexX, ty = npc.HexY;
	Item@[] foodstuff;
	for( uint i = 1; i < FOOD_SEARCH_RANGE; i++ )
	{
		for( uint j = 0; j < 6; j++ )
		{
			map.MoveHexByDir( tx, ty, j, i );
			map.GetItems( tx, ty, foodstuff );
		}
	}
	
	Item@ food;
	Item@ meat;
	Item@ bowl;
	Item@[] contents;
	for( uint i = 0, len = foodstuff.length(); i < len ; i ++ )
	{
		@ food = foodstuff[i];
		if( valid( food ) )
		{
			if( food.Proto.Item_Subtype >= ITEM_SUBTYPE_DRUG_FOOD_MEAT && food.Proto.Item_Subtype <= ITEM_SUBTYPE_DRUG_FOOD_MEAT_SPOILED )
			{
				@ meat = food;
				break;
			}
		}
	}

	if( valid( meat ) )
	{
		AddPickPlane( npc, 0, meat.HexX, meat.HexY, meat.GetProtoId(), 0, true );
		return true;
	}

	// if no meat found, search for bowl
	for( uint k = 0, len = foodstuff.length(); k < len ; k ++ )
	{
		@ bowl = foodstuff[k];
		if( valid( bowl ) )
		{
			uint16 pid = bowl.GetProtoId();
			if( pid == PID_DOG_BOWL )
			{
				bowl.GetItems( 0, contents );
				for( uint l = 0, length = contents.length(); l < length; l ++ )
				{
					@ food = contents[l];
					if( valid( food ) )
					{
						if( food.Proto.Item_Subtype >= ITEM_SUBTYPE_DRUG_FOOD_MEAT && food.Proto.Item_Subtype <= ITEM_SUBTYPE_DRUG_FOOD_MEAT_SPOILED )
						{
							@ meat = food;
							break;
						}
					}
				}
			}
		}
	}
	
	if( valid( meat ) )
	{
		if( GetDistantion( npc.HexX, npc.HexY, bowl.HexX, bowl.HexY ) > 1 )
		{
			AddWalkPlane( npc, AI_PLANE_ATTACK_PRIORITY - 1, bowl.HexX, bowl.HexY, 1, true, 1 );
		}
		else
		{
			MoveItem( meat, 1, npc );
			return true;
		}
	}
	
	return false;
}

void AttackOrFind( Critter& npc, Critter& target, bool kill )
{
	if( !valid( npc ) )
	{
		return;
	}
	
	if( npc.IsDead() )
	{
		return;
	}
	
	if( !valid( target ) )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		npc.EraseEnemyFromStack( target.Id );
		EraseAttackPlane( npc, target );
		return;
	}
	
	if( npc.Id == target.Id )
	{
		return;
	}
	
	if( int( target.Id ) == npc.Param[ PET_OWNER_ID ] || int( target.Id ) == npc.Param[ PET_PROTECT_ID ] )
	{
		npc.EraseEnemyFromStack( target.Id );
		EraseAttackPlane( npc, target );
		return;
	}
	
	if( npc.IsSee( target ) )
	{
		if( kill )
		{
			AddAttackPlane( npc, 0, target );
		}
		else
		{
			uint[] values = { npc.Id, target.Id, 10 };
			CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "ai_pet_dog@e_stopAttack", values, true );
			AddAttackPlane( npc, 0, target, -10 );
		}
	}
	else
	{
		AddWalkPlane( npc, AI_PLANE_ATTACK_PRIORITY - 1, target.HexX, target.HexY, Random( 0, 5 ), true, 1 );
	}
}

uint e_stopAttack( uint[]@ values )
{
	Critter@ npc = GetCritter( values[0] );
	if( !valid( npc ) )
	{
		return 0;
	}
	
	Critter@ target = GetCritter( values[1] );
	if( !valid( target ) )
	{
		return 0;
	}
	
	if( npc.IsDead() || target.IsDead() )
	{
		return 0;
	}
	
	if( npc.IsDead() || target.IsDead() )
	{
		return 0;
	}
	
	Map@ sMap = npc.GetMap();
	Map@ tMap = target.GetMap();
	
	if( sMap.Id != tMap.Id )
    {
		EraseAttackPlane( npc, target );
		return 0;
	}
	
	int minHp = -values[2];
	if( target.Stat[ ST_CURRENT_HP ] <= minHp )
	{
		npc.EraseEnemyFromStack( target.Id );
		EraseAttackPlane( npc, target );
		return 0;
	}
	
	return REAL_SECOND(1);
}

void NpcRefresh( Critter& npc, int no_home )
{
	npc.ClearEnemyStack();
	npc.DropPlanes();
	npc.EraseTimeEvents( CTE_NPC_FOLLOW );
	npc.ModeBase[ MODE_NO_HOME ] = no_home;
	npc.ParamBase[ PET_PROTECT_ID ] = 0;
	npc.ParamBase[ PET_GUARD_ID ] = 0;
}

uint e_checkMovement( uint[]@ values )
{
	Critter@ npc = GetCritter( values[0] );
	Critter@ guarded = GetCritter( values[1] );
	
	if( !valid( npc ) )
	{
		return 0;
	}
	
	if( npc.IsDead() ) 
	{
		return 0;
	}
	
	if( !valid( guarded ) ) 
	{ 
		return REAL_MS( 500 );
	}
	
	if( guarded.IsDead() )
	{
		return 0;
	}
	
	if( MovementState( guarded ) != MOVE_STATE_STILL )
	{
		npc.AddEnemyInStack( guarded.Id );
		AttackOrFind( npc, guarded, true );
		return 0;
	}
	
	return REAL_MS( 500 );
}

uint e_delayedHomePos( uint[]@ values )
{
	Critter@ npc = GetCritter( values[0] );
	
	if( !valid( npc ) )
	{
		return 0;
	}
	
	npc.ModeBase[ MODE_NO_HOME ] = 0;
	npc.SetHomePos( npc.HexX, npc.HexY, npc.Dir );
	
	return 0;
}

uint cte_shit( Critter& npc, int identifier, uint& rate )
{
	if( npc.IsDead() )
	{
		return 0; 
	}
	
	Map@ map = npc.GetMap();
	if( !valid( map ) )
	{
		return 0;	
	}
	
	npc.Wait( 2000 );
	uint16 hx = npc.HexX, hy = npc.HexY;
	map.MoveHexByDir( hx, hy, _RevDir( npc.Dir ), 1 );
	map.AddItem( hx, hy, PID_SHIT_SMALL, 1 );
	return 0; 
}

void PetLevelUp( Critter& npc )
{
	switch( npc.Param[ PET_GROW_LEVEL ] )
	{
		case( 1 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 2 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			ChangeStat( npc, ST_NORMAL_RESIST, 1 );
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 2 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 2 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			ChangeStat( npc, ST_NORMAL_RESIST, 1 );
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 3 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 2 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			ChangeStat( npc, ST_NORMAL_RESIST, 1 );
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 4 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 2 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			ChangeStat( npc, ST_NORMAL_RESIST, 1 );
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 5 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 2 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			ChangeStat( npc, ST_NORMAL_RESIST, 1 );
			ChangeStat( npc );
			break;
		}
		case( 6 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 5 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 7 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 5 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 8 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 5 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 9 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 5 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 10 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 5 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			npc.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DOG;
			npc.ChangeCrType( CRTYPE_DOG );
			ChangeCritterSpeed( npc );
			break;
		}
		case( 11 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 8 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 12 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 8 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 13 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 8 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 14 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 8 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 15 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 8 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_EXPLODE_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 16 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 10 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_PLASMA_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 17 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 10 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_PLASMA_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		case( 18 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 15 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_PLASMA_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 19 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 17 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_PLASMA_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			break;
		}
		case( 20 ):
		{
			ChangeStat( npc, ST_MAX_LIFE, 19 );
			ChangeStat( npc, ST_MELEE_DAMAGE, 1 );
			for( uint i = ST_NORMAL_RESIST; i < ST_PLASMA_RESIST; i++ )
			{
				ChangeStat( npc, i, 1 );
			}
			
			ChangeStat( npc );
			npc.StatBase[ ST_EXPERIENCE ] = NextLevelNeedExp( npc );
			break;
		}
		default:
			break;
	}
	
	uint[] values = { npc.Id, SK_UNARMED };
	CreateTimeEvent( AFTER( REAL_SECOND( 10 ) ), "e_DistributeSkllPoints", values, true );
}

uint e_DistributeSkllPoints( uint[]@ values )
{
	Critter@ npc = GetCritter( values[0] );
	uint skillIndex = values[1];
	
	if( !valid( npc ) )
	{
		return 0;
	}
	
	DistributeSkllPoints( npc, skillIndex );
	
	return 0;
}

#endif //AI_PET_DOG
