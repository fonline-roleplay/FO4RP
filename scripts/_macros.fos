#ifndef __MACROS__
#define __MACROS__

#include "_defines.fos"
#include "_math.fos"
#include "_vars.fos"
#include "_maps.fos"
#include "_dialogs.fos" 
#include "_itempid.fos"
#include "_animation.fos"
#include "_time.fos"
#include "_colors.fos"

// ************** Other ***************************//

#define _IsOffline                   # (cr)    				( cr.GetSocket() == -1 )
#define _IsOnline                    # (cr)    				( !_IsOffline(cr) )

//Bits
#define ISBIT						 # ( x, bit )           ( x & ( 1 << bit ) ) != 0

//Array operations
#define _GetOneRandom				 # ( array )			( array[ Random( 0, array.length() -1 ) ] )
#define _Contains				 	 # ( array, element )	( array.find( element ) != -1 )

// Directions
#define _RevDir						 # ( CurDir )			( CurDir + 3 > 5 ? CurDir - 3 : CurDir + 3 )	
#define REVERSE_DIRECTION			 # ( revDir, CurDir )	revDir = CurDir + 3; if( revDir > 5 ) revDir = revDir - 6;
#define GET_NEAR_DIRECTION			 # ( Dir, NearPl, NearMin )	NearPl = Dir + 1; NearMin = Dir - 1; if( NearPl > 5 ) NearPl = 0; if( NearMin < 0 ) NearMin = 5;
							
#define H2T                  		 # ( z )             	( ( z ) >> 1 )
#define THX                          # ( x )             	( ( x ) >> 1 )
#define THY                          # ( y )             	( ( y ) >> 1 )

#define DEF                          # ( X, DEF )			( X == 0 ? DEF : X )

// Pointer validation macro
// Example: if(valid(ptr))... if(not valid(ptr))...
#define valid                        # ( ptr )				( @ptr != null )
#define invalid                      # ( ptr )				( @ptr == null )

// After wipe
#define IS_FIRST_TIME                						( GetGvar( GVAR_is_first_time ) == 1 )

// Flags
#define FLAG                         # ( x, flag )			( ( ( x ) & ( flag ) ) != 0 )
#define SETFLAG                      # ( x, flag )			( x = ( x ) | ( flag ) )
#define UNSETFLAG                    # ( x, flag )			( x = ( ( x ) & ( ~( flag ) ) ) )
#define COVER_DIR_0_ALL 									( 0x0000000F )
#define COVER_DIR_1_ALL 									( 0x000000F0 )
#define COVER_DIR_2_ALL 									( 0x00000F00 )
#define COVER_DIR_3_ALL 									( 0x0000F000 )
#define COVER_DIR_4_ALL 									( 0x000F0000 )
#define COVER_DIR_5_ALL 									( 0x00F00000 )

// Cover Flags
#define SET_COVER_TYPE				 # ( type, dir, flag )	( flag = ( flag & ~( 31 << ( dir * 5 ) ) ) | ( ( type & 31 ) << ( dir * 5 ) ) )
#define GET_COVER_TYPE 				 # ( dir, flag )		( ( flag >> ( dir * 5 ) ) & 31 )

// Move
#define _NpcWalk                     # ( npc, hexX, hexY )	npc.MoveToHex( hexX, hexY, 0xFF, false, 0 )
#define _NpcRun                      # ( npc, hexX, hexY )	npc.MoveToHex( hexX, hexY, 0xFF, true, 0 )

// Items
#define _CritCountItem               # ( cr, pid )			cr.CountItem( pid )
#define _CritAddItem                 # ( cr, pid, count )	cr.AddItem( pid, count )
#define _CritDeleteItem              # ( cr, pid, count )	cr.DeleteItem( pid, count )
#define _CritGetItem                 # ( cr, pid )			cr.GetItem( pid, -1 )
#define _CritGetItemHand             # (cr)             	cr.GetItem( 0, SLOT_HAND1 )
#define _CritGetItemHandExt			 # (cr)             	cr.GetItem( 0, SLOT_HAND2 )
#define _CritGetItemArmor            # (cr)            		cr.GetItem( 0, SLOT_ARMOR )
#define _CritGetItemMisc             # (cr)            		cr.GetItem( 0, SLOT_MISC )
#define _CritGetItemHead             # (cr)             	cr.GetItem( 0, SLOT_HEAD )
#define _CritGetItemBack             # (cr)             	cr.GetItem( 0, SLOT_BACK )
#define _CritGetItemInv              # ( cr, pid )			cr.GetItem( pid, SLOT_INV )
#define _CritMoveItem                # ( cr, item, toSlot )	cr.MoveItem( item.Id, item.GetCount(), toSlot )
#define _CritDropItem                # ( cr, item )			cr.MoveItem( item.Id, item.GetCount(), 0xFF )
#define _CritDropItemCount           # ( cr, item, count )	cr.MoveItem( item.Id, count, 0xFF )
#define _CritChangeHand 			 # ( cr )             	do { Item@ item = cr.GetItem( 0, SLOT_HAND1 ); if( valid( item ) )										\
															_CritMoveItem( cr, item, SLOT_HAND2 ); else { @item = cr.GetItem( 0, SLOT_HAND2 ); if( valid( item ) )	\
															_CritMoveItem( cr, item, SLOT_HAND1 ); } } while( false )
#define _IncItem                     # ( item, count )		item.SetCount( item.GetCount() + ( count ) )
#define _SubItem					 # ( item, count )     	do { if( item.GetCount() > ( count ) ) item.SetCount( item.GetCount() - ( count ) ); else DeleteItem( item ); } while( false )
#define _CritCanDropItemsOnDead      # ( cr )             	( cr.Mode[ MODE_NO_STEAL ] == 0 && cr.Mode[ MODE_NO_DROP ] == 0 )
#define _ItemIsBroken                # ( item )           	( item.IsDeteriorable() && FLAG( item.BrokenFlags, BI_BROKEN ) )

// Proto Discriptions
#define _GetProtoName			 	 # ( proto )			( GetMsgStr( 0, TEXTMSG_ITEM, proto * 100 ) )
#define _GetProtoDisc			 	 # ( proto )			( GetMsgStr( 0, TEXTMSG_ITEM, proto * 100 + 1 ) )
#define _GetProtoShortDisc			 # ( proto )			( GetMsgStr( 0, TEXTMSG_ITEM, proto * 100 + 2 ) )

// Parameters
#define _CritIsInjured               # ( cr ) 				( cr.Damage[ DAMAGE_EYE ] != 0 || cr.Damage[ DAMAGE_RIGHT_ARM ] != 0 || cr.Damage[ DAMAGE_LEFT_ARM ] != 0 || cr.Damage[ DAMAGE_RIGHT_LEG ] != 0 || cr.Damage[ DAMAGE_LEFT_LEG ] != 0 )
#define _CritFingersDoorId           # ( critterId ) 		( 0x80000000 | ( critterId ) )
#define _CritEyesDoorId              # ( critterId ) 		( 0x40000000 | ( critterId ) )
#define _CritIsTagSkill              # ( cr, skillNum )		( cr.TagSkill[ TAG_SKILL1 ] == int(skillNum) || cr.TagSkill[ TAG_SKILL2 ] == int(skillNum) || cr.TagSkill[ TAG_SKILL3 ] == int(skillNum) || cr.TagSkill[ TAG_SKILL4 ] == int(skillNum) )
#define _GetSkillDisc			 	 # ( skillNum ) 		( GetMsgStr( 0, TEXTMSG_GAME, skillNum * 10 + 100001 ) )

// Npc planes
#define _NpcEraseFirstPlane          # ( npc ) 				npc.ErasePlane( -1, false )
#define _NpcEraseAllPlanes           # ( npc ) 				npc.ErasePlane( -1, true )
#define _NpcEraseFirstPlaneWalk      # ( npc ) 				npc.ErasePlane( AI_PLANE_WALK, false )
#define _NpcEraseAllPlanesWalk       # ( npc )				npc.ErasePlane( AI_PLANE_WALK, true )
#define _NpcEraseFirstPlaneAttack    # ( npc ) 				npc.ErasePlane( AI_PLANE_ATTACK, false )
#define _NpcEraseAllPlanesAttack     # ( npc )				npc.ErasePlane( AI_PLANE_ATTACK, true )
#define _NpcEraseFirstPlanePick      # ( npc )				npc.ErasePlane( AI_PLANE_PICK, false )
#define _NpcEraseAllPlanesPick       # ( npc ) 				npc.ErasePlane( AI_PLANE_PICK, true )

// Weapon
#define _WeaponIsHtHAttack           # ( proto, use )		( _WeaponSkill( proto, use ) == SK_UNARMED || _WeaponSkill( proto, use ) == SK_MELEE_WEAPONS )
#define _WeaponIsGunAttack           # ( proto, use )		( _WeaponSkill( proto, use ) == SK_SMALL_GUNS || _WeaponSkill( proto, use ) == SK_MEDIUM_GUNS || _WeaponSkill( proto, use ) == SK_BIG_GUNS )
#define _WeaponIsRangedAttack        # ( proto, use )		( _WeaponIsGunAttack( weap, use ) || _WeaponSkill( proto, use ) == SK_THROWING )
#define _WeaponIsPrimaryAviable      # ( proto ) 			( ( proto.Weapon_ActiveUses & 1 ) != 0 )
#define _WeaponIsSecondaryAviable    # ( proto ) 			( ( proto.Weapon_ActiveUses & 2 ) != 0 )
#define _WeaponIsThirdAviable        # ( proto ) 			( ( proto.Weapon_ActiveUses & 4 ) != 0 )
#define _WeaponSkill                 # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Skill_0   : ( ( use ) == 1 ? proto.Weapon_Skill_1   : ( ( use ) == 2 ? proto.Weapon_Skill_2   : 0 ) ) )
#define _WeaponDmgType               # ( proto, use )		( ( use ) == 0 ? proto.Weapon_DmgType_0 : ( ( use ) == 1 ? proto.Weapon_DmgType_1 : ( ( use ) == 2 ? proto.Weapon_DmgType_2 : 0 ) ) )
#define _WeaponAnim2                 # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Anim2_0   : ( ( use ) == 1 ? proto.Weapon_Anim2_1   : ( ( use ) == 2 ? proto.Weapon_Anim2_2   : 0 ) ) )
#define _WeaponDmgMin                # ( proto, use )		( ( use ) == 0 ? proto.Weapon_DmgMin_0  : ( ( use ) == 1 ? proto.Weapon_DmgMin_1  : ( ( use ) == 2 ? proto.Weapon_DmgMin_2  : 0 ) ) )
#define _WeaponDmgMax                # ( proto, use )		( ( use ) == 0 ? proto.Weapon_DmgMax_0  : ( ( use ) == 1 ? proto.Weapon_DmgMax_1  : ( ( use ) == 2 ? proto.Weapon_DmgMax_2  : 0 ) ) )
#define _WeaponMaxDist               # ( proto, use )		( ( use ) == 0 ? proto.Weapon_MaxDist_0 : ( ( use ) == 1 ? proto.Weapon_MaxDist_1 : ( ( use ) == 2 ? proto.Weapon_MaxDist_2 : 0 ) ) )
#define _WeaponEffect                # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Effect_0  : ( ( use ) == 1 ? proto.Weapon_Effect_1  : ( ( use ) == 2 ? proto.Weapon_Effect_2  : 0 ) ) )
#define _WeaponRound                 # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Round_0   : ( ( use ) == 1 ? proto.Weapon_Round_1   : ( ( use ) == 2 ? proto.Weapon_Round_2   : 0 ) ) )
#define _WeaponApCost                # ( proto, use )		( ( use   == 0 ? proto.Weapon_ApCost_0 == 0 ? DEFAULT_AP_USE : proto.Weapon_ApCost_0 : use == 1 ? proto.Weapon_ApCost_1 == 0 ? DEFAULT_AP_USE : proto.Weapon_ApCost_1 : use == 2 ? proto.Weapon_ApCost_2 == 0 ? DEFAULT_AP_USE : proto.Weapon_ApCost_2 : use == 3 ? proto.Weapon_ReloadAp == 0 ? DEFAULT_AP_RELOAD : proto.Weapon_ReloadAp : DEFAULT_AP_USE ) )
#define _WeaponSoundId               # ( proto, use )		( ( use ) == 0 ? proto.Weapon_SoundId_0 : ( ( use ) == 1 ? proto.Weapon_SoundId_1 : ( ( use ) == 2 ? proto.Weapon_SoundId_2 : 0 ) ) )
#define _WeaponRemove                # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Remove_0  : ( ( use ) == 1 ? proto.Weapon_Remove_1  : ( ( use ) == 2 ? proto.Weapon_Remove_2  : false ) ) )
#define _WeaponAim                   # ( proto, use )		( ( use ) == 0 ? proto.Weapon_Aim_0     : ( ( use ) == 1 ? proto.Weapon_Aim_1     : ( ( use ) == 2 ? proto.Weapon_Aim_2     : false ) ) )
#define _WeaponModeUse               # ( weaponMode )		( ( weaponMode ) & 0xF )
#define _WeaponModeAim               # ( weaponMode )		( ( ( weaponMode ) >> 4 ) & 0xF )
#define _GetWeaponBlastRadius		 # ( proto )			( proto.Blast_Radius )
#define _GetWeaponMinDmgMod			 # ( proto )			( proto.Weapon_MinDmgMod )
#define _GetWeaponMaxDmgMod			 # ( proto )			( proto.Weapon_MaxDmgMod )

// Ammo
#define _GetAmmoDmgType				 # ( proto )			( GetProtoItem( proto ).Ammo_DmgType )
#define _GetAmmoBlastRadius			 # ( proto )			( proto.Blast_Radius )
#define _GetAmmoShortDisc			 # ( proto )			( GetMsgStr( TEXTMSG_ITEM, proto * 100 + 2 ) )
#define _GetAmmoAcMod				 # ( proto )			( proto.Ammo_AcMod )
#define _GetAmmoDmgMin				 # ( proto )			( proto.Ammo_DmgMin )
#define _GetAmmoDmgMax				 # ( proto )			( proto.Ammo_DmgMax )

// Locker
#define _LockerIsOpen                # ( door )				( ( door.LockerCondition & LOCKER_ISOPEN ) != 0 )
#define _LockerIsClose               # ( door )				( not _LockerIsOpen( door ) )
#define _LockerIsFlagSet             # ( locker, flag )		( ( locker.LockerCondition & flag ) != 0 )
#define _LockerFlagSet               # ( locker, flag )		( locker.LockerCondition |= flag )

// Car
#define _CarIsBioEngine              # ( car ) 				( ( car.Val0 & CAR_BIO_ENGINE ) != 0 )
#define _CarSetBioEngine             # ( car ) 				car.Val0 |= CAR_BIO_ENGINE
#define _CarIsNoLockpick             # ( car ) 				( ( car.Val0 & CAR_NO_LOCKPICK ) != 0 )
#define _CarSetNoLockpick            # ( car )				car.Val0 |= CAR_NO_LOCKPICK

// Misc
#define _GetItemWeight				 # ( item ) 			( (item.GetType() == ITEM_TYPE_WEAPON ) ? ( _GetWeaponWeight (item) ) : item.Proto.Weight )
#define _GetWeaponWeight 			 # ( weapon )			( weapon.AmmoPid != 0 ? ( weapon.Proto.Weight + ( GetProtoItem(weapon.AmmoPid).Weight * weapon.AmmoCount ) ) : weapon.Proto.Weight )
#define _GetItemMaterial			 # ( item ) 			( item.Proto.Material )

// Light
#define _LightIsIgnoreDir            # ( lightItem, dir )	( FLAG( lightItem.LightFlags, 1 << CLAMP( dir, 0, 5 ) ) )
#define _LightSetIgnoreDir           # ( lightItem, dir )	( SETFLAG( lightItem.LightFlags, 1 << CLAMP( dir, 0, 5 ) ) )
#define _LightUnsetIgnoreDir         # ( lightItem ) 		( UNSETFLAG( lightItem.LightFlags, 1 << CLAMP( dir, 0, 5 ) ) )
#define _LightIsGlobal               # ( lightItem ) 		( FLAG( lightItem.LightFlags, 1 << 6 ) )
#define _LightSetGlobal              # ( lightItem ) 		( SETFLAG( lightItem.LightFlags, 1 << 6 ) )
#define _LightUnsetGlobal            # ( lightItem ) 		( UNSETFLAG( lightItem.LightFlags, 1 << 6 ) )
#define _LightIsInverse              # ( lightItem ) 		( FLAG( lightItem.LightFlags, 1 << 7 ) )
#define _LightSetInverse             # ( lightItem ) 		( SETFLAG( lightItem.LightFlags, 1 << 7 ) )
#define _LightUnsetInverse           # ( lightItem ) 		( UNSETFLAG( lightItem.LightFlags, 1 << 7 ) )

// 2 x uint16 into uint32
#define MIX_UINT16					 # ( x, y ) 			( uint( ( ( x & 0xFFFF ) << 16 ) | ( y & 0xFFFF ) ) )

// wait time
#define _GetProtoTime				 # ( prot, use )   		( use == 0 ? prot.Wait_Time_0 == 0 ? DEFAULT_WAIT_TIME : prot.Wait_Time_0 : use == 1 ? prot.Wait_Time_1 == 0 ? DEFAULT_WAIT_TIME : prot.Wait_Time_1 : use == 2 ? prot.Wait_Time_2 == 0 ? DEFAULT_WAIT_TIME : prot.Wait_Time_2 : use == 3 ? prot.Wait_Time_3 == 0 ? DEFAULT_WAIT_TIME : prot.Wait_Time_3 : DEFAULT_WAIT_TIME )
#define _GetProtoWaitTime			 # ( prot, use )		( _GetProtoTime( prot, use ) )
#define _GetProtoWindupTime			 # ( prot )				( prot.Windup_Time )
#define _GetSkillWaitTime			 # ( sk )				( DEFAULT_WAIT_TIME )
#define _GetActionWaitTime			 # ( action )			( DEFAULT_WAIT_TIME )

#define BETWEEN						 # ( a, min, max )		( a >= min && a <= max )

// logging
#define _CrLogMsg                    # ( cr, text )			( cr.Say( SAY_NETMSG, text ) )

#define bState						 # ( value )			( value ? "+" : "-" )

#endif // __MACROS__
